,class,meaning
0,SetROP2,"Microsoft Build · May 19 – 22, 2025This section provides an example of the EMF EMR_SETROP2 record ([MS-EMF] section 2.3.11.23).  00000140:    14 00 00 00SetROP2 function (wingdi.h) The SetROP2 function sets the current foreground mix mode.This section provides an example of the EMF EMR_SETROP2 record ([MS-EMF] section 2.3.11.23).The EMR_SETROP2 record defines a binary raster operation mode. 0 1 2 3 4 5 6 7 8 9 10 1 2The META_SETROP2 Record defines the foreground raster operation mix mode in the playback device context.Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records.Graphics mode Function Background SetBkMode Drawing SetROP2 Mapping SetMapMode Polygon-fill SetPolyFillMode Stretching SetStretchBltModeAn application sets the foreground mix mode by using the SetROP2 function and retrieves the current mode by using the GetROP2 function.PaintRgn PatBlt Pie Polygon Polyline PolyPolygon RealizePalette Rectangle ResizePalette RestoreDC RoundRect SaveDC ScaleViewportExtEx ScaleWindowExtEx SelectClipRgn SelectObject SelectPaletteSetBkColor SetBkMode SetDIBitsToDevice SetMapMode SetMapperFlags SetPaletteEntries SetPixel SetPolyFillMode SetROP2SetROP2 Sets the foreground mix mode."
1,AddAtomW,"Microsoft Build · May 19 – 22, 2025AddAtomW function (winbase.h) Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Strings differing only in case are considered identical. Requir... Adds a.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an atom) identifying the string..Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) AddAtomW Adds a."
2,GetSystemPaletteEntries,"Microsoft Build · May 19 – 22, 2025GetSystemPaletteEntries function (wingdi.h) The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context (DC). Syntax Parameters [in] hdc A handle to the device context. [in] iStart The first entry to be retrieved from the system palette. [in] cEntries The.To develop Windows GDI, you need ... (Unicode) GetPaletteEntries The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette. GetSystemPaletteEntries The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context.GetPaletteEntries function (wingdi.h) The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette. Syntax Parameters [in] hpal A handle to the logical palette. [in] iStart The first entry in the logical palette to be retrieved. [in] cEntries The number of entries in the logical palette to be.(Unicode) GetPaletteEntries The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette. GetSystemPaletteEntries The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context (DC). GetSystemPaletteUse The.Color Functions The following functions are used with color. GetPaletteEntries Retrieves a specified range of palette entries from the given logical palette. GetSystemPaletteEntries Retrieves a range of palette entries from the system palette that is associated with the specified DC. GetSystemPaletteUse Retrieves the current state of the system.System Palette The system maintains a system palette for each device that uses palettes. Instead, the system has complete control of the system palette and permits access ... An application can view the contents of the system palette by using the GetSystemPaletteEntries function. This function retrieves the contents of one or more entries, up to.To do t... Then call GetSystemPaletteEntries and fill in the first and last NUMRESERVED/2 entries of the logical palette with the corresponding system colors. For example, if NUMRESERVED is 20, you would fill in the first and last 10 entries of the logical palette with the system colors. To enable applications to place output in memory rather than.GetNearestPaletteIndex function (wingdi.h) The GetNearestPaletteIndex function retrieves the index for the entry in the specified logical palette most closely matching a specified color value. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.Applications can retrieve the system palette colors and indexes by calling the GetSystemPaletteEntries function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.SetDIBitsToDevice function (wingdi.h) The SetDIBitsToDevice function sets the pixels in the specified rectangle on the device that is associated with the destination device context using color data from a DIB, JPEG, or PNG image. Remarks Optimal bitmap drawing speed is obtained when the bitmap bits are indexes ... Applications can retrieve the."
3,CompareFileTime,"Microsoft Build · May 19 – 22, 2025CompareFileTime function (fileapi.h) Compares two file times. Syntax Parameters [in] lpFileTime1 A pointer to a FILETIME structure that specifies the first file time. [in] lpFileTime2 A pointer to a FILETIME structure that specifies the second file time. Return value The return value is one of the following values. Return value Description -1.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time... You can compare the times of different files by using the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the.TzSpecificLocalTimeToSystemTimeEx Converts a local time with dynamic daylight saving time settings to UTC timeThe following functions are used with file time. Function Description CompareFileTime Compares two file times. FileTimeToLocalFileTime Converts a UTC file time to a local file time. FileTimeToSystemTime Converts a file time to system time.FILETIME structure (minwinbase.h) Contain... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Header minwinbase.h (include Windows.h) See also CompareFileTime File Times FileTimeToSystemTime GetFileTime ULARGE_INTEGER..The GetLastModifiedTime method is similar to the IHttpFileInfo::GetLastModifiedString method, except that you can use the FILETIME structure for comparisons that use functions like CompareFileTime and for calculations that use functions like FileTimeToSystemTime. Requirements Type Description Client - IIS 7.0 on Windows Vista- IIS 7.5 on.StgCreateDocfileOnILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgIsStorageFile Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-datetime-l1-1-1.dll API Requirements GetDateFormatEx Introduced into api-ms-win-core-datetime-l1-1-1.dll in 10.0.10240. Moved into."
4,GetThreadLocale,"Microsoft Build · May 19 – 22, 2025GetThreadLocale function (winnls.h) Returns the locale identifier of the current locale for the calling thread.Note  This function can retrieve data that changes between releases, for example, due to a custom locale. Syntax Return value Returns the locale identifier of the locale associated with the current thread. Requirements Requirement Value.EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system. EnumSystemLangua... GetSystemDefaultLocaleName Retrieves the system default locale name..For more informat... Language of localized version. Function GetThreadLocale GetKeyboardLayout GetSystemDefaultUILanguage System UI language, system preferred UI languages User UI language, user preferred UI languages Thread preferred UI languages Purpose Determine the language of menus and dialogs, messages, INF files, and help files for the.GetSystemDefaultLocaleName Retrieves the system default locale name.Note  It is recommended that ... GetThreadLocale Returns the locale identifier of the current locale for the calling thread.Note  This function can retrieve data that changes between releases, for example, due to a custom locale. GetThreadPreferredUILanguages Retrieves the thread.For example, a supplemental locale specific to a company called Fabricam might be called ""en-U... An application can retrieve the current locale names by using the GetSystemDefaultLocaleName and GetUserDefaultLocaleName functions. While each thread can retrieve and set its own locale identifier with GetThreadLocale and set it with SetThreadLocale,.Working with Custom Locales This topic provides some instructions for handling custom locales in your applications. For replacement locales, your application should generally consult locale-specific ... For example, when GetThreadLocale retrieves the current locale as English (United States), it might actually be a replacement locale that should.The locale identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed operating system-defined locales. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Retrieval of Locale Identifiers An applic... Each thread can set and retrieve its own locale with.GetSystemDefaultUILang... GetSystemPreferredUILanguages Retrieves the system preferred UI languages. GetThreadLocale Returns the locale identifier of the current locale for the calling thread.Note  This function can retrieve data that changes between releases, for example, due to a custom locale. GetThreadPreferredUILanguages Retrieves the thread.IBackgroundCopyManager::GetErrorDescription method (bits.h) Retrieves a description for the specified error code. Syntax Parameters [in] hResult Error code from a previous call to a B... MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US) To retrieve the system's default user language identifier, use the following calls. LANGIDFROMLCID(GetThreadLocale()).MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US) To retrieve the system's default user language identifier, use the following calls. LANGIDFROMLCID(GetThreadLocale()) [out] pErrorDescription Null-terminated string that contains the error text associated with the error. Call the CoTaskMemFree function to free ppErrorDescription when done. ...."
5,DrawIconEx,"Microsoft Build · May 19 – 22, 2025DrawIconEx function (winuser.h) Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. Syntax Parameters [in] hdc Type: HDC A handle to the device context into which the icon or cursor will be drawn. [in] xLeft Type: int The logical.DrawIcon function (winuser.h) Draws an icon or cursor into the specified device context. To specify additional drawing options, use the DrawIconEx function. Syntax Parameters [in] hDC Type: HDC A handle to the device context into which the icon or cursor will be drawn. [in] X Type: int The logical x-coordinate of the upper-left corner of the icon..DestroyResourceIndexer Frees the computational resources associated with the s... DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. DrawMenuBar Redraws.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. DestroyIcon Destroys an icon and frees any memory the... DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws an icon or cursor into the specified device context,.About Icons The system uses... The CreateIconFromResource, DrawIcon, ExtractAssociatedIcon, ExtractIcon, ExtractIconEx, and LoadIcon functions all use system large icons. Icon Display You can retrieve the image for an icon by using the GetIconInfo function, and can draw it by using the DrawIconEx function. To draw the default image for a icon,.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Bo... DrawFrameControl The DrawFrameControl function draws a frame control of the specified type and style. DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws.An application repla... An application can use the GetIconInfo function to retrieve the current image for a cursor and can draw the cursor by using the DrawIconEx function. Custom cursors are designed for use in a specific application and can be any design the developer defines. The CreateIconFromResourceEx function enables an application to.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..SetupDiDrawMiniIcon function (setupapi.h) The SetupDiDrawMiniIcon function draws the specified mini-icon at the location r... Instead of SetupDiDrawMiniIcon, you should use SetupDiLoadClassIcon together with DrawIcon or DrawIconEx to draw the 32-bit version of the icon. The following is an example of how to use DrawIconEx to display an icon: For.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-gui-l1-3-0 (introduced in Windows 10, version 10.0.10240) See."
6,WinHelpA,"Microsoft Build · May 19 – 22, 2025WinHelpA function (winuser.h) Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application. Syntax Parameters hWndMain Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand.COleIPFrameWndEx Class The COl... COleIPFrameWndEx::ShowPane COleIPFrameWndEx::WinHelpA Called by the framework to initiate the WinHelp application or context help. Remarks COleIPFrameWndEx::ShowPane Parameters [in] pBar [in] bShow [in] bDelay [in] bActivate Remarks COleIPFrameWndEx::WinHelpA Called by the framework to initiate the WinHelp.Enables the derived class to issue a command through... _FindTBar Deprecated. Returns the index of a browser toolbar item based on Component Object Model (COM) identity rules. _get_itbLastFocus Deprecated. Gets the ID of the last toolbar or view that had focus. _GetBorderDWHelper Deprecated. A helper method for the implementation of GetBorderDW..winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
7,SetClipboardViewer,"Microsoft Build · May 19 – 22, 2025SetClipboardViewer function (winuser.h) Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows. Requirements Requirement Value Minimum supported client.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. SetClipboardViewer Adds the specified window to the chain of clipboard viewers. Clipboard viewer windo... Yes No Provide product.This enables a clipboard viewer window to display the new content of the clipboard. Each window that receives the WM_DRAWCLIPBOARD message must call the SendMessage function to pass the message on to the next window in the clipboard viewer chain. The handle to the next window in the chain is returned by SetClipboardViewer, and may change in.The handle must have been passed to the SetClipboardViewer function. [in] hWndNewNext Type: HWND A handle to the window that follows the hWndRemove window in the clipboard viewer chain. The SetClipboardViewer function sends a WM_CHANGECBCHAIN message to the first window in the clipboard viewer chain. Requirements Requirement Value Minimum.Initially, this handle is the return value of the SetClipboardViewer function. When a clipboard viewer window receives the WM_CHANGECBCHAIN message, it should call the SendMessage function to pass the message to the next window in the chain, unless the next window is the window being removed. In this case, the clipboard viewer should save the.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to... SetClipboardData Places data on the clipboard in a specified clipboard format. SetClipboardViewer Adds the.CWindow::OpenClipboard Opens the Clipboard. CWindow::PrevDlgCtrl Sets the keyboard focus to the previous control in the dialog box. CWindow::SetClipboardViewer Adds the window to the Clipboard viewer chain. CWindow::SetDlgCtrlID Changes the window's identifier. CWindow::SetFocus Sets the input focus to the window. Remarks See SetCapture in the.About the Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. Because all applications have access to the clipboard, data can be easily transferred between a... The following topics are discussed in this section. Clipboard Viewer Windows Display Formats Owner Display Format Clipboard Viewer Windows.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.Remarks If the window being destroyed is part of the clipboard viewer chain (set by calling the SetClipboardViewer function), the window must remove itself from the chain by processing the ChangeClipboardChain function before returning from the WM_DESTROY message. Requirements Requirement Value Minimum supported client Windows 2000 Professional."
8,GlobalFlags,"Microsoft Build · May 19 – 22, 2025GFlags Overview GFlags (gflags.exe), the Global Flags Editor, enables and disables advanced internal system diagnostic and troubleshooting features. You can run GFlags from a Command Prompt window or use its graphical user interface dialog box. For information on how to install and locate gflags.exe, see GFlags. Use GFlags to activate the.GlobalFlags function (winbase.h) Retrieves information about the specified global memory object. Note  This function is provided only for compatibility with 16-bit versions of Windows. New applications should use the heap functions. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server.globalFlags (LANPolicy) element The globalFlags (LANPolicy) element contains the global settings for the automatic configuration of wired networks. ...ean Specifies whether machines use the built-in automatic configuration service to manage connections to wired networks that require layer 2 authentication (such as 802.1X). enableExplicitCreds.To open the GFlags dialog box: To set or clear global flags in the registry: To set or clear global flags for the current session: To set or clear global flags for an image file: To set or clear the Special Pool feature (Windows Vista and later) To enable or disable the Object Reference Tracing feature (Windows Vista and later) To enable and.globalFlags (WLANPolicy) element The globalFlags (WLANPolicy) element contains the global settings for the Auto Configuration Module (ACM). ...oint. enableExplicitCreds boolean Indicates whether to enable explicit credentials. blockPeriod The value of the block timeout period. enableWFD boolean Flag to indicate whether to enable WFD. enableAutoCo.Example 13: Listing Image Files with Global Flags GFlags displays the flags set for a particular image file, but it does not display all image files that have flags set. Windows stores flags for an image file that the GlobalFlag registry entry in a registry subkey named for the image file in the following registry path, HKEY_LOCAL_MACHINE.dcl_globalFlags (sm4 - asm) Declares shader global flags. dcl_globalFlags flags flags [in] A global shader flag. REFACTORING_ALLOWED - Permits the driver to reorder arithmetic operations for optimization, as shown here. Remarks This optional instruction applies to the following shader stages: Vertex Shader Geometry Shader Pixel Shader x x x This.LAN_policy schema elements A wired (LAN) policy profile contains the following schema elements. All of the named elements are in the namespace https://www.microsoft.com/networking/LAN/policy/v1. All elements LANPolicy name (LANPolicy) description (LANPolicy) globalFlags (LANPolicy) enableAutoConfig (globalFlags) enableExplicitCreds (globalFlags).GFlags Details GFlags enables and disables system features by editing the Windows registry and internal settings. This section explains the operation of GFlags in detail and includes tips for using GFlags most efficiently. General Information To display the GFlags dialog box, at the command line, type gflags (with no parameters). GFlags.To return information about a specified memory object, use the GlobalFlags or LocalFlags function. The information includes the object's lock count and indicates whether the object is discardable or has already been discarded. To return a handle to the memory object associated with a specified pointer, use the GlobalHandle or LocalHandle function.."
9,recv,"Microsoft Build · May 19 – 22, 2025The recv function is used in programming to receive data from a connected socket. It is part of the Windows Sockets API and returns an integer value indicating the number of bytes received or an error. The function takes parameters such as the active socket, a buffer to store the received data, the number of bytes to receive, and any flags to use. It is commonly used in both server and client applications to handle incoming data over a network connection.References:recv function (winsock2.h) The recv function receives data from a connected socket or a bound connectionless socket. Syntax Parameters [in] s The descriptor that identifies a connected socket. [out] buf A pointer to the buffer to receive the incoming data. [in] len The length, in bytes, of the buffer pointed to by the buf parameter. [in] flags A.recv function (winsock.h) The recv function receives data from a connected socket or a bound connectionless socket. Syntax Parameters [in] s The descriptor that identifies a connected socket. [out] buf A pointer to the buffer to receive the incoming data. [in] len The length, in bytes, of the buffer pointed to by the buf parameter. [in] flags A.ftp recv Copies a remote file to the local computer using the current file transfer type. Syntax Parameters Parameter Description Specifies the remote file to copy. [] Specifies the name of the file to use on the local computer. Examples To copy test.txt to the local computer using the current file transfer, type... Reference article for the ftp.MPI_Recv function Performs a receive operation and does not return until a matching message is received. Requirements Product HPC Pack 2012 MS-MPI Redistributable Package, HPC Pack 2008 R2 MS-MPI Redistributable Package, HPC Pack 2008 MS-MPI Redistributable Package or HPC Pack 2008 Client Utilities Header Mpi.h; Mpif.h Library Msmpi.lib DLL.Receiving and Sending Data on the Server The following code demonstrates the recv and send functions used by the server. To receive and send data on a socket The send and recv functions both return an integer value of the number of bytes sent or received, respectively, or an error. Next Step: Disconnecting the Server Related topics Getting Started.Communicate with a real-time capable application Azure Sphere supports inter-core communication between high-level applications and real-time capable applications (RTApp). While the file descriptor is open, you can perform operations on it, such as send/recv. The IntercoreComms sample demonstrate how to use a high-level application to communicate.A discussion of OOB data implemented using TCP urgent data follows the protocol-independent explanation. In each discussion, the use of recv also implies recvfrom, WSARecv, and WSARecvFrom, and references to WSAAsyncSelect also apply to WSAEventSelect. ... If OOB data remains after any call to recv, Windows Sockets notifies the application with.shutdown function (winsock.h) The shutdown function disables sends or receives on a socket. Remarks The shutdown function is used on all types of sockets to ... If the how parameter is SD_RECEIVE, subsequent calls to the recv function on the socket will be disallowed. When FD_CLOSE received, call the recv or WSARecv until the function completes.WSARecvEx function (mswsock.h) The WSARecvEx function receives data from a connected socket or a bound connectionless socket. The WSARecvEx function is similar to the recv function, except that the flags parameter is used only to return information. Remarks The WSARecvEx function that is part of the Microsoft impleme... The recv function is.WSARecvEx function (winsock.h) The WSARecvEx function receives data from a connected socket or a bound connectionless socket. The WSARecvEx function is similar to the recv function, except that the flags parameter is used only to return information. Remarks The WSARecvEx function that is part of the Microsoft impleme... The recv function is."
10,LocalFree,"Microsoft Build · May 19 – 22, 2025LocalFree function (winbase.h) Frees the specified local memory object and invalidates its handle. The LocalFree function will free a locked memory object. If an application is running under a debug version of the system, LocalFree will issue a message that tells you that a locked object is being freed. Requirements Requirement Value Minimum.To free the memory, use the LocalFree function. It is not safe to free memory allocated with LocalAlloc using GlobalFree. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h).C28636 warning C28636: Calling LocalFree on non-allocated pointer obtained from calls to GetSecurityDescriptorOwner/Group/Dacl/Sacl These functions do not allocate any memory—they set the pointer that is passed in. For this reason, it is wrong to free memory using that pointer. Warning C28636 Calling LocalFree on non-allocated pointer obtained.Remarks Windows Server 2016, Windows 10 LTSB 2016 and Windows 10 version 1607: GetThreadDescription is only available by R... To free the memory for the thread description, call the LocalFree method. Requirements Requirement Value Minimum supported client Windows 10, version 1607 [desktop apps | UWP apps] Minimum supported server Windows.Example C Program: Using CryptProtectData The following example encrypts and decrypts a data BLOB using CryptProtectData and CryptUnprotectData. Using ... Using LocalFree to release allocated memory. This example uses the MyHandleError function. Code for this and other auxiliary functions is also listed under General Purpose Functions. The.ISecurityInformation4::GetSecondarySecurity method (aclui.h) The GetSecondarySecurity method returns additional security contexts that may impact access to the resource. Syntax Parameters [out] pSecurityObjects A... The array is owned by the caller and is freed by using the LocalFree function. The pwszName member is also freed by using LocalFree..The ATL-provided memory managers simply wrap existing memory allocation facilities: CCRTHeap Wraps the standard CRT heap functions (malloc, free, and realloc) CWin32Heap Wraps a Win32 heap handle, using HeapAlloc, HeapFree, and HeapRealloc CLocalHeap Wraps the Win32 APIs: LocalAlloc, LocalFree, and LocalRealloc CGlobalHeap Wraps the Win32 APIs:.SHLocalStrDupW function (shlwapi.h) Makes a copy of a string in newly allocated memory. Syntax Pa... SHLocalStrDup allocates memory for this string with LocalAlloc. You should free the string with LocalFree when it is no longer needed. Return value Type: HRESULT If this function succeeds, it returns S_OK. Remarks Note The shlwapi.h header defines.SHLocalStrDupA function (shlwapi.h) Makes a copy of a string in newly allocated memory. Syntax Pa... SHLocalStrDup allocates memory for this string with LocalAlloc. You should free the string with LocalFree when it is no longer needed. Return value Type: HRESULT If this function succeeds, it returns S_OK. Remarks Note The shlwapi.h header defines.BuildSecurityDescriptorA function (aclapi.h) The BuildSecurityDescriptor function allocates and initializes a new security descriptor. The function allocates memory for the new security descriptor. You must call the LocalFree function to free the returned buffer. Requirements Requirement Value Minimum supported client Windows XP [desktop apps."
11,GetScrollRange,"Microsoft Build · May 19 – 22, 2025GetScrollRange function (winuser.h) The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar. Note  The GetScrollRange function is provided for compatibility only. New applications should use t... Syntax Parameters [in] hWnd Type: HWND Handle to a scroll bar control or a window.FlatSB_GetScrollRange function (commctrl.h) Gets the scroll range for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard GetScrollRange function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. It can be one of the following values: Value.For example, if the... Note: The GetScrollPos function is provided for backward compatibility. New applications should use the GetScrollInfo function. GetScrollRange The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar. Note: The GetScrollRange function is provided for.SBM_GETRANGE message The SBM_GETRANGE message is sent to retrieve the minimum and maximum position values for the scroll bar control. Instead, they should use the GetScrollRange function. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header.Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.Flat Scroll Bar This section contains information about the programming elements used to control flat scroll bars. Overviews Topic Contents Flat Scroll Bars Microsoft Internet Explorer 4.0 introduced a new visual technology called flat scroll bars. Functionally, flat scroll ... Note: This is identical to FlatSB_GetScrollProp. FlatSB_GetScrollRange.ScrollBar_GetRange macro (windowsx.h) Gets the range of a scroll bar. Note  This macro expands to a call to the GetScrollRange function, which is deprecated. Syntax Parameters hwndCtl Type: HWND A handle to the con... Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only].However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a ... Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only]."
12,WSASocketW,"Microsoft Build · May 19 – 22, 2025WSASocketW function (winsock2.h) The WSASocket function creates a socket that is bound to a specific transport-service provider. Socket type definitions in the Winsock2.h and Ws2def.h header files will be periodically updated as new socket types, address families, and protocols are defined. This protocol value is only supported if the Reliable.SIO_QUERY_RSS_PROCESSOR_INFO Control Code Description The SIO_QUERY_RSS_PROCESSOR_INFO control code queries the association between a socket and an RSS processor core and NUMA node. The SIO_QUERY_RSS_PROCESSOR_IN... See also PROCESSOR_NUMBER socket SOCKET_PROCESSOR_AFFINITY WSAGetLastError WSAGetOverlappedResult WSAIoctl WSAOVERLAPPED WSASocketA.The following existing Winsock function has been revised to support requesting both a canonical name and a fully qualified domain name: GetAddrInfoEx The following new Winsock structure has been added to support requesting both a canonical name and a fully qualified domain name: addrinfoex2 The following new Windows Sockets function has been added.SIO_APPLY_TRANSPORT_SETTING Control Code Description The SIO_APPLY_TRANSPORT_SETTING control code applies one or more transport settings to a socket. To perform... A Windows Store app will not call this IOCTL directly. See also ControlChannelTrigger socket SIO_QUERY_TRANSPORT_SETTING TRANSPORT_SETTING_ID WSAGetLastError WSAGetOverlappedResult.SIO_ADDRESS_LIST_QUERY Control Code Description The SIO_ADDRESS_LIST_QUERY control code obtains a list of local transport addresses of the socket's protocol family to which the application can bind. See also GetAdaptersAddresses IP_ADAPTER_ADDRESSES IP_ADAPTER_UNICAST_ADDRESS IP_DAD_STATE MIB_IF_ROW2 MIB_UNICASTIPADDRESS_ROW SCOPE_... Control code.SIO_ACQUIRE_PORT_RESERVATION control code Description The SIO_ACQUIRE_PORT_RESERVATION control code acquires a runtime reservation for a block of TCP or UDP ports. See also accept bind CreatePersistentTcpPortReservation CreatePersistentUdpPortReservation DeletePersistentTcpPortReservation DeletePersistentUdpPortReservation INET_PORT_RANGE.SIO_RCVALL Control Code Description The SIO_RCVALL control code enables a socket to receive all IPv4 or IPv6 packets passing through a network interface. To perform this operation, call the WSAIoctl or WSPIoctl function with the following parameters... See also socket TCP/IP Raw Sockets WSAGetLastError WSAGetOverlappedResult WSAIoctl WSAOVERLAPPED.SIO_QUERY_TRANSPORT_SETTING Control Code Description The SIO_QUERY_TRANSPORT_SETTING control code queries the transport settings on a socket. Remarks The SIO_QUERY_TRANSPORT_S... See also CONTROL_CHANNEL_TRIGGER_STATUS ControlChannelTrigger REAL_TIME_NOTIFICATION_SETTING_OUTPUT SIO_APPLY_TRANSPORT_SETTING socket WSAGetLastError.SIO_LOOPBACK_FAST_PATH Control Code Description The SIO_LOOPBACK_FAST_PATH control code configures a TCP socket for lower latency and faster operations on the loopback interface. The list of supported options includes the following: IP_TTL IP_UNICAST_IF IPV6_UNICAST_HOPS IPV6_UNICAST_IF IPV6_V6ONLY SO_CONDITIONAL_ACCEPT SO_EXCLUSIVEADDRUSE.SIO_KEEPALIVE_VALS Control Code Description The SIO_KEEPALIVE_VALS control code enables or disables the per-connection setting of the TCP keep-alive option which specifies the TCP keep-alive timeout and interval. See also KeepAliveTime KeepAliveInterval PPTPTcpMaxDataRetransmissions socket SO_KEEPALIVE WSAGetLastError WSAGetOverlappedResult."
13,GetClipboardViewer,"Microsoft Build · May 19 – 22, 2025GetClipboardViewer function (winuser.h) Retrieves the handle to the first window in the clipboard viewer chain. Syntax Return value Type: HWND If the function succeeds, the return value is the handle to the first window in the clipboard viewer chain. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.CWnd::get_accKeybo... CWnd::GetClientRect Gets the dimensions of the CWnd client area. CWnd::GetClipboardOwner Retrieves a pointer to the current owner of the Clipboard. CWnd::GetClipboardViewer Retrieves a pointer to the first window in the chain of Clipboard viewers. CWnd::GetControlUnknown Retrieves a pointer to an unknown ActiveX control..About the Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. Clipboard Viewer Windows Display Formats Owner Display Format Clipboard Viewer Windows A window adds itself to the clipboard viewer chain by calling the SetClipboardViewer function. The return value is t... To retrieve the handle to the.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-2-0 (introduced in Windows 8.1) See also Clipboard.GetOpenClipboa... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also Clipboard Conceptual GetClipboardOwner GetClipboardViewer.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds ... GetClipboardSequenceNumber Retrieves the clipboard sequence number for the current window station. GetClipboardViewer Retrieves.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. Using the Clipboard A clipboard viewer window displays the current content of the clipboard, and receives messages when the clipboard.SetClipboardViewer function (winuser.h) Adds the specified window to the chain of clipboard viewers. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib."
14,CreateNamedPipeW,"Microsoft Build · May 19 – 22, 2025CreateNamedPipeW function (namedpipeapi.h) Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance of an existing named pipe. Syntax Parameters.namedpipeapi.h header This header is used by multiple technologies. (CallNamedPipeW) ConnectNamedPipe Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. CreateNamedPipeW The CreateNamedPipeW (Unicode) function (winbase.h) creates an instance of a named pipe and returns a handle for.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
15,DispatchMessageA,"Microsoft Build · May 19 – 22, 2025DispatchMessageA function (winuser.h) Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. Syntax Parameters [in] lpMsg Type: const MSG* A pointer to a structure that contains the message. Requirements Requirement Value Minimum supported client Windows 2000 Professional.DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. (DispatchMessageA) DispatchMessageW.Window ghosting is a Windows Manager feature that lets the user minimize,... DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a.I don't really understand which &quot;sign-in info&quot; is being verified. I have also tried to set up the connection with power shell, but that wouldn't help either: Add-VpnConnection -Name &quot;MyVPN&quot; -ServerAddress &quot;vpn.acme.com&quot; -AuthenticationMethod &quot;MachineCertificate&quot;... I would really like to use VPN client."
16,FindFirstFileW,"Microsoft Build · May 19 – 22, 2025FindFirstFileW function (fileapi.h) Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used). To specify additional attributes to use in a search, use the FindFirstFileEx function. To perform this operation as a transacted operation, use the FindFirstFileTransacted function..For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CompareFileTime Compares two file times. (ANSI) CreateDirectory2W Creates a new directory..FindClose Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindNextFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileAttributesW Introduced into.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.FINDEX_INFO_LEVELS Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data. FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and....s that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolic DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW, MoveFileW,.FindNextFileW function (fileapi.h) Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows....s/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell --If the reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to.I tried with FindFirstFileW but it's the same. The 8.3 file name is supposed to work with non-Unicode programs and what I do is what is mentioned in many sites... the code is OK since if I copy the content of the command prompt and I paste it in Notepad and I save the Notepad .txt document using ANSI, when I open that .txt again I see the ?.This is the stack of the leaking file handle. 0x00007ffafc81fb44: ntdll!NtOpenFile+0x0000000000000014 0x00007ffaf9e19705: KERNELBASE!FindFirstFileExW+0x00000000000001d5 0x00007ffaf9e19f1c: KERNELBASE!FindFirstFileW+0x000000000000001c 0x00007ffae36cddf1: localspl!NPackageInstallLocalspl::TLinkedDriverPackage::RemovePreviousCab+0x00000000000001dd."
17,WSALookupServiceBeginW,"Microsoft Build · May 19 – 22, 2025WSALookupServiceBeginW function (winsock2.h) The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. WSALookupServiceBegin only returns a handle, which should be used by subsequent calls to WSALookupServiceNext to get the actual results. Windows Phone 8: The.(ANSI)... WSALookupServiceBeginA The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. (ANSI) WSALookupServiceBeginW The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure..WSAECOMPARATOR The Windows Sockets WSAECOMPARATOR enumeration type is used for version-comparison semantics in Windows Sockets 2. (ANSI) GetServiceW The GetService functi... WSALookupServiceBeginA The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. (ANSI).WSALookupServiceBeginA function (winsock2.h) The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. WSALookupServiceBegin only retu... Windows Phone 8: The WSALookupServiceBeginW function is supported for Windows Phone Store apps on Windows Phone 8 and later.....ect send sendto SetAddrInfoExW setipv4sourcefilter setsockopt setsourcefilter shutdown socket TransmitFile TransmitPackets WSAAccept WSAAddressToStringW WSACleanup WSACloseEvent WSAConnect WSAConnectByList WSAConnectByNameW WSACreateEvent WSADuplicateSocketW WSAEnumNameSpaceProvidersExW WSAEnumNameSpaceProvidersW WSAEnumNetworkEvents.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-file-l1-1-0.dll in."
18,LoadAcceleratorsA,"Microsoft Build · May 19 – 22, 2025LoadAcceleratorsA function (winuser.h) Loads the specified accelerator table. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module whose executable file contains the accelerator table to be loaded. [in] lpTableName Type: LPCTSTR The name of the accelerator table to be loaded. ...tifier of an accelerator-table resource.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. This function is used to obtain the.CloseWindowStation Closes an open window station handle. CopyAcceleratorTableA Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. This function is used to obtain the accelerator-table data that."
19,sendto,"Microsoft Build · May 19 – 22, 2025The sendto function is used to send data over a socket, typically in connectionless protocols like UDP. Here’s a brief overview of how to use it:For example, the function call looks like this:In the context of Windows Sockets, the WSASendTo function can also be used, which is similar but provides additional options for Windows-specific features.When using sendto, you can specify the destination address for each send operation, which is particularly useful in scenarios where you want to send data to multiple clients or addresses.References:sendto function (winsock2.h) The sendto function sends data to a specific destination. Syntax Parameters [in] s A descriptor identifying a (possibly connected) socket. [in] buf A pointer to a buffer containing the data to be transmitted. [in] len The length, in bytes, of the data pointed to by the buf parameter. [in] flags A set of flags that.sendto function (winsock.h) The sendto function sends data to a specific destination. Syntax Parameters [in] s A descriptor identifying a (possibly connected) socket. [in] buf A pointer to a buffer containing the data to be transmitted. [in] len The length, in bytes, of the data pointed to by the buf parameter. [in] flags A set of flags that.If you're using a connection-oriented protocol, you must either use Connect to establish a remote host connection, or use Accept to accept an incoming connection. If you're using a connectionless protocol and plan to send data to several different hosts, you should use the SendTo method. If you don't use the SendTo method, you'll have to call.Overloads SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint) Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified SocketFlags. SendTo(Byte[], Int32, SocketFlags, EndPoint) Sends the specified number of bytes of data to the specified endpoint using the.SpatialTypeExtensions.SendTo(ISpatial, SpatialPipeline) Method Definition Namespace: Microsoft.Spatial Assembly:Microsoft.Spatial.dll Package:Microsoft.Spatial v7.9.0 Allows the delegation of the call to the proper type (geography or Geometry). Parameters shape ISpatial The instance that will have SendTo called. destination SpatialPipeline The.Os.Sendto Method Definition Namespace: Android.Systems Assembly:Mono.Android.dll Overloads Sendto(FileDescriptor, ByteBuffer, Int32, InetAddress, Int32) See sendto(2). Sendto(FileDescriptor, Byte[], Int32, Int32, Int32, SocketAddress) See sendto(2). Parameters fd FileDescriptor bytes Byte[] byteOffset Int32 byteCount Int32 flags Int32 address.Geometry.SendTo(GeometryPipeline) Method Definition Namespace: Microsoft.Spatial Assembly:Microsoft.Spatial.dll Package:Microsoft.Spatial v7.9.0 Sends the current spatial object to the given pipeline. Parameters chain GeometryPipeline The spatial pipeline. Applies to. Sends the current spatial object to the given pipeline. ..Using Sendto While Connected WSPSendTo will always deliver the data to the specified address, even though a designated peer for the sending socket has been established in WSPConnect. WSPSendTo will always deliver the data to the specified address, even though a designated peer for the sending socket has been established in WSPConnect...FileDialogCustomPlaces.SendTo Property Definition Namespace: Microsoft.Win32 Assembly:PresentationFramework.dll Gets the folder that contains the Send To menu items for the current user. Property Value FileDialogCustomPlace The folder that contains the Send To menu items for the current user. Remarks The GUID for this folder is.Intent.ActionSendto Field Definition Namespace: Android.Content Assembly:Mono.Android.dll Activity Action: Send a message to someone specified by the data. Field Value String Implements ContentsFileDescriptor Attributes RegisterAttribute Remarks Activity Action: Send a message to someone specified by the data.Input: #getData is URI describing the."
20,EnableScrollBar,"Microsoft Build · May 19 – 22, 2025EnableScrollBar function (winuser.h) The EnableScrollBar function enables or disables one or both scroll bar arrows. Syntax Parameters [in] hWnd Type: HWND Handle to a window or a scroll bar control, depending on the value of the wSBflags parameter. [in] wSBflags Type: UINT Specifies the scroll bar type. Requirements Requirement Value Minimum.FlatSB_EnableScrollBar function (commctrl.h) Enables or disables one or both flat scroll bar direction buttons. If flat scroll bars are not initialized for the window, this function calls the standard EnableScrollBar function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. This window handle.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a CWnd object. Public Methods Name Description CWnd::accDoDefau... Call this method before the main window is initialized. CWnd::EnableScrollBar Enables or disables.ScrollBar_Enable macro (windowsx.h) Enables or disables a scroll bar control. Syntax Parameters hwndCtl Type: HWND A handle to the control. flags Type: UINT Flags that specify the arrows affected and whether they are enabled or disabled. Return value Type: BOOL If the arrows are enabled or disabled as specified, the return value is nonzero..Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.Flat Scroll Bar This section contains information about the programming elements used to control flat scroll bars. Overviews Topic Contents Flat Scroll Bars Microsoft Internet Explorer 4.0 introduced a new visual technology called flat scroll bars. The difference is that you... Functions Topic Contents FlatSB_EnableScrollBar Enables or disables.(ANSI) EDIT... EDITWORDBREAKPROCW An application-defined callback function used with the EM_SETWORDBREAKPROC message. (Unicode) EnableScrollBar The EnableScrollBar function enables or disables one or both scroll bar arrows. EnableThemeDialogTexture Enables or disables the visual style of the background of a dialog window. EnableTheming.Important This class and its members cannot be used in applications that execute in the Windows Runtime. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized child windows. CWindow::DragAcceptFiles Registers whether the wi....CScrollBar Class Provides the functionality of a Windows scroll-bar control. Syntax Members Public Constructors Name Description CScrollBar::CScrollBar Constructs a CScrollBar object. Public Methods Name Description CScrollBar::Create Creates the Windows scroll bar and attaches it to the CScrollBar object. CScrollBar::EnableScrollBar Enables or.... Overviews Topic Contents About Scroll Bars A scroll bar consists of a shaded shaft with an arrow button at each end and a scroll box (sometimes called a thumb) between the arrow buttons. Using Scroll Bars When creating an overlapped, pop-up, or child window, you can add standard scroll bars by using the CreateWindowEx function and specifying."
21,CreateDirectoryW,"Microsoft Build · May 19 – 22, 2025CreateDirectoryW function (fileapi.h) Creates a new directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. To specify a template directory, use the CreateDirectoryEx function. To perform this operation as a transacted operation, use the.CompareFileTime Compares two file times. CreateDirectory2A Creates a new directory. (ANSI) CreateDirectory2W Creates a new directory. (Unicode) CreateDirectoryA Creates a new directory. (CreateDirectoryA) CreateDirectoryW Creates a new directory. (CreateDirectoryW) CreateFile2 Creates or opens a file or I/O device. CreateFile3 Creates or opens a.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586... Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. CreateDirectoryW Introduced into.We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path... Here are the directory management functions that no longer.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.CreateDirectory function (winbase.h) Creates a new directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. to the path. For more information, see Naming a File Tip  Starting with Windows 10, version 1607, for the unicode version of this function.Functions without MAX_PATH restrictions These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CreateDirectoryW, CreateDirectoryExW GetCurrentDirectoryW RemoveDirectoryW SetCurrentDirectoryW. These are the file management functions that no longer have MAX_PATH restrictions if you.Hi All I'm getting a st... Removing the \ from the end of this value resolved the problem, after using the Update Reset tool to start the update process over.| Hi @Philip_W ， CreateDirectoryW failed for \?\C:\Program Files\Microsoft Configuration Manager\CMUStaging\42E1CF6E-95A1-4A8D-96AD-311E6247B3FB\AUTORUN Please check if there is files in the.CONFIGURATION_MANAGER_UPDATE 07/15/2022 15:20:52 4052 (0x0FD4) CreateDirectoryW failed for \L:\Program Files\Microsoft Configuration Manager\CUStaging\44CE0720-6C46-4554-89CF-C9713E9C06C6\redist CONFIGURATION_MANAGER_UPDATE 07/15/2022 15:20:52 4052 (0x0FD4) Failed to create folder; 0x800700b7 CONFIGURATION_MANAGER_UPDATE 07/15/2022 15:20:52 4052.... fail \?\L:\Program Files\Microsoft Configuration Manager\CMUStaging\44CE0720-6C46-4554-89CF-C9713E9C06C6\redistCONFIGURATION_MANAGER_UPDATE15/07/2022 15:20:524052 (0x0FD4) CreateFolder failed; 0x800700b7CONFIGURATION_MANAGER_UPDATE15/07/2022 15:20:524052 (0x0FD4) CContentDefinition::ExpandContentDefinitionItems failed;."
22,GetShortPathNameA,"Microsoft Build · May 19 – 22, 2025GetShortPathNameA function (winbase.h) Retrieves the short path form of the specified path. For more information about file and path names, see Naming Files, Paths, and Namespaces. Syntax Parameters [in] lpszLongPath The path string. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend.(Unicode) GetProfileSectionA Retrieves all the keys and... (Unicode) GetProfileStringA Retrieves the string associated with a key in the specified section of the Win.ini file. (Unicode) GetShortPathNameA Retrieves the short path form of the specified path. (GetShortPathNameA) GetSystemDEPPolicy Gets the data execution prevention (DEP) policy.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. AreFileApisANSI Determines whether the file I/O fun... AreShortNamesEnabled The AreShortNamesEnabled function determines whether short names are enabled for the."
23,SetForegroundWindow,"Microsoft Build · May 19 – 22, 2025The SetForegroundWindow function is used in programming to bring the thread that created the specified window into the foreground and activate the window. This function is part of the Windows API and is typically used when you want to ensure that a particular window is the active window on the screen.To use the SetForegroundWindow function, you need to include the appropriate headers and call the function with the handle of the window you want to bring to the foreground. The syntax is as follows:Make sure that the window is attached to the calling thread's message queue; otherwise, the function may fail.References:SetForegroundWindow function (winuser.h) Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other.IVsUIShell.SetForegroundWindow Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Activates the environment application window by calling the SetForegroundWindow Win32 API. Returns Int32.AllowSetForegroundWindow function (winuser.h) Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. Syntax Parameters [in] dwProcessId Type: DWORD The identifier of the process that will be enabled to set the foreground window..WinBioAcquireFocus function (winbio.h) Acquires window focus. Remarks The Windows Biometric Framework uses window focus to arbitrate among multiple sessions connected to the system pool. If you are writing a CUI application, call GetConsoleWindow to retrieve a handle to the console window and pass that handle to the SetForegroundWindow function.LockSetForegroundWindow function (winuser.h) The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target.Window.Activate Method Definition Namespace: System.Windows Assembly:PresentationFramework.dll Attempts to bring the window to the foreground and activates it. Returns Bo... Attributes SecurityCriticalAttribute Remarks The rules that determine whether the window is activated are the same as those used by the Win32 SetForegroundWindow function.SendKeys.Flush Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:SendKeys.cs Source:SendKeys.cs Source:SendKeys.cs Processes all the Windows messages currently in the message queue. This is equivalent to c... Note Because there is no managed method to activate another application, you can either use this.WinBioReleaseFocus function (winbio.h) Releases window focus. Remarks The Windows Biometric Framework uses window focus to arbitrate among multiple sessions connected to the system pool. If you are writing a CUI application, call GetConsoleWindow to retrieve a handle to the console window and pass that handle to the SetForegroundWindow function.IVsUIShell Interface Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 This interface provides access to basic windowing functionality, including access to and creation of tool windows and.I need to set the foreground window in UWP In VB I used: Declare Auto Function FindWindow Lib &quot;USER32.DLL&quot; (ByVal lpClassName As String, ByVal lpWindowName As String) As IntPtr Declare Auto Function SetForegroundWindow Lib &quot;USER32.DLL&quot; (ByVal hWnd As IntPtr) As Boolean SetForegroundWindow(FindWindow(&quot;xyz&quot;,."
24,SetWindowTextA,"Microsoft Build · May 19 – 22, 2025SetWindowTextA function (winuser.h) Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application. Syntax Parameters [in] hWnd Type: HWND A handle to the window or control whose text is.Working with Strings This topic explains how Windows supports Unicode strings for UI elements, file names, and so on (Unicode is the preferred character encoding because it supports all character sets and languages). For example, there are two functions to set the text of a window's title bar: SetWindowTextA takes an ANSI string. The function is.(Unicod... SetWindowPos Changes the size, position, and Z order of a child, pop-up, or top-level window. (Unicode) SetWindowTextA Changes the text of the specified window's title bar (if it has one). However, SetWindowText cannot change the text of a control in another application. (ANSI) SetWindowTextW Changes the text of the specified window's.... IDC_LIST3) ; hStatic10 = GetDlgItem(hDlg, IDC_STATIC10); hSpin2 = GetDlgItem(hDlg, IDC_SPIN2); SendMessage(hSpin2, UDM_SETBUDDY,(WPARAM)hStatic10, 0); strcpy(bufftmp, &quot;ABC1\nDEF5\nGHL10\nQRS15\n&q SetWindowTextA(hStatic10, bufftmp); SendMessage(hSpin2, UDM_SETRANGE, 0, MAKELPARAM(3, 1)); SendMessage(hSpin2, UDM_SETPOS, 0, 2);.Issue Description When using an ANSI application that uses the UTF-8 code page , and items in a ComboBox list contain non-English text (i.e. include characters that sp... This truncation also occurs when setting text in the ComboBox using the SetWindowTextA function. Directly set the Edit control's text using the SetWindowTextA function. This.Output is as s... Can anyone know how to show text inside the edit window as number? (and how to get a number from window as text) Help pages on the internet are not readable. The output is something like &quot;˙ĚĚĚĚĚĚĚĚĚĚĚĚ&quot;| If your edit control has an ID, then consider the SetDlgItemInt function. Or try this: SetWindowTextA( hText,.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
25,GetShortPathNameW,"Microsoft Build · May 19 – 22, 2025GetShortPathNameW function (fileapi.h) Retrieves the short path form of the specified path. For more information about file and path names, see Naming Files, Paths, and Namespaces. Syntax Parameters [in] lpszLongPath The path string. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend.I am trying to use GetShortPathNameW to obta... Can someone help me?| The solution was add /utf-8 option when compile project, detailed info please refer to https://learn.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170&amp;viewFallbackFrom=vs-2017 .| Hello there, If the specified path.Hi. I have a special case. Suppose you create files in the file system that uing a DBCS. Now I do a little program that receives a parameter that is a file path and it just calls GetShortPathNameW and then it calls WideCharToMultiByte and it displays it in the msgbox. The 8.3 file name is supposed to work with non-Unicode p... Now I do a little.AreShortNamesEnabled The AreShortNamesEnabled function determines whether short names are enabled for the specified volume. (ANSI) CreateDirectory2W Creates a new directory. (GetLogicalDriveStringsW) GetLong... (ANSI) GetLongPathNameW Converts the specified path to its long form. (Unicode) GetShortPathNameW Retrieves the short path form of the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. AreFileApisANSI Determines whether the file I/O fun... AreShortNamesEnabled The AreShortNamesEnabled function determines whether short names are enabled for the."
26,GetCharABCWidthsFloatW,"Microsoft Build · May 19 – 22, 2025GetCharABCWidthsFloatW function (wingdi.h) The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font. Syntax Parameters [in] hdc Handle to the device context. [in] iFirst Specifies the code point of the first character in the group of consecutive characters where.GetCharABCWidthsA The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current Tru... (ANSI) GetCharABCWidthsFloatA The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font. (ANSI).GetCharABCWidthsA The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current Tru... (ANSI) GetCharABCWidthsFloatA The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font. (ANSI)."
27,OleDuplicateData,"Microsoft Build · May 19 – 22, 2025OleDuplicateData function (ole2.h) Duplicates the data found in the specified handle and returns a handle to the duplicated data. The source data is in a clipboard format. Use this function to help implement some of the data transfer interfaces such as IDataObject. ...andle of the source data. [in] cfFormat Clipboard format of the sour [in].OleDestroyMenuDescriptor C... OleDoAutoConvert Automatically converts an object to a new class if automatic conversion for that object class is set in the registry. OleDraw The OleDraw function (ole2.h) enables drawing objects more easily. OleDuplicateData Duplicates the data found in the specified handle and returns a handle to the duplicated.CreateDataAdviseHolder CreateDataCache CreateFormatEnumerator CreateOleAdviseHolder DoDragDrop OleCreate OleCreateDefaultHandler OleCreateEmbeddingHelper OleCreateEx OleCreateFontIndirect OleCreateFromData OleCreateFromDataEx OleCreateFromFile OleCreateFromFileEx OleCreateLink OleCreateLinkEx OleCreateLinkFromData OleCreateLinkFromDataEx.Component Object Model (COM) Overview of the Component Object Model (COM) technology. To develop Component Object Model (COM), you need these headers: accctrl.h callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h."
28,CreateFileMoniker,"Microsoft Build · May 19 – 22, 2025CreateFileMoniker function (objbase.h) Creates a file moniker based on the specified path. Syntax Parameters [in] lpszPathName The path on which this moniker is to be based. This parameter can specify a relative path, a UNC path, or a drive-letter-based path. If based on a relative path, the resulting moniker must be composed onto another file.File Monikers File monikers are the simplest moniker class. Then, when this same object is bound through a call to the BindToObject method, the object would be activated, probably by loading the file into the spreadsheet. OLE offers moniker providers the helper function CreateFileMoniker that creates a file moniker object and returns its pointer.In the following example, the driver that calls CustomRpt passes it the name of the object that is converted to a wide-character format... The object name is fed to CreateFileMoniker so that a file moniker can be created and the client can bind to the running object. After the object is running, CustomRpt can access a pointer to either an.objbase.h header This header is used by multiple technologies. For more i... CreateDataCache Retrieves a pointer to a new instance of an OLE-provided implementation of a data cache. CreateFileMoniker Creates a file moniker based on the specified path. CreateGenericComposite Performs a generic composition of two monikers and supplies a pointer to.CreateBindCtx Returns ... This object stores information about a particular moniker-binding operation. CreateClassMoniker Creates a class moniker that refers to the specified class. CreateFileMoniker Creates a file moniker based on the specified path. CreateGenericComposite Performs a generic composition of two monikers and supplies a pointer to.Asynchronous and Synchronous Monikers A client of a standard, synchronous OLE moniker typically creates and holds a reference to the moniker, as well as the bind-context to be used during binding. Clients typically create standard monikers by calling functions such as CreateFileMoniker, CreateItemMoniker, or CreatePointerMoniker or, because they.APIs from ole32.dll API Re... CreateAntiMoniker Introduced into ole32.dll in 10.0.10240. CreateBindCtx Introduced into ole32.dll in 10.0.10240. CreateClassMoniker Introduced into ole32.dll in 10.0.10240. CreateFileMoniker Introduced into ole32.dll in 10.0.10240. CreateGenericComposite Introduced into ole32.dll in 10.0.10240. CreateItemMoniker.Registering Objects in the ROT Typically, when a client asks a server to create an object instance, the server typically creates a moniker for the object and regis... When the server calls CreateFileMoniker to create a file moniker to be registered in the ROT, servers should pass local file names that are drive-based, not in UNC format. This.CreateCall The ICallFactory::CreateCall (objidlbase.h) method creates an instance of the call object that corr... CreateClassMoniker Creates a class moniker that refers to the specified class. CreateFileMoniker Creates a file moniker based on the specified path. CreateFormatEnumerator Creates an object that implements IEnumFORMATETC over a static.To use file monikers, you must use the CreateFileMoniker function to create the monikers. To allow your objects to be loaded when a ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header."
29,lstrcpynW,"Microsoft Build · May 19 – 22, 2025lstrcpynW function (winbase.h) Copies a specified number of characters from a source string into a buffer. Warning  Do not use. Note The winbase.h header defines lstrcpyn as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the.(ANSI) lstrcmpiW Co... (Unicode) lstrcmpW Compares two character strings. (Unicode) lstrcpyA Copies a string to a buffer. (ANSI) lstrcpynA Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (ANSI) lstrcpynW Copies a specified number of characters from a source string into a buffer.Warning  Do not use.....ringCchCopy, StringCchCopyEx No bounds ch StrCpyA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx No bounds checking StrCpyN StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNW StringCbCopy,.(ANSI... (ANSI) LookupAccountSidLocalW Retrieves the name of the account for the specified SID on the local machine. (Unicode) LookupAccountSidW Accepts a security identifier (SID) as input. (ANSI) LookupPrivilegeDisplayNameW Retrieves the display name that represents a specified privilege. (ANSI) LookupPrivilegeNameW Re. (Unicode) lstrcatA."
30,SetWaitableTimer,"Microsoft Build · May 19 – 22, 2025SetWaitableTimer function (synchapi.h) Activates the specified waitable timer. When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine. Syntax Parameters [in] hTimer A handle to the timer object. Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and.CreateWaitableTimerEx Creates or opens a waitable timer object and returns a... OpenWaitableTimer Opens an existing named waitable timer object. SetWaitableTimer Activates the specified waitable timer. SetWaitableTimerEx Activates the specified waitable timer and provides context information for the timer.. TimerAPCProc Application-defined timer.Waitable Timer Objects A waitable timer object is a synchronization object whose state is set to signaled when the specified due time arrives. Object Description manual-reset timer A timer whose state remains signaled until SetWaitableTimer is called to establish a new due time. synchronization timer A timer whose state remains signaled ... Note.Using Waitable Timer Objects The following example creates a timer that will be signaled after a 10 second delay. First, the code uses the CreateWaitableTimer function to create a waitable timer object. Then it uses the SetWaitableTimer function to set the timer. The code uses the WaitForSingleObject function to determine when the timer has been.Using Waitable Timers with an Asynchronous Procedure Call The following example associates an asynchronous procedure call (APC) function, also known as a completion routine, with a waitable timer when the timer is set. The address of the completion routine is the fourth parameter to the SetWaitableTimer function. The completion routine will be.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Wake-up Events The following information applies to wakes from sleep (S3) and hibernate (S4). Your application can restore a computer that is in a sleep state to the working state by using a scheduled timer or a device event. To.The ReadFileEx, SetWaitableTimer, SetWaitableTi... If you are using a thread pool, note that APCs do not work as well as other signaling mechanisms because the system controls the lifetime of thread pool threads, so it is possible for a thread to be terminated before the notification is delivered. Instead of using an APC-based signaling mechanism.PTIMERAPCROUTINE callback function (synchapi.h) An application-defined timer completion routine. Specify this address when calling the SetWaitableTimer function. Syntax Parameters [in, optional] lpArgToCompletionRoutine The value passed to the function using the lpArgToCompletionRoutine parameter of the SetWaitableTimer function. [in].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization Object Security and Access Rights The Windows security model enables you to control access to event, mutex, semaphore, and waitable timer objects. TIMER_MODIFY_STATE (0x0002) Modify state access, which is required for the.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. SetWaitableTimer Activates the specified waitable timer. When the due time arrives, the ti...."
31,GetParent,"Microsoft Build · May 19 – 22, 2025GetParent function (winuser.h) Retrieves a handle to the specified window's parent or owner. To retrieve a handle to a specified ancestor, use the GetAncestor function. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose parent window handle is to be retrieved. Return value Type: HWND If the window is a child window, the return.Directory.GetParent(String) Method Definition Namespace: System.IO Assemblies:mscorlib.dll, System.IO.FileSystem.dll Assemblies:netstandard.dll, System.Runtime.dll Assemblies:netstandard.dll, System.IO.FileSystem.dll Assemblies:netstandard.dll, System.IO.FileSystem.dll, System.Runtime.dll Assemb... Parameters path String The path for which to.... GetParent() Returns the parent TSqlObject, if it is within the Default scope and if there is only one TSqlObject that could be the parent for this object. GetParent(DacQueryScopes) Returns the parent TSqlObject, if it is within the specified DacQueryScopes scope and if there is only one TSqlObject that could be the parent for this object..attribute.getParent (Client API reference) Returns the formContext.data.entity object that is the parent to all the columns. Column types supported All Syntax formContext.getAttribute(arg).getParent() Return Value Type: formContext.data.entity object. Description: The parent object. Returns the formContext.data.entity object that is the parent to.control.getParent (Client API reference) Returns a reference to the section object that contains the control. Control types supported All Syntax formContext.getControl(arg).getParent(); Return Value Type: formContext.ui.tabs section object. Includes description and supported parameters for the control.getParent method...IHierarchyData.GetParent Method Definition Namespace: System.Web.UI Assembly:System.Web.dll Gets an IHierarchyData object that represents the parent node of the current hierarchical node. Examples The following code example demonstrates how to implement the GetParent method in a class that im... The FileSystemHierarchyData class wraps a.SiteMapNode.IHierarchyData.GetParent Method Definition Namespace: System.Web Assembly:System.Web.dll Retrieves the hierarchical parent of the current item. Returns IHierarchyData An IHierarchicalEnumerable that represents the parent of the current item in the hierarchy. Implements GetParent() Remarks The IHierarchyData.GetParent method delegates.ContentOperations.GetParent(ContentElement) Method Definition Namespace: System.Windows Assembly:PresentationCore.dll Gets the parent element of the specified ContentElement. Parent returns the parent element in the logical tree, which might not be the same element as returned by GetParent. GetParent exists specifically to correct for certain.section.getParent (Client API reference) Returns the tab containing the section. Syntax sectionObj.getParent(); Return Value Type: formContext.ui tab object. Includes description and supported parameters for the section.getParent method.. /power-apps/developer/model-driven-apps/clientapi/reference/formcontext-ui-tab-sections/getparent.AutomationPeer.GetParent Method Definition Namespace: Windows.UI.Xaml.Automation.Peers Edit Gets the AutomationPeer that is the parent of this AutomationPeer. Returns AutomationPeer The parent automation peer. Attributes DeprecatedAttribute Applies to. Gets the AutomationPeer that is the parent of this AutomationPeer. .."
32,RemovePropA,"Microsoft Build · May 19 – 22, 2025RemovePropA function (winuser.h) Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be changed. [in] lpString Type: LPCTSTR A null-terminated character string or an atom that.ChangeWindowMessageFilter Adds or removes a message from the User Interface Privilege Isolation (UIPI) message filter. DispatchMessageA ... The message value can be used when sending or posting messages. (Unicode) RemovePropA Removes an entry from the property list of the specified window. The specified character string identifies the entry to be.The function searches the entire screen, not just the calling application's client area. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. You can use this function to specify the content,."
33,FindAtomA,"Microsoft Build · May 19 – 22, 2025FindAtomA function (winbase.h) Searches the local atom table for the specified character string and retrieves the atom associated with that string. Syntax Parameters [in] lpString Type: LPCTSTR The character string for which to search. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. ... Searches the.(ANSI) FindActCtxSectionStringW The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure. (Unicode) FindAtomA Searches the local atom table for the specified character string and retrieves the atom associated with that string. (ANSI).The function then assigns ownership of the clipboard to the window that currently has the clipboard open. EnumClipboardFormats Enumerates the data formats currently available on the clipboard. FindAtomA Searches the local atom table for the specified character string and retrieves the atom associated with that string. (ANSI) FindAtomW Searches the."
34,PeekConsoleInputA,"Microsoft Build · May 19 – 22, 2025PeekConsoleInput function Reads data from the specified console input buffer without removing it from the buffer. Syntax Parameters hConsoleInput [in] A handle to the console input buffer. For more information, see Console Buffer Security and Access Rights. lpBuffer [out] A pointer to an array of INPUT_RECORD structures that receives the input.StringFromIID Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. APIs from api-ms-win-core-com-l2-1-1.dll API Requirements CreateILockBytesOnHGlobal Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. FmtIdToPropStgName Introduced into api-ms-win-core-com-l2-1-1.dll in."
35,CreateDCA,"Microsoft Build · May 19 – 22, 2025CreateDCA function (wingdi.h) The CreateDC function creates a device context (DC) for a device using the specified name. Syntax Parameters pwszDriver A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass NULL to lpszDriver because GDI ignores.(Unicode) CreateCompatibleBitmap ... CreateCompatibleDC The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. CreateDCA The CreateDC function creates a device context (DC) for a device using the specified name. (ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device.CreateCompatibleBitmap The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context. CreateCompatibleDC The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. CreateDCA The CreateDC function creates a device context (DC) for.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,."
36,SetWindowPos,"Microsoft Build · May 19 – 22, 2025SetWindowPos is a function in Windows programming that changes the size, position, and Z order of a child, pop-up, or top-level window. The windows are ordered according to their appearance on the screen, with the topmost window receiving the highest rank and being the first window in the Z order.References:SetWindowPos function (winuser.h) Changes the size, position, and Z order of a child, pop-up, or top-level window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).Other functions can cause the system to activate a different top-level window, including SetWindowPos, DeferWindowPos, SetWindowPlacement, and DestroyWindow. Size and Position Functions After creating a window, an application can set the window's size or posit... The MoveWindow and SetWindowPos functions are similar; both set the size or position.Obtaining the Status of a Capture Window The following example uses the SetWindowPos function to set the size of the capture window to the overall dimensions of the incoming video stream based on information returned by the capGetStatus macro in the CAPSTATUS structure. Related topics Using Video Capture. Obtaining the Status of a Capture Window..MFC Windows application may fail to redraw the control when it is resized if the control is multiply nested This article helps you resolve the problem wher... Now, a SetWindowPos call will transition into kernel mode in order to make changes to the specified window's position. There is then a callback from kernel mode into user mode to call the.can anyone tell me what is the powershell script to open specific app in secondary monitor| You can automate that using AutoIT cmdlets. check the... Use SetWindowPos function (winuser.h) https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos?redirectedfrom=MSDN to change the position of the window. Use SetWindowPos.Resized Windows The system changes the size of a window when the user chooses window menu commands, such as Size and Maximize, or when the application calls functions, such as the SetWindowPos function. To force the system to invalidate the entire client area of the window when a ... The system changes the size of a window when the user chooses.To use HDM_LAYOUT to set the initial size and position of a header control, set the initial visibility state of the control so that it is hidden. After sending HDM_LAYOUT to retrieve the size and position values, use the SetWindowPos function to set the new size, position, and visibility state. Requirements Requirement Value Minimum supported.WINDOWPOS structure (winuser.h) Contains information about the size and position of a window. This member can be a handle to the window behind which this window is placed, or can be one of the special values listed with the SetWindowPos function. x Type: int The position of the left edge of the window. y Type: int The position of the top edge of.Is there a way to fix this?| The On-Screen Keyboard (osk.exe) is a UIAccess application. I suspect that the ability to control the osk.exe window is limited by Microsoft's UIPI (User Interface P... Update: The difference in integrity levels caused SetWindowPos to fail with an access denied error in my tests. In addition to running as Administrator....p of the ZCalling this function is similar to calling the SetWindowPos function to change a window's position in the Z order. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include."
37,GetMetaFileW,"Microsoft Build · May 19 – 22, 2025GetMetaFileW function (wingdi.h) [GetMetaFile is no longer available for use as of Windows 2000. The GetMetaFile function creates a handle that identifies the metafile stored in the specified file. Syntax Parameters [in] lpName A pointer to a null-terminated string that specifies the name of a metafile. Return value If the function succeeds, the....CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW, CreateICA, CreateICW, GetDC, GetDCEx, GetWindowDC font CreateFontA, CreateFontW,.GetMetaFileA The GetMetaFile ... (ANSI) GetMetaFileBitsEx The GetMetaFileBitsEx function retrieves the contents of a Windows-format metafile and copies them into the specified buffer. GetMetaFileW The GetMetaFile function creates a handle that identifies the metafile stored in the specified file. (ANSI) GetMonitorInfoW The GetMonitorInfo function.(ANSI) GetEnhMetaFileDescriptionW The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer. (Unicode) GetEnhMetaFileHeader The GetEnhMetaFileHeader function retrieves the record containing the header for the specified enhanced-format metafile.."
38,FindResourceExW,"Microsoft Build · May 19 – 22, 2025FindResourceExW function (libloaderapi.h) Determines the location of the resource with the specified type, name, and language in the specified module. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the.(FindResourceA) FindResourceExA Determines the location of the resource with the specified type, name, and language in the specified module. (FindResourceExA) FindResourceExW Determines the location of the resource with the specified type, name, and language in the specified module. (FindResourceExW) FindResourceW Determines the location of a.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloaderapi.h contains the following programming interfaces: Functions AddDllDirectory Adds a directory to the process DLL search path. (FindResourceExW).EnumResourceTypesExW function (libloaderapi.h) Enumerates resource types associated with a specified binary module. ...EnumResourcRequirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2008 [desktop apps only] Target Platform Windows Header libloaderapi.h (include."
39,CreatePalette,"Microsoft Build · May 19 – 22, 2025CreatePalette function (wingdi.h) The CreatePalette function creates a logical palette. Syntax Parameters [in] plpal A pointer to a LOGPALETTE structure that contains information about the colors in the logical palette. Once an application creates a logical palette, it can select that palette into a device context by calling the SelectPalette.IDirectDraw7::CreatePalette method (ddraw.h) Creates a DirectDrawPalette object for this DirectDraw object. Syntax Parameters [in] unnamedParam1 This value consists of one or more of the following flags: DDPCAPS_1BIT The index is 1 bit. If it fails, the method can return one of the following error values: DDERR_INVALIDOBJECT DDERR_INVALIDPARAMS.Color Functions The following functions are used with color. CreateHalftonePalette Creates a halftone palette for the specified device context (DC). CreatePalette Creates a logical palette. GetColorAdjustment Retrieves the color adjustment values for the specified DC. UpdateColors Updates the client area of the specified device context by.IWICImagingFactory::CreatePalette method (wincodec.h) Creates a new instance of the IWICPalette class. Syntax Parameters [out] ppIPalette Type: IWICPalette** A pointer that receives a pointer to a new IWICPalette. Requirements Requirement Value Minimum supported client Windows XP with SP2, Windows Vista [desktop apps | UWP apps] Minimum supported.DD_CREATEPALETTEDATA structure (ddrawint.h) The DD_CREATEPALETTEDATA structure contains information necessary to create a DirectDrawPalette object for this Microsoft DirectDraw object. ... Point DD_DIRECTDRAW_GLOBAL structure that describes the driver's device. lpDDPalette Points to a DD_PALETTE_GLOBALCreatePalette Used by the DirectDraw API and.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt.2.3.4 Object Record Types This section defines the Object Record Types, which create and manage the graphics objects specified in the Playback Device Context (section 3.1.5). META_CREATEPALETTE 2.3.4.3 Creates a Palette Object (section 2.2.1.3). META_SELECTPALETTE 2.3.4.11 Specifies the palette in the playback device context with a specified.PDD_CREATEPALETTE callback function (ddrawint.h) The DdCreatePalette callback function creates a DirectDrawPalette object for the specified DirectDraw object. Syntax Parameters unnamedParam1 Points to a DD_CREATEPALETTEDATA structure that contains the information necessary to create the DirectDrawPalette object. Return value DdCreate... The.(Unicode) CreateHalftonePalette The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). CreateHatchBrush The CreateHatchBrush function creates a logical brush that h... (ANSI) CreateMetaFileW The CreateMetaFile function creates a device context for a Windows-format metafile. (Unicode) CreatePalette The.EMRCREATEPALETTE structure (wingdi.h) The EMRCREATEPALETTE structure contains members for the CreatePalette enhanced metafile record. Syntax Members emr The base structure for all record types. ihPal Index of palette in handle table. lgpl A LOGPALETTE structure that contains information about the palette. Requirements Requirement Value Minimum."
40,GetMessageExtraInfo,"Microsoft Build · May 19 – 22, 2025GetMessageExtraInfo function (winuser.h) Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. Syntax Return value Type: LPARAM The return value specifies the extra information. Remarks To set a thread's extra message.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. If the window was created by a different thread, SendNoti... SetMessageExtraInfo Sets the extra.(GetMessageA) GetMessageExtraInfo Retrieves the extra message information for the current thread. GetMessagePos Retrieves the cursor position for th... (SendNotifyMessageW) SetAdditionalForegroundBoostProcesses SetAdditionalForegroundBoostProcesses is a performance assist API to help applications with a multi-process application model where.SetMessageExtraInfo function (winuser.h) Sets the extra message information for the current thread. An application can use the GetMessageExtraInfo function to retrieve a thread's extra message information. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.The function suspends the thread and does not return until a new message is placed in the thre... You can call the SetMessageExtraInfo function to associate a value with the current thread's message queue. Then call the GetMessageExtraInfo function to get the value associated with the last message retrieved by the GetMessage or PeekMessage.System Events and Mouse Messages Your application incorporates optimal design a... Distinguishing Pen Input from Mouse and Touch When your application receives a mouse message (such as WM_LBUTTONDOWN), it may call the GetMessageExtraInfo function to evaluate whether the message originated from a pen or a mouse device. The value returned from.Troubleshooting Applications This section gives solutions to common problems. General Troubleshooting Category Description Issue I am running Windows Server 2008 and Windows Touch features are not working. Solution You can call GetMessageExtraInfo for the WM_LBUTTONDOWN and WM_LBUTTONUP messages to determine the source. The f... C++ if.XBUTTON2 0x0002 Set if the second X button was pressed or released. [in] dwExtraInfo Type: ULONG_PTR An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.When checking in c/c++ applications for touch input on Windows 10, while handling WM_INPUT window messages, the touch signature and identifier for touch (bit 7 being set) is missing. Now, what happens is that SDL2 uses getMessageExtraInfo on all of those events to determine if those events are from mo... The values reported for the lower 8 bits of.INPUT structure (winuser.h) Used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include."
41,CallWindowProcA,"Microsoft Build · May 19 – 22, 2025CallWindowProcA function (winuser.h) Passes message information to the specified window procedure. The SetWindowLong function creates the subclass by changing the window procedure associated with a particular window, causing the system to call the new window procedure instead of the previous one. Requirements Requirement Value Minimum supported.BringWindowToTop Bring... (BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. CallWindowProcA Passes message information to the specified window procedure. (ANSI) CallWindowProcW Passes message.CWPSTRUCT structure (winuser.h) Defines the message parameters passed to a WH_CALLWNDPROC hook procedure, CallWindowProcW function/CallWindowProcA function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include.HOOKPROC callback function (winuser.h) An application-defined or library-defined callback function used with the SetWindowsHookEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h.(Unicode) CallNextHookEx Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information. CallWindowProcA Passes message information to the specified window procedure. (ANSI) CallWindowProcW Passes message information to the specified.This provides a consistent user messaging story for ""mixed"" applications that expect to work... In order to handle this, we had to wrap many functions such as CallWindowProcA and SetWindowLongA to provide that consistency. This particular category of APIs did force us to skirt that line of ""no new functionality"" a few times, but it seemed."
42,CreateBindCtx,"Microsoft Build · May 19 – 22, 2025CreateBindCtx function (objbase.h) Returns a pointer to an implementation of IBindCtx (a bind context object). Remarks CreateBindCtx is most commonly used in the process of binding a moniker (locating and getting a pointer to an interface by identifying it through a moniker), as in the following steps: Get a pointer to a bind context by calling.The CreateBindCtx function initializes this member to zero. grfMode Flags that should be used when opening the file that contains the object identified by the moniker. The CreateBindCtx function initializes this field to STGM_READWRITE. dwTickCountDeadline The clock time by which the caller would like the binding operation to be completed, in.The CreateBindCtx function initializes this member to zero. grfMode Flags that should be used when opening the file that contains the object identified by the moniker. The CreateBindCtx function initializes this field to STGM_READWRITE. dwTickCountDeadline The clock time by which the caller would like the binding operation to be completed, in.The CreateBindCtx function initializes this member to zero. grfMode Flags tha... The CreateBindCtx function initializes this field to STGM_READWRITE. dwTickCountDeadline The clock time by which the caller would like the binding operation to be completed, in milliseconds. The CreateBindCtx function creates a bind context with the bind options set.This replacement API hides the options for CoWaitForMultipleHandles that are not supported in ASTA. CreateAntiMoniker Creates and returns a new anti-moniker. CreateAsyncBindCtx Creates an asynchronous bind context for use with asynchronous monikers. CreateBindCtx Returns a pointer to an implementation of IBindCtx (a bind context object). This.Asynchronous and Synchronous Monikers A client of a standard, synchronous OLE moniker typically creates and holds a reference to the moniker, as well as the bind-context to be used during binding. Clients create bind contexts by calling the CreateBindCtx function and then pass the bind context to the moniker with calls to IMoniker::BindToStorage.Extension APIs for Windows 10 devices This topic lists the Win32 and COM APIs that are part of the Universal Windows Platform (UWP) and that are implemented by some Windows 10 devices, so your calls to these APIs must be guarded with conditions that first confirm the presence of the API on the device your app is running on. The union of APIs.First, the sample calls the CoInitialize function to initialize the COM library. Then the sample calls CreateBindCtx to retrieve a pointer to an implementation of the IBindCtx interface. This object stores information about moniker-binding operations; the pointer is required to call methods of the IMoniker interface. Next the sample calls the.BindMoniker packages the following calls: CreateBindCtx creates a bind context object that supports the system implementation of IBindContext. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows.IBindCtx::SetBindOptions method (objidl.h) Sets new values for the binding parameters stored in the bind context. When you first create a bind context by using the CreateBindCtx function, the fields of the BIND_OPTS structure are initialized to the following values: You can use the IBindCtx::SetBindOptions method to modify these values before."
43,TranslateCharsetInfo,"Microsoft Build · May 19 – 22, 2025TranslateCharsetInfo function (wingdi.h) Translates character set information and sets all members of a destination structure to appropriate values. Syntax Parameters [in, out] lpSrc Pointer to the fsCsb member of a FONTSIGNATURE structure if dwFlags is set to TCI_SRCFONTSIG. Otherwise, this parameter is set to a DWORD value indicating the source..Unicode and Character Set Functions The following functions are used with character sets. MultiByteToWideChar Maps a character string to a UTF-16 (wide character) string. TranslateCharsetInfo Translates character set information and sets all members of a destination structure to appropriate values. WideCharToMultiByte Maps a UTF-16 (wide.GetTextCharsetInfo function (wingdi.h) Retrieves information about the character set of the font that is currently selected into a specified device context. In this case, the application should use the TranslateCharsetInfo function to obtain generic font-signature information for the character set. Requirements Requirement Value Minimum supported.CHARSETINFO structure (wingdi.h) Contains information about a character set. Only one code page will be set when th... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also Code Pages.(ISpellChecker.get_LocalizedName) get_Opti... GetACP Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use GetACP to translate text to or from Unicode. GetAppletIIDList Called from the IImePad interface to enumerate the.GetFontLanguageInfo The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. Applications typically use th... GetFontUnicodeRanges The GetFontUnicodeRanges function returns information about which Unicode characters are supported by a font. GetGlyphIndicesA The GetGlyphIndices."
44,GetProfileSectionA,"Microsoft Build · May 19 – 22, 2025GetProfileSectionA function (winbase.h) Retrieves all the keys and values for the specified section of the Win.ini file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section in the.GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file. (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function (winbase.h) retrieves the names of all sections in an initialization file. GetPrivateProfileSectionNamesA Retrieves the names of all.(GetPrivateProfileIntA) GetPrivateProfileIntW The GetP... GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file.."
45,ReadFileEx,"Microsoft Build · May 19 – 22, 2025ReadFileEx function (fileapi.h) Reads data from the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when reading is completed or canceled and the calling thread is in an alertable wait state. To read data from a file or device synchronously, use the ReadFile.Overlapped Operations Overlapped operations enable a thread to perform a time-consuming I/O operation in the background, leaving the thread free to perform other tasks. To run the ReadFile or WriteFile function as an overlapped operation, the calling thread must specify a pointer to an OVERLAPPED structure. The ReadFileEx and WriteFileEx functions.Read and Write Operations Windows supports both synchronous and asynchronous (overlapped) file I/O operations on serial communications resources. A thread uses the ReadFile or ReadFileEx function to read from a communications resource, and the WriteFile or WriteFileEx function to write to a communications resource. ReadFile and WriteFile can be.The behavior of these functions depends on the type of pipe and the modes in effect for the specified pipe handle, as follows: The ReadFile and WriteFile functions can be used with either byte-type or message-type pipes. The ReadFileEx and WriteFileEx functions can be used with either byte-type or message-type pipes if the pipe handle was opened.Table of contents Exit focus mode Save Table of contents Add Edit Sha... Using Completion Routines The ReadFileEx and WriteFileEx functions provide another form of overlapped I/O. The completion routine is not executed until the thread that called ReadFileEx and WriteFileEx starts an alertable wait operation by calling one of the alertable wait.Reading From and Writing to Files An application reads from and writes to a file by using the ReadFile, ReadFileEx, WriteFile, and WriteFileEx functions. These functions require a handle to a file to be opened for reading and writing, respectively. Flushing System-Buffered I/O Data to Disk Windows stores the data in file read... An application.About Communications Resources The file input and output (I/O) functions ( CreateFile, CloseHandle, ReadFile, ReadFileEx, WriteFile, and WriteFileEx) provide the basic interface for opening and closing a communications resource handle and for performing read and write operations. The file input and output (I/O) functions ( CreateFile, CloseHandle,.Time-Outs A handle to a communications resource has an associated set of time-out parameters that affect the behavior of read and write operations. Time-outs can cause a ReadFile, ReadFileEx, WriteFile, or WriteFileEx operation to conclude when a time-out interval elapses, even though the specified number of characters have not been read or.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization and Overlapped Input and Output You can perform either synchronous or asynchronous (also called overlapped) I/O operations on files, named pipes, and serial communications devices. The WriteFile, ReadFile,.Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only... To understand when a thread is in an alertable state, consider the following scenario: A thread initiates an asynchronous read request by calling ReadFileEx with a pointer to a callback function. In this scenario, once the thread enters."
46,DrawIcon,"Microsoft Build · May 19 – 22, 2025DrawIcon function (winuser.h) Draws an icon or cursor into the specified device context. To specify additional drawing options, use the DrawIconEx function. Syntax Parameters [in] hDC Type: HDC A handle to the device context into which the icon or cursor will be drawn. [in] X Type: int The logical x-coordinate of the upper-left corner of the icon..Graphics.DrawIcon Method Definition Namespace: System.Drawing Assembly:System.Drawing.Common.dll Assembly:System.Drawing.dll Package:System.Drawing.Common v10.0.0-preview.3.25173.2 Draws the image represented by the specified Icon at the specified coordinates. Overloads DrawIcon(Icon, Rectangle) Draws the image represented by the specified Icon.About Icons The system uses... The CreateIconFromResource, DrawIcon, ExtractAssociatedIcon, ExtractIcon, ExtractIconEx, and LoadIcon functions all use system large icons. Icon Display You can retrieve the image for an icon by using the GetIconInfo function, and can draw it by using the DrawIconEx function. To draw the default image for a icon,.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. DestroyIcon Destroys an icon and frees any memory the... DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws an icon or cursor into the specified device context,.You can also draw images and icons by using the DrawImage and DrawIcon methods, respectively. For more information about how to draw images with a Graphics object, see Working with Images, Bitmaps, Icons, and Metafiles. DrawEllipse(Pen, Single, Single, Single, Single)... DrawIcon(Icon, Int32, Int32) Draws the image represented by the specified.DestroyResourceIndexer Frees the computational resources associated with the s... DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. DrawMenuBar Redraws.DrawIconEx function (winuser.h) Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. For all other icons or cursors, the mask is drawn with the SRCAND raster operation code, and the image is drawn with the SRCINVERT raster operation.winuser.h header This header is used by multiple technologies. (Unicode) CreateIcon Creates an icon that has the specified size, colors, and bit patterns. Cre... DrawFrameControl The DrawFrameControl function draws a frame control of the specified type and style. DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws.SetupDiDrawMiniIcon function (setupapi.h) The SetupDiDrawMiniIcon function draws the specified mini-icon at the location requested. Syntax Parameters [in] hdc The handle to the device context in which the mini-icon will be drawn. [in] rc The rectangle in the specified device context handle to draw the mini-icon in. [in] MiniIconIndex The index of.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions.."
47,GetFullPathNameA,"Microsoft Build · May 19 – 22, 2025GetFullPathNameA function (fileapi.h) Retrieves the full path and file name of the specified file. To perform this operation as a transacted operation, use the GetFullPathNameTransacted function. For more information about file and path names, see File Names, Paths, and Namespaces. Note See the Remarks section for discussion of the use of relative.(ANSI) GetFinalPathNameByHandleW Retrieves the final path for the specified file. (Unicode) GetFullPathNameA Retrieves the full path and file name of the specified file. (ANSI) GetFullPathNameW Retrieves the full path and file name of the specified file. (Unicode) GetLogicalDrives Retrieves a bitmask representing the currently available disk.I am trying to get an absolute path from the GetFullPathName API by passing the relative path as argument to the function. But, the GetFullPathName API is not working for long paths (may be not wo... If you have not opted in you can prepend the path with &quot;\?\&quot; By the way, you must call GetFullPathNameW for long path support..GetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileType Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFullPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586..Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
48,GetWindowsDirectoryW,"Microsoft Build · May 19 – 22, 2025GetWindowsDirectoryW function (sysinfoapi.h) Retrieves the path of the Windows directory. This function is provided primarily for compatibility with legacy applications. New applications should store code in the Program Files folder and persistent data in the Application Data folder in the user's profile. For more information, see ShGetFolderPath..sysinfoapi.h header This header is used by multiple technologies. For more information, see: Sys... GetSystemWindowsDirectoryA Retrieves the path of the shared Windows directory on a multi-user system. (ANSI) GetSystemWindowsDirectoryW Retrieves the path of the shared Windows directory on a multi-user system. (Unicode) GetTickCount Retrieves the.Applications with flag /TSAWARE:NO crash in some environments. We noticed this on Windows servers 2016/2019. Seems that this is related to registry setting: HKLM\System\CurrentC... In that case GetWindowsDirectoryW returns wrong path. Is there a way to fix this?| Hi, I invite you to read the following link to understand when you should set YES or."
49,BeginPaint,"Microsoft Build · May 19 – 22, 2025The BeginPaint function is used in Windows programming to initiate the painting process for a window. It prepares the window for drawing by obtaining a handle to the display device context (DC) that can be used for rendering graphics. When BeginPaint is called, it fills in a PAINTSTRUCT structure with information about the repaint request, including the update region that needs to be painted.The typical usage of BeginPaint occurs in response to a WM_PAINT message, which is sent to a window when part of it needs to be redrawn. After calling BeginPaint, the application can perform its drawing operations. Once the drawing is complete, the application should call EndPaint to release the device context and signal that painting is finished.Here’s a simple example of how BeginPaint is used in a window procedure:In this example, BeginPaint is called to prepare for painting, and EndPaint is called after the painting is done to clean up.References:BeginPaint function (winuser.h) The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting. Syntax Parameters [in] hWnd Handle to the window to be repainted. [out] lpPaint Pointer to the PAINTSTRUCT structure that will receive painting information. Remarks The BeginPaint.Device Contexts A device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer. Device contexts allow device-independent drawing in Windows. Device contexts can be used to draw to... CPaintDC objects encapsulate the common idiom of Windows, calling the BeginPaint.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. DrawAnimatedRects Draws a rectangle and animates it to indicate icon or window activity. DrawCaption Draws a window caption. ValidateRgn Validates the client ar... WindowFromDC Returns a handle.Drawing in the Client Area You use the BeginPaint and EndPaint functions to prepare for and complete the drawing in the client area. BeginPaint returns a handle to the display device context used for drawing in the client area; EndPaint ends the paint request and releases the device context. In the following example, the window procedure writes.The WM_PAINT Message Typically, an application draws in a window in response to a WM_PAINT message. Upon receiving a WM_PAINT message, an application can call BeginPaint to retrieve the display device context for the client area and use it in calls to GDI functions to carry out whatever drawing operations are necessary to update the client area..Display Device Contexts An application obtains a display DC by calling the BeginPaint, GetDC, or GetDCEx function and ... After creating a window with the CS_OWNDC style, an application can call the GetDC, GetDCEx, or BeginPaint function once to obtain a handle identifying a private device context. An application obtains a display DC by calling.The BeginPaint function automatically validates the entire client area. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.Window Update Lock A window update lock is a temporary suspension of drawing in a window. The syst... An application uses the LockWindowUpdate function to set or clear a window update lock, specifying the window to lock. The lock applies to the specified window and all of its child windows. When the lock is set, the GetDC and BeginPaint functions.WM_PAINT message The WM_PAINT message is sent when the system or anot... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h (include Windows.h) See also Painting and Drawing Overview Painting and Drawing Messages.PAINTSTRUCT structure (winuser.h) The PAINTSTRUCT structure contains information for an application. For more information, see the descri... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include Windows.h) See."
50,RoundRect,"Microsoft Build · May 19 – 22, 2025RoundRect function (wingdi.h) The RoundRect function draws a rectangle with rounded corners. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle. [in] top The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle. [in].Drawing Rectangles A rectangle is a four-sided polygon whose opposing sides are parallel and equal in length. In addition to drawing a traditional rectangle, you can draw rectangles... The RoundRect function requires that the application supply the coordinates of the lower-left and upper-right corners, as well as the width and height of the...., allowoverlap, borderbottomcolor, borderleftcolor, borderrightcolor, bordertopcolor, bullet, b bwmode, bwnormal, bwpure, clip, cliptowrap, connectortype, dgmlayout, dgmlayoutmru, dgmnodekind, doubleclicknotify, forcedash, gfxdata, hr, hralign, hrnoshade, hrpct, hrstd, insetmode, ole, oleicon, oned, preferrelative, regroupid, spid, spt,.VML RoundRect Element This topic describes VML, a feature that is deprecated as of Windows Internet Explorer 9. Webpages and applications that rely on VML should be migr... For information, recommendations, and guidance regarding the current version of Windows Internet Explorer, see Internet Explorer Developer Center. RoundRect uses the ArcSize.Using Predefined Shapes This topic describes VML, a feature that is deprecated as of Windows Internet Explorer 9. In this topic: rect roundrect line polyline curve arc Summary rect You can use the element to draw a rectangle. Back to top roundrect You can use the element to draw a rectangle with rounded corners. You can then customize the.EMRROUNDRECT structure (wingdi.h) The EMRROUNDRECT structure contains members for the RoundRect enhanced metafile record. Syntax Members emr The base structure for all record types. rclBox Bounding rectangle, in logical units. szlCorner Width and height, in logical units, of the ellipse used to draw rounded corners. Requirements Requirement Value.Ellipse Draws an ellipse. FillRect Fills a rectangle using a brush. FrameRect Draws a border around a rectangle using a brush. InvertRect Inverts the color values of the pixels in a rectangle. Pie Draws a pie-shaped wedge bounded by an ellipse and two radials. Polygon Draws a polygon. PolyPolygon draws a series of closed polygons. Rectangle Draws....6 7 8 9 30 1 Type (0x0000002C) Size (0x00000020) Box (0xFFFFFFFD) ... (0xFFFFFFFE) ... (0x0000024F) ... (0x00000250) Corner (0x000000C8) ... (0x000000C8) Type (4 bytes): 0x0000002C identifies the record t EMR_ROUNDRECTBox (16 bytes): (0xFFFFFFFD, 0xFFFFFFFE, 0x0000024F, 0x00000250) defines the inclusive-inclusive bounding rectangle in logical.2.1.1708 Part 4 Section 6.1.2.17, roundrect (Rounded Rectangle) For additional notes that apply to this portion of the standard, please see the notes for background, §2.2.1(a); arc, §6.1.2.1(a-kk,mm-vv,aaa-jjj,lll,ooo, ppp,rrr-www,yyy, zzz,bbbb-... The standard places no restrictions on the value of the spt attribute. Office requires that the spt.2.1.418 Part 4 Section 6.1.2.17, roundrect (Rounded Rectangle) WordPad does not support this element. WordPad does not support this element.. /openspecs/wordpad_standards_support/ms-wpe376/330a7cfb-3862-4137-8b8c-a42574eb3148."
51,GetFontLanguageInfo,"Microsoft Build · May 19 – 22, 2025GetFontLanguageInfo function (wingdi.h) The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. Applications typically use this information and the GetCharacterPlacement function to prepare a character string for display. Syntax Parameters [in] hdc Handle to a display device.CDC::GetFontData Retrieves font metric information from a scalabl... The information to retrieve is identified by specifying an offset into the font file and the length of the information to return. CDC::GetFontLanguageInfo Returns information about the currently selected font for the specified display context. CDC::GetGlyphOutline Retrieves the.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. GetCharWidthI Gets the widths of consecut... GetFontData Gets metric data for a TrueType font. GetFontLanguageInfo Returns information about the selected font for a.... (Unicode) GetFontData The GetFontData function retrieves font metric data for a TrueType font. GetFontLanguageInfo The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. GetFontUnicodeRanges The GetFontUnicodeRanges function returns information about which Unicode characters.Win32 Text API Comparison For those developers that are migrating their Win32 application code, the following table lists the Win32 Text APIs and the approximate equivalent in DirectWrite. IDWriteFontFa... IDWriteFontFace::TryGetFontTable GetFontLanguageInfo Returns information about the selected font for a display context. N/A.(Unicode) GetClipBox The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that c... GetClipRgn The GetClipRg. (Unicode) GetFontData The GetFontData function retrieves font metric data for a TrueType font. GetFontLanguageInfo The GetFontLanguageInfo function returns information about the currently selected font for.GetCharacterPlacementA function (wingdi.h) The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, order... It is recommended that an application use the GetFontLanguageInfo function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER,.GetCharacterPlacementW function (wingdi.h) The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, order... It is recommended that an application use the GetFontLanguageInfo function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER,.If GetFontLanguageInfo d... For languages such as Arabic, where GetFontLanguageInfo returns the GCP_GLYPHSHAPE flag, the glyphs for a character will be different depending on whether the character is at the beginning, middle, or end of a word. In the case of languages such as Thai or Arabic, in which GetFontLanguageInfo returns the GCP_GLYPHSHAPE.This is typically used when GetFontLanguageInfo returns the GCP_REORDER flag, which indicates that the original string needs reordering. If GetFontLanguageInfo does not return GCP_REORDER for the current font, only the GCPCLASS_LATIN value is meaningful. lpGlyphs A pointer to the array that receives the values identifying the glyphs used for."
52,OemToCharBuffA,"Microsoft Build · May 19 – 22, 2025OemToCharBuffA function (winuser.h) Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string. Syntax Parameters [in] lpszSrc Type: LPCSTR One or more characters from the OEM-defined character set. [out] lpszDst Type: LPTSTR The destination buffer, which receives the.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) CharToOemBuffA Translates a s....Warning C28726 Banned API Usage: '*function-name' is insecure and has been marked deprecated. ...s _mbsnbcpy _mbsnbcpy_s _mbsnbcat _mbsnbcat_s _mbsncat _mbsncat_s _mbsncpy _mbsncpy_s _mbstok _mbstok_s _snscanf _snscanf_s _snwscanf _snwscanf_s _ui64toa ui64toa_s _ui64tow _ui64tow_s _ultoa _ultoa_s Ch CharToOemBuffA CharToOemBuffW CharToOemW.This function can handle strings consisting of either single- or multi-byte characters... (Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharToOemBuffA Translates a specified number of characters in a string into the OEM-defined character set. (ANSI) CharToOemBuffW Translates a specified."
53,CreateFileA,"Microsoft Build · May 19 – 22, 2025The CreateFileA function in the Windows API is used to create or open a file or I/O device. Here’s how to use it:This function is essential for file operations in Windows applications, allowing you to manage file access and creation effectively.References:CreateFileA function (fileapi.h) Creates or opens a file or I/O device. To perform this operation as a transacted operation, which results in a handle that can be used for transacted I/O, use the CreateFileTransacted function. Syntax Parameters [in] lpFileName The name of the file or device to be created or opened. To create a file stream, specify.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CreateFileA Creates or opens a file or I/O device. The most commonly used I/O devices are as.Performance degrades when you access large files with FILE_FLAG_RANDOM_ACCESS This article provides a solution to an issue that operating system performance may degrade when one or more processes access multiple large files using the CreateFile() API and the FILE_FLAG_RANDOM_ACCESS flag. References CreateFileA function (fileapi.h). Provides a.Let's see if I can enter the code here as plain TEXT (with a &quot;\&quot; before &quot;#... If &quot;CreateFileA&quot; provides us with an &quot;open handle&quot; to the disk, then //Data will be read from it much further below using the ReadFile Function! hFile = CreateFileA (szFileName, GENERIC_READ, FILE_SHARE_WRITE | FILE_SHARE_READ, 0,..../////////////////// #include &lt;windows.h&gt; #include &lt;stdio.h&gt; #include &lt;strsafe.h&gt; OVERLAPPED ol = { 0 }; int main(int argc, char** argv) { HANDLE hFile; char* ReadBuffer; LARGE_INTEGER StartingTime, EndingTime, ElapsedMicroseconds; LARGE_INTEGER Frequency; LARGE_INTEGER dwFileSize; QueryPerformanceFrequency(&amp;Frequency);.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset... FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the.GPMC or Import-GPO cmdlet fails to restore a GPO from backup This article helps fix an issue in which you fail to restore a Group Policy Object (GPO) from the backup by using the Group... For more information about the share mode, see: CreateFileA function (fileapi.h) Creating and Opening Files Specify a different target domain controller (DC) By....ateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW, MoveFileW, MoveFileExW, MoveFileWithProgressW, ReplaceFileW, SearchPathW, FindFirstFileNameW, FindNextFileNameW, FindFirstStreamW, FindNextStreamW,.Opening a File for Reading or Writing The CreateFile function can create a new file or open an existing file. You must specify the file name, creation instructions, and other attributes. When an application creates a new file, the operating system adds it to the specified directory. Example: O... Related topics Creating and Opening Files. Example.Creating and Opening Files The CreateFile function can create a new file or open an existing file. You must specify the file name, creation instructions, and other attributes. Related topics Access Control CreateFile DeviceIoControl File Attribute Constants File Compression and Decompression File Encryption File Management Functions Handles and."
54,SetErrorMode,"Microsoft Build · May 19 – 22, 2025SetErrorMode function (errhandlingapi.h) Controls whether the system or the process handles the specified serious error types. Syntax Parameters [in] uMode The process error mode. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps].Error Handling Functions The following functions are used with error handling. RtlVirtualUnwind Retrieves the invocation context of the function that precedes the specified function context. SetErrorMode Controls whether the system will handle the specified types of serious errors, or whether the process will handle them. SetLastError Sets the.Error Mode The error mode indicates to the system how the application is going to respond to serious errors. To handle these errors without user intervention, use SetErrorMode or the thread-specific SetThreadErrorMode. A process can re... Best practice is that all applications call the process-wide SetErrorMode function with a parameter of.errhandlingapi.h header This header is used by System Services. For more information, see: System Services errhandlingapi.h contains the following programming interfaces: Functions AddVectoredContinueHandler Registers a vectored continue handler. RestoreLastError Restores the last-error code for the calling thread. SetErrorMode Controls whether.Kernel32.dll provides the SetErrorMode method that allows for this behavior to be changed, allowing the caller to specify whether the system will handle these sorts of errors or whether it will expect the process to handle them instead. This pattern makes it easy to incorporate this functionality into your application via the C# using statement:.RUNTIME_INFO_FLAGS Enumeration Contains values that indicate what information about the common language runtime (CLR) should be returned. RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG Indicates that an error dialog box should not be shown upon failure. RUNTIME_INFO_IGNORE_ERROR_MODE Indicates that the effects of calling the SetErrorMode function with the.SemanticSearchOptions Class Package:com.azure.search.documents.models Maven Artifact:com.azure:azure-search-documents:11.7.6 java.lang.Object com.azure.search.documents.models.SemanticSearchOptions public final class SemanticSearchOptions Para... Returns: the semanticQuery value. setErrorMode public SemanticSearchOptions.Inheritance A child process can inherit several properties and resources from its parent process. You can also prevent a child process from inheriting properties from its parent process. The console, unless the process is detached or a new console is created. A child console process can also inherit the parent's standard handles, as well as access.LoadLibraryW function (libloaderapi.h) Loads the specified module into the address space of the calling process. The specified module may cause other mod... To get extended error information, call GetLastError. Remarks To enable or disable error messages displayed by the loader during DLL loads, use the SetErrorMode function. LoadLibrary can be.UnhandledExceptionFilter function (errhandlingapi.h) An application-defined function that passes unhandled exceptions to the debugger, if the process is being debugged. The default behavior is to display the dialog box, but this can be disabled by specifying SEM_NOGPFAULTERRORBOX in a call to the SetErrorMode function. The system uses."
55,SetConsoleOutputCP,"Microsoft Build · May 19 – 22, 2025SetConsoleOutputCP function Sets the output code page used by the console associated with the calling process. A console uses its output code page to translate the character values written by the various output functions into the images displayed in the console window. Requirements Minimum supported client Windows 2000 Professional [desktop apps.SetConsoleCP function Sets the input code page used by the console associated with the calling process. To set and retrieve a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.Get... To set a console's output code page, use the SetConsoleOutputCP function. To set and query a console's input code page, use the SetConsoleCP and GetConsoleCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via.To set a console's input code page, use the SetConsoleCP f... To set and query a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via.Console Code Pages A code page is a mapping of 256 character codes to individual characters. An application can use the SetConsoleCP and GetConsoleCP functions to set and retrieve a console's input code pages and the SetConsoleOutputCP and GetConsoleOutputCP functions to set and retrieve its output code pages. The identif... UTF-8 formatted text.High-Level Console I/O The high-level I/O functions provide a simple way to read a stream of characters from console input or to write a stream of characters to console output. The console functions support the use of either Unicode characters or the ANSI character set through the A and W variants of each function; the file I/O functions do not.To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI.To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI.Console Application Issues The 8-bit console functions use the OEM code page. The console will accept UTF-16 encoding on the W variant of the APIs or UTF-8 encoding on the A variant of the APIs after using SetConsoleCP and SetConsoleOutputCP to 65001 (CP_UTF8 constant) for the UTF-8 code page. Bar... Review console application issues, such as.SetConsoleTitle function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server."
56,0x%08x,"Microsoft Build · May 19 – 22, 2025Syntax integer-constant: decimal-constant integer-suffixopt octal-constant integer-suffixopt hexadecimal-constant integer-suffixopt decimal-constant: nonzero-digit decimal-constant digit octal-constant: 0 octal-constant octal-digit hexadecimal-constant: hexadecimal-prefix hexadecimal-digit hexadecimal-constant hexadecimal-digit hexadecimal-prefix:.MSSQLSERVER_17887 Applies to: SQL Server Details Attribute Value Product Name SQL Server Event ID 17887 Event Source MSSQLSERVER Component SQLEngine Symbolic Name SRV_IO_COMP_LISTENER_NONYIELDING Message Text IO Completion Listener (0x%lx) Worker 0x%p appears to be non-yielding on Node %ld. Approx CPU Used: kernel %I64d ms, user %I64d ms,.ValueTypeExtensions.ToHexString(T) Method Definition Namespace: Microsoft.Toolkit.Extensions Assembly:Microsoft.Toolkit.dll Package:Microsoft.Toolkit v6.1.1 Returns a hexadecimal String representation of a given T value, left-padded and ordered as big-endian. Returns String The hexadecimal representation of value (with the '0x' prefix),....l authority of a ; security identifier is represented as a decimal IdentifierAuthorityHex = ""0x"" 12HEXDIG ; IdentifierAuthorityHex, the top-level authority of a ; security identifier is represented as a hexadecimal number SubAuthority= ""-"" 1*10DIGIT ; Sub-Authority is always represented as a decimal number ; No leading ""0"" characters are.ValueTypeExtensions.ToHexString(T) Method Definition Namespace: CommunityToolkit.Diagnostics Assembly:CommunityToolkit.Diagnostics.dll Package:CommunityToolkit.Diagnostics v7.0.3 Returns a hexadecimal String representation of a given T value, left-padded and ordered as big-endian. Returns String The hexadecimal representation of value (with the.ValueTypeExtensions.ToHexString(T) Method Definition Namespace: Microsoft.Toolkit.Diagnostics Assembly:Microsoft.Toolkit.Diagnostics.dll Package:Microsoft.Toolkit.Diagnostics v7.0.2 Package:Microsoft.Toolkit.Diagnostics v7.1.2 Returns a hexadecimal String representation of a given T value, left-padded and ordered as big-endian. Returns String The.ExcludesType.Bitmask Property Definition Namespace: ExchangeWebServices Assembly:EWS.dll The Bitmask property gets or sets a hexadecimal or decimal mask that is to be used during an Excludes restriction operation. Property Value ExcludesValueType The Bitmask property returns an ExcludesValueType object that represents a bitmask. Remarks If the.2.2.4.1 SOAPFaultDetails The SOAPFaultDetails complex type specifies the details of a SOAP fault. This complex type is defined as follows: errorstring: A human-readable text explaining the application-level fault. errorcode: The hexadecimal representation (prefixed by 0x) of a 4-byte result code.. The SOAPFaultDetails complex type.Compiler Error C2153 integer literals must have at least one digit Hexadecimal and binary literals must contain at least one digit after the leading sequence (0x, 0X, 0b, or 0B), otherwise the trailing character may be incorrectly interpreted as a suffix or literal operator. See Integer literals for more information. The following sample generates.Hex2dec v1.1 By Mark Russinovich Published: July 4, 2016 Download Hex2dec (578 KB) Introduction Tired of running Calc to convert between hexadecimal and decimal. Usage: hex2dec [hex|decimal] Include x or 0x as the prefix of the number to specify a hexadecimal value. e.g. To translate 0x1233 hexadecimal to decimal: hex2dec 0x1233 Download Hex2dec."
57,GetCharWidth32A,"Microsoft Build · May 19 – 22, 2025GetCharWidth32A function (wingdi.h) The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.(Unicode) GetCharWidth32A The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.(Unicode) GetCharWidth32A The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font."
58,OffsetRgn,"Microsoft Build · May 19 – 22, 2025OffsetRgn function (wingdi.h) The OffsetRgn function moves a region by the specified offsets. Syntax Parameters [in] hrgn Handle to the region to be moved. [in] x Specifies the number of logical units to move left or right. [in] y Specifies the number of logical units to move up or down. Return value The return value specifies the new region's.Moving Regions An application moves a region by calling the OffsetRgn function. The given offsets along the x-axis and y-axis determine the number of logical units to move left or right and up or down. An application moves a region by calling the OffsetRgn function. The given offsets along the x-axis and y-axis determine the number of logical.For example, there are no functions that allow an application to offset a path; however, there is a function that enables an application to offset a region (OffsetRgn). Using PathToRegion , an application can create the effect of animating a complex shape by creating a path that defines the shape, converting the path into a region (by calling.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functi... OffsetClipRgn The.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. InvertRgn Inverts the colors in the specified region. OffsetRgn Moves a region by the specified offsets. PaintRgn Paints the specified region by using the brush currently.CRgn::FromHa... CRgn::GetRegionData Fills the specified buffer with data describing the given region. CRgn::GetRgnBox Retrieves the coordinates of the bounding rectangle of a CRgn object. CRgn::OffsetRgn Moves a CRgn object by the specified offsets. CRgn::PtInRegion Determines whether a specified point is in the region. CRgn::RectInRegion.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BeginPaint Clipping Functions Clipping Overview EndPaint ExtSelectClipRgn.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the."
59,GetCaretPos,"Microsoft Build · May 19 – 22, 2025GetCaretPos function (winuser.h) Copies the caret's position to the specified POINT structure. Syntax Parameters [out] lpPoint Type: LPPOINT A pointer to the POINT structure that is to receive the client coordinates of the caret. Return value Type: BOOL If the function succeeds, the return value is nonzero. ...e function fails, the return valueTo.Parameters piLine Int32 [out] Pointer to an integer containing the line, if the method succeeds. piColumn Int32 [out] Pointer to an integer containing the column, if the method succeeds. Returns Int32 If the method succeeds, it returns S_OK. Remarks COM Signature From textmgr.idl: The caret position is the cursor position. ...etPos to manage the.About Carets The system provides one caret per message queue. The flash time of a caret is twice as much as the blink time. Caret Position You can determine the position of the caret using the GetCaretPos function. The position, in client coordinates, is copied to a structure specified by a parameter in GetCaretPos. An application can move a caret....od Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13 Returns the line and column index of the cursor positionParameters piLine Int32 [out] Pointer to an integer containing the line, if.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.IVsTaskList2.GetCaretPos(IVsTaskItem) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Returns the item that currently has the caret. This item is always among the selected items..Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. The following illustration s... GetCaretBlinkTime Retrieves the time required to invert the caret's pixels. The user can set this value. GetCaretPos Copies the caret's position to.(ANSI) CreateAcceleratorTableW Creates an accelerator table. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. GetCaretB... The user can set this value. GetCaretPos Copies the caret's position to the specified POINT.IVsTaskList2 Interface Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Manipulates items in the TaskList window. Implemented by the environm... GetActiveProvider(IVsTaskProvider) Starting.IVsTextView Interface Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Manages the text view of an editor window and contains methods to manage the text view. The term, caret,."
60,SizeofResource,"Microsoft Build · May 19 – 22, 2025SizeofResource function (libloaderapi.h) Retrieves the size, in bytes, of the specified resource. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose executable file contains the resource. Default is the module used to create the current process. [in] hResInfo Type: HRSRC A handle to the resource. ...andle must be.(Unicode) MAKEINTRESOURCEA Converts an integer val... (ANSI) MAKEINTRESOURCEW Converts an integer value to a resource type compatible with the resource-management functions. (ShowCursor) SizeofResource Retrieves the size, in bytes, of the specified resource. The size of the destination buffer is provided to the function to ensure that it does not.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloader... This search path is used when LoadLibraryEx is called with no LOAD_LIBRARY_SEARCH flags. SizeofResource Retrieves the size, in bytes, of the specified.LoadResource function (libloaderapi.h) Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose executable ... Do not pass this handle to the GlobalLock or GlobalFree function. To obtain a pointer to the first.FindResourceW function (libloaderapi.h) Determines the location of a resource with the specified type and name in the specified module. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows He... Determines the.FindResourceA function (winbase.h) Determines the location of a resource with the specified type and name in the specified module. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h ....Resource Functions (Menus and Other Resources) In This Section BeginUpdateResource CopyImage EndUpdateResource EnumResLangProc EnumResNameProc EnumResourceLanguages EnumResourceLanguagesEx EnumResourceNames EnumResourceNamesEx EnumResourceTypes EnumResourceTypesEx EnumResTypeProc FindResource FindResourceEx FreeResource LoadImage LoadResource.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also BeginUpdateResource Conceptual EndUpdateResource LoadIcon LoadString.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also BeginUpdateResource Conceptual EndUpdateResource LoadIcon LoadString."
61,GetLocaleInfoA,"Microsoft Build · May 19 – 22, 2025GetLocaleInfoA function (winnls.h) Retrieves information about a locale specified by identifier. Note  For interoperability reasons, the application should prefer the GetLocaleInfoEx function to GetLocaleInfo because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that runs only....eStringEx EnumSystemLocalesA DEPRECATED EnumSystemLocalesEx EnumSystemLocalesW DEPRECATED EnumSystemLocalesEx FindNLSString DEPRECATED FindNLSStringEx GetCPInfo DEPRECATED Use Unicode GetCPInfoExA DEPRECATED Use Unicode GetCPInfoExW DEPRECATED Use Unicode GetCurrencyFormatA DEPRECATED GetCurrencyFormatEx GetCurrencyFormatW DEPRECATED.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`.You should use ANSI functions only if you have overriding reasons for not using Unicode, for example, confo... Many National Language Support (NLS) functions, such as GetLocaleInfo and GetCalendarInfo, have specific ANSI versions, in this case, GetLocaleInfoA and GetCalendarInfoA, respectively. When your application uses the ANSI version of a.(ANSI) GetGeoInfoEx Retrieves information about a geographic location that you specify by using a two-letter International Organization for Standardization (ISO) 3166-1 code or numeric United Nations (UN) Series M, Number 49 (M.49) code. (Unicode) GetLocaleInfoA Retrieves information about a locale specified by identifier. (ANSI) GetLocaleInfoEx.SYSGEOTYPE Defines the type of geographical location information requested in the GetGeoInfo or GetGeoInfoEx function. Close Terminates the IFELanguage object. GetGeoInfoW Retrieves information about a specified geograp... GetLocaleInfoA Retrieves information about a locale specified by identifier. (ANSI) GetLocaleInfoEx Retrieves information.QueryOptionalDelayLoadedAPI Introduced into api-ms-win-core-libraryloader-l2-1-0.dll in 10.0.10240. APIs from api-ms-win-core-localization-ansi-l1-1-0.dll API Requirements GetStringTypeExA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in 10.0.10240. EnumUILanguagesA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in."
62,SetCaretPos,"Microsoft Build · May 19 – 22, 2025SetCaretPos function (winuser.h) Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window. Syntax Parameters [in] X Type: int The new x-coordinate of the caret. [in] Y.VsTextViewClass.SetCaretPos(Int32, Int32) Method Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Sets the coordinates of the end point of a selection. Parameters iLine Int32 [in].IVsTextView.SetCaretPos(Int32, Int32) Method Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Sets the coordinates of the end point of a selection. Parameters iLine Int32 [in] Line.About Carets The system provides one caret per message queue. A window should create a caret only wh... The position, in client coordinates, is copied to a structure specified by a parameter in GetCaretPos. An application can move a caret in a window by using the SetCaretPos function. A window can move a caret only if it already owns the caret..Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels. SetCaretPos Moves the caret to the specified coordinates. If the window that owns the.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.SetCaretBlinkTime Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels. SetCaretPos Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are.Using Carets This section has code samples for the following tasks: Creating and Displaying a Caret Hiding a Caret Destroying a Caret Adjusting the Blink Time Processing Keyboard Input Creating and Displaying a Caret Upon receiving the keyboard focus, the window should create and display the caret. You can then call SetCaretPos to set the current.IVsThreadSafeTextView.ThreadSafeSetCaretPos(Int32, Int32) Method Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Sends coordinates to.SetCaretPos(Int32, Int32). Parameters iLine.CWnd::PaintWindowlessControls Draws windowless controls on the control container. CWnd::SetCapture Causes all subsequent mouse input to be sent to the CWnd. CWnd::SetCaretPos Moves the caret to a specified position. CWnd::SetClipboardViewer Adds CWnd to the chain of windows that are notified whenever the contents of the Clipboard are changed.."
63,ContinueDebugEvent,"Microsoft Build · May 19 – 22, 2025ContinueDebugEvent function (debugapi.h) Enables a debugger to continue a thread that previously reported a debugging event. Syntax Parameters [in] dwProcessId The process identifier of the process to continue. [in] dwThreadId The thread identifier of the thread to continue. ...ng and continues the thread exception is marked as.Debugger Exception Handling The system... At each notification attempt, the debugger uses the ContinueDebugEvent function to return control to the system. Using ContinueDebugEvent, the debugger can indicate that it has handled the exception, in which case the machine state is restored and thread execution is continued at the point at which the.debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. ContinueDebugEvent Enables a debugger to continue a thread that previously reported a.Debugging Functions The following functions are used with debugging. Function Description CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. ContinueDebugEvent Enables a debugger to continue a thread that previously reported a debugging event. DebugActiveProcess Enables a debugger to attach to an active process.Debugging Events A debugging event is an incident in the process being debugged that causes the system to notify the debugger. Debugging events include creating a process, creating a thread, loading a dynamic-link library (DLL), unloading a DLL, sending an output string, and g... When the system notifies the debugger of a debugging event, it also.Writing the Debugger's Main Loop The debugger uses the WaitForDebugEvent func... The debugger uses the ContinueDebugEvent function at the end of its main loop. This function allows the process being debugged to continue executing. The following example uses the WaitForDebugEvent and ContinueDebugEvent functions to illustrate how a simple debugger.Windows XP: Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Windows XP Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Christophe Nasarre Thi... When the debugger has handled an event, it calls ContinueDebugEvent to let the debuggee continue along its life. Note.IDkmGPUTempBreakStepper Interface Definition Namespace: Microsoft.VisualStudio.Debugger.ComponentInterfaces Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Interface implemented by GPU base debug monitors to enable temporary instruction breakpoints in stepping. The temporary.If the system previously reported an EXIT_PROCESS_DEBUG_EVENT debugging event, the system closes the handles to the process and thread when the debugger calls the ContinueDebugEvent function. If the system previously reported an EXIT_THREAD_DEBUG_EVENT debugging event, the system closes the handles to the thread when the debugger calls the.If the system previously reported an EXIT_PROCESS_DEBUG_EVENT debugging event, the system closes the handles to the process and thread when the debugger calls the ContinueDebugEvent function. If the system previously reported an EXIT_THREAD_DEBUG_EVENT debugging event, the system closes the handles to the thread when the debugger calls the."
64,GetDlgItem,"Microsoft Build · May 19 – 22, 2025To use GetDlgItem in Windows programming, you can retrieve a handle to a control in a specified dialog box. The function takes two parameters: the handle to the dialog box and the identifier of the control you want to access. Here’s a basic example of how to use it:In this example, hDialog is the handle to your dialog box, and IDC_CONTROL_ID is the identifier for the control you want to retrieve. Once you have the handle, you can manipulate the control as needed.For type-safe access in MFC (Microsoft Foundation Class), you can create an inline member function in your dialog class that casts the return type of GetDlgItem to the appropriate control type. For example:You can then use this member function to access the control in a type-safe manner.References:GetDlgItem function (winuser.h) Retrieves a handle to a control in the specified dialog box. Syntax Parameters [in, optional] hDlg Type: HWND A handle to the dialog box that contains the control. [in] nIDDlgItem Type: int The identifier of the control to be retrieved. Return value Type: HWND If the function succeeds, the return value is the window.GetDlgItemInt function (winuser.h) Translates the text of a specified control in a dialog box into an integer value. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box that contains the control of interest. [in] nIDDlgItem Type: int The identifier of the control whose text is to be translated. [out, optional] lpTranslated Type:.GetDlgCtrlID Retrieves the identifier of the specified control. GetDlgItem Retrieves a handle to a control in the specified dialog box. GetDlgItemInt Translates the text of a specified control in a dialog box into an integer value. (Unicode) DEVNAMES Contains strings that identify the driver, device, and ... DLGITEMTEMPLATE Defines the dimensions.GetDialogDpiChangeBehavior Returns the flags that might have been set on a given dialog by an ... GetDisplayAutoRotationPreferencesByProcessId Retrieves the screen auto-rotation preferences for the process indicated by the dwProcessId parameter. GetDlgCtrlID Retrieves the identifier of the specified control. GetDlgItem Retrieves a handle to a.Dialog Box Reference The API Reference Common Dialog Box Library Discusses using the common dialog boxes in the user interface for your applications. GetDlgCtrlID Retrieves the identifier of the specified control. GetDlgItem Retrieves a handle to a control in the specified dialog box. GetDlgItemInt Translates the text of a specified control in a.Type-Safe Access to Controls Without Code Wizards The first approach to creating type-safe access to controls uses an inline member function to cast the return type of class CWnd's GetDlgItem member function to the appropriate C++ control type, as in this example: You can then use this member function to access the control in a type-safe manner.COleControlContainer::GetDlgItem Retrieves the specified dialog control. COleControlContainer::GetDlgItemInt Retrieves the value of the specified dialog control. Commonly, this class is used in conjunction with COccManager and COleControlSite to implement a custom ActiveX control container, with custom sites for one or more ActiveX controls..CWindow::GetDlgControl Retrieves an interface on the spec... CWindow::GetDlgCtrlID Retrieves the window's identifier (for child windows only). CWindow::GetDlgHost Retrieves a pointer to an interface to the ATL Control hosting container. CWindow::GetDlgItem Retrieves the specified child window. CWindow::GetDlgItemInt Translates a control's text to.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a CWnd object. If a CWnd object isn't attached t... CWnd:. CWnd::GetDlgItem Retrieves the control with the specified ID from the specified dialog box..... LTEXT           &quot;Static&quot;,IDC_STATIC10,4,162,43,13,WS_BORDER,WS_EX_DLGMODALFRAME | WS_EX_CLIENTEDGE CONTROL         &quot;&quot;,IDC_SPIN2,&quot;msctls_updown32&quot;,UDS_SETBUDDYINT | UDS_AUTOBUDDY | UDS_ARROWKEYS,37,161,10,14 END| @Chang Chi Following is another example of using the spin control to set the text of a static control.."
65,WSAAccept,"Microsoft Build · May 19 – 22, 2025WSAAccept function (winsock2.h) The WSAAccept function conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the transfer of connection data. Syntax Parameters [in] s A descriptor that identifies a socket that is listening for connections after a call to.WSAAccept The WSAAccept function conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the transfer of connection data. WSACancelAsyncRequest The WSACancelAsyncRequest function (winsock2.h) cancels an incomplete asynchronous operation. WSACancelBlockingCall.LPWSPDUPLICATESOCKET The LPWSPDuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. WSAAccept The WSAAccept function conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the.Connection Setup and Teardown The WSAAccept function lets an application obtain caller information such as caller identifier and Quality of Service before deciding whether to accept an incoming connection request. User-to-user data specified by parameters in the WSAConnect function and the condition function of WSAAccept can be transferred to the.Accepting Connection Requests If an application calls th... If a connection request arrives from a remote peer on a SAN, the switch acts as an intermediary between the TCP/IP service provider and the SAN service provider in determining whether to accept the connection request and in completing the application's WSAAccept, accept, or AcceptEx.Transport Mapping Between API and SPI Functions The Winsock Transport SPI is similar ... This is illustrated in the following list. connect and WSAConnect both map to WSPConnect accept and WSAAccept map to WSPAccept socket and WSASocket map to WSPSocket Other API functions that are collapsed into the enhanced versions in SPI include: send sendto.TransmitFile T... TransmitPackets Transmits in-memory data or file data over a connected socket. WSAAccept Conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the transfer of connection data. WSAAddressToString Converts all components of a sockaddr.SO_CONDITIONAL_ACCEPT socket option The SO_CONDITIONAL_ACCEPT socket option is designed to allow an application to decide whether or not to accept an incoming connection on a listening socket. It waits for the application to indicate that it accepts the connection via the conditional accept callback registered with WSAAccept function. When the.The WSAJoinLeaf function has the ... The root application uses the usual accept or WSAAccept functions to admit the new leaf node. Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.Accepting a Connection (Windows Sockets 2) Once the socket is listening for a connection, the program must handle connection requests on that socket. If a connection request occurs, the application calls the accept, AcceptEx, or WSAAccept function and passes the work to another thread to handle the request. Examples of some of these various."
66,keybd_event,"Microsoft Build · May 19 – 22, 2025The keybd_event function is a Windows API function used to simulate keyboard input. It allows developers to send keystrokes to the system as if they were typed by the user. This function can be useful for automating tasks or for applications that need to simulate user input.The keybd_event function takes parameters that specify the virtual key code of the key to be simulated, the hardware scan code, flags that specify various options (such as whether the key is being pressed or released), and additional data. This function is part of the broader input simulation capabilities in Windows, which also include the SendInput function for more complex input scenarios.References:keybd_event function (winuser.h) Synthesizes a keystroke.The keyboard driver's interrupt handler calls the keybd_event function.To do this, call keybd_event with the bVk parameter set to VK_SNAPSHOT.Each structure represents an event to be inserted into the keyboard or mouse input stream.These events are not interspersed with other keyboard or mouse input events inserted either by the user (with the keyboard or mouse) or by calls to keybd_event, mouse_event, or other calls to SendInput.The system calls this function every time a new keyboard input event is about to be posted into a thread input queue.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybdUsed by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also GetAsyncKeyState GetKeyState GetKeyboardState GetSystemMetrics MapVirtualKey SetKeyboardState SendInput keybdAs far as I know in user32.dll there are 2 functions keybd_event &amp; mouse_event which can simulate keyboard &amp; mouse inputs..| In C++, VB, etc... you can use for example keybd_event In VB =&gt; I cannot post code in those bugged forums, so a link for the different parts : VB keybd_event| Visual studio has a built-in code for this type of similar case scenariosLearn about Blazor's event handling features, including event argument types, event callbacks, and managing default browser events.GetLastInputInfo Retrieves the time of the last input event.Function Description GetKBCodePage Retrieves the current code page. keybd_event Synthesizes a keystroke.The keyboard driver's interrupt handler calls the keybd_event function."
67,SetProcessShutdownParameters,"Microsoft Build · May 19 – 22, 2025SetProcessShutdownParameters function (processthreadsapi.h) Sets shutdown parameters for the currently calling process. This function sets a shutdown order for a process relative to the other processes in the system. Syntax Parameters [in] dwLevel The shutdown priority for a process relative to other processes in the system. The system shuts down.Processes and threads Provides information about a newly created process and its primary thread. You need these headers: processthreadsapi.h Enumerations MACHINE_ATTRIBUTES S... SetProcessPriorityBoost Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process..processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity proces... SetProcessPriorityBoost Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process..A process can use the SetProcessShutdownParameters function to prevent the system from displaying a dialog box to the user during logoff or shutdown. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include.When the system is terminating a process, it does not terminate any ... Terminating a process does not generate notifications for WH_CBT hook procedures. Use the SetProcessShutdownParameters function to specify certain aspects of the process termination at system shutdown, such as when a process should terminate relative to the other processes in.SetProcessRestrictionExemption Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. SetProcessShutdownParameters Sets shutdown parameters for the currently calling process. SetProcessWorkingSetSize Sets the minimum and maximum working set sizes for the specified.To set a shutdown priority for an application relative... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.To set the shutdown order of services manually, create a multistring registry value that contains the service names in the order in which they should be shut down and assign it to the Control key's PreshutdownOrder value, as follows: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\PreshutdownOrder=""Shutdown Order"" To set the shutdown order of....down paraRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header processthreadsapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also Process and Thread Functions Processes.Exampl... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Header WinUser.h (include Windows.h) See also Logging Off Shutting Down DefWindowProc ExitWindows SetProcessShutdownParameters WM_ENDSESSION. The WM\_QUERYENDSESSION message."
68,GlobalFree,"Microsoft Build · May 19 – 22, 2025GlobalFree function (winbase.h) Frees the specified global memory object and invalidates its handle. The GlobalFree function will free a locked memory object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows.Freeing WinSNMP Descriptors The WinSNMP programming environment assigns the deallocation of descriptor resources to the WinSNMP implementation or the WinSNMP application, depending on which component allocates the memory for the descriptor. To free the resources for an smiOID or an smiOCTETS descriptor, the following rules apply: For input... For.It is not safe to free memory allocated with GlobalAlloc using LocalFree. Examples The following code shows a simple use of GlobalAlloc and GlobalFree. ...ue Minimum supporte Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h).Performance DLL Samples The Windows SDK (WSDK) contains three complete sample performance DLLs. You can download the WSDK from the Microsoft Windows Software Development Kit (SDK) (search for Windows SDK and select the download for the latest released operating system). The samples contained in this directory are: AppMem—Provides counterparts of.Figure 1** EatMem Stressor in Action ** Overall Program Structure The overall structure of the EatMem stressor tool, written in C#, is presented in Figure 2. In particular I call the GlobalAlloc and GlobalFree functions to allocate and free memory, and the GlobalMemoryStatus function to determine how much memory to allocate. ...em Program Struc.Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compatibility with 16-bit Windows. For example, some Windows functions allocate memory that must be freed with LocalFree, and the global functions are still used with Dynamic Data Exchange (DDE), the clipboard.CreateProfileFromLogColorSpaceW function (icm.h) Converts a logical color space to a device profile. The GlobalFree function should be used to free this buffer. does not support Windows Color System (WCS) profiles CAMP, DMP, and GMMPRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.CreateProfileFromLogColorSpaceA function (icm.h) Converts a logical color space to a device profile. The GlobalFree function should be used to free this buffer. does not support Windows Color System (WCS) profiles CAMP, DMP, and GMMPRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.CreateDeviceLinkProfile function (icm.h) Creates an International Color Consortium (ICC) device link profile from a set of color profiles, using the specified intents. The GlobalFree function should be used to free the buffer. ...r icm.h Library Mscms.lib DLL Mscms.dll See also Basic color management concepts F GlobalFreeCreates an International.CMCreateDeviceLinkProfile function (icm.h) Creates a device link profile in the format specified by the International Color Consortium in its ICC Profile Format Specification. Use the GlobalFree function to free this buffer. Use the GlobalFree function to free the buffer. Requirements Requ... Creates a [device link profile](/windows/win32/wcs/d)."
69,GetFocus,"Microsoft Build · May 19 – 22, 2025IOleInPlaceSiteWindowless.GetFocus Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Called by an in-place active, windowless object to determine if it still has the keyboard focus or not..Set this property by checking the GetFocus checkbox which is located at: 1) Admin Console-&amp;gt;Hosted Applications-&amp;gt;[someapplication] 2) Properties menu-&amp;gt;Actions tab 3) Edit Initialization String-&amp;gt;Action-&amp;gt;Build button 4) ""Focus the application after action is completed."". ...cations-&amp;amp;gt;[someapplication] 2).GetFocus function (winuser.h) Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue. Syntax Return value Type: HWND The return value is the handle to the window with the keyboard focus. Requirements Requirement Value Minimum supported client Windows 2000 Professional.ITfThreadMgr::GetFocus method (msctf.h) Returns the document manager that has the input focus. Syntax Parameters [out] ppdimFocus Pointer to a ITfDocumentMgr interface that receives the document manager with the current input focus. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.ITfThreadMgr2::GetFocus method (msctf.h) Returns the document manager that has the input focus. Syntax Parameters [out] ppdimFocus Pointer to a ITfDocumentMgr interface that receives the document manager with the current input focus. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps | UWP apps] Minimum supported.IOleInPlaceSiteWindowless::GetFocus method (ocidl.h) Called by an in-place active, windowless object to determine whether it still has the keyboard focus. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Pla... Called by an.IRawElementProviderFragmentRoot::GetFocus method (uiautomationcore.h) Retrieves the element in this fragment that has the input focus. Syntax Parameters [out, retval] pRetVal Type: IRawElementProviderFragment** Receives a pointer to the IRawElementProviderFragment interface of the element in this fragment that has the input focus, if any;.IRawElementProviderFragmentRoot.GetFocus Method Definition Namespace: System.Windows.Automation.Provider Assembly:UIAutomationProvider.dll Retrieves the element in this fragment that has the input focus. Returns IRawElementProviderFragment The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference.ShapeAccessibleObject.GetFocused Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Returns AccessibleObject Applies to. Learn more about the.IAccClientDocMgr::GetFocused method (msaatext.h) Clients call the IAccClientDocMgr::GetFocused method to access a pointer for the document that has focus. Note  Active Accessibility Text Services i... Please see Microsoft Windows Text Services Framework for more information on advanced text input and natural language technologies. Clients call the."
70,ReadConsoleInputW,"Microsoft Build · May 19 – 22, 2025ReadConsoleInput function Reads data from a console input buffer and removes it from the buffer. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and.If the desire is to remove all ambiguity, then ReadConsoleInput is the only option. This function deals with INPUT_RECORD structures, meaning that it will give key states. Finally, if ReadConsoleInputW is used, the function will return UTF-16 encoded values regardless of the console codepage. Using only works in part, as some keyboards combine.Classic Console APIs versus Virtual Terminal Sequences Our recommendation is to replace the classic Windows Console API with virtual terminal sequences. Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. The workaround is to use the.It is important to note that the default &quot;cooked&quot; modes on input do not fully support UTF-8 yet, so the workaround is to use the algorithmically-translatable UTF-16 for reading input through ReadConsoleW or ReadConsoleInputW until the outstanding issues are resolved. As for how enterprises solve this issue, they may have their own.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
71,EnumDesktopsW,"Microsoft Build · May 19 – 22, 2025EnumDesktopsW function (winuser.h) Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function. Syntax Parameters [in, optional] hwinsta A handle to the window station whose desktops are to be enumerated. This handle.Window Stations and Desktops Overview of the Window Stations and Desktops technology. (Unicode) EnumDesktopsA Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callbac... (ANSI) EnumDesktopsW Enumerates all desktops.(ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. (Unicode) CreateDesktopW Creates a new desktop, associates it with the current window station of the calling pr... (ANSI) EnumDesktopsW Enumerates all desktops associated."
72,EmptyClipboard,"Microsoft Build · May 19 – 22, 2025EmptyClipboard function (winuser.h) Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open. Syntax Return value Type: BOOL If the function succeeds, the return value is nonzero. Remarks Before calling EmptyClipboard, an application.In general, the clipboard owner is the window... The EmptyClipboard function assigns clipboard ownership. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.In most cases, the application should not call the EmptyClipboard function before calling SetClipboardData, since doing so will erase the clipboard formats that the application has already rendered. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.Clipboard Operations A window sh... Cut and Copy Operations Paste Operations Clipboard Ownership Delayed Rendering Memory and the Clipboard Cut and Copy Operations To place information on the clipboard, a window first clears any previous clipboard content by using the EmptyClipboard function. This function sends the WM_DESTROYCLIPBOARD message to.WM_DESTROYCLIPBOARD message Sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. Parameters wParam This parameter is not used and must be zero. lParam This parameter is not used and must be zero. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.The window identified by the hWndNewOwner parameter does not become the clipboard owner unless the EmptyClipboard function is called. If an application calls OpenClipboard with hwnd set to NULL, EmptyClipboard sets the clipboard owner to NULL; this causes SetClipboardData to fail. Requirements Requirement Value Minimum supported client.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. EmptyClipboard Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.OleSetClipboard function (ole2.h) Places a pointer to a specific data object onto the clipboard. This makes the data object accessible to the OleGetClipboard function. Return code Description CLIPBRD_E_CANT_OPEN The OpenClipboard function used within OleSetClipboard failed. CLIPBRD_E_CANT_EMPTY The EmptyClipboard function used within.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data E... If the atom's reference count is reduced to zero, DeleteAtom removes the string associated with the atom from the local atom table. EmptyClipboard Empties the."
73,GetEnvironmentVariableA,"Microsoft Build · May 19 – 22, 2025GetEnvironmentVariableA function (processenv.h) Retrieves the contents of the specified variable from the environment block of the calling process. Syntax Parameters [in, optional] lpName The name of the environment variable. [out, optional] lpBuffer A pointer to a buffer that receives the contents of the specified environment variable as a.GetEnvironmentVariable function (winbase.h) Retrieves the contents of the specified variable from the environment block of the calling process. Syntax Parameters [in, optional] lpName The name of the environment variable. [out, optional] lpBuffer A pointer to a buffer that receives the contents of the specified environment variable as a.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the ... (GetEnvironmentVariableA) GetEnvironmentVariableW.GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. GetHGlobalFromILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-datetime-l1-1-1.dll API Requirements GetDateFormatEx Introduced into."
74,AnimatePalette,"Microsoft Build · May 19 – 22, 2025AnimatePalette function (wingdi.h) The AnimatePalette function replaces entries in the specified logical palette. Syntax Parameters [in] hPal A handle to the logical palette. [in] iStartIndex The first logical palette entry to be replaced. [in] cEntries The number of entries to be replaced. [in] ppe A pointer to the first member in an array of.Palette Animation... An application can carry out palette animation by creating a logical palette that contains ""reserved"" entries and then using the AnimatePalette function to change colors in those reserved entries. An application creates a reserved entry in a logical palette by setting the peFlags member of the PALETTEENTRY structure to the.Color Functions The following functions are used with color. Function Description AnimatePalette Replaces entries in the specified logical palette. CreateHalftonePalette Creates a halftone palette for the specified device context (DC). CreatePalette Creates a ... UpdateColors Updates the client area of the specified device context by remapping the.AngleArc The AngleArc function draws a line segment and an arc. AnimatePalette The AnimatePalette function replaces entries in the specified logical palette. Arc The Arc function draws an elliptical arc. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for... DrawAnimatedRects Animates the.The font can subsequently be used for text output by ... (Unicode) AlphaBlend The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels. AngleArc The AngleArc function draws a line segment and an arc. AnimatePalette The AnimatePalette function replaces entries in the specified logical palette. Arc The Arc function.Public Methods Name Description CPalette::AnimatePalette Replaces entries in the logical palette identified by the CPalette object. Inheritance Hierarchy CObject CGdiObject CPalette Requirements... Parameters nStartIndex Specifies the first entry in the palette to be animated. nNumEntries Specifies the number of entries in the palette to be.2.3.5.1 META_ANIMATEPALETTE Record The META_ANIMATEPALETTE Record redefines entries in the logical palette that is defined in the playback device context with the specified Palette Object (section 2.2.1.3). 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Palette (variable). Palette (variable): A.3.1.5 Playback Device Context The playback device context is an abstract data structure that defines the state of graphics at any point in time during p... Palette Object (section 2.2.1.3) META_ANIMATEPALETTE Record (section 2.3.5.1) META_CREATEPALETTE Record (section 2.3.4.3) META_RESIZEPALETTE Record (section 2.3.5.9) META_SETPALENTRIES Record....cord META_OFFSETCLIPRGN packet META_OFFSETCLIPRGN Record META_OFFSETVIEWPORTORG packet META_OFFSETVIEWPORTORG Record META_OFFSETWINDOWORG packet META_OFFSETWINDOWORG Record META_PAINTREGION packet META_PAINTREGION Record META_PATBLT packet META_PATBLT Record META_PIE packet META_PIE Record META_PLACEABLE packet META_PLACEABLE Record.2.2.1.3 Palette Object The Palette Object specifies the colors in a logical palette. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6... Start (2 bytes): A 16-bit unsigned integer that defines the offset into the Palette Object when used with the META_SETPALENTRIES and META_ANIMATEPALETTE record types. The Palette Object specifies the."
75,GetClassLongW,"Microsoft Build · May 19 – 22, 2025GetClassLongW function (winuser.h) Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. Note  If you are retrieving a pointer or a handle, this function has been superseded by the GetClassLongPtr function. Requirements Requirement Value Minimum supported client Windows 2000 Professional.(Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window.(GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified offset into the extra class."
76,OpenProcess,"Microsoft Build · May 19 – 22, 2025The OpenProcess function is used in Windows programming to obtain a handle to a specified process. This function allows a program to gain access to the process's resources and manipulate it, depending on the access rights specified. The handle returned by OpenProcess can be used with other functions that require a process handle, such as TerminateProcess or GetExitCodeProcess.To use OpenProcess, you typically need to specify the desired access level and the process ID of the target process. If successful, it returns a handle that can be used for further operations on the process.References:OpenProcess function (processthreadsapi.h) Opens an existing local process object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003,.Process Functions for Debugging The CreateProcess function enables a debugger to start a process and debug it. The OpenProcess function enables a debugger to obtain the identifier of an existing process. (The DebugActiveProcess function uses this identifier to attach the debugger t... Typically, debuggers open a process with the PROCESS_VM_READ.InitializeProcThreadAttributeList Initializes the specified list of attributes ... IsProcessCritical Determines whether the specified process is considered critical. IsProcessorFeaturePresent Determines whether the specified processor feature is supported by the current computer. OpenProcess Opens an existing local process object. OpenProcessToken.OpenProcess Opens an existing local process object. IsWow64Process2 Determines whether the specified process is running under WOW64; also returns additional machine process and architecture information. Function Description AssignProcessToJobObject Associates a proce... CreateJobObject Creates or opens a job object. IsProcessInJob Determines.Process Information The system maintains a list of running processes. You can retrieve t... Many functions in PSAPI require a process handle. To obtain a process handle for a running process, pass its process identifier (obtained from EnumProcesses) to the OpenProcess function. Remember to call the CloseHandle function when you are finished with.A process can use t... If you have a process identifier, you can get the process handle by calling the OpenProcess function. OpenProcess enables you to specify the handle's access rights and whether it can be inherited. A process can use the GetCurrentProcess function to retrieve a pseudo handle to its own process object. When a new process is.GetCurrentProcess function (processthreadsapi.h) Retrieves a pseudo handle for the current process. A process can also use the OpenProcess function to open a real handle to itself. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps].Process Enumeration All users have read access to the list of processes in the system and there are a number of different functions that enumerate the active processes. You can also filter processes by user account, regardless of the enumeration function, by calling OpenProcess, OpenProcessToken, and GetTokenInformation with TokenUser. However,.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib.CreateProcessWithTokenW function (winbase.h) Creates a new process and its primary thread. To retrieve a security token, pass the process handle in the PROCESS_INFORMATION structure to the OpenProcessToken function. The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the."
77,SetConsoleCursorPosition,"Microsoft Build · May 19 – 22, 2025To use the SetConsoleCursorPosition function in a program, you need to follow these steps:Here is a simple example in C:This program moves the cursor to the specified position in the console window and prints a message.References:SetConsoleCursorPosition function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-p... Sets the cursor position in the specified console screen buffer. See reference information.The SetConsoleCursorPosition function sets the current cursor position. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI names WriteConsoleW.Console Functions The following functions are used to access a console. Function Descripti... SetConsoleCtrlHandler Adds or removes an application-defined HandlerRoutine from the list of handler functions for the calling process. SetConsoleCursorInfo Sets the size and visibility of the cursor for the specified console screen buffer..Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. Characters written by the high-level console I/O functions are written at the current cursor location, advancing the cursor to the next location. You can use SetConsoleCursorPosition to set the cursor position and, thereby,.Scrolling the Screen Buffer Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. When usin... When the SetConsoleCursorPosition function specifies a new cursor position that is outside the boundaries of the current window rectangle, the window rectangle shifts automatically to display.Console Virtual Terminal Sequences Virtual terminal sequences are control character sequences that can control cursor movement, console color, and other operations when written to the output stream. Output Sequences The following terminal sequences are intercepted by the console host when written into the output stream, if the.Further detail about the position of the cursor can be found through virtual terminals sequences, specifically in the query state category for finding the current position and the cursor positioning category for setting the current position. Alternatively, an application can use the GetConsoleScreenBufferInfo function to determine the current.SetConsoleCursorInfo function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h).Hi, Let's say I have text strings as shown. ... The boxes can be controls in an application example mfc, chrome. I tried using SetConsoleCursorPosition but the result always returns 0, is that the right approach. Thanks you.| It can be done with IUIAutomation and MoveEndpointByUnit Test with Edit control of Notepad, position 10. I tried using....m.jpg Code: problem.txt http://infinityhost.cba.pl/problem.txt http://infinityhost.cba.pl/problem.jpg The code is: include &lt;stdio.h&gt; include &lt;string.h&gt; include &lt;conio.h&gt; include &lt;windows.h&gt; include &lt;iostream&gt; using namespace std; char tab[10][30]; // an array of names HANDLE console =."
78,_hread,"Microsoft Build · May 19 – 22, 2025.- symbol list [module] - Shows the currently loaded symbols for either all modules or the specified module. t[hread] [newThread] [-nick nickname] The thread command with no parameters displays all managed threads in the current process."
79,SetConsoleTextAttribute,"Microsoft Build · May 19 – 22, 2025The SetConsoleTextAttribute function is used to set the attributes of characters written to the console screen buffer. This function affects text written after the function call. Here’s how to use it:If the function succeeds, it returns a nonzero value. If it fails, it returns zero. To get extended error information, you can call GetLastError.To determine the current color attributes of a screen buffer, you can use the GetConsoleScreenBufferInfo function. It is recommended to use virtual terminal sequences for new and ongoing development instead of this API.References:SetConsoleTextAttribute function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will ... Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios. Sets.Using the High-Level Input and Output Functions Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios. Then the i... The SetConsoleTextAttribute function is used to.The SetConsoleTextAttribute function changes these colors. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI names WriteConsoleW (Unicode).SetConsoleScreenBufferInfoEx Sets extended information about the specified console screen buffer. SetConsoleScreenBufferSize Changes the size of the specified console screen buffer. SetConsoleTextAttribute Sets the foreground (text) and background color attributes of characters written to the console screen buffer. SetConsoleTitle Sets the title.Function Description GetConsoleScreenBufferInfo Retrieves the window size, screen buffer si... SetConsoleWindowInfo Changes the size of the console window. SetConsoleScreenBufferSize Changes the size of the console screen buffer. SetConsoleTextAttribute Sets the color attributes. SetConsoleTitle Sets the console window title. GetConsoleTitle.Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. The current text attributes of each screen buffer are used for characters subsequently written ... An application can use GetConsoleScreenBufferInfo to determine the current text attributes of a screen buffer and the.James McCaffrey Code download available at:TestRun05.exe(116... The trick to printing console text in color in a Microsoft® .NET Framework 1.1 environment is to use the Win32 functions GetStdHndle and SetConsoleTextAttribute. You declare them like this: To set a text color, you first call GetStdHandle, which will return a handle to Standard.FillConsoleOutputAttribute function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via ... Sets the character.Compiler is dev c++ 6.3 and OS is windows10 There is one problem with displaying a character that has code number 219. At the begining it works fine, but after using &quot;SetConsoleTextAttribute(console, 0x07);&quot; (I assume) it starts to show this blue lines. Output: problem.jpg Code: problem.txt http://infinityhost.cba.pl/problem.txt....e line/display 1 erases from the beginning of the line/display up to and including the current cursor position 2 erases the entire line/display Sequence Code Description Behavior ESC [ J ED Erase in Display Replace all text in the current viewport/screen specified by with space characters ESC [ K EL Erase in Line Replace all text on the line."
80,RealizePalette,"Microsoft Build · May 19 – 22, 2025RealizePalette function (wingdi.h) The RealizePalette function maps palette entries from the current logical palette to the system palette. Remarks An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying the RASTERCAPS constant. The RealizePalette function modifies the palette.Using MCIWnd Palettes [The feature associated with this page, MCIWnd Window Class, is a legacy f... Realize the palette associated with an MCIWnd window to the system palette by using the MCIWndRealize macro. This macro calls the RealizePalette function with the palette associated with the MCIWnd window. If your application message handlers for.Palette Messages Changes to the system palette for the display device can have dramatic and sometimes undesirable effects on the colors used in windows on the desktop. This message gives an application the opportunity to select and realize its logical palette so that it receives the best possible mapping of colors for its logical palette. When the.CreatePalette function (wingdi.h) The CreatePalette function creates a logical palette. A palette selected into a device context can be realized by calling the RealizePalette function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.The next time the application calls the RealizePalette function for the specified palette, the system completely remaps the logical palette to the system palette. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Logical Palette A logical palette is a color ... To use colors in the logical palette, the application selects the palette into a device context by using the SelectPalette function and then realizes the palette by using the RealizePalette function. The application must use the UnrealizeObject and RealizePalette functions to update the colors. In.IVsSwatchClient.RealizePalette(IntPtr, IntPtr) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 This interface is deprecated as of Visual Studio 2010. Parameters hdc phpalOld [Out] A.SelectPalette function (wingdi.h) The SelectPalette function selects the specified logical palette into a device context. If this value is TRUE, the RealizePalette function causes the logical palette to be mapped to the colors already in the physical palette in the best possible way. If this value is FALSE, RealizePalette causes the logical.To determine if all monitors have the same col... If the primary monitor is palettized, SelectPalette and RealizePalette work the same as before, but across all monitors. In addition, the palettes of all palettized devices are synchronized. If the primary monitor is not palettized, SelectPalette and RealizePalette will select the palette into the.MCIWNDM_REALIZE message The MCIWNDM_REALIZE message realizes the palette currently used by the MCI device in an MCIWnd window. Remarks MCIWNDM_REALIZE uses the palette of the MCI device and calls the RealizePalette function. ... RealizePaletteIf the body of one of these message handlers contains only RealizePalette, forward the message to the."
81,CreateRoundRectRgn,"Microsoft Build · May 19 – 22, 2025CreateRoundRectRgn function (wingdi.h) The CreateRoundRectRgn function creates a rectangular region with rounded corners. Syntax Parameters [in] x1 Specifies the x-coordinate of the upper-left corner of the region in device units. [in] y1 Specifies the y-coordinate of the upper-left corner of the region in device units. [in] x2 Specifies the.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. ... CreateRectRgn Creates a rectangular region. CreateRectRgnIndirect Creates a rectangular region. CreateRoundRectRgn Creates a rectangular region with rounded corners..Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region.When it has finished using a region created by CreateRectRgnIndirect, an application should use the CGDIObject::DeleteObject member function to remove the region. Example CRgn::CreateRoundRectRgn Creates a rectangular region with rounded corners that is stored in the CRgn object. When an application has finished using a region created with the.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.Changes in the Programming Model The following sections describe several ways that programming with Windows GDI+ is different from programming with Windows Graphics Device Interface (GDI). Constructing Regions GDI provides several functions for creating regions: CreateRectRgn, CreateEllpticRgn, CreateRoundRectRgn, CreatePolygonRgn, and.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. CreateRoundRectRgn The.GetRegionData function (wingdi.h) The GetRegionData function fills the specified buffer... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll.CreateRectRgnIndirect function (wingdi.h) The CreateRectRgnIndirect function creates a rectangular region. ...indows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also CreatePolyPolygonRgn.CDC::RectVisible Determines whether any part of the given rectangle lies w... CDC::RestoreDC Restores the device context to a previous state saved with SaveDC. CDC::RoundRect Draws a rectangle with rounded corners using the current pen and filled using the current brush. CDC::SaveDC Saves the current state of the device context.."
82,gethostbyaddr,"Microsoft Build · May 19 – 22, 2025gethostbyaddr function (winsock.h) [gethostbyaddr is no longer recommended for use as of Windows Sockets 2. The gethostbyaddr function retrieves the host information corresponding to a network address. Syntax Parameters addr TBD len TBD type TBD Return value If no error occurs, gethostbyaddr returns a pointer to the hostent structure..gethostbyaddr function (winsock2.h) [gethostbyaddr is no longer recommended for use as of Windows Sockets 2. The gethostbyaddr function retrieves the host information corresponding to a network address. Example Code The following example demonstrates the use of... Windows Phone 8: This function is supported for Windows Phone Store apps on.gethostbyaddr Function in the SPI The WSALookupServiceBegin query uses SVCID_INET_HOSTNAMEBYADDR as the service class GUID. The host address is supplied in lpszServiceInstanceName as a dotted-decimal IPv4 address string (for example, 192.9.200.120). The Ws2_32.dll specifies LUP_RETURN_BLOB and the NSP places a HOSTENT structure in the blob (using.gethostbyaddr Function in the API The gethostbyaddr function uses the WSALookupServiceBegin function to query SVCID_INET_HOSTNAMEBYADDR as the service class GUID. The host address is supplied as a dotted decimnal IPv4 string (for example, ""192.9.200.120"") in the lpszServiceInstanceName member of the WSAQUERYSET ... The gethostbyaddr function uses.HOSTENT structure (winsock2.h) The hostent structure is used by functions to store information about a given host, such as host name, IPv4 address, and so forth. Remarks The gethostbyaddr and gethostbyname functions returns a pointer to a hostent structure—a structure allocated by Windows Sockets. The hostent ... The HOSTENT structure (winsock2.h).gethostbyaddr macro (wsipv6ok.h) [gethostbyaddr is no longer recommended for use as of Windows Sockets 2. The gethostbyaddr function retrieves the host information corresponding to a network address. Syntax Parameters [in] a A pointer to an address in network b... Windows Phone 8: This function is supported for Windows Phone Store apps on.HOSTENT structure (winsock.h) The hostent structure is used by functions to store information about a given host, such as host name, IPv4 address, and so forth. Remarks The gethostbyaddr and gethostbyname functions returns a pointer to a hostent structure—a structure allocated by Windows Sockets. The hostent stru... The HOSTENT (winsock.h).For more information, see: Windows Sockets 2 wsipv6ok.h contains the following programming interfaces: Functions gethostbyaddr The gethostbyaddr macro function (wsipv6ok.h) retrieves the host information corresponding to a network address. gethostbyname The gethostbyname macro function (wsipv6ok.h) retrieves host information corresponding to a.WSAAsyncGetHostByAddr macro (wsipv6ok.h) The WSAAsyncGetHostByAddr function asynchronously retrieves host information that corresponds to an address. Note  The WSAAsyncGetHostByAddr function is not designed to provide parallel resolution of several addresses. Developers creating Windows Sockets 2 applications are urged to use the getnameinfo.... As of Windows Sockets 2, the gethostbyaddr function (winsock no longer recommended for use. gethostbyaddr The gethostbyaddr macro function (wsipv6ok.h) retrieves the host information corresponding to a network address. gethostbyname The gethostbyname function (winsock2.h) function retrieves host information corresponding to a host name from a."
83,GetPrivateProfileSectionW,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileSectionW function (winbase.h) Retrieves all the keys and values for the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit applications written for Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of.(GetPrivateProfileIntA) GetPrivateProfileIntW The GetP... GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file..To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplaunch...."
84,GetFileTime,"Microsoft Build · May 19 – 22, 2025The GetFileTime function is used to retrieve the creation, last access, and last write times for a specified file. It copies these time values into individual FILETIME structures. This function is particularly useful for applications that need to access or display file timestamps.To use the GetFileTime function, you typically follow these steps:It's important to note that the last write time is not fully updated until all handles used for writing to the file are closed.References:GetFileTime function (fileapi.h) Retrieves the date and time that a file or directory was created, last accessed, and last modified. Syntax Parameters [in] hFile A handle to the file or directory for which dates and times are to be retrieved. The handle must have been created using the CreateFile function with the GENERIC_READ access right. For.When you use the GetFileTime function to retrieve the file times for files that were created by MS-DOS, GetFileTime automatically converts MS-DOS dates and times to UTC-based times. If you encounter an MS-DOS date and time that has not been converted, you can convert it to a UTC-based time by using the DosDateTimeToFi... MS-DOS date and MS-DOS.Retrieving the Last-Write Time The following example uses the GetFileTime function to retrieve the last-write time for a file. It converts the time to local time based on the current time-zone settings, and creates a date and time string that can be shown to the user. The following example uses the GetFile... It converts the time to local time.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that ha... To retrieve the file times for a specified file, use the GetFileTime function. GetFileTime copies the creation, last access, and.SWbemDateTime.GetFileTime method The GetFileTime method of the SWbemDateTime object converts a date and time value in the CIM DATETIME format to the FILETIME format. If the par... Otherwise, the return value is a Coordinated Universal Time (UTC) time. A FILETIME DATETIME structure is a 64-bit value that represents the number of 100-nanosecond.Setting and Getting the Timestamp of a File Applications can retrieve and set the date and time a file is created, last modified, or last accessed by using the GetFileTime and SetFileTime functions. The NTFS file system delays update to the last access time for a file by up to one ... Applications can retrieve and set the date and time a file is.IShellItem2::GetFileTime method (shobjidl_core.h) Gets the date and time value of a specified property key. Syntax Parameters [in] key Type: REFPROPERTYKEY A reference to a PROPERTYKEY structure. [out] pft Type: FILETIME* A pointer to a date and time value. Return value Type: HRESULT If this method succeeds, it returns S_OK. Requirements.WBEMTime::GetFILETIME method (wbemtime.h) [The WBEMTime class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The GetFILETIME method gets the time as an MFC FILETIME structure. The FILETIME.GetFontFile Obtains the font file representing a font face. GetFontFile Retrieves the font file of the resource. GetLastWriteTime Obtains the last modified time of the file. GetLastWriteTimeFromKey Obtains the last write time of the file from the font file reference key. (IDWriteStringList.GetLocaleNameLength) GetLocalFileSize Get the local size.IDWriteFontFaceReference::GetFileTime method (dwrite_3.h) Get the last modified date. Syntax Parameters [out] lastWriteTime Type: FILETIME* Returns the last modified date. Requirements Requirement Value Minimum supported client Windows 10 [desktop apps only] Minimum supported server Windows Server 2016 [desktop apps only] Target Platform Windows."
85,DrawFocusRect,"Microsoft Build · May 19 – 22, 2025DrawFocusRect function (winuser.h) The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus. ...tes of the rBecause DrawFocusRect is an XOR function, calling it a second time with the same rectangle removes the rectangle from the screen. To scroll an area containing a rectangle drawn by this.FormCheckBoxControl.drawFocusRect Method Definition Namespace: Dynamics.AX.Application Assembly: Overloads drawFocusRect() drawFocusRect(Boolean) drawFocusRect() Returns Boolean Applies to drawFocusRect(Boolean) Parameters _value Boolean Returns Boolean Applies to. Learn more about the Dynamics.AX.Application.FormCheckBoxControl.drawFocusRect in.FormBuildCheckBoxControl.drawFocusRect Method Definition Namespace: Dynamics.AX.Application Assembly: Overloads drawFocusRect() drawFocusRect(Boolean) drawFocusRect() Returns Boolean Applies to drawFocusRect(Boolean) Parameters _value Boolean Returns Boolean Applies to. Learn more about the.CDC::Draw3dRect Draws a... CDC::DrawDragRect Erases and redraws a rectangle as it's dragged. CDC::DrawEdge Draws the edges of a rectangle. CDC::DrawEscape Accesses drawing capabilities of a video display that aren't directly available through the graphics device interface (GDI). CDC::DrawFocusRect Draws a rectangle in the style used to indicate.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback... DrawEdge The DrawEdge function draws one or more edges of rectangle. DrawFocusRect The DrawFocusRect function draws a rectangle in the.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. DrawEdge Draws one or more edges of rectangle. DrawFocusRect Draws a rectangle in the style that indicates the rectangle has the focus. DrawFrameControl Draws a frame control. WindowFromDC.DrawEscape The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI). DrawFocusRect The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus. DrawFrameControl The DrawFrameControl function draws.Especially since Windows has a handy function called (oddly enough) DrawFocusRect, which has the nifty characteristic of using an XOR raster op, so calling it twice erases the rectangle. It's an impostor I wrote, a protected CStaticLink member function that does... Figure 2 DrawFocusRect.cpp The real ::DrawFocusRect (or its MFC equivalent,....er(FormControl, FormDrag, Int32, Int32) Raises the dragOver event to indicate that a mouse drag operation is over the current control. dragOverEx(Array, FormDrag, Int32, Int32) Raises the dragOverEx event to indicate that a mouse drag operation is over the current control. dragText() Retrieves the text that is displayed when the form control is.SPI_GETFOCUSBORDERHEIGHT 0x2010 Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect. ...f the focus rectangle dr DrawFocusRectSPI_SETFOCUSBORDERHEIGHT 0x2011 Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter.."
86,GetVersion,"Microsoft Build · May 19 – 22, 2025GetVersion function (sysinfoapi.h) GetVersion may be altered or unavailable for releases after Windows 8.1. Instead, use the Version Helper functions. For Windows 10 apps, please see Targeting your applications for Windows. With the release of Windows 8.1, the behavior of the GetVersion API has changed in the value it will return for the operating.ISetupProductReference.GetVersion Method Definition Namespace: Microsoft.VisualStudio.Setup.Configuration Assembly:Microsoft.VisualStudio.Setup.Configuration.Interop.dll Package:Microsoft.VisualStudio.Setup.Configuration.Interop v3.13.2069 Gets the version of the package. Returns String The version of the package. Implements GetVersion() Applies.4.1.1 GetVersions A protocol client calls method GetVersions to find out if the server supports a protocol version that the client is using. If the server does not support the client’s protocol version, the client can upgrade its protocol version to one supported by the server before continuing. SharePoint currently supports version 1.1 of the.ISetupFailedPackageReference.GetVersion Method Definition Namespace: Microsoft.VisualStudio.Setup.Configuration Assembly:Microsoft.VisualStudio.Setup.Configuration.Interop.dll Package:Microsoft.VisualStudio.Setup.Configuration.Interop v3.13.2069 Gets the version of the package. Returns String The version of the package. Implements GetVersion().3.1.4.10.1 GetVersion (Opnum 13) The GetVersion method retrieves the version of the server implementation of the protocol. [id(7), helpstring(""method GetVersion"")] HRESULT GetVersion( [out] int* pnVersion ); pnVersion: If the function returns a success HRESULT, it MUST contain one of the following: Value Meaning 0x00000001 The server does not.ICIINFO::GetVersion Method The ICIINFO::GetVersion method, in Configuration Manager, gets the version of the configuration item. Syntax Parameters ppszVersion Data type: LPWSTR Qualifiers: [out] Pointer to the version of the configuration item. Return Values An HRESULT code. Possible values include, but are not limited to, the following: S_OK The.ISetupFailedPackageReference2.GetVersion Method Definition Namespace: Microsoft.VisualStudio.Setup.Configuration Assembly:Microsoft.VisualStudio.Setup.Configuration.Interop.dll Package:Microsoft.VisualStudio.Setup.Configuration.Interop v3.13.2069 Gets the version of the package. Returns String The version of the package. Implements GetVersion().ISetupFailedPackageReference3.GetVersion Method Definition Namespace: Microsoft.VisualStudio.Setup.Configuration Assembly:Microsoft.VisualStudio.Setup.Configuration.Interop.dll Package:Microsoft.VisualStudio.Setup.Configuration.Interop v3.13.2069 Gets the version of the package. Returns String The version of the package. Implements GetVersion().IDebugHostModule2::GetVersion method (dbgmodel.h) The GetVersion method returns version information about the module (assuming that such information can successfully be read out of the headers). If a given version is requested (via a non-nullptr output pointer) and it cannot be read, an appropriate error code will be returned from the method call..IDebugHostModule3::GetVersion method (dbgmodel.h) The GetVersion method returns version information about the module (assuming that such information can successfully be read out of the headers). If a given version is requested (via a non-nullptr output pointer) and it cannot be read, an appropriate error code will be returned from the method call.."
87,SleepEx,"Microsoft Build · May 19 – 22, 2025SleepEx function (synchapi.h) Suspends the current thread until the specified condition is met. Be careful when using SleepEx in the following scenarios: Code that directly or indirectly creates windows (for example, DDE and COM CoInitialize). Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.Sleep function (synchapi.h) Suspends the execution of the current thread until the time-out interval elapses. To enter an alertable wait state, use the SleepEx function. Syntax Parameters [in] dwMilliseconds The time interval for which execution is to be suspended, in milliseconds. A value of zero causes the thread to relinquish the remainder of.It accomplishes this by calling the SleepEx function, which is an alertable function. If there is an entry... In the following code, the call to SleepEx awakens the thread when an entry is added to the thread's APC queue after the timer is set to the signaled state. The following example associates an asynchronous procedure call (APC) function,.The SuspendThread function is not intended to ... This function is primarily designed for use by debuggers. A thread can temporarily yield its execution for a specified interval by calling the Sleep or SleepEx functions This is useful particularly in cases where the thread responds to user interaction, because it can delay execution long enough to.QueueUserAPC function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. A thread enters an alertable state by using SleepEx function, SignalObjectAndWait function, WaitForSingleObjectEx function, WaitForMultipleObjectsEx function, or MsgWaitForMultipleObjectsEx function. If an.The simplest way to do that is with the SleepEx function, which wakes up the thread as soon as an APC is queued and executes any APCs before returning control. Of course... You can also check the return value from SleepEx to find out what caused it to resume. You can even use a value of zero instead of INFINITE to flush the APC queue before.Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only when they are in an alertable state. A thread can only do this by calling one of the following functions with the appropriate flags: SleepEx WaitForSingleObjectEx WaitForMultipleObjectsEx SignalObjectAndWait MsgWaitForMultipleObjectsEx.SetThr... SetThreadPriorityBoost Disables the ability of the system to temporarily boost the priority of a thread. SetThreadStackGuarantee Sets the stack guarantee for the calling thread. Sleep Suspends the execution of the current thread for a specified interval. SleepEx Suspends the current thread until the specified condition is met..These problems may especially occur when the Sq... When you set this flag, the Sqldumper.exe utility calls the SleepEx function for 15 seconds just before the Sqldumper.exe program exists and after all other operations are finished. SQLDUMPER_FILTERED 0x0800 You can use this flag to generate a filtered dump file. This article describes how to.Recommendation For more info... Sleep Threads sleep when they call one of the available Windows sleep functions, like SleepEx. This introduces a delay in the completion of the thread activity. Issue example Process delays the activity Fast startup suspend device BAR by sleeping for 4.0 seconds. Recommendation In the Further analysis area of the."
88,GetSysColorBrush,"Microsoft Build · May 19 – 22, 2025GetSysColorBrush function (winuser.h) The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index. Syntax Parameters [in] nIndex A color index. This value corresponds to the color used to paint one of the window elements. To paint with a system color brush, an application should use.(ANSI) GetEnhMetaFileDescriptionW The GetEnhMetaFileDescriptio... (Unicode. (Unicode) GetNearestColor The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. GetSysColorBrush The GetSysColorBrush function retrieves a handle identifying a logical.Stock Brush There are seven predefined logical stock brushes maintained by the graphics device interface (GDI). The 21 st... An application can obtain a handle identifying one of these brushes by calling the GetSysColorBrush function and specifying a system-color value. There are seven predefined logical stock brushes maintained by the graphics.GetSysColor function (winuser.h) Retrieves the current color of the specified display element. Because zero is also a valid RGB value, you cannot use GetSysColor to determine whether a system... Instead, use the GetSysColorBrush function, which returns NULL if the color is not supported. To paint with a system color brush, an application should.CreateSolidBrush function (wingdi.h) The CreateSolidBrush function creates a logical brush that has the specified solid color. After an application creates a brush by calling CreateSolidBrush, it can select that brush into any device context by calling the SelectObject function. To paint with a system color brush, an application should use.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color.Class Background Brush A class background brush prepares the client area of a window for subsequent drawing by the application. To use a stan... For example, COLOR_BACKGROUND + 1 is the system background color. Alternatively, you can use the GetSysColorBrush function to retrieve a handle to a brush that corresponds to a standard system color, and.Remarks If the application returns a brush that it created (for example, by using the CreateSolidBrush or CreateBrushIndirect function), the application must free the brush. If the application returns a system brush (for example, one that was retrieved by the GetStockObject or GetSysColorBrush function), the application does not need to free the.WM_CTLCOLOREDIT message An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. Remarks If the application returns a brush that it created (for example, by using the CreateSolidBrush or CreateBrushIndirect function), the application mus... If the application.If the application returns a system brush (for example, one that was retrieved by the GetStockObject or GetSysColorBrush function), the application does not need to free the brush. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header."
89,DefMDIChildProcA,"Microsoft Build · May 19 – 22, 2025DefMDIChildProcA function (winuser.h) Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the DefMDIChildProc function, not to the DefWindowProc function. Syntax Parameters [in].(ANSI) D... (Unicode) DefMDIChildProcA Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. (ANSI) DefMDIChildProcW Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not.winuser.h header This header is used by multiple technologies. (ANSI) DefFrameProcW Provides default processing for any window messages that the window procedur... (Unicode) DefMDIChildProcA Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. (ANSI)."
90,EnumPropsA,"Microsoft Build · May 19 – 22, 2025EnumPropsA function (winuser.h) Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE. ...application-defined data to the callback function, use EnumPropsEx Note The winuser.h header.EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumPropsA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the.EnumDisplayDevicesA The EnumDisplayDevices function lets you obtain information about the display devices in the current session. (ANSI) EnumDisplayDevices... To retrieve information for all the graphics modes of a display device, make a series of calls to this function. (Unicode) EnumPropsA Enumerates all entries in the property list of a window."
91,GetHGlobalFromILockBytes,"Microsoft Build · May 19 – 22, 2025GetHGlobalFromILockBytes function (coml2api.h) The GetHGlobalFromILockBytes function retrieves a global memory handle to a byte array object created using the CreateILockBytesOnHGlobal function. The contents of the returned memory handle can be written to a clean disk file, and then opened as a storage object using the StgOpenStorage function..... CreateILockBytesOnHGlobal Creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file. GetHGlobalFromILockBytes The GetHGlobalFromILockBytes function retrieves a global memory handle to a byte array object created using the CreateILockBytesOnHGlobal function..coml2api.h header This header is used by Structured Storage. For more information, see: Structured Storage coml2api.h contains the following programming interfaces: Functions CreateILockBytesOnHGlobal Creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file..APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).CreateILockBytesOnHGlobal function (coml2api.h) The CreateILockBytesOnHGlobal functio... If a memory handle is passed to CreateILockBytesOnHGlobal or if GetHGlobalFromILockBytes is called, the memory handle of this function can be directly accessed by the caller while it is still in use by the byte array object. If the memory handle was allocated.Structured Storage functions are described in the following sections: CreateILockBytesOnHGlobal CreateStreamOnHGlobal FmtIdToPropStgName FreePropVariantArray GetConvertStg GetHGlobalFromILockBytes GetHGlobalFromStream OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx."
92,DeleteFileW,"Microsoft Build · May 19 – 22, 2025DeleteFileW function (fileapi.h) Deletes an existing file. To perform this operation as a transacted operation, use the DeleteFileTransacted function. Syntax Parameters [in] lpFileName The name of the file to be deleted. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend ""\\?\"" to the.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CompareFileTime Compares two file times. (Unicode) DeleteFileA Deletes an existing file. (DeleteFileA).DeleteFile2A Deletes an existing file. (ANSI) DeleteFile2W Deletes an existing file. (Unicode) DeleteFileA Deletes an existing file. (DeleteFileA) DeleteFileFromAppW Deletes an existing file. The behavior of this function is identical to DeleteFile, except that this function adheres to the Universal Windows Platform app security model..DeleteFil... Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. DeleteFileW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into....exe!KeWaitForMultipleObjects+0x2be SysmonDrv.sys+0x2152 SysmonDrv.sys+0x259b SysmonDrv.sys+0x3b1c SysmonDrv.sys+0x48e9 FLTMGR.SYS!FltDecodeParameters+0x213c FLTMGR.SYS!FltDecodeParameters+0x1d75 FLTMGR.SYS!FltDecodeParameters+0xa06 FLTMGR.SYS!FltDecodeParameters+0x77b ntoskrnl.exe!IofCallDriver+0x55 ntoskrnl.exe!NtDeviceIoControlFile+0x11da.Failed to delete directory 'C:_SMSTaskSequence'    TSManager    09/02/2023 10:00:55    9072 (0x2370) ::DeleteFileW (szFName), HRESULT=80070005 (C:__w\1\s\src\Framework\TSCore\utils.cpp,8172)    TSManager    09/02/2023 10:00:55    9072 (0x2370) DeleteFile(B) failed for C:_SMSTaskSequence\sms\bin\x64\TsManager.exe    TSManager    09/02/2023.TSManager 01.05.2021 13:19:27 1752 (0x06D8) DeleteFileW(sVolumeIDFile.c_str()), HRESULT=80070002 (..\resolvesource.cpp,520) TSManager 01.05.2021 13:19:27 1752 (0x06D8) Deleting volume ID file S:_SMSTSVolumeID.7159644d-f741-45d5-ab29-0ad8aa4771ca. ...umeIDFile.cTSManager 01.05.2021 13:19:27 1752 (0x06D8) DeleteFileW(sVolumeIDFile.c_str()),.We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path names. ...he file management functions that no longer have.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.I followed the guide here to set up an on premise only Windows Hello for Business environment: https://learn.microsoft.com/en-us/windows/securit... DSREGCMD_END_STATUS AzureAdJoined : NO EnterpriseJoined : NO DeleteFileW returned 0x00000001. DSREGCMD_END_STATUS AzureAdJoined : NO EnterpriseJoined : NO DeleteFileW returned 0x00000001. Update:."
93,CloseWindow,"Microsoft Build · May 19 – 22, 2025SystemCommands.CloseWindow(Window) Method Definition Namespace: System.Windows Assembly:PresentationFramework.dll Closes the specified window. Parameters window Window The window to close. Applies to. Closes the specified window. . /dotnet/api/system.windows.systemcommands.closewindow.CloseWindow macro action Applies to: Access 2013, Office 2013 You can use the CloseWindow action to close either a specified Access document tab or the active document tab if none is specified. Setting The CloseWindow action has the following arguments. Remarks The CloseWindow action works on all database objects that the user can explicitly open.Application.CloseWindow(Window) Method Definition Namespace: Microsoft.Maui.Controls Assembly:Microsoft.Maui.Controls.dll Source:Application.cs Source:Application.cs Source:Application.cs Parameters window Window Applies to. Learn more about the Microsoft.Maui.Controls.Application.CloseWindow in the Microsoft.Maui.Controls namespace...IApplication.CloseWindow(IWindow) Method Definition Namespace: Microsoft.Maui Assembly:Microsoft.Maui.dll Source:IApplication.cs Source:IApplication.cs Source:IApplication.cs Requests that the application closes the window. Parameters window IWindow The window to close. Applies to. Requests that the application closes the window. ..CloseWindow function (winuser.h) Minimizes (but does not destroy) the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be minimized. Return value Type: BOOL If the function succeeds, the return value is nonzero. To get extended error information, call GetLastError. Remarks To destroy a window, an application must.2.2.5.1.4 CloseWindow Closes the active window. MUST NOT be present in a Data Macro. Closes the active window. MUST NOT be present in a Data Macro.. /openspecs/sharepoint_protocols/ms-axl/5a176373-876f-4b3e-8487-fdb5fb7d6382.Application.IApplication.CloseWindow(IWindow) Method Definition Namespace: Microsoft.Maui.Controls Assembly:Microsoft.Maui.Controls.dll Source:Application.cs Source:Application.cs Source:Application.cs Parameters window IWindow Implements CloseWindow(IWindow) Applies to. Learn more about the.WebComponentWindowExternal.CloseWindow Method Definition Namespace: Microsoft.Office.Core Assembly:office.dll Applies to. Learn more about the Microsoft.Office.Core.WebComponentWindowExternal.CloseWindow in the Microsoft.Office.Core namespace.. /dotnet/api/microsoft.office.core.webcomponentwindowexternal.closewindow.CWnd::ChildWindowFromPoint Determines which, if any, of the child windows contains the specified point. CWnd::ClientToScreen Converts the client coordinates of a given point or rectangle on the display to screen coordinates. CWnd::CloseWindow Minimizes the window. CWnd::ContinueModal Continues a window's modal status. CWnd::DeleteTempMap Called.Window management Applies to: Access 2013, Office 2013 CloseWindow macro action MaximizeWindow macro action MinimizeWindow macro action MoveAndSizeWindow macro action RestoreWindow macro action. Office developer client VBA reference documentation. /office/client-developer/access/desktop-database-reference/window-management."
94,GetObjectType,"Microsoft Build · May 19 – 22, 2025GetObjectType function (wingdi.h) The GetObjectType retrieves the type of the specified object. Syntax Parameters [in] h A handle to the graphics object. ...e OBJ_BITMAP Bitmap OBJ_BRUSH Brush OBJ_COLORSPACE Color space OBJ_DC Device context OBJ_ENHMETADC Enhanced metafile DC OBJ_ENHMETAFILE Enhanced metafile OBJ_EXTPEN Extended pen OBJ_FONT Font.ObjectContext.GetObjectType(Type) Method Definition Namespace: System.Data.Entity.Core.Objects Assembly:EntityFramework.dll Returns the entity type of the POCO entity associated with a proxy object of a specified type. Parameters type Type The Type of the proxy object. Returns Type The Type of the associated POCO entity. Applies to. Returns the.ObjectContext.GetObjectType(Type) Method Definition Namespace: System.Data.Objects Assembly:System.Data.Entity.dll Returns the entity type of the POCO entity associated with a proxy object of a specified type. Remarks The GetObjectType method is used when proxy object generation is enabled for POCO entities. For more information, see Requirements.IWebFormReferenceManager.GetObjectType(String, String) Method Definition Namespace: System.Web.UI.Design Assembly:System.Design.dll Gets the type of the specified object. Parameters tagPrefix String The tag prefix for the type. typeName String The name of the type. Returns Type The Type of the object, if it could be resolved. Use the GetType.GetObjectType Returns the type of the object that caused the error. Syntax Parameters pObjectType [out] Pointer to the CObjectType field that indicates the element that caused the error. Return Value The following table describes possible return values. Return Value Description S_OK The function successfully returned the object type. Remarks The.GlobalType.GetObjectType Method Definition Namespace: Microsoft.VisualStudio.Shell.Design Assembly:Microsoft.VisualStudio.Shell.Design.dll Package:Microsoft.VisualStudio.Shell.Design v17.13.40008 Returns the type of this global type. Returns Type The Type of the GlobalType. Applies to. Returns the type of this global type. ..GenerateManifestBase.GetObjectType Method Definition Namespace: Microsoft.Build.Tasks Assembly:Microsoft.Build.Tasks.Core.dll Assembly:Microsoft.Build.Tasks.dll Assemblies:Microsoft.Build.Tasks.dll, Microsoft.Build.Tasks.v3.5.dll Assembly:Microsoft.Build.Tasks.v4.0.dll Package:Microsoft.Build.Tasks.Core v15.9.20 Package:Microsoft.Build.Tasks.Core.WebServiceActionContext.GetObjectType() Method Version: Available or changed with runtime version 2.0. Gets the object type. Syntax Parameters WebServiceActionContext Type: WebServiceActionContext ... Related information WebServiceActionContext Data Type Creating and Interacting with an OData V4 Bound Action Get Started with AL Developing.(ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the outline or bitmap for a character in the Tru... GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics object. GetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The....DataViewHierarchyAccessor.GetObjectType(In Method Definition Namespace: Microsoft.VisualStudio.Data Assembly:Microsoft.VisualStudio.Data.dll Package:Microsoft.VisualStudio.Data v17.10.40170 Retrieves the type of the data object associated with the node matching the specified item IDParameters itemId Int32 The item ID of the node for which the."
95,UpdateICMRegKeyW,"Microsoft Build · May 19 – 22, 2025UpdateICMRegKeyW function (wingdi.h) (Obsolete; retained for backward compatibility) The UpdateICMRegKey function manages color profiles and Color Management Modules in the system. Syntax Parameters reserved Reserved, must be ... Windows 95/98/Me: UpdateICMRegKeyW is supported by the Microsoft Layer for Unicode. Note The wingdi.h header defines.(ANSI) UnregisterCMMW Dissociates a specified ID value from a given color management module dynamic-link library (CM... (Unicode) UpdateICMRegKeyA The UpdateICMRegKey function manages color profiles and Color Management Modules in the system. (ANSI) UpdateICMRegKeyW The UpdateICMRegKey function manages color profiles and Color Management Modules.UpdateICMRegKeyA function (wingdi.h) (Obsolete; retained for backward compatibility) The UpdateICMRegKey function manages color profiles and Color Management Modules in the system. Windows 95/98/Me: UpdateICMRegKeyW is supported by the Microsoft Layer for Unicode. To use this, you must add certain files to yo... Note The wingdi.h header defines.GetGValue The GetGValue macro retrieves an intensity value for the green component of a red, green, blue (RGB) value. GetICMProfileA The GetICMProfile function retrieves the file name of the current output color profile for a specified device context. (ANSI) GetICMProfileW The GetICMProfile function retrieves the file name of the current output."
96,CharToOemW,"Microsoft Build · May 19 – 22, 2025CharToOemW function (winuser.h) Translates a string into the OEM-defined character set. Syntax Parameters [in] pSrc Type: LPCTSTR The null-terminated string to be translated. [out] pDst Type: LPSTR The destination buffer, which receives the translated string. Requirements Requirement Value Minimum supported client Windows 2000 Professional.(Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use(ANSI) CharToOemBuffA Translates a specified number of characters in a string into the OEM-defined character set. (ANSI) CharToOemBuffW Translates a specified number of characters in a string into the OEM-defined character set. (Unicode) CharToOemW.Warning C28726 Banned API Usage: '*function-name' is insecure and has been marked deprecated. ...cpy _mbccpy_s _mbscpy _mbscpy_s _mbsnbcpy _mbsnbcpy_s _mbsnbcat _mbsnbcat_s _mbsncat _mbsncat_s _mbsncpy _mbsncpy_s _mbstok _mbstok_s _snscanf _snscanf_s _snwscanf _snwscanf_s _ui64toa ui64toa_s _ui64tow _ui64tow_s _ultoa CharToOemA CharToOemBuffA.(Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharToOemBuffA Translates a specified number of characters in a string into the OEM-defined character set. (ANSI) CharToOemBuffW Translates a specified number of characters in a string into the OEM-defined character set. (Unicode) CharToOemW."
97,ClientToScreen,"Microsoft Build · May 19 – 22, 2025The ClientToScreen function is used in Microsoft development environments to convert the client-area coordinates of a specified point to screen coordinates. This is particularly useful when you need to translate the position of a point within a window (client coordinates) to its corresponding position on the screen (screen coordinates).References:ClientToScreen function (winuser.h) The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. Syntax Parameters [in] hWnd A handle to the window whose client area is used for the conversion. [in, out] lpPoint A pointer to a POINT structure that contains the client coordinates to be converted. .ScreenToClient function (winuser.h) The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates. Syntax Parameters [in] hWnd A handle to the window whose client area will be used for the conversion. lpPoint A pointer to a POINT structure that specifies the screen coordinates to be.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Function Description ClientToScreen Converts the client-area coordinates of a specified point to screen coordinates. CombineTransform Concatenates two world-space to page-space transformations. ... ScreenToClient Converts the.Miscellaneous Mouse Operations The previous sections have discussed mouse clicks and mouse movement. This rectangle is given in screen coordinates, rather than client coordinates, so the point (0, 0) means the upper left corner of the screen. To translate client coordinates into screen coordinates, call the function ClientToScreen. The following.CWnd::ChildWindowFromPoint Determines which, if any, of the child windows contains the specified point. CWnd::ClientToScreen Converts the client coordinates of a given point or rectangle on the display to screen coordinates. CWnd::CloseWindow Minimizes the window. CWnd::RunModalLoop Retrieves, translates, or dispatches mes... CWnd::ScreenToClient.CWindow::ChildWindowFromPoint Retrieves the chil... CWindow::ChildWindowFromPointEx Retrieves a particular type of child window containing the specified point. CWindow::ClientToScreen Converts client coordinates to screen coordinates. CWindow::Create Creates a window. CWindow::CreateCaret Creates a new shape for the system caret. Remarks See.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display De... ChildWindowFromPointEx Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. ClientToScreen The.(Unicode) Chord The Chord function draws a chord (a region bounded by... The chord is outlined by using the current pen and filled by using the current brush. ClientToScreen The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. CloseEnhMetaFile The CloseEnhMetaFile function closes an.What you need to know Technologies Windows Controls Prerequisites C/C++ Windows User Interface Programming Instructions Step 1: Wait for the BCN_DROPDOWN notification. Use the ClientToScreen function to convert the window coordinates of the button's lower left edge to screen coordinates. Step 3: Create a menu an... This topic describes one.MapWindowPoints function (winuser.h) The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window. Thus, to guarantee the correct transformation of rectangle coordinates, you must call MapWindowP... The MapWindowPoints function converts (maps) a set of."
98,LoadIconA,"Microsoft Build · May 19 – 22, 2025LoadIconA function (winuser.h) Loads the specified icon resource from the executable (.exe) file associated with an application instance. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_SHARED flags set). Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module of either....(ANSI) LoadCursorFromFileW Creates a cursor based o... (Unicode) LoadCursorW Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. (Unicode) LoadIconA Loads the specified icon resource from the executable (.exe) file associated with an application instance. (ANSI) LoadIconW Loads the specified.You can use this function to specify the content, appearance, and... (Unicode) AreDpiAwarenessContextsEqual Determines whether two DPI_AWARENESS_CONTEXT values are identical. ArrangeIconicWindows Arranges all the minimized (iconic) child windows of the specified parent window. AttachThreadInput Attaches or detaches the input processing mechanism."
99,CreateHalftonePalette,"Microsoft Build · May 19 – 22, 2025To create a halftone palette, you can use the CreateHalftonePalette function in your application. This function is intended for use when the stretching mode of a device context is set to HALFTONE. After creating the halftone palette, you must select and realize this palette into the device context before calling the StretchBlt or StretchDIBits functions.Additionally, you can set and retrieve color adjustment values for the specified device context using the SetColorAdjustment and GetColorAdjustment functions, respectively.References:CreateHalftonePalette function (wingdi.h) The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). ...cceeds, the return value is a handle to a logical halftoneRemarks An application should create a halftone palette when the stretching mode of a device context is set to HALFTONE. The logical halftone.Halftone Palette and Color Adjustment Halftone palettes are intended to be used whenever the stretching mode of a device context is set to HALFTONE. An application creates a halftone palette by using the CreateHalftonePalette function. The application must select and realize this palette into the device context before calling the StretchBlt or.(Unicode) CreateFontW The CreateFont function creates a logical font with the specified ch... The logical font can subsequently be selected as the font for any device. (Unicode) CreateHalftonePalette The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). CreateHatchBrush The CreateHatchBrush function.Color Functions The following functions are used with color. Function Description AnimatePalette Replaces entries in the specified logical palette. CreateHalftonePalette Creates a halftone palette for the specified device context (DC). CreatePalette Creates a logical palette. GetColorAdjustment Retrieves the color adjustment values for the.Syntax Members Public Constructors Name Description CPalette::CPalette Constructs a CPalette object with no attached Windows palette. CPalette::CreateHalftonePalette Creates a halftone palette for the device context and attaches it to the CPalette object. CPalette::CreateHalftonePalette Creates a halftone palette for the device context. The.CreateFontW The CreateFont function creates a logical font with the specified characteristics... The logical font can subsequently be selected as the font for any device. (Unicode) CreateHalftonePalette The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). CreateHatchBrush The CreateHatchBrush.SHCreateShellPalette function (shlwapi.h) Creates a halftone palette for the specified device context. ... Requirements Requirement Value Minimum supported client Windows 2000 Professional, Windows XP [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header shlwapi.h Library Shlwapi.lib.Choose a color from the 256 colors displayed in the Colors palette in the Colors window. The color selected becomes the current color in the Colors palette in the Colors window. Note The initial palette used for 256-color images matches the palette returned by the CreateHalftonePalette Windows API. All icons intended for the Windows shell should.SHGetInverseCMAP function (shlwapi.h) [This function is available through Windows XP and Windows Server 2003. Retrieves the inverse color table mapping for the halftone palette. Requirements Requirement Value Minimum supported client Windows 2000 Professional, Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop...., GetDCEx, GetWindowDC font CreateFontA, CreateFontW, CreateFontIndirectA, CreateFontIndirectW metafile CreateMetaFileA, CreateMetaFileW, CreateEnhMetaFileA, CreateEnhMetaFileW, GetEnhMetaFileA, GetEnhMetaFileW, GetMetaFileA, GetMetaFileW pen CreatePen, CreatePenIndirect, ExtCreatePen region PathToRegion, CreateEllipticRgn,."
100,CoInitialize,"Microsoft Build · May 19 – 22, 2025CoInitialize is a function in Windows programming that initializes the Component Object Model (COM) library for use in a process. It must be called before any other COM functions are used, except for memory allocation calls. The function signature for CoInitialize is:When you call CoInitialize, it sets the threading model for the thread to apartment-threaded. This means that the thread will access COM objects from a single thread and will have a message loop. If you need to specify a different threading model, you can use the CoInitializeEx function, which allows you to choose between apartment-threaded and multithreaded models.It's essential to ensure that for each call to CoInitialize or CoInitializeEx, there is a corresponding call to CoUninitialize to properly clean up the COM library.References:CoInitialize function (objbase.h) Initializes the COM library on the current thread and identifies the concurrency model as single-thread apartment (STA). New applications should call CoInitializeEx instead of CoInitialize. If you want to use the Windows Runtime, you must call RoInitialize or Windows::Foundation::Initialize instead. Syntax.To use basic COM services, all COM threads of execution in clients and out-of-process servers must call either the CoInitialize or the CoInitializeEx function before calling any other COM function except memory allocation calls. CoInitializeEx replaces the other function, adding a parameter that allows you to specify the threading model of the.Win32Helper.CoInitialize(IntPtr) Method Definition Namespace: Commands.StorageSync.Interop.DataObjects Assembly:Microsoft.Azure.PowerShell.Cmdlets.StorageSync.dll Coes the initialize. Parameters reserved3 The reserved3. Returns Int32 Int32. Applies to. Coes the initialize. ..Declare the Control Pointer and Call CoInitialize on the Control Pointer After you have included the headers for your control, you can declare the control pointer and can call CoInitialize on it to create a handle to the math input control interface. The following code can be placed in a class or as a global variable in your application's.CoInitializeEx function (combaseapi.h) Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000.This overview describes the IShellLink interface and explains how to use it. Initialization of the Component Object Library Before an application can create and resolve shortcuts, it must initialize the component object library by calling the CoInitialize function. Each call to CoInitialize requires a corresponding call to the CoUninitialize.This parameter is used only for property handlers that support it and that are registered under HKEY_LOCAL_MACHINE\SOFT... You must initialize Component Object Model (COM) with CoInitialize or OleInitialize before you call PSGetItemPropertyHandlerWithCreateObject. COM must remain initialized for the lifetime of this object. Examples The following.In the preceding code example, the PrintEndpointNames function calls the CoCreateInstance function to create an enumerator for the audio endpoint devices in the system. Unless the calling program previously called either the CoInitialize or CoInitializeEx function to initialize the COM library, the CoCreateInstance call will fail. For more.Using Evalcom2 Evalcom2.dll can be used to implement validation operations for installation packages and merge modules using Internal Consistency Evaluators - ICEs. The main object implements interfaces for C/C++ programs. You can use the following procedure to implement validation operations. To implement validation operations Initialize COM on.Metadata Global Static Functions Beginning with the .NET Framework 4, the documentation for the _Cor*, CoInitialize*, CoUninitialize*, and CoEEShutDownCOM functions, which pertain to hosting, is located in Deprecated CLR Hosting Functions. There are no global static functions that pertain to metadata. Related Sections Metadata Interfaces Metadata."
101,GetClassLongA,"Microsoft Build · May 19 – 22, 2025GetClassLongA function (winuser.h) Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. Note  If you are retrieving a pointer or a handle, this function has been superseded by the GetClassLongPtr function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit.(Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window....s the name of the class to which the specified window bRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.(Unicode) GetClassName Th... (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified."
102,GetVersionExW,"Microsoft Build · May 19 – 22, 2025GetVersionExW function (sysinfoapi.h) [GetVersionEx may be altered or unavailable for releases after Windows 8.1. Instead, use the Version Helper functions] With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function.sysinfoapi.h header This head... GetVersion With the release of Windows 8.1, the behavior of the GetVersion API has changed in the value it will return for the operating system version. GetVersionExA With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version..Essentially I need something similar to &quot;GetVersionExW&quot;, but a version of it that: Is not deprecated Does not require the application to be... Note: Using &quot;GetVersionExW&quot; or any of the &quot;version helper functions&quot; ( https://learn.microsoft.com/en-us/windows/win32/sysinfo/version-helper-apis ) is not acceptable, given.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). CoFreeUnusedLibrariesEx Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoInitializeEx Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240.."
103,EnumTimeFormatsW,"Microsoft Build · May 19 – 22, 2025EnumTimeFormatsW function (winnls.h) Enumerates the time formats that are available for a locale specified by identifier. Note  For interoperability reasons, the application should prefer the EnumTimeFormatsEx function to EnumTimeFormats because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales..(ANSI) EnumTimeFormatsEx Enumerates the time formats that are available for a locale specified by name.Note  The application should call this function in preference to EnumTimeFormats if designed to run only on Windows Vista and later. EnumTimeFormatsW Enumerates the time formats that are available for a locale specified by identifier.Note  For.(ANSI) EnumTimeFormatsEx Enumerates the time formats that are available for a locale specified by name.Note  The application should call this function in preference to EnumTimeFor... EnumTimeFormatsW Enumerates the time formats that are available for a locale specified by identifier.Note  For interoperability reasons, the application should prefer."
104,DefWindowProcW,"Microsoft Build · May 19 – 22, 2025DefWindowProcW function (winuser.h) Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure. ...nfRemarks Note The winuser.h header defines.DefRawInputProc function (winuser.h) Unlike DefWindowProcA and DefWindowProcW, this function doesn't do any processing. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.For more information on how to use structured exception handling, see Struct... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include windows.h) See also CallWindowProcW DefWindowProcW RegisterClassExW Window.(Unicode) DefRawInputProc Verifies tha... DefWindowProcA Calls the default window procedure to provide default processing for any window messages that an application does not process. (ANSI) DefWindowProcW Calls the default window procedure to provide default processing for any window messages that an application does not process. (Unicode).(ANSI) DefFrameProcW Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. (Unicode) DefWindowProcA Calls the default window procedure to provide default processing for any window messages that an application does not process. (ANSI) DefWindowProcW Calls.... __imp_CreateRectRgn referenced in function updateFramebufferTransparency 1&gt;glfw3.lib(win32_window.obj) : error LNK2019: unresolved external symbol __imp_DeleteObject referenced in function createIcon 1&gt;glfw3.lib(win32_window.obj) : error LNK2019: unresolved external symbol __imp_CreateDIBSection referenced in function createIcon."
105,UnregisterHotKey,"Microsoft Build · May 19 – 22, 2025UnregisterHotKey function (winuser.h) Frees a hot key previously registered by the calling thread. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window. [in] id Type: int The identifier of the hot key to be.Win32.UnregisterHotKey(IntPtr, Int32) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd id Int32 Returns Boolean Applies to. Learn more about the Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities.Win32.UnregisterHotKey in the.To define a hot key, an application calls the RegisterHotKey function, specifying the combination of keys that generates the WM_HOTKEY message, the handle to the window to receive the message, and the identifier of the hot key. Before the application terminates, it should use the UnregisterHotKey function to destroy the hot key. Hot key controls.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. RegisterForTooltipDismissNotification Lets apps or UI frameworks register and unregister windows to receive notification to dismiss their tooltip windows. RegisterHotKey Defines a system-wide hot key. UnloadKeyboardLayout Unloads an in... UnregisterHotKey Frees a hot key.The function provides information that allows a program to send OEM text to another program by simulating keyboard input. RegisterHotKey Defines a system-wide hot key. SendInput Synthesizes keystrokes, mouse motions, and button clicks. ToUnicod... UnloadKeyboardLayout Unloads an input locale identifier (formerly called a keyboard layout)..RegisterHotKey function (winuser.h) Defines a system-wide hot key. The application must explicitly call UnregisterHotKey to unregister the old hot key. The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only].Sending Messages in Windows, Adding Hot Keys to your Application Paul DiLascia Download the code for this article:CQA1200.exe (57KB) Bro... If you don't, other apps won't be able to use it. To return the hot key, you must callâ€""what else?â€""UnregisterHotKey. You don't have to register or unregister anything, just send WM_SETHOTKEY with the key....oard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.Win32 Class Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynami... MinimizeRelease() RegisterHotKey(IntPtr, Int32, ModifierKeys, Int32) SetWorkingSet(Int64, Int64, Boolean) UnregisterHotKey(IntPtr, Int32) Applies to. Learn more about the.CHotKeyCtrl Class Provides the functionality of the Windows common hot key control. This control (and therefore the CHotKeyCtrl class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later. The hot key remains valid until the appl... This mechanism is different from the hot key support that depends on the."
106,GlobalDeleteAtom,"Microsoft Build · May 19 – 22, 2025GlobalDeleteAtom function (winbase.h) Decrements the reference count of a global string atom. If the atom's reference count reaches zero, GlobalDeleteAtom removes the string associated with the atom from the global atom table. Syntax Parameters [in] nAtom Type: ATOM The atom and character string to be deleted. To determine whether the function has.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also AddAtom DeleteAtom GlobalAddAtom GlobalDeleteAtom GlobalFindAtom.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also AddAtom DeleteAtom GlobalAddAtom GlobalDeleteAtom GlobalFindAtom.DeleteAtom function (winbase.h) Decrements the reference count of a local string atom. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL.DeleteFile The DeleteFile function (winbase.h) deletes an existing file. DeleteFileTransactedA Deletes an existing file as a transacted operation. (GlobalAddAtomW) GlobalAlloc Allocates the specified number of bytes from the heap. (GlobalAlloc) GlobalDeleteAtom Decrements the reference count of a global string atom. If the atom's reference count.Atom Functions In this section AddAtom DeleteAtom FindAtom GetAtomName GlobalAddAtom GlobalDeleteAtom GlobalFindAtom GlobalGetAtomName InitAtomTable. . | Atom Functions. /windows/win32/dataxchg/atoms-functions.GlobalAddAtomA function (winbase.h) Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. The string associated with the atom is not deleted from memory until its reference count is zero. For more information, see the GlobalDeleteAtom function. Global atoms are not deleted automatically when.If at all possible, you should use AddAtom/DeleteAtom to store strings in a local atom table, or GlobalAddAtom/GlobalDeleteAtom if the atoms are needed cross-process. If there is concern about the application causing user atom table issues, you can investigate the root cause by connecting the kernel debugger and breaking into the process on calls.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique ... (GlobalAddAtomW) GlobalDeleteAtom Decrements the reference.InitAtomTable function (winbase.h) Initializes the local atom table and sets the number of hash buckets to the spec... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h)."
107,WaitForMultipleObjects,"Microsoft Build · May 19 – 22, 2025The WaitForMultipleObjects function is used in Windows programming to wait for one or more synchronization objects to be signaled. Here’s how to use it:References:WaitForMultipleObjects function (synchapi.h) Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. To enter an alertable wait state, use the WaitForMultipleObjectsEx function. Syntax Parameters [in] nCount The number of object handles in the array pointed to by lpHandles. The maximum number of.Waiting for Multiple Objects The following example uses the CreateEvent function to create two event objects and the CreateThread function to create a thread. It then uses the WaitForMultipleObjects function to wait for the thread to set the state of one of the objects to signaled using the SetEvent function. For an exampl... The following example.Table of contents Exit focus mode Save Table of contents Add E... Multiple-object Wait Functions The WaitForMultipleObjects, WaitForMultipleObjectsEx, MsgWaitForMultipleObjects, and MsgWaitForMultipleObjectsEx functions enable the calling thread to specify an array containing one or more synchronization object handles. Feedback Was this page.Wait Debugging Functions [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft DirectShow provides several functions for debugging infinite waits. In retail builds, the DbgWaitForMultipleObjects and.DbgWaitForMultipleObjec... Waits for any (or all) of the specified objects to be signaled. In a debug build, this function triggers an assert if the time-out interval expires before the objects are signaled. In a retail build, this function is equivalent to the WaitForMultipleObjects function with a time-out interval of INFINITE. Syntax Parameters.May 2011 Volume 26 Number 05 Windows API Wait Functions - DynWaitList: ID-Based Windows Event Multiplexing By Alex Gimenez | May 2011 Microsoft Windows provides multiplexed listening to several events via the WaitForMultipleObjects method and its variants. These functions are powerful, but inconvenient to use when the event list is dynamic..MSSQLSERVER_19419 Applies to: SQL Server Details Attribute Value Product... Specifically, SQL Server calls WaitForMultipleObjects() waiting for the Lease timeout event to be set in a signaled state. If the function returns WAIT_OBJECT_0, which indicates success, but by this time the lease has expired, then error 19419 is raised. A lease is a....p of them are terminated, thanks| If you're directly using the Win32 CreateThread function, keep the thread handle and make use of GetExitCodeT Try the WaitForMultipleObjects function too: https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjectsUse TRUE for bWaitAll. You can also specify a non-zero.MSSQLSERVER_19421 Applies to: SQL Server Details Attribute Value Product Name SQL Se... Specifically, SQL Server calls WaitForMultipleObjects() waiting for the Lease timeout event to be set in a signaled state. If the function returns WAIT_TIMEOUT, because it has exceeded the specified Lease interval, then error 19421 is raised. A lease is a.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming inter... WaitForMultipleObjects Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. WaitForMultipleObjectsEx Waits until one or all of the."
108,select,"Microsoft Build · May 19 – 22, 2025The SELECT statement in SQL is used to retrieve data from one or more tables in a database. The basic syntax of a SELECT statement is as follows:For example, to select all fields from a table named ""Employees,"" you would write:If you want to select specific fields, you can list them explicitly:You can also use the AS keyword to create an alias for a field in the result set:Additionally, you can use clauses like WHERE, GROUP BY, and ORDER BY to filter and organize the results further.References:The full syntax of the SELECT statement is complex, but the main clauses can be summarized as follows: [ WITH { [ XMLNAMESPACES , ] [ common_table_expression ] } ] SELECT select_list [ INTO new_table ] [ FROM table_source ] [ WHERE search_condition ] [ GROUP BY group_by_expression ] [ HAVING search_condition ] [ WINDOW window_expression ] [ ORDER.SELECT Clause (Transact-SQL) Applies to: SQL Server Azure SQL Database Azure SQL Managed Instance SQL analytics endpoint in Microsoft Fabric Warehouse in Microsoft Fabric SQL database in Microsoft Fabric Specifies the columns to be returned by the query. Transact-SQL syntax conventions Syntax Arguments ALL Specifies that duplicate rows can appear.select clause (C# Reference) In a query expression, the select clause specifies the type of values that will be produced when the query is executed. The result is based on the evaluation of all the previous clauses and on any expressions in the select clause itself. The following example shows a simple select claus... The type of the sequence.Select a Range These examples show how to select the used range, which includes formatted cells that don't contain data, and how to select a data range, which includes cells that contains actual data. ...ormatted cells that don't contain data, by using the UsedRange property of the Worksheet object Select method of the RangeSelecting a Data Range.SELECT examples (Transact-SQL) Applies to: SQL Server Azure SQL Database Azure SQL Managed Instance SQL database in Microsoft Fabric This article provides examples of using the SELECT statement. The code samples in this article use the AdventureWorks2022 or AdventureWorksDW2022 sample database, which you can download from the Microsoft SQL Server.Range.Select method (Excel) Selects the object. Syntax expression.Select expression A variable that represents a Range object. Return value Variant Remarks To select a cell or a range of cells, use the Select method. To make a single cell the active cell, use the Activate method. Support and feedback Have questions or feedback about Office VBA or.Select statement The select statement fetches or manipulates data from the database. All select statements use a table variable to fetch records. It can be used to sum all accounts, order lines, and so on. validTimeState keyword The validTimeState keyword selects rows from a table ... Learn about select statements in the X++ language, including.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Select transformation in mapping data flow APPLIES TO: Azure Data Factor... Data flows are available in both Azure Data Factory pipelines and Azure Synapse Analytics pipelines. This article applies to mapping data flows. If you're new to.SELECT clause (NoSQL query) APPLIES TO: NoSQL Every query consists of a SELECT clause and optionally FROM and WHERE clauses, per ANSI SQL standards. Typically, the source in the FROM clause is enumerated, and the WHERE clause applies a filter on the source to retrieve a subset of JSON items. The SELECT clause then projects the requested JSON.Select Case statement Executes one of several groups of statements, depending on the value of an expression. Syntax Select Case testexpression [ Case expressionlist-n [ statements-n ]] [ Case Else [ elsestatements ]] End Select The Select Case statement syntax has these parts: Part Description testexpression Required. See also Using Select Case."
109,DrawEscape,"Microsoft Build · May 19 – 22, 2025DrawEscape function (wingdi.h) The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI). ...scape function to be pe [in] cjIn The number of bytes of data pointed to by the lpszInData parameter.The DrawEscape function provides drawing.DrawCaption The DrawCaption function d... DrawEdge The DrawEdge function draws one or more edges of rectangle. DrawEscape The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI). DrawFocusRect The DrawFocusRect function draws a rectangle in the.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc T... DrawEscape.CDC::DrawEdge Draws the edges of a rectangle. CDC::DrawEscape Accesses drawing capabilities of a video display that aren't directly available through the graphics device interface (GDI). CDC::DrawFocusRect Draws a rectangle in the style used to indicate focus. CDC::EnumObjects Enumerates the pens and brushes available in a device.GDI APIs fail when large pages or VAD spanning are used This article introduces that GDI APIs fails when large pages or Virtual Address Descriptors (VAD) spanning are used. Original product version:   Windows Original KB number:   4567569 When large page sizes are configured for... SetDIBitsToDevice function StretchDIBits function GetBitmapBits.2.3.6.1 EMR_DRAWESCAPE Record The EMR_DRAWESCAPE record passes arbitrary information to a printer driver. Type (4 ... It MUST be EMR_DRAWESCAPE, which is 0x00000069. cjIn (4 bytes): An unsigned integer specifying the number of bytes to pass to the printer driver. See section 2.3.6 for more escape record types. The EMR_DRAWESCAPE record passes....REATECOLORSPACE record EMR_CREATECOLORSPACEW packet EMR_CREATECOLORSPACEW record EMR_CREATEDIBPATTERNBRUSHPT packet EMR_CREATEDIBPATTERNBRUSHPT Record EMR_CREATEMONOBRUSH packet EMR_CREATEMONOBRUSH Record EMR_CREATEPALETTE packet EMR_CREATEPALETTE Record EMR_CREATEPEN packet EMR_CREATEPEN Record EMR_DELETECOLORSPACE packet EMR_DELETECOLORSPACE.DeviceCapabilities Retrieves the capabilities of a printer device driver. DrawEscape Provides drawing capabilities of the specified video display that are not directly available through the graphics device interface. EnumDisplayDevices Retrieves information about the display devices in a system. EnumDisplaySettings Retrieves... WindowFromDC.2.3.6 Escape Record Types The Escape record types execute printer driver functions. The following are EMF escape record types. Name Section Description EMR_DRAWESCAPE 2.3.6.1 Passes arbitrary information to the printer driver. The gene... Name Value EMR_DRAWESCAPE 0x00000069 EMR_EXTESCAPE 0x0000006A EMR_NAMEDESCAPE 0x0000006E Size (4 bytes): An....the current logical color space object for graphics operations. EMR_DELETECOLORSPACE: This record deletes a logical color space object. Note: An EMR_DELETEOBJECT record SHOULD be used instead of EMR_DELETECOLORSPACE to delete a logical color space object. EMR_GLSRECORD: This record specifies an OpenGL function. EMR_GLSBOUNDEDRECORD: This record."
110,OleGetClipboard,"Microsoft Build · May 19 – 22, 2025OleGetClipboard function (ole2.h) Retrieves a data object that you can use to access the contents of the clipboard. If you are writing an application that can accept data from the clipboard, call the OleGetClipboard function to get a pointer to the IDataObject interface that you can use to retrieve the contents of the clipboard. OleGetClipboard.OleGetClipboardWithEnterpriseInfo function (ole2.h) Enables Windows Information Protection enlightened applications to retrieve an IDataObject from the OLE Clipboard accompanied by Windows Information Protection information about the data and the source application.This information allows the enlightened application to take over responsibility for....teDataCache CreateFormatEnumerator CreateOleAdviseHolder DoDragDrop OleCreate OleCreateDefaultHandler OleCreateEmbeddingHelper OleCreateEx OleCreateFontIndirect OleCreateFromData OleCreateFromDataEx OleCreateFromFile OleCreateFromFileEx OleCreateLink OleCreateLinkEx OleCreateLinkFromData OleCreateLinkFromDataEx OleCreateLinkToFile.OleSetClipboard function (ole2.h) Places a pointer to a specific data object onto the clipboard. Call OleSetClipboard to place the IDataObject pointer onto the clipboard, so it is accessible to the OleGetClipboard function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.OleDraw The OleDraw function (ole2.h) enables drawing objects more easily. OleFlushClipboard Carries out the clipboard shutdown sequence. It also releases the... OleGetClipboard Retrieves a data object that you can use to access the contents of the clipboard. OleGetClipboardWithEnterpriseInfo Enables Windows Information Protection enlightened.This document discusses how applications can implement drag-and-drop and Clipboard data transfers with Shell objects. However, because you are transferring a pointer to a data object, not the data itself, you must use the OLE clipboard ... The following procedure outlines how to use the OLE clipboard API to transfer Shell data with the Clipboard:.OleCreateFromData function (ole2.h) Creates an embedded object from a data transfer object retrieved either from the clipboard or as part of an OLE drag-and-drop operation. It is intended to be used to implement a paste from an OLE drag-and-drop operation. The data object in this case is either the type retrieved from the clipboard with a call to.COleClientItem Class Defines the container interface to OLE items. COleClientItem::GetClipboardData Call this function to get a COleDataSource object containing all the data that would be placed on the Clipboard by a call to the CopyToClipboard member function. Remarks GetClipboardData is called as the default implementation of OnGetClipboardData..OleQueryCreateFromData function (ole2.h) Checks whether a data object has one of the formats that would allow it to become an embedded object through a call to either the OleCreateFromData or OleCreateStaticFromData function. Remarks When an application retrieves a data transfer object through a call to the OleGetClipboard function, the.Clipboard Formats Each item of data in a data object has an associated format, usually called a clipboard format. Remember that CF_HDROP is already a... With clipboard data transfers, call OleSetClipboard to place a pointer to the data object's IDataObject interface on the Clipboard. For clipboard data transfers, the object is simply held until."
111,VkKeyScanW,"Microsoft Build · May 19 – 22, 2025...yScanW function (winu [This function has been superseded by the VkKeyScanEx functionTranslates a character to the corresponding virtual-key code and shift state for the current keyboard. Syntax Parameters [in] ch Type: TCHAR The character to be translated into a virtual-key code. Return value Type: SHORT If the function succeeds, the low-order.VkKeyScanA Translates a character to the corresponding virtual-key code and shift state for the current keyboard. (ANSI) VkKeyScanExA Translates a character to the corresponding virtual-key code and shift state. (ANSI) VkKeyScanExW Translates a character to the corresponding virtual-key code and shift state. The function translates the character.(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Sends a message to the specified recipients. (BroadcastSystemMessageExW) BroadcastSystemMessageW The BroadcastSystemMessageW (Unicode) function sends a message to the specified."
112,WaitForSingleObject,"Microsoft Build · May 19 – 22, 2025The WaitForSingleObject function is a Windows API function that allows a thread to wait until a specified object is in the signaled state or until a time-out interval elapses. It is commonly used in scenarios where a thread needs to wait for an event, mutex, or semaphore to be signaled before proceeding with further execution.The function takes two parameters:For example, if you have an event associated with an ODBC handle, you can call WaitForSingleObject to wait for that event to be signaled, as shown in the following code snippet:This function is useful in asynchronous programming where you need to halt further processing until a certain condition is met.References:WaitForSingleObject function (synchapi.h) Waits until the specified object is in the signaled state or the time-out interval elapses. To enter an alertable wait state, use the WaitForSingleObjectEx function. To wait for mul... The WaitForSingleObject function can wait for the following objects: Change notification Console input Event Memory.Before a thread attempts to perform the task, it uses the WaitForSingleObject function to determine whether the semaphore's current count permits it to do so. The wait function's time-out parameter is set to zero, so the function returns immediately if the semaphore is in the nonsignaled state. WaitForSingleObject decrements the semaphore's count.Receiving Policy Change Events The LSA provides functions you can use to receive notification when there is a change in policy on the local system. Your application can then call a wait function such as WaitForSingleObject, WaitForSingleObjectEx, or RegisterWaitForSingleObject to wait for the event to occur. Typically, notification events are used.Each thread monitors the event state by calling the WaitForSingleObject function. Use a wait time-out interval of zero. Each thread terminates its own execution when the event is set to the signaled state (WaitForSingleObject returns WAIT_OBJECT_0). Terminating a thread has the following results:Any resources owned by the thread, such as windows.Using Event Objects (Synchronization) Applications can use event objects in a number of situa... Before starting a read operation, each reader thread uses WaitForSingleObject to wait for the manual-reset event object to be signaled. When WaitForSingleObject returns, this indicates that the main thread is ready for it to begin its read operation..To temporarily restrict or reduce access, create a loop in which you call the WaitForSingleObject function with a time-out interval of zero until the semaphore count has been reduced sufficiently. To restore access, call ReleaseSemaphore with the release count equal to the number of times WaitForSingleObject was called in the loop. Requirements.Warning C6258 U... Remarks TerminateThread is a dangerous function that should only be used in the most extreme cases. Code analysis name: USINGTERMINATETHREAD To properly terminate threads Create an event object using the CreateEvent function. Each thread monitors the event state by calling the WaitForSingleObject function. Each thread ends its.Using Events with Asynchronous Calls [The feature associated with this page, Windows Media Format 11 SDK, is a legacy feature. This section describes using an event to w... After calls to asynchronous events are made in your application, wait for the event to signal by calling the WaitForSingleObject function of the Platform SDK. If you are.BCryptRegisterConfigChangeNotify [BCryptRegisterConfigChangeNotify is deprecated beginning with Windows 10.]. The BCryptRegisterConfigChangeNotify(PRKEVENT) function creates kernel mode CNG configuration change event handler. Syntax Parameters [in] phEvent The address of a PRKEVENT variable that receives the pointer to the event dispatcher object..In the worst-case scenario, contention for the critical section is constant, and each thread makes a processing-intensive call to the WaitForSingleObject function. However, if the spin count is set properly, the calling thread does not immediately call WaitForSingleObject when contention occurs. Requirements Requirement Value Minimum supported."
113,GetCompressedFileSizeA,"Microsoft Build · May 19 – 22, 2025GetCompressedFileSizeA function (fileapi.h) Retrieves the actual number of bytes of disk storage used to store a specified file. If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. GetCompressedFileSizeA Retrieves the actual number of bytes of disk storage used to store a specified.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
114,GlobalGetAtomNameW,"Microsoft Build · May 19 – 22, 2025GlobalGetAtomNameW function (winbase.h) Retrieves a copy of the character string associated with the specified global atom. Syntax Parameters [in] nAtom Type: ATOM The global atom associated with the character string to be retrieved. [out] lpBuffer Type: LPTSTR The buffer for the character string. [in] nSize Type: int The size, in characters, of.If the atom's reference count reaches zero, GlobalDeleteAtom rem... (ANSI) GlobalFindAtomW Searches the global atom table for the specified character string and retrieves the global atom associated with that string. GlobalGetAtomNameA Retrieves a copy of the character string associated with the specified global atom. (ANSI) GlobalGetAtomNameW.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) AddAtomW Adds a."
115,GetDriveTypeA,"Microsoft Build · May 19 – 22, 2025GetDriveTypeA function (fileapi.h) Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. To determine whether a drive is a USB-type drive, call SetupDiGetDeviceRegistryProperty and specify the SPDRP_REMOVAL_POLICY property. Syntax Parameters [in, optional] lpRootPathName The root directory for the drive. A.GetDiskSpaceInformationW Gets disk space information for a volume at a given root path. GetDriveTypeA Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. (ANSI) GetDriveTypeW Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. (Unicode) GetFileAttributesA Retrieves file.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.GetModuleFileNameW Introduced into api-ms-win-core-librarylo... GetProcAddress Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. QueryOptionalDelayLoadedAPI Introduced into api-ms-win-core-libraryloader-l2-1-0.dll in 10.0.10240. APIs from api-ms-win-core-localization-ansi-l1-1-0.dll API Requirements GetStringTypeExA."
116,_llseek,"Microsoft Build · May 19 – 22, 2025_llseek function (winbase.h) [This function is provided for compatibility with 16-bit versions of Windows.The _llseek function moves the pointer without reading data, which allows random access to the content of the file.Files In this section _lcreat _llseek _lwrite FSCTL_SRV_REQUEST_RESUME_KEY IOCTL_COPYCHUNK IOCTL_LMR_DISABLE_LOCAL_BUFFERING Master File Table NtCreateFile NtCancelIOFile NtCancelIOFileEX NtCreateNamedPipeFile NtOpenDirectoryObject NtOpenFile NtOpenSymbolicLinkObject NtQueryDirectoryObject NtQuerySymbolicLinkObject_llseek Repositions the file pointer for the specified file._llseek Repositions the file pointer for the specified file.GETPRIORITY GETRESGID GETRESGID16 GETRESUID GETRESUID16 GETRLIMIT GETRUSAGE GETSID GETSOCKNAME GETSOCKOPT GETTID GETTIMEOFDAY GETUID GETUID16 GETXATTR GET_ROBUST_LIST GET_THREAD_AREA INOTIFY_ADD_WATCH INOTIFY_INIT INOTIFY_RM_WATCH IOCTL IOPRIO_GET IOPRIO_SET KEYCTL KILL LCHOWN LINK LINKAT LISTEN LLSEEK"
117,AreFileApisANSI,"Microsoft Build · May 19 – 22, 2025AreFileApisANSI function (fileapi.h) Determines whether the file I/O functions are using the ANSI or OEM character set code page. The file I/O functions whose code page is ascertained by AreFileApisANSI are those functions exported by KERNEL32.DLL that accept or return a file name. The functions SetFileApisToOEM and SetFileApisToANSI set the code.Determining the Current Character Set Code Page The AreFileApisANSI function determines whether the file I/O functions are using the ANSI or OEM character set code page. Functions exported by Kernel32.dll that accept or return file names are affected by the file code page setting. Both SetFileApisToANSI and Se... The AreFileApisANSI function.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. AreShortNamesEnabled The AreShortNamesEnabled function determines whether short names are enabled for the.FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filteri... GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. AreFileApisANSI Determines whether the file I/O.In this section... AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CancelIo Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the.Searching for One or Mo... Setting and Getting the Timestamp of a File Applications can retrieve and set the date and time a file is created, last modified, or last accessed by using the GetFileTime and SetFileTime functions. Determining the Current Character Set Code Page The AreFileApisANSI function determines whether the file I/O functions are.Use the AreFileApisANSI function to determine which code page the set of file I/O functions is currently using. Technology Supported Server Message Block (SMB) 3.0 protocol Yes SMB 3.0 Transparent Failover (TFO) Yes SMB 3.0 with Scale-out File Shares (SO) Yes Cluster Shared Volume File System (CsvFS) Yes Resilient File System (ReFS) Yes.SetFileApisToANSI function (fileapi.h) Causes the file I/O functions to use the ANSI character set code page for the current process. Use the AreFileApisANSI function to determine which code page the set of file I/O functions is currently using. Technology Supported Server Message Block (SMB) 3.0 protocol Yes SMB 3.0 Transparent Failover (TFO) Yes.By default, a narrow filename string is interpreted using the ANSI codepage (CP_ACP). In Windows Desktop applications, it can be changed to the OEM codepage (CP_OEMCP) by using the SetFileApisToOEM function. You can use the AreFileApisANSI function to determine whether filename is interpreted using the ANSI or the system default OEM codepage..MSLU: Develop Unicode Applications for Windows 9x Platforms with the Microsoft Layer for Unicode MSLU: Develop Unicode Applications for Windows 9x Platforms with the Microsoft Layer for Unicode Michael Kaplan and Cathy Wissink... The OS is often expecting that the strings will not be based on the default system code page, but rather on some other."
118,GetBinaryTypeW,"Microsoft Build · May 19 – 22, 2025GetBinaryTypeW function (winbase.h) Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file. Syntax Parameters [in] lpApplicationName The full path of the file whose executable type is to be determined. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide.External Functions This article describes F# language support for calling functions in native code. For example, the Windows function GetBinaryTypeW can be declared in two different ways: MarshalAs(UnmanagedType.LPWStr) instructs the CLR to perform an automatic conversion between a .NET string and Windows native string representation when the.GetApplicationRestartSettings Retrieves the resta... (ANSI) GetAtomNameW Retrieves a copy of the character string associated with the specified local atom. (Unicode) GetBinaryTypeA Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file. (ANSI) GetBinaryTypeW Determines whether a file is an.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
119,ExpandEnvironmentStringsW,"Microsoft Build · May 19 – 22, 2025ExpandEnvironmentStringsW function (processenv.h) Expands environment-variable strings and replaces them with the values defined for the current user. To specify the environment block for a particular user or the system, use the ExpandEnvironmentStringsForUser function. Requirements Requirement Value Minimum supported client Windows 2000.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (ANSI).APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
120,RectVisible,"Microsoft Build · May 19 – 22, 2025RectVisible function (wingdi.h) The RectVisible function determines whether any part of the specified rectangle lies within the clipping region of a device context. Syntax Parameters [in] hdc A handle to the device context. [in] lprect A pointer to a RECT structure that contains the logical coordinates of the specified rectangle. ... RectVisible.PtVisible Determines whether the specified point is within the clipping region of a device context. RectVisible Determines whether any part of the specified rectangle lies within the clipping region of a device context. SelectClipPath Selects the current path as a clipping region for a device context, combining the new region with any existing.Redrawing in the Update Region You can limit the amount of drawing your application carries out when processing the WM_PAINT message by determining the size and location of the update region. Because the system uses the update region when creating the clipping region for the wi... The window procedure uses the RectVisible function and a 100-by-100.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). For example, an application can perform the following operations directly on a device context's clip... Determine whether graphics output appears within the region's borders by passing coordinates of the corresponding line,.... CDC::RectVisible Determines whether any part of the given rectangle lies within the clipping region. CDC::RoundRect Draws a rectangle with rounded corners using the current pen and filled using the current brush. The class provides member functions for device-context operations, working with drawing tools, type-safe graphics device interface.Often your drawing code can be device-independent; that is, it doesn't require information about what type of device is displaying the image. To optimize drawing, call the RectVisible member function of the device context to find out whether a given rectangle will be drawn. If you need to ... Typically you should not perform any drawing directly.DrawFocusRect The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus. (Unicode) EnumDisplayMonitors The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a.If the HDC is not valid, t... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Clipping Functions Clipping Overview RectVisible..wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc."
121,SetThreadDesktop,"Microsoft Build · May 19 – 22, 2025SetThreadDesktop function (winuser.h) Assigns the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights granted to the desktop. Syntax Parameters [in] hDesktop A handle to the desktop to be assigned to the calling thread. This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop,.The system determines the desktop to assign to the thread according to the following rules: If the thread has called the SetThreadDesktop function, it connects to the specified desktop. If the thread did not call SetThreadDesktop, it connects to the desktop inherited from the parent process. If the thread did not call SetThreadDesktop and did not.A thread can use the SetThreadDesktop function to change its desktop. The desktop associated with a thread must be on the window station associated with the thread's process. The calling process can use the returned handle in calls to the GetUserObjectInformation, GetUserObjectSecurity, SetUserObjectInformation, and SetUserObjectSecurity.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any headers. (Unicode) SetProcessWindowStation Assigns the specified window station to the calling process. SetThreadDesktop Assigns the specified desktop to the calling thread. All subsequent.I am working on a feasibility task, where I need to start an application in custom desktop(programatically created desktop, using CreateDesktop() call). You should use SetThreadDesktop() before ShellExecute(). SetThreadDesktop will Assign the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights.SetProcessWindowStation function (winuser.h) Assigns the specified window station to the calling process. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.Window Station and Desktop Functions Applications can use the following functions with window station objects. OpenInputDesktop Opens the desktop that receives user input. SetThreadDesktop Assigns the specified desktop to the calling thread. SetUserObjectInformation Sets information about a window station or desktop object. This enables the.If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.BroadcastSystemMessageExW function (winuser.h) Sends a message to the specified recipients. Remarks If BSF_QUERY is not specified, the function sends the specified message to all requested recipients, ignoring values returned by those recipients. If the caller's thread is on a desktop other than that of the window that denied the request, the."
122,SetWindowLongA,"Microsoft Build · May 19 – 22, 2025SetWindowLongA function (winuser.h) Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory. Note  This function has been superseded by the SetWindowLongPtr function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the.Subclassing and Automatic Message Translation Subclassing is a technique that allows an application to intercept and process messages sent or posted to a particular window before a window procedure has a chance to process them. The following call to the SetWindowLongA function subclasses the current window procedure associated with the window.RegisterWindowMessageA Defines a new window message that is guaranteed to be unique throughout the system. SetClassLongA Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. SetForegroundWindow Brings the thread that created.MSLU: Develop Unicode Applications for Windows 9x Platforms with the Microsoft Layer for Unicode MSLU: Develop Unicode Applications for Windows 9x Platforms with the Microsoft Layer for Unicode Michael Kaplan and Cathy Wissink This article assumes you're familiar with the Win32 API and Unicode Level of Difficulty     1   2   3 SUMMARY The.GetActiveWindow Retrieves the window handle to the active window attach... (Unicode) GetClassLongA Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The."
123,GetComputerNameW,"Microsoft Build · May 19 – 22, 2025GetComputerNameW function (winbase.h) Retrieves the NetBIOS name of the local computer. This name is established at system startup, when the system reads it from the registry. GetComputerName retrieves only the NetBIOS name of the local computer. To retrieve the DNS host name, DNS domain name, or the fully qualified DNS name, call the.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) GetBinaryTypeW Det... (Unicode) GetComputerNameA Retrieves the NetBIOS name of the local computer. (ANSI).To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplauncher.h iwscapi.h.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. FmtIdToPropStgName Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
124,QueryDosDeviceA,"Microsoft Build · May 19 – 22, 2025QueryDosDeviceA function (winbase.h) Retrieves information about MS-DOS device names. The function can obtain the current mapping for a particular MS-DOS device name. The code that converts an MS-DOS path into a c... The QueryDosDevice function enables an application to query the names of the junctions used to implement the MS-DOS device namespace.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h... (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA).(Unicode) CreateHardLinkW Establishes a. (Unicode) CreateJobObjectA Creates or opens a job object. (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA) DeleteAtom Decrements the reference count of a local string atom. (Unicode) DosDateTimeToFileTime Converts MS-DOS date and time values to a file time.."
125,GetWindowThreadProcessId,"Microsoft Build · May 19 – 22, 2025The GetWindowThreadProcessId function is a Windows API function that retrieves the identifier of the thread that created a specified window and, optionally, the identifier of the process that created the window.This function is useful for applications that need to interact with or manage windows created by different threads or processes.References:GetWindowThreadProcessId function (winuser.h) Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [out, optional] lpdwProcessId Type: LPDWORD A pointer to a variable that receives the process.NativeMethods.GetWindowThreadProcessId(IntPtr, Int32) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd lpdwProcessId Int32 Returns Int32 Applies to. Learn more about the.GetGUIThreadInfo function (winuser.h) Retrieves information about the active window or a specified GUI thread. Syntax Parameters [in] idThread Type: DWORD The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId function. Requirements Requirement Value Minimum supported client.In the callback function, GetWindowThreadProcessId retrieves the ID of the process that creates the corresponding window; if this window is visible, I stop the enumeration (see the GetMainWindow implementation). The procedure for getting the main window of a process (for which you can use the GetWindowThreadProcessId API) is described in Jeff.The thread that creates a window must contain the code for its... An application can use the EnumThreadWindows function to enumerate the windows created by a particular thread. This function passes the handle to each thread window, in turn, to an application-defined callback function, EnumThreadWndProc. The GetWindowThreadProcessId function.Best regards Francesco Paolo La Gamba| @Francesco Paolo La Gamba First, its important to understand that Windows desktop objects are associated with threads, not processes. The process id associated with each enumerated top-level window can be identified by calling the GetWindowThreadProcessId function. With the process id you can obtain a handle.Windows XP: Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Windows XP Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Christophe Nasarre This article assumes you're familiar with Win32 Level of Difficulty     1   2   3 Download the code for this article:.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-message-l1-1-0 (introduced in Windows 8) See also Conceptual.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-message-l1-1-0 (introduced in Windows 8) See also Conceptual.Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-2-0 (introduced in Windows 8.1) See also GetCurrentThreadId."
126,SetTextColor,"Microsoft Build · May 19 – 22, 2025SetTextColor function (wingdi.h) The SetTextColor function sets the text color for the specified device context to the specified color. Syntax Parameters [in] hdc A handle to the device context. [in] color The color of the text. Return value If the function succeeds, the return value is a color reference for the previous text color as a COLORREF.NumberPicker.SetTextColor(Color) Method Definition Namespace: Android.Widget Assembly:Mono.Android.dll Sets the text color for all the states (normal, selected, focused) to be the given color. Attributes RegisterAttribute Remarks Sets the text color for all the states (normal, selected, focused) to be the given color.Java documentation for.TextView.SetTextColor Method Definition Namespace: Android.Widget Assembly:Mono.Android.dll Overloads SetTextColor(ColorStateList) Sets the text color. SetTextColor(Color) Sets the text color for all the states (normal, selected, focused) to be this color. SetTextColor(ColorStateList) Sets the text color. Parameters colors ColorStateList.TextAppearanceInfo.Builder.SetTextColor(Color) Method Definition Namespace: Android.Views.InputMethods Assembly:Mono.Android.dll Parameters textColor Color Returns TextAppearanceInfo.Builder Attributes RegisterAttribute Applies to. Learn more about the Android.Views.InputMethods.TextAppearanceInfo.Builder.SetTextColor in the.RemoteViews.SetTextColor(Int32, Color) Method Definition Namespace: Android.Widget Assembly:Mono.Android.dll Equivalent to calling android.widget.TextView#setTextColor(int). Parameters viewId Int32 The id of the view whose text color should change color Color Sets the text color for all the states (normal, selected, focused) to be this color..IDWritePaintReader::SetTextColor method (dwrite_3.h) Sets the client-defined text color. The default value is transparent black. Changing the text color can affect the appearance of a glyph if its definition uses the current text color. If that's the case, then the SetCurrentGlyph method returns the DWRITE_PAINT_ATTRIBUTES_USES_TEXT_COLOR flag via.Text-Formatting Attributes An application can use six funct... Text and Background Color Applications can use the SetTextColor function to set the color of text drawn in the client-area of their windows, as well as the color of text drawn on a color printer. An application can use the SetBkColor function to set the color that appears behind each.IPreviewHandlerVisuals::SetTextColor method (shobjidl_core.h) Sets the color of the text within the preview handler. Syntax Parameters [in] color Type: COLORREF A value of type COLORREF to use for the preview handler text color. Return value Type: HRESULT If this method succeeds, it returns S_OK. Requirements Requirement Value Minimum supported.LVM_SETTEXTCOLOR message Sets the text color of a list-view control. You can send this message explicitly or by using the ListView_SetTextColor macro. Parameters wParam Must be zero. lParam A COLORREF that specifies the new text color. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum s... Sets the.TVM_SETTEXTCOLOR message Sets the text color of the control. You can send this message explicitly or by using the TreeView_SetTextColor macro. Parameters wParam Must be zero. lParam COLORREF value that contains the new text color. If this argument is -1, the control will revert to using the system color for the text color. Return value Returns a."
127,CreateDIBSection,"Microsoft Build · May 19 – 22, 2025The CreateDIBSection function is used in Windows programming to create a device-independent bitmap (DIB) that applications can write to directly. This function allows for the creation of a DIB that can be used for various graphical operations, such as drawing images or manipulating pixel data.When you call CreateDIBSection, you specify parameters that define the bitmap's dimensions, color format, and other attributes. The function returns a handle to the DIB, which can then be used with other GDI functions to perform drawing operations.References:CreateDIBSection function (wingdi.h) The CreateDIBSection function creates a DIB that applications can write to directly. The function gives you a pointer to the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the bitmap, or you can let the system allocate the memory for the.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. ... CreateCompatibleBitmap Creates a bitmap compatible with a device. CreateDIBitmap Creates a device-dependent bitmap (DDB) from a DIB. CreateDIBSection Creates a DIB that.DIBSECTION structure (wingdi.h) The DIBSECTION structure contains information about a DIB created by calling the CreateDIBSection function. Each color mask indicates the bits that are used to encode one of the three color channels (red, green, and blue). dshSection Contains a handle to the file mapping object that the CreateDIBSection function.SelectObject function (wingdi.h) The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type. The specified object must have been created by using one of the following functions. Object Functions Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap,.This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function. [in] c The number of bytes of information to be written to the buffer. [out] pv A pointer to a buffer that receives the information about the specified graphics object..CreatePatternBrush function (wingdi.h) The CreatePatternBrush function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. Requirements Requirement Value Minimum supported client ... The bitmap can be a DIB.Using GDI Functions With WCS There are various functions in the graphics device interface (GDI) that use or operate on color data. CreateDIBSection If the BITMAPINFO structure passed through the pbmi parameter is not version 4 or version 5, no color management is done. SelectObject If the object is a bitmap created with CreateDIBSection, color.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.AND mask XOR mask Display ... Follow these steps to create an alpha blended cursor or icon at run time: Complete a BITMAPV5HEADER structure, as in the code example following these steps, to define a 32 bits per pixel (BPP) alpha blended DIB. Call the CreateDIBSection function to create a DIB section based on the BITMAPV5HEADER structure that you.RGBQUAD structur... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also BITMAPINFO Bitmap Structures Bitmaps Overview CreateDIBSection CreateDIBitmap GetDIBits SetDIBits SetDIBitsToDevice."
128,WSAIoctl,"Microsoft Build · May 19 – 22, 2025WSAIoctl function (winsock2.h) The WSAIoctl function controls the mode of a socket. See Winsock IOCTLs. [in] lpvInBuffer A pointer to the input buffer. [in] cbInBuffer The size, in bytes, of the input buffer. [out] lpvOutBuffer A pointer to the output buffer. [in] cbOutBuffer The size, in bytes, of the output buffer. [out] lpcbBytesReturned A.It is used to set or retrieve some operating parameters associated with the socket, independent of the p... Here are the supported commands to use in the cmd parameter and their semantics: The WSAIoctl function is used to set or retrieve operating parameters associated with the socket, the transport protocol, or the communications subsystem. The.SIO_MULTIPOINT_LOOPBACK Command Code for WSAIoctl When d_leaf sockets are used in a nonrooted data plane, it is desirable to have traffic that is sent out received back on the same socket. The SIO_MULTIPOINT_LOOPBACK command code for WSAIoctl is used to enable or disable loopback of multipoint traffic. When d\... The SIO\_MULTIPOINT\_LOOPBACK.It is used to set or retrieve some operating parameters associated with the socket, independent of the p... Here are the supported commands to use in the cmd parameter and their semantics: The WSAIoctl function is used to set or retrieve operating parameters associated with the socket, the transport protocol, or the communications subsystem. The.Provider-Specific Extension Mechanism The WSAIoctl function enables service providers to offer provider-specific feature extensions. This is done through the WSAIoctl function using the SIO_GET_EXTENSION_FUNCTION_POINTER command code. On Windows Vista and later, new Winsock system extensions are exported directly from the Winsock DLL, so the.SIO_MULTICAST_SCOPE Command Code for WSAIoctl When multicasting is employed, it is usually necessary to specify the scope over which the multicast should occur. Note that this corresponds to the time-to-live (TTL) parameter in IP multicasting. function WSAJoinLeaf is used to join a leaf node into the multipoint sessionWhen multicasting is.SIO_TCP_INITIAL_RTO control code Description The SIO_TCP_INITIAL_RTO control code configures initial retransmission timeout (RTO) parameters on a socket. To perform this operation, call the WSAIoctl or WSPIoctl function with the following parameters. Parameters s A descriptor identifying a socket. dwIoControlCode The control code for the.According to SIO_RCVALL Control Code, The socket handle passed to the WSAIoctl or WSPIoctl function must be one of the following: An IPv4 socket that was created with the address family set to AF_INET, the socket type set to SOCK_RAW, and the protocol set to IPPROTO_IP. ...he address family set to AF_INET6, the socket type set to SOCK_RAW, and.Function Extension Mechanism in the SPI Because the Winsock DLL itself is no longer supplied by each individual stack vendor, it is not possible for a stack vendor to offer extended functionality by adding entry points to the ... To overcome this limitation, Winsock takes advantage of the new WSAIoctl function to accommodate service providers who.Renamed Functions In two cases it was necessary to rename functions th... Ioctl and Ioctlsocket/WSAIoctl Various C language run-time systems use the IOCTLs for purposes unrelated to Windows Sockets. As a consequence, the ioctlsocket function and the WSAIoctl function were defined to handle socket functions that were performed by IOCTL and fcntl in."
129,CreateFontA,"Microsoft Build · May 19 – 22, 2025CreateFontA function (wingdi.h) The CreateFont function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device. Syntax Parameters [in] cHeight The height, in logical units, of the font's character cell or character. ... The CreateFont function creates a logical font with.CreateEnhMetaFileA... (ANSI) CreateEnhMetaFileW The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. (Unicode) CreateFontA The CreateFont function creates a logical font with the specified characteristics. (ANSI) CreateFontIndirectA The CreateFontIndirect function creates a logical font that has the specified.CFP_ALLOCPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to allocate memory. CFP_FREEPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to free memory. (ANSI) CreateEnhMetaFileW The CreateEnhMetaFile fun... (Unicode) CreateFontA The CreateFont function creates a logical.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,."
130,GetWindowsDirectoryA,"Microsoft Build · May 19 – 22, 2025GetWindowsDirectoryA function (sysinfoapi.h) Retrieves the path of the Windows directory. This function is provided primarily for compatibility with legacy applications. New applications should store code in the Program Files folder and persistent data in the Application Data folder in the user's profile. For more information, see ShGetFolderPath..The current directory for the parent process. The 32-bit Windows system directory. Use the GetSystemDirectoryA function function to get the path of this directory. The 16-bit Windows system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is System. The Windows directory. Use.sysinfoapi.h header This header is used by multiple technologies. GetSystemDirectoryA Retrieves the path of the system directory. The retrieved information is in Coordinated Universal Time (UTC) format. GetSystemWindowsDirectoryA Retrieves the path of the shared Windows directory on a multi-user system. (ANSI) GetSystemWindowsDirectoryW Retrieves."
131,GetDoubleClickTime,"Microsoft Build · May 19 – 22, 2025GetDoubleClickTime function (winuser.h) Retrieves the current double-click time for the mouse. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds. Syntax Return value Type: UINT The return value specifies the current.If the uiParam value is greater than 5000 milliseconds, the system sets the double-click time to 5000 mi... The double-click time is the maximum number of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime function to set the double-click time. To get the current double-click.If the uiParam value is greater than 5000 milliseconds, the system sets the double-click time to 5000 mi... The double-click time is the maximum number of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime function to set the double-click time. To get the current double-click.Mouse Input Functions In this section Topic Description _TrackMouseEvent Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. Only one window at a time can capture the mouse; this ... GetDoubleClickTime Retrieves the current double-click time for the mouse. A double-click is a series of two.SetDoubleClickTime function (winuser.h) Sets the double-click time for the mouse. A double-click is a series of two clicks of a mous... The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click. Syntax Parameters [in] unnamedParam1 Type: UINT The number of milliseconds that may.If the hot spot is still within the rectangle and the elapsed time does not exceed the double-click time-out value, the system generate... An application can get and set double-click time-out values by using the GetDoubleClickTime and SetDoubleClickTime functions, respectively. Alternatively, the application can set the double-click–time-out value.GetDoubleClickTime Retrieves the current double-click time for the mouse. SetDoubleClickTime Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. Feedback Wa... Yes No Provide product feedback | Get help at Microsoft Q&A. This section.Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders. GetDoubleClickTime Retrieves the current double-click time for the mouse. GetFocus Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue..TTM_SETDELAYTIME message Sets the initial, pop-up, and reshow durations for a tooltip control. For the default double-click time of 500 ms, the initial, autopop, and reshow delay times are ... The following code fragment uses the GetDoubleClickTime function to determine the three delay times for any system. Requirements Requirement Value Minimum.If the elapsed time is less than the double-click time as defined by ::GetDoubleClickTime, CTripleClick sends a triple-click message to its client's window, whichever message code the client supplied. Figure 3** Mouse Control Panel ** Performance-conscious readers have... This is somewhat inefficient since the double-click time rarely changes.."
132,CreateEventW,"Microsoft Build · May 19 – 22, 2025CreateEventW function (synchapi.h) Creates or opens a named or unnamed event object. To specify an access mask for the object, use the CreateEventEx function. Syntax Parameters [in, optional] lpEventAttributes A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle cannot be inherited by child processes. The.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. ... (ANSI) CreateEventExW Creates or opens a named or unnamed event object and returns a handle.Additionally, if you examine the process of this application by using a debugging tool, the stack resembles the following in which the event handles are allocated: ntdll!ZwCreateEvent kernelbase!CreateEventExW+0x6e kernelbase!CreateEventW+0x27 clr!CLREvent::CreateManualEvent+0x3b clr!Thread::AllocHandles+0xa3 clr!Thread::CreateNewOSThread+0x85.Rust for Windows lets you use any Windows API (past, present, and future) directly and seamlessly via the windows crate (crate is Rust's term for a binary or a library, and/or the source code that builds... Whether it's timeless functions such as CreateEventW and WaitForSingleObject, powerful graphics engines such as Direct3D, traditional.AtlThunk_InitData Initializes an ATL thunk. Attach Attaches a virtual disk. BackupComplete The BackupComplete method causes VSS to generate a BackupComplete event, which signals writers that the backup process has completed. BackupEventLogA Saves the specified event log to a backup file. (ANSI) BackupEventLogW Saves the specified event log to a.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
133,LoadKeyboardLayoutW,"Microsoft Build · May 19 – 22, 2025LoadKeyboardLayoutW function (winuser.h) Loads a new input locale identifier (formerly called the keyboard layout) into the system. Prior to Windows 8: Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them..IsWindowEnabled Determines whether the specified window is enabled for mouse and keyboard input. keybd_event Synthesizes a key... LoadKeyboardLayoutA Loads a new input locale identifier (formerly called the keyboard layout) into the system. (ANSI) LoadKeyboardLayoutW Loads a new input locale identifier (formerly called the keyboard layout) into....ications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows."
134,Escape,"Microsoft Build · May 19 – 22, 2025The escape function in programming is typically used to handle special characters that may otherwise be interpreted differently by the programming language or environment. For example, in text templates, escape sequences can be used to generate text template tags or to escape control characters and quotation marks.In the context of SQL and ODBC, escape sequences are defined to standardize the syntax for various language features, such as date and time literals, scalar functions, and outer joins. For instance, in ODBC, the escape sequence format is represented as (extension).In JDBC, function escape sequences are used in SQL statements with the syntax {fn functionName}, where functionName is a supported function by the JDBC driver.References:Regex.Escape(String) Method Definition Namespace: System.Text.RegularExpressions Assemblies:System.dll, System.Text.RegularExpressions.dll Assemblies:netstandard.dll, System.Text.RegularExpressions.dll Assembly:System.Text.RegularExpressions.dll Assembly:System.dll Assembly:netstandard.dll Source:Regex.cs Source:Regex.cs Source:Regex.cs Escapes a.Regex.Unescape(String) Method Definition Namespace: System.Text.RegularExpressions Assemblies:System.dll, System.Text.RegularExpressions.dll Assemblies:netstandard.dll, System.Text.RegularExpressions.dll Assembly:System.Text.RegularExpressions.dll Assembly:System.dll Assembly:netst... Remarks The Unescape method performs one of the following two.{} Escape sequence / markup extension Provides the XAML escape sequence for attribute values. The escape sequence allows the subsequent values in the attribute to be interpreted as a literal. The escape sequence ({}) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup.PropertyCondition.Escape(String) Method Definition Namespace: Microsoft.VisualStudio.TestTools.UITest.Extension Assembly:Microsoft.VisualStudio.TestTools.UITest.Extension.dll Returns the provided string as an escaped string. Parameters input String The string to escape. Returns String The provided string as an escaped string. Applies to. Returns.about_Special_Characters Short description Describes the special character sequences that control how PowerShell interprets the next characters in the sequence. ...er sequences that are used to represent characters that aren't part of the standard charaThe sequences are commonly known as escape sequences. The escape (`e) character is most.SecurityElement.Escape(String) Method Definition Namespace: System.Security Assemblies:netstandard.dll, System.Runtime.dll Assembly:System.Runtime.Extensions.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:SecurityElement.cs Source:SecurityElement.cs Source:SecurityElement.cs ... Parameters str String The string within which to escape.Escape Characters Overview An escape character is a single character that suppresses any special meaning of the character that follows it. When creating a flat file schema using BizTalk Editor, you can define a default escape character for the entire schema using the Default Escape Character and Default Escape Character Type properties of the.ESC_TWAIN_CAPABILITY Escape Code To carry out a capability operation on a private TWAIN capability, a TWAIN application notifies the TWAIN compatibility layer, which then calls the WIA driver's IStiUSD::Escape method, passing the ESC_TWAIN_CAPABILITY escape code. The pseudocode in the following example demonstrates how the Escape method should be.String/Character escape sequence \e Note This article is a feature specification. The specification serves as the design document for the feature. Champion issue: https://github.com/dotnet/csharplang/issues/8657 Summary An addition of the string/character escape sequence \e as a shortcut/short-hand replacement for the character code point 0x1b,.Using SQL escape sequences Download JDBC driver The Microsoft JDBC Driver for SQL Server supports the use of SQL escape sequences, as defined by the JDBC API. Escape sequences are used within a SQL statement to tell the driver that the escaped part of the SQL string should be handled differently. ... that the JDBC API requires, and all are."
135,EnableMenuItem,"Microsoft Build · May 19 – 22, 2025EnableMenuItem function (winuser.h) Enables, disables, or grays the specified menu item. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu. [in] uIDEnableItem Type: UINT The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu. [in].CMenu Class An encapsulation of the Windows HMENU. CMenu::CheckMenuRadioItem Places a radio button next to a menu item and removes the radio b... CMenu::DrawItem Called by the framework when a visual aspect of an owner-drawn menu changes. CMenu::EnableMenuItem Enables, disables, or dims (grays) a menu item. CMenu::GetDefaultItem Determines the.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. Clicking a menu item opens a submenu or causes the application to carry out a command. However, you can use the SetMenuItemBitmaps. The EnableMenuItem function enables, grays, or disables a menu item. To determine whether a menu item is.Enabling Menus in MFC Apps, Changing the Behavior of Enter with DLGKEYS Sample App Paul DiLascia Code for this article: CQA0700.exe (48KB) Q I'm trying to enable and disable the menus in my MFC app. It would certainly seem reasonable that if there's a function called EnableMenuItem, that would be the function to call to enable or disable your menu.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Menus (Menus and Other Resources) This section describes menus and explains how to use them. In This Section Name Description About Menus Discusses menus. If the menu bar changes after the system has created the window, this function.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) AppendMenuW Appen... DrawMenuBar.To change the attributes of existing menu items, it is much faster to use the CheckMenuItem and EnableMenuItem functions. The following groups of flags cannot be used together: MF_BYCOMMAND and MF_BYPOSITION MF_DISABLED, MF_ENABLED, and MF_GRAYED MF_BITMAP, MF_STRING, MF_OWNERDRAW, and MF_SEPARATOR MF_MENUBARBREAK and MF_MENUBREAK MF_CHECKED and.To change the attributes of existing menu items, it is much faster to use the CheckMenuItem and EnableMenuItem functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).Data Objects and Data Sources: Manipulation After a data object or data source has been created, you can perform a number of common operations on the data, such as inserting and removing data, enumerating the formats the data is in, and more. This article describes the techniques necessary to complete the most common operations. If you are using.(Unicode) CreateMenu Create... The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.."
136,UnregisterClassW,"Microsoft Build · May 19 – 22, 2025UnregisterClassW function (winuser.h) Unregisters a window class, freeing the memory required for the class. Syntax Parameters [in] lpClassName Type: LPCTSTR A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or.(Unicode) DeregisterShellHookWindow Unregisters a specified Shell window that is registered to receive Shell hook messages. (Unicode) SetClassLongW Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structu... UnregisterClassA Unregisters a window class, freeing the memory required for.(ANSI) DefMDIChildProcW Provides default processing ... (ANSI) DefWindowProcW Calls the default window procedure to provide default processing for any window messages that an application does not process. DeregisterShellHookWindow Unregisters a specified Shell window that is registered to receive Shell hook messages. (ANSI) DialogBoxIndirectParamW....w3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_GetDeviceCaps referenced in function _glfwGetMonitorContentScaleWin32 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_GetDeviceGammaRamp referenced in function _glfwPlatformGetGammaRamp 1&gt;glfw3.lib(win32_monitor.obj) : error."
137,OleDraw,"Microsoft Build · May 19 – 22, 2025OleDraw function (ole.h) Enables drawing objects more easily. Then, OleDraw converts the RECT structure to a RECTL structure, and calls IViewObject::Draw as follows: Do not use this function to draw into a metafile because it does not specify the parameter required for drawing into metafiles. ... [desktop apps only] Target Pl Windows Header ole.h.OleDestroyMenuDescriptor Called by the container to free t... OleDoAutoConvert Automatically converts an object to a new class if automatic conversion for that object class is set in the registry. OleDraw The OleDraw function (ole2.h) enables drawing objects more easily. You can use it instead of calling IViewObject::Draw directly..OleDraw function (ole2.h) Enables drawing objects more easily. You can us... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h (include Ole2.h) Library Ole32.lib DLL Ole32.dll API set.ole.h header This header is used by Component Object Model (COM). For more information, see: Component Object Model (COM) ole.h contains the following programming interfaces: Functions OleCreate The OleCreate function (ole.h) creates an embedded object identified by a CLSID. OleCreateFromFile The OleCreateFromFile function (ole.h) creates an.CreateDataAdviseHolder CreateDataCache CreateFormatEnumerator CreateOleAdviseHolder DoDragDrop OleCreate OleCreateDefaultHandler OleCreateEmbeddingHelper OleCreateEx OleCreateFontIndirect OleCreateFromData OleCreateFromDataEx OleCreateFromFile OleCreateFromFileEx OleCreateLink OleCreateLinkEx OleCreateLinkFromData OleCreateLinkFromDataEx.IViewObject::Draw method (oleidl.h) Draws a representation of an object onto the specified device context. Remarks A container application issues a call to IViewObject::Draw to create a representation of a contained object. ...dows 2000 Server [desktop apps only] Target Platform Window oleidl.h See also DVASPECT DVASPECT2 DVASPECTINFO.DVASPECT enumeration (wtypes.h) Specifies the desired data or view aspect of the object when drawing or getting data. MiscStatus = 1 Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wtypes.h See also FORMATETC IAdviseSink.Component Object Model (COM) Overview of the Component Object Model (COM) technology. To develop Component Object Model (COM), you need these headers: accctrl.h callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h."
138,IsCharLowerA,"Microsoft Build · May 19 – 22, 2025IsCharLowerA function (winuser.h) Determines whether a character is lowercase. ...r during setup or through ContrSyntax Parameters [in] ch Type: TCHAR The character to be tested. Return value Type: BOOL If the character is lowercase, the return value is nonzero. Remarks Note The winuser.h header defines IsCharLower as an alias that automatically.(Unicode) CharLowerA Converts a character string or a single character to lowercase. If the operand is a character string, the function c... This determination is based on the semantics of the language selected by the user during setup or through Control Panel. (Unicode) IsCharLowerA Determines whether a character is lowercase. This determination.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configurati... ChangeWindowMessageFilterEx Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.."
139,GetTextExtentPointA,"Microsoft Build · May 19 – 22, 2025GetTextExtentPointA function (wingdi.h) The GetTextExtentPoint function computes the width and height of the specified string of text. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the GetTextExtentPoint32 function, which provides more accurate results. Syntax Parameters [in] h....(Unicode... (ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text. (Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of the specified string of text. (ANSI) GetTextExtentPointI The GetTextExtentPointI function computes the width and.(Unicode) GetTextExtentPoint32A The GetTextExtentPoint32 function computes the width and height of the specified string of text. (ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text(Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of."
140,GetUserObjectInformationA,"Microsoft Build · May 19 – 22, 2025GetUserObjectInformationA function (winuser.h) Retrieves information about the specified window station or desktop object. Syntax Parameters [in] hObj A handle to the window station or desktop object. This handle is returned by the CreateWindowStation, OpenWindowStation, CreateDesktop, or OpenDesktop function. [in] nIndex The information to be.Window Stations and Desktops Overview of the Window Stations and Desktops technology. ... GetThreadDesktop Retrieves a handle to the desktop assigned to the specified thread. GetUserObjectInformationA Retrieves information about the specified window station or desktop object. (ANSI) GetUserObjectInformationW Retrieves information about the.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
141,CancelWaitableTimer,"Microsoft Build · May 19 – 22, 2025CancelWaitableTimer function (synchapi.h) Sets the specified waitable timer to the inactive state. Syntax Parameters [in] hTimer A handle to the timer object. Therefore, threads performing a wait operation on the timer remain waiting until they time out or the timer is reactivated and its state is set to signaled. Requirements Requirement Value.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. AcquireSRWLockShared Acquires a slim reader/writer (SRW) lock in shared mode..Waitable Timer Objects A waitable timer object is a synchronization object whose state is set to signaled when the specified due time arrives. There are two types of waitable timers that can be created: manual-reset and synchronization. If the period is zero, the timer is not a periodic timer; it is signaled once and then deactivated. A thread can.WakeByAddressSingle Wakes a thread waiting for the value of an address to change. Waitable-timer functions Waitable-timer function Description CancelWaitableTimer Sets the specified waitable timer to the inactive state. CreateWaitableTimer Creates or opens a waitable timer object. CreateWaitableTimerEx C... TimerAPCProc Application-defined timer.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization Object Security and Access Rights The Windows security model enables you to control access to event, mutex, semaphore, and waitable timer objects. TIMER_MODIFY_STATE (0x0002) Modify state access, which is required for the.SetWaitableTimer function (synchapi.h) Activates the specified waitable timer. Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2: If relative time is specified, the timer includes time spent in low-power states. A periodic timer automatically reactivates each time the period elapses, until.A periodic timer automatically reactivates each time the period elapses, until the timer is canceled using the CancelWaitableTimer function or reset using SetWaitableTimerEx. If lPeriod is less tha... Requirements Requirement Value Minimum supported client Windows 7 [desktop apps | UWP apps] Minimum supported server Windows Server 2008 R2 [desktop.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp... Cancel The Cancel method cancels an incomplete asynchronous operation. CancelWaitableTimer Sets.CreateWaitableTimerW ... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CancelWaitableTimer CloseHandle CreateProcess.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CancelWaitableTimer CloseHandle CreateProcess CreateWaitableTimer."
142,CoGetTreatAsClass,"Microsoft Build · May 19 – 22, 2025CoGetTreatAsClass function (combaseapi.h) Returns the CLSID of an object that can emulate the specified object. Syntax Parameters [in] clsidOld The CLSID of the object that can be emulated (treated as) an object with a different CLSID. [out] pClsidNew A pointer to where the CLSID that can emulate clsidOld objects is retrieved. Remarks.This means that if you have a TreatAs entry for Class1 to be treated as Class2 on your local computer, but you call CoCreateInstance to create an instance of Class1 and you specify a remote server, DCOM will try to create an instance of Class2 on the remote server, even if Class2 is not registered on the remote server, which will cause the call.CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server proc... CoGetStdMarshalEx Creates an aggregated standard marshaler for use with lightweight client-side handlers. CoGetTreatAsClass Returns the CLSID of an object that can emulate the specified object. CoImpersonateClient Enables the.CoGetSystemSecurityPermissions Returns the default values of the Security Descriptors of the machine-wide ... CoGetTreatAsClass Returns the CLSID of an object that can emulate the specified object. CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoTaskMemRealloc Changes the size of a previously.CoTreatAsClass function (objbase.h) Establishes or removes an emulation, in which objects of one class are treated as objects of a different class. Syntax Parameters [in] clsidOld The CLSID of the object to be emulated. [in] clsidNew The... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].CoGetSystemSecurityPermissions Returns the default values of the Security Descriptors of the machin... CoGetTreatAsClass Returns the CLSID of an object that can emulate the specified object. CoHandlePriorityEventsFromMessagePump Provides an opportunity for short-running infrastructural COM calls and other high-priority or short-running COM work to."
143,GlobalAlloc,"Microsoft Build · May 19 – 22, 2025GlobalAlloc is a function in programming used to allocate a specified number of bytes from the heap. It is part of the global memory management functions that were provided for compatibility with 16-bit Windows. The memory allocated by GlobalAlloc is private and cannot be accessed by other processes, except when using specific flags for shared memory.The function returns a handle to the allocated memory, which can be used to access the memory block. If you need to change the size or attributes of a memory object allocated by GlobalAlloc, you can use the GlobalReAlloc function. To free the memory allocated by GlobalAlloc, the GlobalFree function should be used.References:GlobalAlloc function (winbase.h) Allocates the specified number of bytes from the heap. Note  The global functions have greater overhead and provide fewer features than other memory management functions. New applications should use the heap functions unless documentation states that a global function should be used. For more information, see.Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compatibility with 16-bit Windows. Memory objects allocated by GlobalAlloc and LocalAlloc are in private, committed pages with read/write access that cannot be accessed by other processes. When you allocate fixed.Comparing Memory Allocation Methods The following is a brief comparison of the various memory allocation methods: CoTaskMemAlloc Gl... Starting with 32-bit Windows, GlobalAlloc and LocalAlloc are implemented as wrapper functions that call HeapAlloc using a handle to the process's default heap. Therefore, GlobalAlloc and LocalAlloc have greater.CSharedFile Class The ... Shared memory files differ from other memory files in that memory for them is allocated with the GlobalAlloc Windows function. The CSharedFile class stores data in a globally allocated memory block (created using GlobalAlloc), and this memory block can be shared using DDE, the Clipboard, or other OLE/COM uniform data.GlobalLock function (winbase.h) Locks a global memory object and returns a pointer to the first byte of the object's memory block. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Return value If the function succeeds, the return value is a pointer to the first byte of the memory block. Requirements Requirement Value.The system initializes and loads each committed page into p... When the process terminates, the system releases the storage for committed pages. A process can use VirtualAlloc or VirtualAllocEx to commit physical pages from a reserved region. They can also simultaneously reserve and commit pages. The GlobalAlloc and LocalAlloc functions allocate.Remarks When the GlobalAlloc function allocates a memory object with GMEM_MOVEABLE, it returns a handle to the object. The GlobalLock function converts this handle into a pointer to the memory block, and GlobalHandle converts the pointer back into a handle. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only].Dynamic-Link Library Data A Dynamic-Link Library (DLL) can contain global data or local data. For more information, see the documentation... Dynamic Memory Allocation When a DLL allocates memory using any of the memory allocation functions (GlobalAlloc, LocalAlloc, HeapAlloc, and VirtualAlloc), the memory is allocated in the virtual address space.GlobalFlags function (winbase.h) Retrieves information about the specified global memory object. Note  This function is provided only for compatibility with 16-bit versions of Windows. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Return value If the function succeeds, the return value specifies the allocation values.Figure 1** EatMem Stressor in Action ** Overall Program Structure The overall structure of the EatMem stressor tool, written in C#, is presented in Figure 2. In particular I call the GlobalAlloc and GlobalFree functions to allocate and free memory, and the GlobalMemoryStatus function to determine how much memory to allocate. Figure 2 EatMem."
144,GetProcessWindowStation,"Microsoft Build · May 19 – 22, 2025GetProcessWindowStation function (winuser.h) Retrieves a handle to the current window station for the calling process. Syntax Return value If the function succeeds, the return value is a handle to the window station. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Window Station and Desktop Functions Applications can use the following functions with window station objects. EnumWindowStations Enumerates all window stations in the... GetProcessWindowStation Retrieves a handle to the current window station for the calling process. GetUserObjectInformation Retrieves information about the specified window.Windows XP: Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Windows XP Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Christophe Nasarre This article assumes you're famili... These parameters are the command line (GetCommandLine), the environment strings.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The function passes the name of each window station, in turn, to an application-defined callback function... (Unicode) GetProcessWindowStation Retrieves a handle to the current window station for the calling process. GetThreadDesktop Retrieves a handle to the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowstation-l1-1-0 (introduced in Windows 8) See also.Table of co... To determine whether a service is running as an interactive service, call the GetProcessWindowStation function to retrieve a handle to the window station, and the GetUserObjectInformation function to test whether the window station has the WSF_VISIBLE attribute. Yes No Provide product feedback | Get help at Microsoft Q&A. Typically,....ssig specified window stationRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowstation-l1-1-0.EnumDesktopsW function (winuser.h) Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each de... Syntax Parameters [in, optional] hwinsta A handle to the window station whose desktops are to be enumerated. This handle is returned by the CreateWindowStation,.EnumDesktopsA function (winuser.h) Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each de... Syntax Parameters [in, optional] hwinsta A handle to the window station whose desktops are to be enumerated. This handle is returned by the CreateWindowStation,.CloseWindowStation function (wi... Do not specify the handle returned by the GetProcessWindowStation function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library."
145,AdjustWindowRect,"Microsoft Build · May 19 – 22, 2025To use the AdjustWindowRect function in a Windows application, you need to follow these steps:Here’s a simple example in C++:Make sure to replace ""WindowClass"" with your actual window class name.References:AdjustWindowRect function (winuser.h) Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. To specify an extended window style, use the AdjustWindowRectEx function. Requirements.AddClipboardFormatListener Places the given window in the system-maintained clipboard format listener list. AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size..Window Functions Name Description AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx Calculates the required size of the window rectangle,.For programming guidance for this technology, see: Windows and Messages Functions AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx.Windows and messages The Microsoft Game Develop... AdjustWindowRect AdjustWindowRectEx CallWindowProc CreateWindowEx DefWindowProc DestroyCursor DestroyWindow DispatchMessage GetClientRect GetCursorInfo GetCursorPos GetMessage GetWindowLong GetWindowLongPtr KillTimer LoadCursor MoveWindow PeekMessage PostMessage PostQuitMessage PostThreadMessage.Describes how the GDK uses the Win32 programming style, including windows and messages. Although much of this is identical to what you might encounter on Windows PC, this topic describes what's supported on console and the differences from Windows PC.ContentSizePolicy Enum Definition Namespace: Microsoft.UI.Content Edit Specifies the supported resizing capabilities between a DesktopChildSiteBridge and its parent Win32 HWND. Resiz... Uses AdjustWindowRect function (winuser.h) to account for a potential non-client area in the parent HWND. Applies to See also ResizePolicy. Specifies the supported.Window functions AdjustWindowRect AdjustWindowRectEx AllowSetForegroundWindow AnimateWindow AnyPopup ArrangeIconicWindows BeginDeferWindowPos BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx.About Windows This topic describes the programming elements that applications use to create and use windows; manage relationships between windows; and size, move, and display windows. The overview i... An application may need to create a window with a client area of a particular size. The AdjustWindowRect and AdjustWindowRectEx functions calculate....AULT, 0, NULL, NULL, hInst, NULL); CLIENTCREATESTRUCT ccs; ccs.idFirstChild = 5000; hwndClient = CreateWindow(TEXT(&quot;mdiclient&quot;), NULL, WS_CLIPCHILDREN | WS_CHILD | WS_HSCROLL | WS_VSCROLL | MDIS_ALLCHILDSTYLES, 0, 0, 0, 0, hWndMDI, 0, hInst, (LPSTR)&amp;ccs); ShowWindow(hWndMDI, SW_SHOW); ShowWindow(hwndClient, SW_SHOW); //so as the."
146,SetMetaRgn,"Microsoft Build · May 19 – 22, 2025SetMetaRgn function (wingdi.h) The SetMetaRgn function intersects the current clipping region for the specified device context with the current metaregion and saves the combined region as the new metaregion for the specified device context. Requi... The SetMetaRgn function intersects the current clipping region for the specified device context.Clipping Functions The following functions are used with clipping. Function Description ExcludeClipRect Creates a new clippi... SelectClipRgn Selects a region as the current clipping region for the specified device context. SetMetaRgn Intersects the current clipping region for the specified device context with the current metaregion and saves the.EMRABORTPATH structure (wingdi.h) Contains data for the AbortPath, BeginPath, EndPath, CloseFigure, FlattenPath, WidenPath, SetMetaRgn, SaveDC, and RealizePalette enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.3.2.40 EMR_SETMETARGN Example 2 This section provides an example of the EMF EMR_SETMETARGN record ([MS-EMF] section 2.3.2). 000006A0:             1C 00 00 00 08 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001C) Size (0x00000008) Type (4 bytes): 0x0000001C identifies the record type as EMR_SETMETARGN..3.2.9 EMR_SETMETARGN Example 1 This section provides an example of the EMF EMR_SETMETARGN record ([MS-EMF] section 2.3.2). 000000D0:                                    1C 00 00 00 000000E0: 08 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001C) Size (0x00000008) Type (4 bytes): 0x0000001C identifies the.2.3.2 Clipping Record Types The Clipping record types define and manage clipping regions. Note: The EMR_SETMETARGN record does not specify parameters. EMR_SETMETARGN 2.3.2 If the current metaregion is null, it is set to the current clipping region. The EMR_SETMETARGN record does not contain this field. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1....SETARCDIRECTION = 0x00000039, EMR_SETMITERLIMIT = 0x0000003A, EMR_BEGINPATH = 0x0000003B, EMR_ENDPATH = 0x0000003C, EMR_CLOSEFIGURE = 0x0000003D, EMR_FILLPATH = 0x0000003E, EMR_STROKEANDFILLPATH = 0x0000003F, EMR_STROKEPATH = 0x00000040, EMR_FLATTENPATH = 0x00000041, EMR_WIDENPATH = 0x00000042, EMR_SELECTCLIPPATH = 0x00000043, EMR_ABORTPATH =....triev current metaregion for the specified deviceRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Clipping Functions Clipping....LYGON16 EMR_POLYPOLYLINE EMR_POLYPOLYLINE16 EMR_POLYTEXTOUTA EMR_POLYTEXTOUTW EMR_REALIZEPALETTE EMR_RECTANGLE EMR_RESIZEPALETTE EMR_RESTOREDC EMR_ROUNDRECT EMR_SAVEDC EMR_SCALEVIEWPORTEXTEX EMR_SCALEWINDOWEXTEX EMR_SELECTCLIPPATH EMR_SELECTOBJECT EMR_SELECTPALETTE EMR_SETARCDIRECTION EMR_SETBKCOLOR EMR_SETBKMODE EMR_SETBRUSHORGEX.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc."
147,LockWindowUpdate,"Microsoft Build · May 19 – 22, 2025The LockWindowUpdate function in Windows programming is used to temporarily suspend drawing in a specified window. This is particularly useful when a user is moving or resizing a window, as it prevents other windows from drawing over the tracking rectangle during these operations.When an application calls LockWindowUpdate, it specifies the window to lock, and the lock applies to that window and all of its child windows. While the lock is active, functions like GetDC and BeginPaint will return a display device context with an empty visible region, allowing the application to continue drawing in the window, but all output will be clipped.The lock remains in effect until the application clears it by calling LockWindowUpdate again with NULL as the parameter. Once the lock is cleared, the system uses an accumulated bounding rectangle to set the update region for the window and its child windows, which can trigger a WM_PAINT message if any drawing occurred while the lock was set.References:LockWindowUpdate function (winuser.h) The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time. Syntax Parameters [in] hWndLock The window in which drawing will be disabled. Remarks The purpose of the LockWindowUpdate function is to permit drag/drop feedback to be drawn over a.Window Update Lock A window update lock is a temporary ... The system uses the lock to prevent other windows from drawing over the tracking rectangle whenever the user moves or sizes a window. An application uses the LockWindowUpdate function to set or clear a window update lock, specifying the window to lock. The lock applies to the specified.FormControl.lockWindowUpdate(Boolean) Method Definition Namespace: Dynamics.AX.Application Assembly: Locks or unlocks the window of the control for update. Parameters _lock Boolean A Boolean value: true to lock the window, and false to unlock the window. Returns Boolean true if the operation was successful; otherwise, false. Applies to. Locks or.xFormRun.lockWindowUpdate(Boolean) Method Definition Namespace: Dynamics.AX.Application Assembly: Parameters _lock Boolean Returns Boolean Applies to. Learn more about the Dynamics.AX.Application.xFormRun.lockWindowUpdate in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.xformrun.lockwindowupdate.GetDCEx function (winuser.h) The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. DCX_NORESETATTRS This flag is ignored. DCX_LOCKWINDOWUPDATE Allows drawing even if there is a.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares ... InvalidateRgn Invalidates the client area within a region. LockWindowUpdate Disables or enables drawing in a window. OutputProc A callback function used with the GrayString function. WindowFromDC Returns a handle.(Inherited from FormControl) lastReferenceResolver() (Inherited from FormControl) lastReferenceResolver(Object) (Inherited from FormControl) leave() left(Int32, Int32) left(Int32) Gets or sets the horizontal position of the control in the form. leftMargin() leftMargin(Int32) leftMode() Sets the horizontal arra... (Inherited from FormControl).Accumulated Bounding Rectangle The accumulated bounding rectangle is the smallest rectangle enclosing the portion of a window or client area affected by recent drawing operations. It is sometimes used in conjunction with LockWindowUpdate to determine which portion of the client area must be redrawn after the update lock is cleared. The accumulated.(Inherited from FormControl) labelUnderline() labelUnderline(Boolean) labelWidth(Int32, Int32) labelWidth(Int32) labelWidthMode() la... (Inherited from FormControl) lockDC() lockWindowUpdate(Boolean) Locks or unlocks the window of the control for update. (Inherited from FormControl) lookup() lostFocus() Indicates that the control has lost focus..(Inherited from FormControl) lastReferenceResolver() (Inherited from FormControl) lastReferenceResolver(Object) (Inherited from FormControl) left(Int32, Int32) left(Int32) Gets or sets the horizontal position of the control in the form. leftMode() Sets the horizontal arrange mode for the cont... (Inherited from FormControl)."
148,SetDIBits,"Microsoft Build · May 19 – 22, 2025SetDIBits function (wingdi.h) The SetDIBits function sets the pixels in a compatible bitmap (DDB) using the color data found in the specified DIB. Syntax Parameters [in] hdc A handle to a device context. [in] hbm A handle to the compatible bitmap (DDB) that is to be altered using the color data from the specified DIB. [in] start The starting scan.Device-Dependent Bitmaps Device-dependent bitmaps (DDBs) are described by using a single structure, the BITMAP structure. Specifying CBM_INIT in the call to CreateDIBitmap is equivalent to calling the CreateCompatibleBitmap function to create a DDB in the format of the device and then calling the SetDIBits function to translate the DIB bits to the.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. SetDIBColorT... SetDIBits Sets the pixels in a bitmap using color data from a DIB. SetDIBitsToDevice Sets the pixels in a rectangle using color data from a DIB. Obsolete Functions The following functions are provided only for compatibility with 16-bit versions of.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.... GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. The retrieved dimensions must have been set by the SetBitmapDimensionEx.RGBQUAD structure (wingdi.h) The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.SetBitmapBits function (wingdi.h) The SetBitmapBits function sets the bits of color data for a bitmap to the specified values. Applications should use the SetDIBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target.BITMAP structure (wingdi.h) The BITMAP structure defines the type, width, height, color format, and bit values of a bitmap. To transfer a bitmap from one device to another, use the GetDIBits and SetDIBits functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.CreateDIBitmap function (wingdi.h) The Crea... Calling CreateDIBitmap with fdwInit as CBM_INIT is equivalent to calling the CreateCompatibleBitmap function to create a DDB in the format of the device and then calling the SetDIBits function to translate the DIB bits to the DDB. [in] flInit Specifies how the system initializes the bitmap bits. The."
149,InSendMessage,"Microsoft Build · May 19 – 22, 2025InSendMessage function (winuser.h) Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function. To obtain additional information about how the message was sent, use the InSendMessageEx function. Syntax Return value Type:.By using the InSendMessage or InSendMessageEx function, a window procedure can determine whether it is processing a message sent by another thread. Otherwise, a window procedure can determine whether a message it has received wa... Before calling any of the functions in the preceding list while processing a message, the window procedure should.Messages and Message Queues This s... InSendMessage Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function. To obtain additional information about how the message was sent, use the InSendMessageEx function..(Unicode) EnumDisplayMonitors The EnumDisplayMonitors function enumerates display monitors (i... (Unicode) EnumPropsA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. (ANSI) EnumPropsExA Enumerates all entries in the property list of a window by passing them, one by. GetCIMSSM.A CSV was issued from a message loop that was invoked by another application issuing a Windows environment SendMessage function call, rather than the more common Windows environment PostMessage function call. Verb... A CSV was issued when SendMessage invoked your application. You can determine whether your application has been invoked with.WinCPICIsBlocking The WinCPICIsBlocking function determines if a task is executing while waiting for a previous blocking call to finish. WinCPICIsBlocking serves the same purpose as InSendMessage in the Microsoft® Windows® API. Legacy applications targeted at Windows version 3.x that support multiple conversations must specify CM_NONBLOCKING in.Message Functions (Windows and Messages) BroadcastSystemMessage BroadcastSystemMessageEx DispatchMessage GetInputState GetMessage GetMessageExtraInfo GetMessagePos GetMessageTime GetQueueStatus InSendMessage InSendMessageEx PeekMessage PostMessage PostQuitMessage PostThreadMessage RegisterWindowMessage ReplyMessage SendAsyncProc SendMessage.LOG_MESSAGE For OS/2 only, the LOG_MESSAGE verb records a message in the error log file and optionally displays the message on the users screen. A CSV was issued from a message loop that was invoked by another application issuing a Windows SendMessage function call, rather than the more common Windows PostMessage function call. A CSV was issued.... (winuser.h) Replie message sent from another thread by the SendMessageRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.COPY_TRACE_TO_FILE The COPY_TRACE_TO_FILE verb concatenates individual API/link service trace files to form a single file. A CSV was issued from a message loop that was invoked by another application issuing a Windows SendMessage function call, rather than the more common Windows PostMessage function call. A CSV was issued when SendMessage invoked."
150,CreateWindowExA,"Microsoft Build · May 19 – 22, 2025To use the CreateWindowExA function in Windows programming, you need to follow these steps:Here is a brief example of how you might call CreateWindowExA:References:CreateWindowExA function (winuser.h) Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow... Note The winuser.h header.The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (Unicode) CreateWindowA Creates an ove... (ANSI) CreateWindowExA Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. (ANSI).For example, if CreateWindowExA was used the buffer is an array of CHARs, but if CreateWindowExW was used the buffer is an array of WCHARs. Note For Comctl32.dll version 6, the buffer always contains an array of WCHARs, regardless of whether an ANSI or Unicode function created the edit control. Requirements Requirement Value Minimum supported.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Extended Window Styles The following are the extended window styles, these can be used along with the CreateWindowExA/CreateWindowExW functions. Constant/value Description WS_EX_ACCEPTFILES 0x00000010L The window accepts drag-drop files..The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. AdjustWindowRectExForDpi Calculates th... (ANSI) CreateWindowExA Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. (ANSI).Even though I was using the ANSI build, the handle passed back was of the UNICODE buffer so the MFC code was always truncating the text because it was treating the buf... My guess is that this is a Windows XP bug because the window is created with CreateWindowExA, which the EM_GETHANDLE message says should cause the edit control to return a buffer.Thanks David| Finally, I cheated: As the access to the CD player using MCI is reset once I've closed my program, I've created a console application: that remains hidden (with &quot;#pragma comment(linker, &quot;/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup&quot;)&quot;) that creates a dummy window to communicate with the calling app (with.CreateWindowExW function (winuser.h) Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for ... Example The following sample code illustrates the use of CreateWindowExA. Note The winuser.h header defines.I am on the tutorial on winprog.org, and I am on the article &quot;creating controls at runtime&quot;, and my code gets errors. here is my code: errors:| Review the parameters passed to the CreateWindowEx function. nf-winuser-createwindowexa The code posted above has omitted a required parameter for the new window's height. I am on the tutorial on.Hi , Professor Am Trying to Display tooltip with text &quot; This is tooltip &quot; , but did not show i followd the msdn instruction also Could you give me the right code my code is public ti As TOOLINFO Sub CreateToolTipInEveryWhereOfParent(Dlg As Longptr)."
151,GetROP2,"Microsoft Build · May 19 – 22, 2025The GetROP2 function retrieves the foreground mix mode of the specified device context.Graphics mode Function Background GetBkMode Drawing GetROP2 Mapping GetMapMode Polygon-fill GetPolyFillMode Stretching GetStretchBltMode An application can change the default modes by calling one of the following functions.An application sets the foreground mix mode by using the SetROP2 function and retrieves the current mode by using the GetROP2 function.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also GetROP2 Painting and Drawing FunctionsGetROP2 Gets the foreground mix mode of a device context.This section lists the binary raster-operation codes used by the GetROP2 and SetROP2 functions.GetROP2 The GetROP2 function retrieves the foreground mix mode of the specified device context.GetROP2 The GetROP2 function retrieves the foreground mix mode of the specified device context.CDC::GetROP2 Retrieves the current drawing mode.CDC::GetROP2 Retrieves the current drawing mode."
152,GetDialogBaseUnits,"Microsoft Build · May 19 – 22, 2025GetDialogBaseUnits function (winuser.h) Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in dialog box templates, and pixels. Requirements Requirement Value.Common Control Parameters The following describes the general syntax for a control resource-definition statement. The meaning of each parameter is given below. The current dialog base units are computed from the height and width of the current system font. The GetDialogBaseUnits function returns the dialog base units in pixels. The coordinates are.DIALOG resource Defines a dialog box. Th... For more information, see Common Resource Attributes. Remarks The GetDialogBaseUnits function returns the dialog base units in pixels. The exact meaning of the coordinates depends on the style defined by the STYLE option statement. Examples The following demonstrates the usage of the DIALOG statement:.To convert measurements from dialog template units to screen units (pixels), use the MapDialogRect function, which takes into account the font used by the dialog box and correctly converts a rectangle from dialog template units into p... For dialog boxes that use the system font, you can use the GetDialogBaseUnits function to perform the.Dialog Boxes Overview of the Dialog Boxes technology. To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for this technology, see: Dialog Boxes Functions AddRef The IPrintDi... GetCurrentPrinterName Retrieves the name of the currently selected printer, for use with PrintDlgEx. GetDialogBaseUnits Retrieves the.A dia... One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and one vertical dialog unit is equal to one-eighth of the current dialog base height unit. The dialog base units are computed based on the height and width of the current system font. The GetDialogBaseUnits Windows function returns the current dialog.One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and 1 vertical dialog unit is equal to one-eighth of the current dialog base height unit. The dialog base units are computed based on the height and width of the current system font. The GetDialogBaseUnits Windows function returns the current dialog base units.The user navigates to a specific page by using the appropriate tab. CPropertySheet provides support for the expanded PROPSHEETHEADER structure introduce... One horizontal unit is one-fourth of the dialog-box base-width unit, and one vertical unit is one-eighth of the dialog-box base height unit. The GetDialogBaseUnits Windows function returns size.GetDCEx The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDesktopWindow Retrieves a handle to the desktop window. GetDialogBaseUnits Retrieves the system's dialog base units, which are the average width and height of characters in the system font..EndDialog Destroys a modal dialog box, causing the system to end any processing for the dialog box. GetDialogBaseUnits Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as."
153,DialogBoxParamW,"Microsoft Build · May 19 – 22, 2025DialogBoxParamW function (winuser.h) Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. Requirements Requirement Value Minimum supported client Windows 2000 Professional.Dialog Boxes Overview of the Dialog Boxes technology. To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for this technology, see: Dialog Boxes Functions AddRef The IPrintDialogCallback::AddRef method (commdlg.h) is IUnknown's AddRef method, which decrements the reference count for an interface on a COM object..For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
154,SelectPalette,"Microsoft Build · May 19 – 22, 2025SelectPalette function (wingdi.h) The SelectPalette function selects the specified logical palette into a device context. Syntax Parameters [in] hdc A handle to the device context. [in] hPal A handle to the logical palette to be selected. [in] bForceBkgd Specifies whether the logical palette is forced to be a background palette. If this value is.Color Functions The following functions are used with color. ResizePalette Increases or decreases the size of a logical palette based on the specified value. SelectPalette Selects the specified logical palette into a device context. SetColorAdjustment Sets the color adjustment values for a DC using the specified values. UpdateColors Updates the.EMRSELECTPALETTE structure (wingdi.h) The EMRSELECTPALETTE structure contains members for the SelectPalette enhanced metafile record. Note that the bForceBackground parameter in SelectPalette is always recorded as TRUE, which causes the palette to be realized as a background palette. Requirements Requirement Value Minimum supported client.Palette Messages Changes to the system palette for the display device can have dramatic and sometimes undesirable effects on the colors used in windows on the desktop. This message gives an application the opportunity to select and realize its logical palette so that it receives the best possible mapping of colors for its logical palette. When the....of t EMR_SELECTPALETTE record ([MS-EMF] section 2.3.8.6). 00000100:                30 00 00 00 0C 00 00 00 00000110: 0F 00 00 80 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000030) Size (0x0000000C) ihPal (0x8000000F) Type (4 bytes): 0x00000030 identifies the record type as EMR_SELECTPALETTESize (4 bytes):.To determine if all monitors have the same col... If the primary monitor is palettized, SelectPalette and RealizePalette work the same as before, but across all monitors. In addition, the palettes of all palettized devices are synchronized. If the primary monitor is not palettized, SelectPalette and RealizePalette will select the palette into the....tion provides an example EMF EMR_SELECTPALETTE record ([MS-EMF] section 2.3.8.6). 000006D0: 30 00 00 00 0C 00 00 00 0F 00 00 80 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000030) Size (0x0000000C) ihPal (0x8000000F) Type (4 bytes): 0x00000030 identifies the record type as EMR_SELECTPALETTESize (4 bytes):.2.3.4.11 META_SELECTPALETTE Record The META_SELECTPALETTE Record defines the current logical palette with a specified Palette Object (section 2.2.1.3). 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Palette RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures,.CreateHalftonePalette function (wingdi.h) The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). ...ws 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Color Functions Colors Overview DeleteObject Realiz.If it does, the application can call the GetEnhMetaFilePaletteEntries function a second time to retrieve the palette entries and then create a logical palette (by using the CreatePalette function), select it into its device context (by using the SelectPalette function), and then realize it (by using the RealizePalette function). The."
155,WritePrivateProfileStringA,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileStringA function (winbase.h) Copies a string into the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section to which the.GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA.GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA."
156,GetVolumeInformationA,"Microsoft Build · May 19 – 22, 2025GetVolumeInformationA function (fileapi.h) Retrieves information about the file system and volume associated with the specified root directory. To specify a handle when retrieving this information, use the GetVolumeInformationByHandleW function. To retrieve the current compression state of a file or directory, use FSCTL_GET_COMPRESSION. Syntax.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (GetVolumeNameForVolumeMountPointW) GetVolumePathNamesForVolumeNameW Retrieves a list of drive letters and.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.CoTaskMemAlloc Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. GetHGlobalFromILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. APIs from."
157,GetClassWord,"Microsoft Build · May 19 – 22, 2025GetClassWord function (winuser.h) Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs. Note  This function is deprecated for any use other than nIndex set to GCW_ATOM. The function is provided only for compatibility with 16-bit versions of Windows..Window Class Functions GetClassInfo GetClassInfoEx GetClassLong GetClassLongPtr GetClassName GetClassWord GetWindowLong GetWindowLongPtr RegisterClass RegisterClassEx SetClassLong SetClassLongPtr SetClassWord SetWindowLong SetWindowLongPtr UnregisterClass. Window Class Functions. /windows/win32/winmsg/window-class-functions.SetClassWord function (winuser.h) Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header....s the name class to which the specified window belongsRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.It is typically used to dispatch a message retrieved by the GetMessage function. It is typically used to dispatch a message r... (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified.GetClassNameW function (winuser.h) Retrieves the name of the class to which the specified window belongs. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.GetClassNameA function (winuser.h) Retrieves the name of the class to which the specified window belongs. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.(GetClassName) GetClassNameA Retrieves the name of ... (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the.Application Global Classes An application global class is a window class registered by an executable or DLL that is available to all other modules in the process. The SetClassWord and SetClassLong functions copy a value to the extra class... To retrieve a value from the extra class memory, use the GetClassWord and GetClassLong functions. The.Window Classes (Windows and Messages) This topic describes the types of window classes, how the system locates them, and the elements that define the default behavior of windows that belong to them. A window class is a set of attributes that the system uses as a template to create a window. Every window is a member of a window class. All window."
158,CharUpperA,"Microsoft Build · May 19 – 22, 2025CharUpperA function (winuser.h) Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must.(ANSI) CharToOemBuffW Translates a specified number of characters in a string into the OEM-defined character set. (Unicode) CharToOemW Translates a string into the OEM-defined character set.Warning  Do not use. (Unicode) CharUpperA Converts a character string or a single character to uppercase. If the operand is a character string, the function.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see... (Unicode) CharToOemW Translates a string into the OEM-defined character set.Warning  Do not use. (Unicode)."
159,GetPrivateProfileStringW,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileStringW function (winbase.h) Retrieves a string from the specified section in an initialization file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer. [in].To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolated....GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA.Distmgr.log is showing errors related to the W8.1 package as follows: _wfopen_s() failed for."
160,SetTextAlign,"Microsoft Build · May 19 – 22, 2025SetTextAlign function (wingdi.h) The SetTextAlign function sets the text-alignment flags for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] align The text alignment by using a mask of the values in the following list. Only one flag can be chosen from those that affect horizontal and vertical.Setting the Text Alignment You can query and set the text alignment for a device context by using the GetTextAlign and SetTextAlign functions. The text-alignment settings determine how text is positioned relative to a specified location. Text can be aligned to the right or left of the position or centered over it; it can also be aligned above or.Text Alignment Applications can use the SetTextAlign function to specify how the system should position the characters in a string of text when they call one of the drawing functions. ...The system positions a string of text by aligning a reference point on an imaginary rectangle that surrounds the string, with the current cursor position or with.2.3.11.25 EMR_SETTEXTALIGN Record The EMR_SETTEXTALIGN record specifies text alignment for text drawing. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size TextAlignmentMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETTEXTALIGN. ...pecifies text alignment by using a mask of text....         16 00 00 00 00000160: 0C 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000016) Size (0x000 TextAlignmentMode (0x00000000) Type (4 bytes): 0x00000016 identifies the record type as EMR_SETTEXTALIGNSize (4 bytes): 0x0000000C specifies the size of this record in bytes. TextAlignmentMode....             16 00 00 00 0C 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000016) Size (0x000 TextAlignmentMode (0x00000000) Type (4 bytes): 0x00000016 identifies the record type as EMR_SETTEXTALIGNSize (4 bytes): 0x0000000C specifies the size of this record in bytes. TextAlignmentMode (4.In addition, complex script-aware applications should consider adding support for right-to-left reading order and right alignment to their... You can toggle the reading order or alignment between left and right with the following code: To toggle both attributes at once, execute the following statement and then call SetTextAlign and ExtTextOut, as.ExtTextOutW function (wingdi.h) The ExtTextOut function draws text using the currently selected font, background color, and text color. The text-alignment settings are retrieved by calling the GetTextAlign function. The text-alignment settings are altered by calling the SetTextAlign function. You can use the following values for text alignment..TextOutW function (wingdi.h) The TextOut function writes a character string at the specified location, using the currentl... An application can retrieve this mode by calling the GetTextAlign function; an application can alter this mode by calling the SetTextAlign function. However, an application can call the SetTextAlign function with the fMode.ExtTextOutA function (wingdi.h) The ExtTextOut function draws text using the currently selected font, background color, and text color. The text-alignment settings are retrieved by calling the GetTextAlign function. The text-alignment settings are altered by calling the SetTextAlign function. You can use the following values for text alignment.."
161,MsgWaitForMultipleObjects,"Microsoft Build · May 19 – 22, 2025MsgWaitForMultipleObjects function (winuser.h) Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the dwWakeMask parameter. To enter an alertable wait state, use the MsgWaitForMultipleObjectsEx function. Syntax Parameters.Multiple-object Wait Functions The WaitForMultipleObjects, WaitForMultipleObjectsEx, MsgWaitForMultipleObjects, and MsgWaitForMultipleObjectsEx functions enable the calling thread to specify an array containing one or more synchronization object handles. The MsgWaitForMultipleObjects and MsgWaitForMultipleObjectsEx function allow you to specify.InterlockedAnd64NoFence Performs an atomic AND operation on the specified LONG. Wait functions Wait function Description MsgWaitForMultipleObjects Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. MsgWaitForMultipleObjectsEx Waits until one or all of the specified objects are in the.To handle messages in an initialization thread, a MAPI client that is implemented as a service does the following: Calls the MsgWaitForMultipleObjects function when the main thread blocks. Calls the GetMessage, TranslateMessage, and DispatchMessage sequence of Windows functions to handle the message when MsgWaitForMultipleObjects returns the sum.Therefore, the thread must provide a message loop to process the messages in its message queue. In addition, you must use MsgWaitForMultipleObjects or MsgWaitForMultipleObjectsEx in that thread, rather than the other wait functions, so that it can process messages. Otherwise, the system can become deadlocked when the thread is sent a message while.For these scenarios, use MsgWaitForMultipleObjects or MsgWaitForMultipleObjectsEx, rather than SleepEx. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Vista,.Hints and Tips The following are hints and tips to consider when writing an application for TAPI 3: COM CoInitiali... Instead, use MsgWaitForMultipleObjects and process the messages, or use CoWaitForMultipleHandles, which will automatically detect what type of apartment the thread is in (STA or MTA) and will wait either in a COM modal loop (if.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Single-Threaded Apartments Using single-threaded apartment... If other synchronization primitives are being used to communicate between threads, the MsgWaitForMultipleObjects function can be used to wait both for messages and for thread.This is because functions such as PeekMessage, GetMessage, GetQueueStatus, WaitMessage, MsgWaitForMultipleObjects, and MsgWaitForMultipleObjectsEx check the queue and then change the state information for the queue so that the input is no longer considered new. Requirements Requirement Value Minimum supported client Windows 2000 Professional.For these scenarios, use MsgWaitForMultipleObjects or MsgWaitForMultipleObjectsEx, rather than Sleep. Windows Phone 8.1: This function is supported for Windows Phone Store apps on Windows Phone 8.1 and later. Windows 8.1 and Windows Server 2012 R2: This function is supported for Windows Store apps on Windows 8.1, Windows Server 2012 R2, and later.."
162,CascadeWindows,"Microsoft Build · May 19 – 22, 2025CascadeWindows function (winuser.h) Cascades the specified child windows of the specified parent window. Syntax Parameters [in, optional] hwndParent Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed. [in] wHow Type: UINT A cascade flag. This parameter can be one or more of the following values..Shell.CascadeWindows method Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting Cascade Windows. JScript: VBScript: Visual Basic: Requirements Requirement Value Minimum supported client Windows 2000 Professional, Windows XP [desktop apps only] Minimum supported server Windows 2000.IShellDispatch.CascadeWindows method Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting Cascade windows. Remarks This method is implemented and accessed through the Shell.CascadeWindows method. Examples The following examples show the use of CascadeWindows in JScript, VBScript,.This means the coordinates of a client area's upper left corner are always (0,0), and the coordinates of the lower right corner are the width and height of the client area. The CascadeWindows function cascades the windows on the desktop or cascades the child windows of the specified parent window. The TileWindows function tiles the windows on the.(BroadcastSystemMessageW... (Unicode) CallNextHookEx Passes the hook information to the next hook procedure in the current hook chain. (Unicode) CascadeWindows Cascades the specified child windows of the specified parent window. (Unicode) ChangeDisplaySettingsW The ChangeDisplaySettings function changes the settings of the default display device.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. CascadeWindows Cascades the specified child.Shell object Represents the objects in the Shell. Methods are provided to control the Shell and to execute commands within the Shell. BrowseForFolder Creates a dialog box that enables the user ... CanStartStopService Determines if the current user can start and stop the named service. CascadeWindows Cascades all of the windows on the desktop. This.(BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, fl... (Unicode) CallNextHookEx Passes the hook information to the next hook procedure in the current hook chain. (Unicode) CascadeWindows Cascades the specified child windows of the specified.IShellDispatch object Represents an object in the Shell. Methods are provided to control the Shell and to execute commands within the Shell. Method Description BrowseForFolder Creates a dialog box that enables the user to select a folder and then returns the selected folder's Folder object. CascadeWindows Cascades all of the windows on the.TileWindows function (winuser.h) Tiles the specified child windows of the specified parent window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL."
163,CopyMetaFileW,"Microsoft Build · May 19 – 22, 2025CopyMetaFileW function (wingdi.h) The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. Note  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an.CopyEnhMetaFileA The CopyEnhMetaFile function co... (ANSI) CopyEnhMetaFileW The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. (ANSI) CopyMetaFileW The CopyMetaFile function.(ANSI) CopyEnhMetaFileW The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. (ANSI) CopyMetaFileW The CopyMetaFile function copies the content of a Windows-format metafile to the."
164,OpenIcon,"Microsoft Build · May 19 – 22, 2025OpenIcon function (winuser.h) Restores a minimized (iconic) window to its previous size and position; it then activates the window. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be restored and activated. ... value Type: BOOL If the function succeeds, the return value isRemarks OpenIcon sends a WM_QUERYOPEN message to the given.If an application specifies the WS_MAXIMIZE... After creating a window, an application can use the CloseWindow function to minimize the window. The ArrangeIconicWindows function arranges the icons on the desktop, or it arranges a parent window's minimized child windows in the parent window. The OpenIcon function restores a minimized window to its.For a child window, they are relative to the upper-left corner of the parent window's client area. OpenIcon Restores a minimized (iconic) window to its previous size and position; it then activates the window. PhysicalToLogicalPoint Converts the physical coordinates of a point in a window to logical coordinates. WM_QUERYOPEN Sent to an icon when.The macro concate... MoveWindow Changes the position and dimensions of the specified window. OpenIcon Restores a minimized (iconic) window to its previous size and position; it then activates the window. PeekMessageA Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any.IExtractIconW::GetIconLocation method (shlobj_core.h) Gets the location and index of an icon. Syntax Parameters uFlags Type: UINT One or more of the following values. However, the icon extractor should not apply the shortcut overlay; t... Shortcut icons are state-independent. GIL_OPENICON (0x0001) The icon is in the open state if both open-state.IExtractIconA::GetIconLocation method (shlobj_core.h) Gets the location and index of an icon. GIL_OPENICON (0x0001) The icon is in the open state if both open-state and closed-state images are available. If this flag is not specified, ... Typical implementations of IExtractIcon do not require this flag because the flag implies that an icon handler....stActivePopup GetLayeredWindowAttributes GetNextWindow GetParent GetProcessDefaultLayout GetShellWindow GetSysColor GetTitleBarInfo GetTopWindow GetWindow GetWindowDisplayAffinity GetWindowInfo GetWindowModuleFileName GetWindowPlacement GetWindowRect GetWindowText GetWindowTextLength GetWindowThreadProcessId InternalGetWindowText IsChild.SHGFI_ADDOVERLAYS (0x000000020) Version 5.0. The SHGFI_ICON flag must also be set. SHGFI_OPENICON (0x000000002) Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon. A container.SHGFI_ADDOVERLAYS (0x000000020) Version 5.0. The SHGFI_ICON flag must also be set. SHGFI_OPENICON (0x000000002) Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon. A container.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-window-l1-1-4 (introduced in Windows 10, version 10.0.14393)."
165,GetTempFileNameA,"Microsoft Build · May 19 – 22, 2025GetTempFileNameA function (fileapi.h) Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated. Syntax Parameters [in] lpPathName The directory path for the file name. Applications typically specify a period (.) for the current.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (GetTempFileNameA) GetTempFileNameW Creates a name for a temporary file. (GetTempFileNameW) GetTempPath2A.For more information on this limit on Windows OS, see the remarks in the following articles: GetTempFileNameA function GetTempFileName Upload small files with buffered model binding to a database To store binary file data in a database using Entity Framework, define a Byte array property on the entity: Specify a page model property for the class.GetFileType Introduced into ap... GetFullPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetLongPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetTempFileNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetTempPathW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240..To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
166,EnumDesktopWindows,"Microsoft Build · May 19 – 22, 2025EnumDesktopWindows function (winuser.h) Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function. Syntax Parameters [in, optional] hDesktop A handle to the desktop whose top-level windows are to be enumerated. Requirements Requirement Value.EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumDesktopsA Enumerates all desktops associated with the specified window station of the calling process. (ANSI) EnumDesktopsW Enumerates all desktops associated.Window Station and Desktop Functions Applications can use the following functions with window sta... EnumWindowStations Enumerates all window stations in the current session. EnumDesktops Enumerates all desktops associated with the current window station of the calling process. EnumDesktopWindows Enumerates all top-level windows associated with.Best regards Francesco Paolo La Gamba| @Francesco Paolo La Gamba First, its important to understand that Windows desktop objects are associated with threads, not proc... The EnumDesktops function can be used to identify which of the above desktops 2-4 have been created by the Desktops application. Once you have identified the created desktops you.Window Stations and Desktops Overview of the Window Stations and Desktops technology. (Unicode) EnumDesktopsA Enumerates all desktops associated with the specified window station of the calling process. (Unicode) EnumDesktopWindows Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn,.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. EnumWindowsProc An application-defined callback."
167,LookupIconIdFromDirectoryEx,"Microsoft Build · May 19 – 22, 2025LookupIconIdFromDirectoryEx function (winuser.h) Searches through icon (RT_GROUP_ICON) or cursor (RT_GROUP_CURSOR) resource data for the icon or cursor that best fits the current display device. LookupIconIdFromDirectoryEx searches the resource file for the icon (or cursor) that best fits the current display device and returns its integer.LookupIconIdFromDirectory function (winuser.h) Searches through icon (RT_GROUP_ICON) or cursor (RT_GROUP_CURSOR) resource data for the icon or cursor that best fits the current display device. To specify a desired height or width, use the LookupIconIdFromDirectoryEx function. This function calls it by passing zero in the cxDesired/cyDesired.(Unicode) LockResource Retrieves a pointer to the specified resource in memory. LookupIconIdFromDirectory Searches through icon or cursor data for the icon or cursor that best fits the current display device. (LookupIconIdFromDirectory) LookupIconIdFromDirectoryEx Searches through icon or cursor data for the icon or cursor that best fits the.These bits are typically loaded by calls to the LookupIconIdFromDirectory, LookupIconIdFromDirectoryEx, and LoadResource functions. Remarks The CreateIconFromResource, CreateIconFromResourceEx, CreateIconIndirect, GetIconInfo, LookupIconIdFromDirectory, and LookupIconIdFromDirectoryEx functions allow shell applications and icon browsers to examine.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..The Cre... CreateIconFromResourceEx creates an icon based on binary resource data from other executable files or DLLs. An application must precede this function with calls to the LookupIconIdFromDirectoryEx function and several of the resource functions. LookupIconIdFromDirectoryEx returns the identifier of the most appropriate icon data for the.The CreateIconFromResourceEx function enables an application to create icons and cursors based on resource data. CreateIconFromResourceEx creates a cursor based on binary resource data from other executable (.exe) files or DLLs. It must be preceded by calls to the LookupIconIdFromDirectoryEx function, as well as several resource functions..Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. LookupIconIdFromDirectory Searches through icon or cursor data for the icon or cursor that best fits the current display device. LookupIconIdFromDirectoryEx Searches through icon or cursor data for.ICONINFOEXW structure (winuser.h) Contains information about an icon or a cursor. ICONINFOEX is an extended version of ICONINFO structure with additional szModName/szResName/wResID members that can be used to query an icon or cursor resource bits. These bits are typically loaded by calls to the FindResource, LoadResource, LockResource and.ICONINFOEXA structure (winuser.h) Contains information about an icon or a cursor. ICONINFOEX is an extended version of ICONINFO structure with additional szModName/szResName/wResID members that can be used to query an icon or cursor resource bits. These bits are typically loaded by calls to the FindResource, LoadResource, LockResource and."
168,InflateRect,"Microsoft Build · May 19 – 22, 2025InflateRect function (winuser.h) The InflateRect function increases or decreases the width and height of the specified rectangle. The InflateRect function adds -dx units to the left end and dx to the right end of the rectangle and -dy units to the top and dy to the bottom. The dx and dy parameters are signed values; positive values increase the.The IsRectEmpty function determines whether a given rectangle is empty. The EqualRect function determines whether two rectangles are identical that is, whether they have the same coordinates. The InflateRect function increases or decreases the width or height of a rectangle, or both. It can add or remove width from both ends of the rectangle; it.EqualRect Determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. InflateRect Increases or decreases the width and height of the specified rectangle. IntersectRect Calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle.GrayStringW The GrayString function draws gray text at the specified location. (Unicode) InflateRect The InflateRect function increases or decreases the width and height of the specified rectangle. IntersectClipRect The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified.CRect::operator + Adds the given offsets to CRect or inflates CRect and returns the resulting CRect. Parameters lpRect Points to a RECT structure or CRect object that contain... Example CRect::InflateRect InflateRect inflates CRect by moving its sides away from its center. Parameters x Specifies the number of units to inflate the left and right.Examples For an examp... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect IntersectRect RECT Rectangle Functions.UnionRect function (winuser.h) The UnionRect function creates the union of two rectangles. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect OffsetRect RECT Rectangle Functions Rectangles Overview UnionRect..winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
169,GetRgnBox,"Microsoft Build · May 19 – 22, 2025GetRgnBox function (wingdi.h) The GetRgnBox function retrieves the bounding rectangle of the specified region. Syntax Parameters [in] hrgn A handle to the region. [out] lprc A pointer to a RECT structure that receives the bounding rectangle in logical units. Return value The return value specifies the region's complexity. It can be one of the.Retrieving a Bounding Rectangle An application retrieves the dimensions of a region's bounding rectangle by calling the GetRgnBox function. If the region is rectangular, GetRgnBox returns the dimensions of the region. If the region is elliptical, the function returns the dimensions of the smallest rectangle that can be drawn around the ellipse. An.CRgn::FromHandle Returns a pointer to a CRgn object when given a handle to a Windows region. CRgn::GetRegionData Fills the specified buffer with data describing the given region. CRgn::GetRgnBox Retrieves the coordinates of the bounding rectangle of a CRgn object. CRgn::OffsetRgn Moves a CRgn object by the specified offsets. CRgn::PtInRegion.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. GetRegionData Fills the specified buffer with data describing a region. GetRgnBox Retrieves the bounding rectangle of the specified region. InvertRgn Inverts the colors in the.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. GetRgnBox The GetRgnBox.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interf... (Unicode) GetClipBox The GetClipBox function retrieves the dimensions of the tightest bounding."
170,RemoveFontResourceA,"Microsoft Build · May 19 – 22, 2025RemoveFontResourceA function (wingdi.h) The RemoveFontResource function removes the fonts in the specified file from the system font table. If the font was added using the AddFontResourceEx function, you must use the RemoveFontResourceEx function. Syntax Parameters [in] lpFileName A pointer to a null-terminated string that names a font resource.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. AddFontMemResourceEx The.CreateRoundRectRgn The CreateRoundRectRgn function c... CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font. (Unicode) CreateSolidBrush The CreateSolidBrush."
171,SignalObjectAndWait,"Microsoft Build · May 19 – 22, 2025SignalObjectAndWait function (synchapi.h) Signals one object and waits on another object as a single operation. ... SignalObjectAndWait function provides a more efficient way to signal one object and then wait on another compared to separate function calls such as SetEventThe SignalObjectAndWait function can wait for the following objects:.Single-object Wait Functions Multiple-object Wait Functions Alertable Wait Functions Registered Wait Functions Waiting on an Address Wait Functions and Time-out Intervals Wait Functions and Synchronization Objects Wait Functions and Creating Windows Single-object Wait Functions The SignalObjectAndWait, WaitForSingleObject, and... The.MsgWaitForMultipleObjectsEx Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (AP... The array of objects can include input event objects. RegisterWaitForSingleObject Directs a wait thread in the thread pool to wait on the object. SignalObjectAndWait Signals one.PulseEvent function (winbase.h) Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads. Use extreme caution when using SignalObjectAndWait and PulseEvent with Windows 7, since using these APIs among multiple threads can cause an application to.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a s... When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine..Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only when they are in an alertable state. A thread can only do this by calling one of the following functions with the appropriate flags: SleepEx WaitForSingleObjectEx WaitForMultipleObjectsEx SignalObjectAndWait MsgWaitForMultipleObjectsEx.QueueUserAPC function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. After the thread is in an alertable state, the t... A thread enters an alertable state by using SleepEx function, SignalObjectAndWait function, WaitForSingleObjectEx function, WaitForMultipleObjectsEx.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Asynchronous Procedure Calls An asynchronous procedure call (APC) is a function that executes asynchronously in the context of a particular thread. A thread enters an alertable state when it calls the SleepEx, SignalObjectAndWait,.The ability to atomically release one object and wait on another is so critical that Windows provides the SignalObjectAndWait function to do so for certain kernel objects. But because the SRW lock live... Kenny Kerr is a software craftsman with a passion for native Windows development. Reach him at kennykerr.ca. Thanks to the following technical.Troubleshooting and known issues (Visual Studio Tools for Unity) In this section, you'll find solutions to common issues with Visual Studio Tools for Unity, descriptions of known issue... If you are developing your own native plugin, We recommend using asynchronous procedure calls (APC) and especially SleepEx, SignalObjectAndWait,."
172,StringFromIID,"Microsoft Build · May 19 – 22, 2025StringFromIID function (combaseapi.h) Converts an interface identifier into a string of printable characters. Syntax Parameters [in] rclsid The interface identifier to be converted. [out] lplpsz The address of a pointer variable that receives a pointer to the resulting string. The string that represents rclsid includes enclosing braces. Return.IIDFromString function (combaseapi.h) Converts a string generated by the StringFromIID function back into the original interface identifier (IID). Syntax Parameters [in] lpsz A pointer to the string representation of the IID or NULL. [out] lpiid A pointer to the requested IID on return. ...n the standard return values E_INVALIDARG, E_OUTOFMEMORY,.GetRunningObjectTable Returns a pointer to the IRunningObjectTable interface on the local running object table (ROT). IIDFromString Converts a string generated by the StringFromIID function back into the original interface identifier (IID). Initialize Initializes a thread to use Windows Runtime APIs. StringFromGUID2 Converts a globally uniqu....combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference ... This avoids a common coding error by checking the type of the value passed at compile time. IIDFromString.Automatic Stream Routing This article describes how to update a WASAPI implementation to take advantage of automatic stream routing. If your application uses WASAPI it is highly recommended that you update your application to take advantage of this new capability using the following steps: Windows 10, version 1607, defines two new GUIDs that can.ITTerminalSupport::CreateTerminal method (tapi3if.h) The CreateTerminal method creates and initializes a new ITTerminal object based on the dynamic terminal class and media. The terminal class is identified by a GUID. The GUID must be converted to a string using StringFromIID to pass to this method. Syntax Parameters [in] pTerminalClass Pointer.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. IIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into.ITTerminalSupport interface (tapi3if.h) The ITTerminalSupport interface is exposed on an Address object only if an MSP exists. ITTerminalSupport::CreateTerminal The CreateTerminal method creates and initializes a new ITTerminal object based on the dynamic terminal class and media. The terminal class is identified by a GUID. The GUID must be.ITTerminalManager::CreateDynamicTerminal method (termmgr.h) The CreateDynamicTerminal method creates a dynamic terminal of a specified terminal class, media type, and direction. The application must obtain the pTerminalClass BSTR in two steps: call StringFromIID to convert the GUID to an LPOLESTR, then call SysAllocString to convert the LPOLESTR.The GUIDs DEVINTERFACE_AUDIO_CAPTURE and DEVINTERFACE_AUDIO_RENDER represent the default audio capture and render device respectively. Call StringFromIID to convert either of these GUIDs to an LPCWSTR to use for this argument. Specify VIRTUAL_AUDIO_DEVICE_PROCESS_LOOPBACK to activate the audio interface for process loopback capture. For sample."
173,lstrlenA,"Microsoft Build · May 19 – 22, 2025lstrlenA function (winbase.h) Determines the length of the specified string (not including the terminating null character). Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be checked. Return value Type: int The function returns the length of the string, in characters. ...e function rRemarks Note The winbase.h header.Warning C28750 Banned usage of lstrlen and its variants: '*function-name' is a banned API for improved error handling purposes. To fix this issue, we can use the strlen as the replacement, making sure to check if the pointer is NULL: Banned Functions Banned API Trusted data replacement(s) Untrusted data replacement(s) lstrlen _tcslen _tcsnlen,.(ANSI) lstrcpynW Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (Unicode) lstrcpyW Copies a string to a buffer. (Unicode) lstrlenA Determines the length of the specified string (not including the terminating null character). (ANSI) lstrlenW Determines the length of the specified string (not.(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA."
174,GetKeyboardState,"Microsoft Build · May 19 – 22, 2025GetKeyboardState function (winuser.h) Copies the status of the 256 virtual keys to the specified buffer. Syntax Parameters [out] lpKeyState Type: PBYTE The 256-byte array that receives the status data for each virtual key. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.GetKeyState function (winuser.h) Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed). Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.GetKeyboardLayoutName Retrieves the name of the active input locale identi... GetKeyboardState Copies the status of the 256 virtual keys to the specified buffer. GetKeyNameText Retrieves a string that represents the name of a key. SetKeyboardState Copies a 256-byte array of keyboard key states into the calling thread's keyboard input-state table..VkKeyScanExW function (winuser.h) Translates a character to the corresponding virtual-key code and shift state. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.VkKeyScanExA function (winuser.h) Translates a character to the corresponding virtual-key code and shift state. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.RegisterHotKey Defines a system-wide hot key. RegisterRawInputDevices Registers the devices that supply the raw input data. The window must be attached to the calling thread's message queue. SetKeyboardState Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the.VkKeyScanW function (winuser.h) [This function has been superseded by the VkKeyScanEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.Note that key state, which can be ascertained by calls to the GetKeyState or GetKeyboardState function, is reset after a call to AttachThreadInput. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include.SetKeyboardState function (winuser.h) Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the GetKeyboardState and GetKeyState functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server."
175,CloseHandle,"Microsoft Build · May 19 – 22, 2025The CloseHandle function is used in Windows programming to close an open object handle, such as a file, console, or process handle. Properly closing handles is important for resource management to ensure that system resources are released when they are no longer needed. If a handle is not closed, the operating system will automatically close it when the application terminates, but it is best practice for applications to close handles explicitly when they are done using them.To use CloseHandle, you typically pass the handle you wish to close as an argument to the function. After the handle is closed, it can no longer be used, and any attempt to do so may result in an error.References:.closehandle (Close Handle) The .closehandle command closes a handle owned by the target application. Parameters Handle Specifies the handle to be closed. -a Causes all handles owned by the target application to be closed. Environment Item Description Modes user mode only Targets live debugging only Platforms all Remarks You can use the !handle.CloseHandle function (handleapi.h) Closes an open object handle. Remarks The CloseHandle function closes handles to the following objects: Access token Communications device Console input Console screen buffer Event File File mapping I/O completion port Job Mailslot Memory resource notification Mutex Named pipe Pipe Process Semaphore Thread.Closing and Deleting Files To use operating system resources efficiently, an application should close files when they are no longer needed by using the CloseHandle function. If a file is open when an application terminates, the system closes it automatically. To use operating system resources efficiently, an application should close files when.TaskResultStatus.CloseHandle Method Definition Namespace: Microsoft.EnterpriseManagement.Runtime Assembly:Microsoft.EnterpriseManagement.Runtime.dll Closes the underlying event handle. Applies to. Closes the underlying event handle. . /dotnet/api/microsoft.enterprisemanagement.runtime.taskresultstatus.closehandle.Handle and Object Functions The following functions are used with handles and objects. Function Description CloseHandle Closes an open object handle. CompareObjectHandles Compares two object handles to determine if they refer to the same underlying kernel object. DuplicateHandle Duplicates an object handle. GetHandleInformati....When an application closes the last handle to a kernel object, the system removes the object from memory. Kernel object Creator function Destroyer function Access token CreateRestrictedToken, DuplicateToken, DuplicateTokenEx, OpenProcessToken, OpenThreadToken CloseHandle Change notification FindFirstChangeNotification FindCloseChangeNotification.ICertStore::CloseHandle method [CAPICOM is a 32-bit only component that is available for use in the following operating systems: Windows Server 2008, Windows Vista, and Windows XP.]. The CloseHandle method closes an HCERTSTORE handle acquired through the StoreHandle property. Syntax Parameters hCertStore [in] The HCERTSTORE handle to be closed..NativeMethods.CloseHandle(Int32) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hObject Int32 Returns Boolean Applies to. Learn more about the Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls.NativeMethods.CloseHandle in the.C28639 warning C28639: Calling close handle with string The function CloseHandle takes a void \* parameter. It is possible to cast (among other things) a string pointer to a void \* and pass it as an argument when the intention was to pass a handle opened using the string. Warning C28639 Calling close handle with string..._lclose function (winbase.h) The _lclose function closes the specified file so that it is no longer available for reading or writing. This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications should use the CloseHandle function. Syntax Parameters hFile Identifies the file t... This function is provided."
176,CallMsgFilterW,"Microsoft Build · May 19 – 22, 2025CallMsgFilterW function (winuser.h) Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. ... and, optionally, modifies messag dialog box, message box, menu, orRemarks The system calls CallMsgFilter to enable applications to examine and control the flow of messages during.(BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using... CallMsgFilterA Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. (ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures.(BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using... CallMsgFilterA Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. (ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures."
177,SetConsoleMode,"Microsoft Build · May 19 – 22, 2025SetConsoleMode function Sets the input mode of a console's input buffer or the output mode of a console screen buffer. Syntax Parameters hConsoleHandle [in] A handle to the console input buffer or a console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights. dwMode.Console Modes Associated with each console input buffer is a set of input modes that affects input operations. The GetConsoleMode function reports the current input mode of a console's input buffer or the current output mode of a screen buffer. The SetConsoleMode function sets the current mode of either a console input buffer or a screen buffer..3.1.3 Initialization The uninterruptible power supply (UPS) server requires no initialization. The console host serv... Client applications can initialize the server through the SetConsoleMode function (see [MSDN-ConsoleRef]). Users or system administrators can set initialization to occur by default by setting the registry key at.Reading Input Buffer Events The ReadConsoleInput function can be used to directly access a console's input buffer. When a console is created, mouse input is enabled and window input is disabled. To ensure that the process receives all types of events, this example uses the SetConsoleMode function to enable window and mouse input. Then it goes into.CTRL+BREAK is always treated as a signal, but an application can change the default CTRL+C behavior in two ways that prevent the handler functions from being called: The SetConsoleMode function can disable the ENABLE_PROCESSED_INPUT input mode for a console's input buffer, so CTRL+C is reported as keyboard input rather than as a signal. For more.Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. Configuration of the console modes on a handle to opt in to Virtual Terminal Sequence support will be handled with GetConsoleMode and SetConsoleMode. Declaration of code page or UTF-8 support.Sequences may also be received on the input stream in response to an output stream query information sequence or as an encoding of user input when the appropriate mode is set. You can use GetConsoleMode and SetConsoleMode functions to configure this behavior. Output Sequences The following terminal sequences are intercepted by the console host.SetConsoleCtrlHandler function Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process. CTRL+BREAK is always treated as a signal, but typical CTRL+C behavior can be changed in three ways that prevent the handler functions from being called: The SetConsoleMode function can disable.Console Functions The following functions are used to access a console. SetConsoleDisplayMode Sets the display mode of the specified console screen buffer. SetConsoleHistoryInfo Sets the history settings for the calling process's console. SetConsoleMode Sets the input mode of a console's input buffer or the output mode of a console screen buffer..When all are enabled, the application is said to be in ""cooked"" mode, which means that most of the processing is handled for the a... When all are disabled, the application is in ""raw"" mode, which means that input is unfiltered and any processing is left to the application. An application can use the GetConsoleMode function to determine the."
178,FindClose,"Microsoft Build · May 19 – 22, 2025FindClose function (fileapi.h) Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions. Remarks After the FindClose function is called, the handle specified by the hFindFile parameter cannot be used.Win32Helper.FindClose(IntPtr) Method Definition Namespace: Commands.StorageSync.Interop.DataObjects Assembly:Microsoft.Azure.PowerShell.Cmdlets.StorageSync.dll Finds the close. Parameters hFindFile The h find file. Returns Boolean true if XXXX, false otherwise. Applies to. Finds the close. .._findclose Closes the specified search handle and releases associated resources. Syntax Parameters handle The search handle returned by a previous call to _findfirst. Otherwise, it returns -1 and sets errno to ENOENT, indicating that no more matching files could be found. Remarks By default, this function's global state is s... Requirements.(DeleteVolumeMountPointW) FileTimeToLocalFileTime Converts a file time to a local file time. FindClose Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions. FindCloseChangeNotification Stops.FindClose Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions. FindFirstFile Searches a directory for a file or subdirectory with a nam... LZClose Closes a file that was opened by using the.Listing the Files in a Directory The following example calls FindFirstFile, FindNextFile, and FindClose to list files in a specified directory. To list files in a specified directory, call FindFirstFile, FindNextFile, and FindClose.. /windows/win32/fileio/listing-the-files-in-a-directory.Searching for One or More Files An application can search the current directory for all file names that match a given pattern by using the FindFirstFile, FindFirstFileEx, FindNextFile, and FindClose functions. The FindClose function destroys handles created by FindFirstF... An application can search the current directory for all file names that.Using Directory Management The following topics demonstrate the use of the directory management functions. In this section Topic Description Changing the Current Directory An application can change the current directory by calling the SetCurrentDirectory function. Listing the Files in a Directory To list files in a specified directory, call.Filename search functions These functions search for and close searches for specified file names: _findnext, _wfindnext _findfirst, _wfindfirs... Otherwise, it's left unchanged. _findclose closes the specified search handle and releases all associated resources for both _findfirst and _findnext. The handle returned by either _findfirst or.Return value If successful, _findfirst returns a unique search handle identifying the file or group of files that match the filespec specification, which can be used in a subsequent call to _... Remarks You must call _findclose after you're finished with either the _findfirst or _findnext function (or any variants) provided the call to _findfirst."
179,SendNotifyMessageA,"Microsoft Build · May 19 – 22, 2025SendNotifyMessageA function (winuser.h) Sends the specified message to a window or windows. If the window was created by the calling thread, SendNotifyMessage calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, SendNotifyMessage passes.(Unicode) SendMessageW The SendMessageW (Unicode)... (SendMessageW) SendNotifyMessageA Sends the specified message to a window or windows. (SendNotifyMessageA) SendNotifyMessageW Sends the specified message to a window or windows. (SendNotifyMessageW) SetAdditionalForegroundBoostProcesses SetAdditionalForegroundBoostProcesses is a performance.DialogBoxA Creates a modal dialog box from a dialog box template resource. (ANSI) DialogBoxIndirectA Creates a modal dialog box from a dialog box template in memory. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding. DispatchMessage The DispatchMessage."
180,DeviceIoControl,"Microsoft Build · May 19 – 22, 2025DeviceIoControl is a function in the Windows API that allows applications to perform direct input and output operations on devices, such as floppy disk drives, hard disk drives, tape drives, or CD-ROM drives. It is used to send control codes to a device driver, enabling the application to retrieve information or perform specific actions on the device.To use DeviceIoControl, an application typically follows these steps:DeviceIoControl is essential for communication between user-mode applications and drivers, allowing for a wide range of device-specific operations.References:The DeviceIoControl function is a general-purpose interface that can send control codes to a variety of devices. ...e standard control codes or device-specific control codes to perform direct input and output operations on a floppy disk drive, hard disk drive, tape drive, or CD-RThe DeviceIoControl function provides a device input and output.DeviceIoControl function (ioapiset.h) Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation. Syntax Parameters [in] hDevice A handle to the device on which the operation is to be performed. Requirements Requirement Value Minimum supported client Windows XP Minimum.Calling DeviceIoControl An application can use the DeviceIoControl function to perform direct input and output operations on, or retrieve information about, a floppy disk drive, hard disk drive, tape drive, or CD-ROM drive. It uses the CreateFile function to retrieve the device handle to the first physical drive, and then uses DeviceIoControl with.IOCTL_CHANGER_SET_ACCESS IOCTL (winioctl.h) Sets the state of the device's insert/eject port, door, or keypad. To perform this operation, call t... Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h) See also CHANGER_SET_ACCESS Device Management.IOCTL_CHANGER_MOVE_MEDIUM IOCTL (winioctl.h) Moves a piece of media to a destination. To perform this operation, call the DeviceIoControl function with the following parameters. Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h) See also.IOCTL_STORAGE_CHECK_VERIFY IOCTL (winioctl.h) Determines whether media are accessible for a device. To perform this operation, call the DeviceIoControl function with the following parameters. Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h) See.IOCTL_CHANGER_GET_STATUS IOCTL (winioctl.h) Retrieves the current status of the specified device. To perform this operation, call the DeviceIoControl function with the following parameters. Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h) See also.IMDSPDevice3::DeviceIoControl method (mswmdm.h) The DeviceIoControl method calls the device I/O control. Syntax Parameters [in] dwIoControlCode I/O control code being sent to the device. [in] lpInBuffer Input buffer supplied by the calling application. All the interface methods in Windows Media Device Manager can return any of the following.IO... To perform this operation, call the DeviceIoControl function with the following parameters. Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h) See also CHANGER_INITIALIZE_ELEMENT_STATUS Device Management Control Codes DeviceIoControl..Disabling media change notification prevents the GUID_IO_MEDIA_ARRIVAL and GUID_IO_MEDIA_REMOVAL events. To perform this operation, call the DeviceIoControl function with the following parameters. Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winioctl.h (include Windows.h)."
181,GetCurrentObject,"Microsoft Build · May 19 – 22, 2025GetCurrentObject function (wingdi.h) The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC). Syntax Parameters [in] hdc A handle to the DC. [in] type The object type to be queried. Requirements Requirement Value ... The GetCurrentObject function retrieves a.Operations on Graphic Objects After an application creates a display or printer DC, it can begin drawing on the associated device or, in the case of the memory DC, it can begin drawing on the bi... An application can examine a default object's attributes by calling the GetCurrentObject and GetObject functions. The GetCurrentObject function returns.GetColorAdjustment The GetColorAdjustment function retrieves the color adjustment values for the specified device context (DC). GetCurrentObject The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC). GetCurrentPositionEx The GetCurrentPositionEx function.GetColorAdjustment The Ge... GetColorSpace The GetColorSpace function retrieves the handle to the input color space from a specified device context. GetCurrentObject The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC). GetCurrentPositionEx The.Retrieve object attributes, select new objects An application can retrieve the attributes for a pen, brush, palette, font, or bitmap by calling the GetCurrentObject and GetObject functions. The GetCurrentObject function returns a handle identifying the object currently selected into the DC; the GetObject function returns a structure that describes.Device Context Functions The following functions are used with device contexts. EnumObjectsProc An application-defined callback function used with the Enu... GetCurrentObject Retrieves a handle to an object of the specified type that has been selected into the specified device context. GetDC Retrieves a handle to a display device context for the.OBJECT.CPP In the example provider component, a code example of object lists, including using a filter, is in Object.cpp. Supported methods ar... ObjectTypeList::~ObjectTypeList Standard destructor. ObjectTypeList::GetCurrentObject Retrieve the current object from the list. ObjectTypeList::Next Bump the index. In the example provider component, a.Information Device Contexts The information DC is used to retrieve default device data. For example, an application can call the CreateIC function to create an information DC for a particular model of printer and then call the GetCurrentObject and GetObject functions to retrieve the default pen or brush attributes. Because the system can retrieve.Remarks An application can use the device context to draw using GDI functions. An application can obtain the bitmap handle (HBITMAP) by calling GetCurrentObject. An application that wants information about the underlying bitmap, including a pointer to the pixel data, can call GetObject to fill in a DIBSECTION structure. The bitmap is always a.Graphic Objects The pen, brush, bitmap, palette, region, and path associated with a DC are referred to as its graphic objects. When an application creates a DC, the system automatically stores a set of default objects in it (there is no default bitmap or path). An application can examine the attributes of the default objects by calling the."
182,CreateBitmapIndirect,"Microsoft Build · May 19 – 22, 2025CreateBitmapIndirect function (wingdi.h) The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). ...th or members to zero, CreateBitmapIndirect returns the handle to a 1-by-1 pixel, monochrome bitmapWhile the CreateBitmapIndirect function can be used to create color.(Unicode) CreateBitmap The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBitmapIndirect The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBrushIndirect The.(Unicode) CopyRect The CopyRect function copies the coordinates of one rectang... CreateBitmap The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBitmapIndirect The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format.CBitmap Class Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap. Syntax Members Public Constructors Name Descript... CBitmap::CreateBitmapIndirect Initializes the object with a bitmap with the width, height, and bit pattern (if one is specified) given in a BITMAP structure. When.Bitmap Creation To create a bitmap, use the CreateBitmap, CreateBitmapIndirect, or CreateCompatibleBitmap function, CreateDIBitmap, and CreateDiscardableBitmap. The... The CreateBitmap and CreateBitmapIndirect function also allow you to specify the number of color planes and the number of bits required to identify the color. To create a bitmap,.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-block transfer. CreateBitmap Creates a bitmap. CreateBitmapIndirect Creates a bitmap. CreateCompatibleBitmap Creates a bitmap compatible with a device..Object Functions Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDIBitmap, CreateDIBSection Bitmaps can only be selected into memory DC's. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.GDI object Creator function Destroyer function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDIBitmap, CreateDIBSection, CreateDiscardableBitmap DeleteObject Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush DeleteObject DC CreateDC DeleteDC,.Memory Device Contexts To enable applications to place output in memory rather than sending it to an actual device, use a special device context for bitmap... To create a bitmap of the appropriate dimensions, use the CreateBitmap, CreateBitmapIndirect, or CreateCompatibleBitmap function. To enable applications to place output in memory rather than."
183,DrawTextExW,"Microsoft Build · May 19 – 22, 2025DrawTextExW function (winuser.h) The DrawTextEx function draws formatted text in the specified rectangle. Syntax Parameters [in] hdc A handle to the device context in which to draw. [in, out] lpchText A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated. If dwDTFormat includes.(DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. (DrawTextA) DrawTextExA The DrawTextEx function draws formatted text in the specified rectangle. (ANSI) DrawTextExW The DrawTextEx function draws formatted text in the specified rectangle. (Unicode) DrawTextW The DrawTextW (Unicode) function draws.(Unicode) DrawText The DrawText function draws formatted text in the specified rectangle. (DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. (DrawTextA) DrawTextExA The DrawTextEx function draws formatted text in the specified rectangle. (ANSI) DrawTextExW The DrawTextEx function draws formatted.Specifying length of text-output string Several of the font and text-output functions have a parameter that specifies the length of the text-output string. A typical example is the cchText parameter of DrawTextEx. Each of these functions has both an ""ANSI"" version and a Unicode version (for example, DrawTextExA and DrawTextExW, respectively). For."
184,MessageBoxW,"Microsoft Build · May 19 – 22, 2025MessageBoxW is a function that displays a modal dialog box containing a system icon, a set of buttons, and a brief application-specific message. It is part of the Windows API and is used to create message boxes that can prompt users for decisions or display information.To use MessageBoxW, you typically call it with parameters specifying the message text, title, buttons, and icon. The function returns an integer value that indicates which button the user clicked to close the message box.Here is a basic example of how to use MessageBoxW in C++:In this example, NULL specifies that there is no owner window, the first L""Hello, World!"" is the message text, the second L""Sample Message Box"" is the title, and MB_OK specifies that the message box will have an OK button.References:MessageBoxW function (winuser.h) Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the owner.This topic describes both behaviors. The Windows API, for instance, includes the following entry-point names for the MessageBox function: MessageBoxA Provides 1-byte character ANSI formatting, distinguished by an ""A"" appended to the entry-point name. MessageBoxW Provides 2-byte character Unicode formatting, distinguished by a ""W"" appended to the.Table of co... Here's an example function that replaces the MessageBoxW function. The call to DECLARE_FIXUP maps the MessageBoxW function to your new replacement function. When your application attempts to call the MessageBoxW function, it will call the replacement function instead. Yes No Provide product feedback | Get help at Microsoft Q&A..Identifying Functions in DLLs The identity of a DLL function consists of the following elements: Function name or ordinal Name of the DLL file in which the implementation can be found For example, specifying the MessageBox function in the User32.dll identifies the function (MessageBox) and its location (User32.dll, User32, or user32). The.MsgBox Sample This sample demonstrates how to pass string types by value as In parameters and when to use the EntryPoint, CharSet, and ExactSpelling fields. The MsgBox sample uses the following unmanaged function, shown with its original function declaration: MessageBox exported from User32.dll. The declaration for MsgBox2 produces incorrect....cified dialog box and, if it is, process message(ANSI) IsDialogMessageW Determines whether a message is intended for the specified dialog box and, if it is, processes the message. MessageBox The MessageBox function displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message. (Unicode).Create a new project named message_box, and open it in VS Code: In VS Code, open the Cargo.toml, and add the Windows dependencies for this project: Now open the project's src/main.rs file, and add the use declarations with the new n... And finally add code to call the MessageBoxA and MessageBoxW functions. The Windows API docs are mainly written.It should be noted that the choice of Unicode for SQL Server CE was driven by the fact that this is the default character set of Windows CE itself. Unlike Windows NT and Windows 2000, which support both ANSI and Unicode function calls (MessageBoxA and MessageBoxW), on Windows CE only the Unicode versions of Win32® function calls are available.How to write and show Myanmar unicode character in vba?| To write it , use char= ChrW$(the unicode character value) To show it, write that text to an Excel cell, or use the Windows API MessageboxW to display it. This might help: http://spreadsheet1.com/how-to-display-foreign-characters-in-vbe.html. How to write and show Myanmar unicode character.The following example provides an illustration by attempting to call the Windows MessageBox function in User32.dll. Because the first method definition specifies CharSet.Unicode for string marshaling, the common language looks for the wide-character version of the function, MessageBoxW, instead of the name used in the method call, MessageBox. The."
185,GetPrivateProfileSectionNamesA,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileSectionNamesA function (winbase.h) Retrieves the names of all sections in an initialization file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. Applications should store initialization information in the registry. Syntax Parameters [out] lpszReturnBuffer A pointer to a buffer that.GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section o... (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function (winbase.h) retrieves the names of all sections in an initialization file. (GetPrivateProfileSectionNamesA).GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section o... (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function (winbase.h) retrieves the names of all sections in an initialization file. (GetPrivateProfileSectionNamesA)."
186,GetTextExtentPointW,"Microsoft Build · May 19 – 22, 2025GetTextExtentPointW function (wingdi.h) The GetTextExtentPoint function computes the width and height of the specified string of text. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the GetTextExtentPoint32 function, which provides more accurate results. Syntax Parameters [in... The.(Unicode) GetTextExtentPoint32A The GetTextExtentPoint32 function computes the width and height of the specified string of text. (ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text. (Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of.(Unicode) GetTextExtentPoint32A The GetTextExtentPoint32 function computes the width and height of the specified string of text. (ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text. (Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of."
187,GetTopWindow,"Microsoft Build · May 19 – 22, 2025GetTopWindow function (winuser.h) Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function.An application can use the GetWindow function with the GW_OWN... You can use the BringWindowToTop function to bring a window to the top of the z-order for windows of the same type. You can rearrange the z-order by using the SetWindowPos and DeferWindowPos functions. You can use the GetTopWindow function to search all child windows of a parent.FindWindow Retrieves a handle to the top-level window whose class name and window name match the specified strings. GetDesktopWindow Returns a handle to the desktop window. GetForegroundWindow Returns a handle to the foreground window (the window with which the user is currently working). GetShellWindow Returns a handle to the Shell's....GetNextWindow macro (winuser.h) Retrieves a handle to the next or previous window in the Z-Order. Remarks This function is implemented as a call to t... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindow::GetWindowThreadID Retrieves ... CWindow::GetWindowWord Retrieves a 16-bit value at a specified off. Example CWindow::BringWindowToTop Brings the window to the top of the Z order. Remarks.BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BringWindowToTop Brings the specified window to the top of the Z order. (BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size,.BringWindowToTop Brings the specified window to the top of the Z order. (BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. GetDesktopWindow Retrieves a handle to the desktop window. GetF....CWnd::ArrangeIconicWindows Arranges all the minimized (iconic) child windows. CWnd::BindProperty Binds a cursor-bound property on a data-bound control to a data-source control and registers that relationship with the MFC binding manager. CWnd::BringWindowToTop Brings CWnd to the top of a stack of overlapping windows. CWnd::CalcWindowRect Called to....WindowFromPointEx CloseWindow CreateWindow CreateWindowEx DeferWindowPos DeregisterShellHookWindow DestroyWindow EndDeferWindowPos EndTask EnumChildProc EnumChildWindows EnumThreadWindows EnumThreadWndProc EnumWindows EnumWindowsProc FindWindow FindWindowEx GetAltTabInfo GetAncestor GetClie GetDesktopWindow GetForegroundWindow GetGUIThreadInfo."
188,IsBadStringPtrA,"Microsoft Build · May 19 – 22, 2025IsBadStringPtrA function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data A... IsBadReadPtr Verifies that the calling process has read access to the specified range of memory. (IsBadReadPtr) IsBadStringPtrA Verifies that the calling process has read....mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h ntenclv.h powerbase.h powersetting.h powrprof.h proces processtopologyapi.h profileapi.h pwm.h realtimeapiset.h rtworkq.h secext.h storprop.h synchapi.h sysinfoapi.h systemtopologyapi.h threadpoolapiset.h threadpoollegacyapiset.h timeprov.h timezoneapi.h utilapiset.h."
189,WritePrivateProfileStructA,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileStructA function (winbase.h) Copies data into a key in the specified section of an initialization file. As it copies the data, the function calculates a checksum and appends it to the end of the data. The GetPrivateProfileStruct function uses the checksum to ensure the integrity of the data. Note  This function is provided only.CreatePrivateNamespaceA The CreatePrivateNamespaceA (ANSI) function (winbase.h) creates a private namespace. GetPrivateProfileStructA Retrieves the data associated with a key in the specified section of an i... (GetPrivateProfileStructA) GetPrivateProfileStructW The GetPrivateProfileStructW (Unicode) function (winbase.h) retrieves the data.(GetPrivateProfileStringA) GetPrivateProfileStringW The GetPrivateProfileStringW (Unicode) function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStruct The GetPrivateProfileStruct function (winbase.h) retrieves the data associated with a key in the specified section of an initialization."
190,WritePrivateProfileSectionW,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileSectionW function (winbase.h) Replaces the keys and values for the specified section in an initialization file. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section in.(GetPrivateProfileIntA) GetPrivateProfileIntW The GetPrivateProfileIntW (Unicode) function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section of an.To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplauncher.h iwscapi.h."
191,CreatePatternBrush,"Microsoft Build · May 19 – 22, 2025CreatePatternBrush function (wingdi.h) The CreatePatternBrush function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. ...Remarks A pattern brush is a bitmap that the system uses to paint the interiors of.CreateDIBPatternBrush function (wingdi.h) The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). The brush can subsequently be selected into any device context that is associated with a device that supports raster operations. The CreateDIBPatternBrush function.Pattern Brush A pattern (or custom) brush is created from an application-defined bitmap or device-independent bitmap (DIB). The ... To create a logical pattern brush, an application must first create a bitmap. After creating the bitmap, the application can create the logical pattern brush by calling the CreatePatternBrush or.CreateDIBPatternBrushPt function (wingdi.h) The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB). After an application creates a brush by calling CreateDIBPatternBrushPt, it can select that brush into any device context by calling the SelectObject function. The.ICM-Enabled Brush Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following brush functions are enabled for use with ICM:.CFP_ALLOCPROC Client-provided callback function, used by CreateFontPackage an... CreateDIBPatternBrush The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). CreateDIBPatternBrushPt The CreateDIBPatternBrushPt function creates a logical brush that has the pattern.CreateDIBPatternBrush The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). CreateDIBPatternBrushPt The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB). CreatePatternBrush The.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,."
192,EndDoc,"Microsoft Build · May 19 – 22, 2025EndDoc function (wingdi.h) The EndDoc function ends a print job. Syntax Parameters [in] hdc Handle to the device context for the print job. Return value If the function succeeds, the return value is greater than zero. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.AbortProc is a placeh... DeviceCapabilities The DeviceCapabilities function retrieves the capabilities of a printer driver. EndDoc The EndDoc function ends a print job. EndPage The EndPage function notifies the device that the application has finished writing to a page. This function is typically used to direct the device driver to advance to a.The following console application draws a line, a rectangle, and an ellipse on a printer named MyPrinter: In the preceding code, the three GDI+ drawing commands are in between calls to the StartDoc and EndDoc functions, each of which receives the printer device context handle. All graphics commands between StartDoc and EndDoc are routed to a.2.3.6.13 ENDDOC Record The ENDDOC Record notifies the printer driver that the current print job is ending. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction EscapeFunction ByteCount RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures, defined in [MS-DTYP] section.For restrictions on printing from a 32-bit application on a 64-bit version of Windows, see Remarks. iEsc An escape code that identifies the event to be handled. This... DOCUMENTEVENT_DELETEDC GDI is about to process a call to its DeleteDC function. DOCUMENTEVENT_ENDDOCPOST GDI has just processed a call to its EndDoc function..CDC::Ellipse Draws an ellipse. CDC::EndDoc Ends a print job started by the StartDoc member function. CDC::EndPage Informs the device driver that a page is ending. Printing operations that have not yet reached their first NEWFRAME or N... If an application encounters a printing error or a canceled print operation, it must not attempt to terminate.Tutorial: Using the BizTalk Adapter for JD Edwards EnterpriseOne The following demonstrates using BizTalk Context Properties to control the J.D. Edwards OneWorld session in your orchestration. The tutorial assumes you have an orchestration that sends BeginDoc, EditLine and EndDoc calls to a send port bound to the Microsoft BizTalk Adapter for.Tutorial: Using the BizTalk Adapter for JD Edwards OneWorld The following demonstrates using BizTalk Context Properties to control the J.D. Edwards OneWorld session in your orchestration. The tutorial assumes you have an orchestration that sends BeginDoc, EditLine and EndDoc calls to a send port bound to the Microsoft BizTalk Adapter for J.D..DrvDocumentEvent function (winddiui.h) A printer interface DLL's DrvDocumentEvent function can handle certain events associated with printing a document. Syntax Para... DOCUMENTEVENT_DELETEDC GDI is about to process a call to its DeleteDC function. DOCUMENTEVENT_ENDDOCPOST GDI has just processed a call to its EndDoc function..For your work environment you would send a document (instead of BeginDoc) with all values possible allowing you to construct all possible messages, BeginDoc, EditLine, and EndDoc. Messages Constructed: EndDocMsg Name: ConstructEndDocMessageWithData Right-click in the middle and select Insert Shape, and then select Transform. Select Destination and."
193,GetThreadDesktop,"Microsoft Build · May 19 – 22, 2025GetThreadDesktop function (winuser.h) Retrieves a handle to the desktop assigned to the specified thread. The desktop associated with a thread must be on the window station associated with the thread's process. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Window Station and Desktop Functions Applications can use the following functions with window station objects. EnumDesktopWindows Enumerates all top-level windows associated with the specified desktop... GetThreadDesktop Retrieves a handle to the desktop assigned to the specified thread. GetUserObjectInformation Gets information about a window.SetThreadDesktop function (winuser.h) Assigns the specified desktop to the calling thread. This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop, or OpenInputDesktop function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.EnumDesktopWindows function (winuser.h) Enumerates all top-level windows associated with the specified desktop. Syntax Parameters [in, optional] hDesktop A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop, or OpenInputDesktop function, and must have the.Window Stations and Desktops Overview of the Window Stations and Desktops technology. (Unicode) GetProcessWindowStation Retr... GetThreadDesktop Retrieves a handle to the desktop assigned to the specified thread. GetUserObjectInformationA Retrieves information about the specified window station or desktop object. SetThreadDesktop Assigns the.CloseDesktop function (winuser.h) Closes an open handle to a desktop object. Do not specify the handle returned by the GetThreadDesktop function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowstation-l1-1-0 (introduced in Windows 8) See also.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Interactive Services Typically, services are console applications that are designed to run unattended without a graphical user interface (GUI). Also, services that are running as LocalSystem should not access the interactive desktop by.Console handles can be duplicated for use only in the same process. Desktop The handle is returned by the GetThreadDesktop function. Event The handle is ret... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target.Kernel object Creator function Destroyer function Access token CreateRestrictedToken, DuplicateToken, DuplicateTokenEx, OpenProcessToken, OpenThreadToken CloseHandle Change notification FindFirstChangeNotification FindCloseChangeNotification Communications device CreateFile CloseHandle Console input CreateFile, with CONIN$ CloseHandle Console."
194,gethostname,"Microsoft Build · May 19 – 22, 2025The gethostname function is used in programming to retrieve the standard host name for the local computer. It typically involves using the Winsock API in Windows. When you call this function, it queries the local host and returns the host name in a string format.Here is a basic outline of how to use the gethostname function:The function signature is as follows:If the function succeeds, it returns 0. If it fails, it returns SOCKET_ERROR and you can call WSAGetLastError() to get more information about the error.References:gethostname function (winsock.h) The gethostname function retrieves the standard host name for the local computer. Syntax Parameters [out] name A pointer to a buffer that receives the local host name. [in] namelen The length, in bytes, of the buffer pointed to by the name parameter. WSAEINPROGRESS A blocking Windows Sockets 1.1 cal... Remarks The.gethostname function (winsock2.h) The gethostname function retrieves the standard host name for the local computer. Syntax Parameters [out] name A pointer to a buffer that receives the local host name. [in] namelen The length, in bytes, of the buffer pointed to by the name parameter. Remarks The gethostname function returns the name of the local.Dns.GetHostName Method Definition Namespace: System.Net Assemblies:netstandard.dll, System.Net.NameResolution.dll Assembly:System.Net.NameResolution.dll Assembly:System.dll Assembly:netstandard.dll Source:Dns.cs Source:Dns.cs Source:Dns.cs Gets the host name of the local computer. Returns String A string that contains the DNS host name of the.NetworkInformation.GetHostNames Method Definition Namespace: Windows.Networking.Connectivity Edit Gets a list of host names associated with the local machine. Returns An array of host names for the local machine. Applies to. Gets a list of host names associated with the local machine. ..gethostname Function in the API The gethostname function uses the WSALookupServiceBegin function to query SVCID_HOSTNAME as the service class GUID. For the purposes of emulating gethostname the Ws2_32.dll specifies a NULL pointer for the lpszServiceInstanceName member, and specifies LUP_RETURN_NAME so that the host name is returned in the.IDebugProgramHost2::GetHostName Gets the title, friendly name, or file name of the hosting process of this program. Syntax C# C++ Parameters dwType [in] A value from the GETHOSTNAME_TYPE enumeration. pbstrHostName [out] Returns the requested name of the hosting process. ... a typical implementation of this the dwType parameter is ignored and a.gethostname Function in the SPI The WSALookupServiceBegin query uses SVCID_HOSTNAME as the service class GUID. If lpszServiceInstanceName is null or references a null string (that is . """"), the local host is to be resolved. For the purposes of emulating gethostname the Ws2_32.dll will specify a null pointer for lpszServiceInstanceName, and specify.ICorDebugRemoteTarget::GetHostName Method Returns the fully qualified domain name or IPv4 address of the remote debugging target machine. It must follow the multiple call paradigm: On the first call, the caller passes null to both cchHostName and szHostName, and pcchHostName returns the size of the required buffer. Header: CorDebug.idl Library:....ition Namespace: Microsoft.VisualStudio.Debugger.Interop Assemblies:Microsoft.VisualStudio.Debugger.Interop.dll, Microsoft.VisualStudio.Debugger.InteropA.dll Assembly:Microsoft.VisualStudio.Debugger.InteropA.dll Package:Microsoft.VisualStudio.Debugger.InteropA v17.13.40008 Ove GetHostName(enum_GETHOSTNAME_TYPE, String) GetHostName(UInt32,.IDebugProgramHost2.GetHostName(UInt32, String) Method Definition Namespace: Microsoft.VisualStudio.Debugger.Interop Assembly:Microsoft.VisualStudio.Debugger.Interop.dll Parameters dwType UInt32 pbstrHostName String Returns Int32 Applies to. Learn more about the Microsoft.VisualStudio.Debugger.Interop.IDebugProgramHost2.GetHostName in the."
195,GetWindowRect,"Microsoft Build · May 19 – 22, 2025The GetWindowRect function is used to retrieve the dimensions of the bounding rectangle of a specified window. The dimensions returned are in screen coordinates relative to the upper-left corner of the screen. To use this function in your application, you typically need to follow these steps:Here is a simple example of how you might use GetWindowRect:Make sure to handle any potential errors appropriately.References:... mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email GetWindowRect function (winuser.h) Retrieves the dimensions of the bounding rectangle of the specified windowThe dimensions are given in screen coordinates that are relative to the upper-left corner of the screen. Syntax Parameters [in] hWnd Type: HWND A handle to the.Window.GetWindowRect method (Visio) Gets the size and position of the client area of a window. GetWindowRect( _pnLeft_ , _pnTop_ , _pnWidth_ , _pnHeight_ ) expression A variable that represents a Window object. ...e coord the top of the window. pnWidth Required Long The distance in pixels from the left side to the right side of the window..Use the BeginDeferWindowPos, DeferWindowPos, and EndDeferWindowPos functions to simultaneously set the position of a number of windows, including the size, position, position in the z-order, and show stateAn application can retrieve the coordinates of a window's bounding rectangle by using the GetWindowRect function. GetWindowRect fills a RECT.NativeMethods.GetWindowRect(IntPtr, NativeMethods+RECT) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd lpRect NativeMethods.RECT Returns Int32 Applies to. Learn more about the.ErrObject.LastDllError Property Definition Namespace: Microsoft.VisualBasic Assembly:Microsoft.VisualBasic.Core.dll Assembly:Microsoft.VisualBasic.dll Source:ErrObject.vb... The PrintWindowCoordinates procedure takes a handle to a window and calls the GetWindowRect function. GetWindowRect fills the RECT data structure with the lengths of the sides.Accommodating additional controls usually requires expanding the size of the property sheet dialog. After calling the base class CPropertySheet::OnCreate, call GetWindowRect to get the width and height of the currently allocated property sheet window, expand the rectangle's dimensions, and call MoveWindow to change the size of the property sheet.The GetWindowRect function returns the screen-based rectangle that contains the static window. The location of the static window, and subsequently the location of the newly created edit window, are managed through a couple of Win32 data structures—RECT and POINT. Although the .NET Framework contains analogous structures (called Rectangle and Point.This function stuffs a RECT with a window's screen coordinates: How do you call GetWindowRect from C#. You do it as a C# struct, using another attribute, StructLayout. With GetWindowRect defined, you can call it like so: Note tha... Please note, however, that there's no need to call GetWindowRect (or Get/SetWindowText for that matter) in real.CW... CWnd::GetWindowlessChildCount Returns the number of associated windowless child windows. CWnd::GetWindowPlacement Retrieves the show state and the normal (restored), minimized, and maximized positions of a window. CWnd::GetWindowRect Gets the screen coordinates of CWnd. CWnd::GetWindowRgn Retrieves a copy of the window region of a window..IMAPIForm::DoVerb Applies to: Outlook 2013 | Outlook 2016 Requests that the form perform whatever tasks it associates with a specific verb. Some verbs, such as Print, should be modal with respect to the DoVerb call — that is, the indica... To obtain the RECT structure used by a form's window, call the GetWindowRect function. Do not save the handle."
196,CoDosDateTimeToFileTime,"Microsoft Build · May 19 – 22, 2025CoDosDateTimeToFileTime function (objbase.h) Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. Note  This function is provided for compatibility with 16-bit Windows. Syntax Parameters [in] nDosDate The MS-DOS date. [in] nDosTime The MS-DOS time. [out] lpFileTime A pointer to the FILETIME structure..CoFileTimeToDosDateTime function (objbase.h) Converts a FILETIME into MS-DOS date and time values. Note  This function is provided for compatibility with 16-bit Windows. Syntax Parameters [in] lpFileTime A pointer to the FILETIME structure. [out] lpDosDate Receives the MS-DOS date. [out] lpDosTime Receives the MS-DOS time. Requirements Requirement.CoDisableCallCancellation Undoes the action of a call to CoEnableCallCancellation. CoDosDateTimeToFileTime Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. CoEnableCallCancellation Enables cancellation of synchronous calls on the calling thread. CoFileTimeToDosDateTime Converts a FILETIME into MS-DOS.CoFileTimeNow function (objbase.h) Returns the current time as a FILETIME structure. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h (include Objbase.h) Library Ole32.lib DLL Ole32.dll See.CoFileTimeNow function (combaseapi.h) Returns the current time as a FILETIME structure. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header combaseapi.h (include Objbase.h) Library Ole32.lib DLL.objbase.h header This header is used by multiple technologies. For more information, see: Component Object Model (COM) Developer Notes Structured Storage objbase.h contains the following programming inte... CoDosDateTimeToFileTime Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. CoFileTimeNow The.Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation ar... CoDosDateTimeToFileTime Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. CoEnableCallCancellation Enables cancellation of synchronous calls on the calling thread. CoFileTimeNow The."
197,MapWindowPoints,"Microsoft Build · May 19 – 22, 2025MapWindowPoints function (winuser.h) The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window. Syntax Parameters [in] hWndFrom A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed.LPtoDP Converts logical coordinates into device coordinates. MapWindowPoints Converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window. ModifyWorldTransform Changes the world transformation for a device context using the specified mode. SetWorldTransform Sets a two-dimensional.ScreenToClient function (winuser.h) The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows.Occasionally, applications may be required to map coordinates in one window to those of another... An application can map coordinates by using the MapWindowPoints function. If one of the windows is the desktop window, the function effectively converts screen coordinates to client coordinates and vice versa; the desktop window is always specified.CWnd::IsTouchW... CWnd::IsWindowVisible Determines whether the window is visible. CWnd::LockWindowUpdate Disables or reenables drawing in the given window. CWnd::MapWindowPoints Converts (maps) a set of points from the coordinate space of the CWnd to the coordinate space of another window. CWnd::MoveWindow Changes the position and dimensions of.ClientToScreen function (winuser.h) The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.CWindow::KillTimer Destroys a timer event. CWindow::MapWindowPoints Converts a set of points from the window's coordinate space to the coordinate space of another window. CWindow::MessageBox Displays a message box. C... CWindow::SetWindowContextHelpId Sets the window's help context identifier. CWindow::SetWindowLong Sets a 32-bit..GetWindowRect fills a RECT structure with the coordinates of the window's upper left and lower right corners. The ScreenToClient or MapWindowPoints function maps the screen coordinates of a child window's bounding rectangle to coordinates relative to the parent window's client area. For example, the message is sent when the user clicks Move or.GetPointerInputTransform function (winuser.h) Gets one or more transforms for the pointer information coordinates associated with the current message. Remarks A consumer of pointer input messages typically uses ScreenToClient or MapWindowPoints to convert screen coordinates to client coordinates. Use ScreenToClient or MapWindowPoints instead..About Windows This topic describes the programming elements that applications use to create and use windows; manage relationships between windows; and size, move, and display windows. The overview includes the following topics. The IsWindow function determ... For example, an application can use HWND_BROADCAST in the SendMessage and."
198,PlayMetaFile,"Microsoft Build · May 19 – 22, 2025PlayMetaFile function (wingdi.h) The PlayMetaFile function displays the picture stored in the given Windows-format metafile on the specified device. Note  This function is provided only for compatibility with Windows-format metafiles. The corresponding function for an enhanced-format metafile is PlayEnhMetaFile... A Windows-format metafile can be.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description... CDC::Pie Draws a pie-shaped wedge. CDC::PlayMetaFile Plays the contents of the specified metafile on the given device. The enhanced version of PlayMetaFile displays the picture stored in the given enhanced-format metafile. The metafile can.PlayEnhMetaFile The Pl... PlayEnhMetaFileRecord The PlayEnhMetaFileRecord function plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record. PlayMetaFile The PlayMetaFile function displays the picture stored in the given Windows-format metafile on the specified device. PlayMetaFileRecord.Metafile Functions The following functions are used with enhanced-format metafiles. PlayEnhMetaFileRecord Plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record. SetEnhMetaFileBits ... CloseMetaFile CopyMetaFile CreateMetaFile DeleteMetaFile EnumMetaFile EnumMetaFileProc.CMetaFileDC Class Implements a Windows metafile, which contains a sequence of graphics device interface (GDI) commands that you can replay to create a desired image or text. CDC::PlayMetaFile can then use the metafile handle to play the metafile repeatedly. Inheritance Hierarchy CObject CDC CMetaFileDC Requirements Header: afxext.h.PlayMetaFileRecord function (wingdi.h) The PlayMetaFileRecord function plays a Windows-format metafile record by executing the graphics device interface (GDI) function contained within that record. Note  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality a... An.EnumMetaFile function (wingdi.h) The EnumMetaFile function enumerates the records within a Windows-format metafile by retrieving each record and passing it to the specified callback function. ...Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also CloseEnhMetaFile CopyMetaFile CreateMetaFile DeleteMetaFile E... The.The chord is outl... ClientToScreen The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. CloseEnhMetaFile The CloseEnhMetaFile function closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile. CloseFigure The CloseFigure function closes an."
199,CoIsHandlerConnected,"Microsoft Build · May 19 – 22, 2025CoIsHandlerConnected function (combaseapi.h) Determines whether a remote object is connected to the corresponding in-process object. Remarks The CoIsHandlerConnected function determines the status of a remote object. You can use it to determine when to release a remote object. You specify the remote object by giving the function a pointer to its.CoInstall Installs the requested COM server application. CoInvalidateRemoteMachineBindings Tells the service control manager to flush any cached RPC binding handles for the specified computer. CoIsHandlerConnected Determines whether a remote object is connected to the corresponding in-process object. CoIsOle1Class Determines whether the specified.CoIncrement... CoInvalidateRemoteMachineBindings Tells the service control manager to flush any cached RPC binding handles for the specified computer. CoIsHandlerConnected Determines whether a remote object is connected to the corresponding in-process object. CoLockObjectExternal Called either to lock an object to ensure that it stays in memory,.CoGetStdMarshalEx Creates an aggregated standard marshaler for use with lightweight client-side handlers. CoGetTreatAsClass Returns the CLSID of an object that can emulate the specified object. CoIsHandlerConnected Determines whether a remote object is connected to the corresponding in-process object. CoMarshalHresult Marshals an HRESULT to the."
200,FoldStringA,"Microsoft Build · May 19 – 22, 2025FoldStringA function (winnls.h) Maps one Unicode string to another, performing the specified transformation. For an overview of the use of the string functions, see Strings. Caution  Using FoldString incorrectly can compromise the security of your application. Strings that are not mapped correctly can produce invalid input. Test strings to make.FindNLSStringEx Locates a Unicode string (wide characters) or its equivalent in another Unicode s... FindStringOrdinal Locates a Unicode string (wide characters) in another Unicode string for a non-linguistic comparison. FoldStringA Maps one Unicode string to another, performing the specified transformation. (FoldStringA) FoldStringW Maps one.FindNLSStringEx Locates a Unicode string (wide characters) or its equivalent in another Unicode string for a locale specified by name.Caution  Because strings with very different ... FoldStringA Maps one Unicode string to another, performing the specified transformation. (FoldStringA) GetACP Retrieves the current Windows ANSI code page identifier.Function State Replacement EnumSystemLocalesEx FindNLSStringEx FoldStringA GetACP GetCurrencyFormatEx GetGeoInfoEx GetLocaleInfoEx GetNumberFormatEx GetStringTypeA GetStringTypeExA GetThreadLocalevoid); GetUserDefaultGeoName GetUserDefaultLocaleName GetUserPreferredUILanguages NOT SUPPORTED Always returns en-US IdnToAscii IdnToUnicode.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`."
201,GetClassInfoA,"Microsoft Build · May 19 – 22, 2025GetClassInfoA function (winuser.h) Retrieves information about a window class. Note  The GetClassInfo function has been superseded by the GetClassInfoEx function. You can still use GetClassInfo, however, if you do not need information about the class small icon. ...tional] hInstance Type: HINSTANCE A handlRemarks Note The winuser.h header defines.(ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window. (Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a.GetCaretPos Copies the caret's position to the specified POINT structure. GetCIMSSM Retrieves the source of the input message (. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo.... the name o class to which the specified window belongsRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set."
202,IsZoomed,"Microsoft Build · May 19 – 22, 2025IsZoomed function (winuser.h) Determines whether a window is maximized. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the window is zoomed, the return value is nonzero. If the window is not zoomed, the return value is zero. Requirements Requirement Value Minimum supported client Windows 2000.AxisScaleView.IsZoomed Property Definition Namespace: System.Windows.Forms.DataVisualization.Charting Assembly:System.Windows.Forms.DataVisualization.dll Gets a flag that indicates whether the axis is zoomed in. Property Value Boolean true if the axis is zoomed in; otherwise, false. Attributes BindableAttribute BrowsableAttribute Applies to. Gets.AxisScaleView.IsZoomed Property Definition Namespace: System.Web.UI.DataVisualization.Charting Assembly:System.Web.DataVisualization.dll Gets a flag that indicates whether the axis is zoomed in. Property Value Boolean true if the axis is zoomed in; otherwise, false. Attributes BindableAttribute BrowsableAttribute Applies to. Gets a flag that.NSWindow.IsZoomed Property Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Property Value Boolean Attributes ExportAttribute Applies to. Learn more about the AppKit.NSWindow.IsZoomed in the AppKit namespace.. /dotnet/api/appkit.nswindow.iszoomed.AxisScaleView Class Definition Namespace: System.Windows.Forms.DataVisualization.Charting Assembly:System.Windows.Forms.DataVisualization.dll Represents a scaled view of the chart. Inheritance Object AxisScaleView Constructors AxisScaleView() Initializes a new instance of the AxisScale... Properties IsZoomed Gets a flag that indicates whether the....herited from NSObject) IsKeyWindow (Inherited from NSWindow) IsMainWindow (Inherited from NSWindow) IsMiniaturized (Inherited from NSWindow) IsMovable (Inherited from NSWindow) IsOnActiveSpace (Inherited from NSWindow) IsOneShot (Inherited from NSWindow) IsOpaque (Inherited from NSWindow) IsProxy (Inherited from NSObject) IsSheet (Inherited.... (Inherited from NSWindow) IsMainWindow (Inherited from NSWindow) IsMiniaturized (Inherited from NSWindow) IsMovable (Inherited from NSWindow) IsOnActiveSpace (Inherited from NSWindow) IsOneShot (Inherited from NSWindow) IsOpaque (Inherited from NSWindow) IsProxy (Inherited from NSObject) IsSheet (Inherited from NSWindow) IsVisible (Inherite....herited from NSObject) IsKeyWindow (Inherited from NSWindow) IsMainWindow (Inherited from NSWindow) IsMiniaturized (Inherited from NSWindow) IsMovable (Inherited from NSWindow) IsOnActiveSpace (Inherited from NSWindow) IsOneShot (Inherited from NSWindow) IsOpaque (Inherited from NSWindow) IsProxy (Inherited from NSObject) IsSheet (Inherited.IsWindowArranged function (winuser.h) Note Some information relates to pre-released product, which may be substantially ... Example Requirements Minimum supported client Windows 10, version 1903 Minimum supported server Target platform Windows Header None Library None DLL User32.dll API set Not yet released. See also IsIconic IsZoomed Windows Snap....(Inherited from NSSavePanel) IsKeyWindow (Inherited from NSWindow) IsMainWindow (Inherited from NSWindow) IsMiniaturized (Inherited from NSWindow) IsMovable (Inherited from NSWindow) IsOnActiveSpace (Inherited from NSWindow) IsOneShot (Inherited from NSWindow) IsOpaque (Inherited from NSWindow) IsProxy (Inherited from NSObject) IsSheet."
203,CreateIoCompletionPort,"Microsoft Build · May 19 – 22, 2025CreateIoCompletionPort is a function that creates an I/O completion port and associates one or more file handles with that port. It is used to manage asynchronous I/O operations efficiently, particularly in a multiprocessor system. When an asynchronous I/O operation on one of the associated file handles completes, an I/O completion packet is queued to the associated I/O completion port in a first-in-first-out (FIFO) order.The primary purpose of I/O completion ports is to provide a mechanism that allows multiple threads to handle I/O requests without the overhead of creating and destroying threads for each request. Instead, threads can wait on the completion port for notifications of completed I/O operations. The system manages the threads and their execution, allowing for efficient processing of multiple concurrent I/O requests.When a completion packet is queued, the system checks how many threads associated with that port are running. If the number of running threads is less than a specified concurrency value, one of the waiting threads is allowed to process the completion packet. This model helps optimize performance, especially when handling many concurrent asynchronous I/O requests.References:CreateIoCompletionPort function Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time. Associating an instance of an opened file handle with an I/O completion port allows a process to receive.CreateIoCompletionPort function (ioapiset.h) Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time. Associating an instance of an opened file ha... The CreateIoCompletionPort function.CreateHardLinkTransacted Establishes a hard link between an existing file and a ne... CreateIoCompletionPort Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time. CreateSymbolicLink Creates.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print I/O Completion Ports I/O completion ports provide an efficient threading model for pro... When a process creates an I/O completion port, the system creates an associated queue object for threads whose sole purpose is to service these.IHostIoCompletionManager::CreateIoCompletionPort Method Requests that the host create a new I/O completion port. Remarks The CLR calls the CreateIoCompletionPort method to request that the host create a new I/O completion port. Header: MSCorEE.h Library: Included as a resource in MSCorEE.dll .NET Framework Versions: Available since 2.0 See also.ioapiset.h header This header is used by multiple technologies. CancelSynchronousIo Marks pending synchronous I/O operat... CreateIoCompletionPort Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a.Clone Creates another enumerato... CloseIoRing Closes an HIORING handle that was previously opened with a call to CreateIoRing. (Unicode) CreateIoCompletionPort Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing.The program works as follows: Create an I/O completion port (CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0)). The output of the program and the source code can be found here: https://stackoverflow.com/questions/69064482/i-o-completions-ports-completion-packets-not-seen-with-simultaneous-connection| I have tested the server program.APPC Extensions for the Windows Environment This section describes API extensions to Windows Advanced Program-to-Program Communications (APPC) that allow asynchronous communication. If an I/O completion port has been created using CreateIoCompletionPort, then an application can call the Win32 GetQueuedCompletionStatus function to wait to be.GetQueuedCompletionStatusEx function (ioapiset.h) Retrieves multiple completion port entries simultaneously. To dequeue I/O completion packets one at a time, use t... Syntax Parameters [in] CompletionPort A handle to the completion port. To create a completion port, use the CreateIoCompletionPort function. [out] lpCompletionPortEntries On input,."
204,GetOutlineTextMetricsW,"Microsoft Build · May 19 – 22, 2025GetOutlineTextMetricsW function (wingdi.h) The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. Syntax Parameters [in] hdc A handle to the device context. [in] cjCopy The size, in bytes, of the array that receives the text metrics. [out, optional] potm A pointer to an OUTLINETEXTMETRIC structure. Remarks The.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the s... GetOutlineTextMetricsA The GetOutlineTextMetrics.GetObjectW The GetObjectW (Unicode) function (wingdi.h) retrieves information for the specified graphics object. GetOutlineTextMetricsA The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. (ANSI) GetOutlineTextMetricsW The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. GetTextExtentExPointA The."
205,_lclose,"Microsoft Build · May 19 – 22, 2025The _lclose function closes the specified file so that it is no longer available for reading or writing.Functions Topic Contents _lclose The _lclose function closes the specified file so that it is no longer available for reading or writing.Functions _lclose The _lclose function closes the specified file so that it is no longer available for reading or writing.Hardware Counter Profiling Internationalization for Windows Applications Menus and Other Resources Operation Recorder Remote Desktop Services Security and Identity System Services Window Stations and Desktops Windows and Messages winbase.h contains the following programming interfaces: Functions _lclose"
206,DdePostAdvise,"Microsoft Build · May 19 – 22, 2025DdePostAdvise function (ddeml.h) Causes the system to send an XTYP_ADVREQ transaction to the calling (server) application's Dynamic Data Exchange (DDE) callback function for each client with an active advise loop on the specified topic and item. The DdeGetLastError function can be used to get the error code, which can be one of the following.Data Exchange Overview of the Data Exchange technology. DdeNameService Registers or unregisters the service names a Dynamic Da... DdePostAdvise Causes the system to send an XTYP_ADVREQ transaction to the calling (server) application's Dynamic Data Exchange (DDE) callback function for each client with an active advise loop on the specified topic.XTYP_ADVREQ transaction The XTYP_ADVREQ transaction informs the server that an advise transaction is outstanding on the specified topic name and item name pair and that data corresponding to the topic name and item name pair has changed. The system sends this transaction to the Dynamic Data Exchange (DDE) callback function, DdeCallback, after the.In This Section Name Description About the DDEML Discusses dynamic data exchange. DdePostAdvise Sends an XTYP_ADVREQ transaction to the calling (server) application's DDE callback function for each client with an active advise loop on the specified topic and item. The system sends this transaction to the DDE callback function, DdeCallback, after.The server's DDE callback function should examine the parameters that accompany the XTYP_ADVSTART transaction (including the requested format, topic name, and item name) and then return... After an advise loop has been established, the server application should call the DdePostAdvise function whenever the value of the item associated with the.DdeNameService Registers or unregisters the service names a Dynamic Data Exchange (DDE) server supports. DdePostAdvise Causes the system to send an XTYP_ADVREQ transaction to the calling (server) application's Dynamic Data Exchange (DDE) callback function for each client with an active advise loop on the specified topic and item. DdeQueryConvInfo.If the callback function returns TRUE, any subsequent calls to the DdePostAdvise function by the server on the same topic name and item name pair causes the system to send XTYP_ADVREQ transactions to the server. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows.An application can use the DdeGetData function to copy the data. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Ddeml.h (include Windows.h) See also Reference DdeClientTransaction DdeGetData DdePostAdvise Conceptual.3.1.3 Initialization A NetDDE conversation is first established between a client and server machine as follows (see [MSDN-NETDDE] and [MSDN-DDE] for further details): The NetDDE server machine creates a static network DDE share using NddeShareAdd method. The server receives this information via an ... Message sent from server to client: The server.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Ddeml.h (include Windows.h) See also Reference DdeClientTransaction DdeInitialize DdePostAdvise Conceptual Dynamic Data Exchange Management Library. A Dynamic Data Exchange."
207,AddAtomA,"Microsoft Build · May 19 – 22, 2025AddAtomA function (winbase.h) Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Requirements Requirement Value Minimum supported client Windows 20... Adds.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) AddAtomW Adds a.ActivateActCtx The ActivateActCtx function activates the specified activation context. AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (Unicode).The discussion ... Let's say you've called GetProcAddress on the AddAtomA API in KERNEL32. Knowing that there are 0x3A0 entries in the array, it does a binary search of the names until it finds the string ""AddAtomA"". Let's say that the loader finds AddAtomA to be the second array entry. This value is the export ordinal of AddAtomA. Using the.To use kernel32.dll as an example, The first fer entries of the x86 bit DLL (more explicitly the WoW64 x86 DLL) show all of the functions exported from the DLL usi... However, if we look at the kernel32.lib entry for AddAtomA, Notice how the Symbol name entry is _AddAtomA@4. This is the __stdcall mangled name for the function, and this is what the.GlobalAddAtomExA function (winbase.h) Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. Remarks Note The winbase.h header defines GlobalAddAtomEx as an alias that automatically selects the ANSI or Unicode version of... Requirements Requirement Value Target Platform Windows Header."
208,WaitNamedPipeW,"Microsoft Build · May 19 – 22, 2025WaitNamedPipeW function (namedpipeapi.h) Waits until either a time-out interval elapses or an instance of the specified named pipe is available for connection (that is, the pipe's server process has a pending ConnectNamedPipe operation on the pipe). Syntax Parameters [in] lpNamedPipeName The name of the named pipe. The following pipe name format.namedpipeapi.h header This header is used by multiple technologies. For more information, see: Security and Identity System Services namedpipeapi.h... TransactNamedPipe Combines the functions that write a message to and read a message from the specified named pipe into a single operation. WaitNamedPipeW The WaitNamedPipeW (Unicode) function.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
209,EnumResourceNamesA,"Microsoft Build · May 19 – 22, 2025EnumResourceNamesA function (libloaderapi.h) Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloaderapi.h contains the fo... Extends EnumResourceLanguages by allowing more control over the enumeration. (Unicode) EnumResourceNamesA Enumerates resources of a.(Unicode) EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumRes... (Unicode) EnumResourceLanguagesW Enumerates language-specific resources, of the specified type and name, associated with a binary module. (Unicode) EnumResourceNamesA Enumerates resources of a."
210,ResumeThread,"Microsoft Build · May 19 – 22, 2025ResumeThread function (processthreadsapi.h) Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed. Syntax Parameters [in] hThread A handle to the thread to be restarted. This handle must have the THREAD_SUSPEND_RESUME access right. ... To get extended error information, call.Thread Functions for Debugging The CreateThread function creates a new thread... The OpenThread function enables a debugger to obtain the identifier of an existing thread. This type of access enables a debugger to control a thread's execution with the SuspendThread and ResumeThread functions. Learn to use the CreateThread function to create a new.In Win32 In the common language runtime CreateThread Combination of Thread and ThreadStart TerminateThread Thread.Abort SuspendThread Thread.Suspend ResumeThread Thread.Resume Sleep Thread.Sleep WaitForSingleObject on the thread handle Thread.Join ExitThread No equivalent GetCurrentThread Thread.CurrentThread SetThreadPriority Thread.Priority No.THREAD_SET_THREAD_TOKEN (0x0080) Required to set the impersonation token for a thread using SetThreadToken. THREAD_SUSPEND_RESUME (0x0002) Required to suspend or resume a thread (see SuspendThread and ResumeThread). THREAD_TERMINATE (0x0001) Required to terminate a thread using TerminateThread. Feedback Was this page helpful. Yes No Provide.View threads in the Visual Studio debugger (C#, Visual Basic, C++) The Threads window in the Visual Studio debugger lets you examine and work with threads in the application you're debugging. In native code, you can suspend or resume threads by calling the Windows functions SuspendThread and ResumeThread. You can also call the MFC functions.CMsgThread.ResumeThread method [The feature associated with this page, DirectShow, is a legacy feature. It has been super... Uses the Microsoft Win32 ResumeThread function to continue the operation of the worker thread after a previous call to the CMsgThread::SuspendThread member function. Uses the Microsoft Win32 ResumeThread function to continue....ebugger has these types of access to a thread, it can read from and write to the thread's registers by using the GetThreadContext and SetThreadContext functions and can suspe resume the thread by using the SuspendThread and ResumeThread functionsIf a debugger has these types of access to a thread, it can read from and write to the thread's.Multithreading: Terminating Threads in MFC Two normal situations cause a thread to terminate: the ... Be careful that the thread does not terminate before you can duplicate the handle. The safest way to do this is to pass CREATE_SUSPENDED to AfxBeginThread, store the handle, and then resume the thread by calling ResumeThread. Either method allows.Suspending Thread Execution A thread can suspend and ... If a thread is created in a suspended state (with the CREATE_SUSPENDED flag), it does not begin to execute until another thread calls the ResumeThread function with a handle to the suspended thread. Suspending a thread at creation can be useful for one-time synchronization, because this.CWinThread Class Represents a thread of execution within an application. CWinThread::PumpMessage Contains the thre... CWinThread::ResumeThread Decrements a thread's suspend count. CWinThread::Run Controlling function for threads with a message pump. CWinThread::m. CWinThread::ResumeThread Called to resume execution of a thread that was suspended."
211,TerminateProcess,"Microsoft Build · May 19 – 22, 2025To terminate a process, you can use several methods depending on the context:It's important to note that terminating a process abruptly can lead to resource leaks or inconsistent states, so it's advisable to ensure that the process is in a known state before termination.References:TerminateProcess function (processthreadsapi.h) Terminates the specified process and all of its threads. Syntax Parameters [in] hProcess A handle to the process to be terminated. The handle must have the PROCESS_TERMINATE access right. For more information, see Process Security and Access Rights. [in] uExitCode The exit code to be used by the.Syntax Return value This method may also return error values. Return code Description S_OK The method was successful. Remarks Only live user-mode processes are terminated by this method. For other targets, the target is detached... Yes No Provide product feedback | Get help at Microsoft Q&A. The TerminateProcesses method attempts to terminate all.Syntax Return value This method may also return error values. Return code Description S_OK The method was successful. Remarks Only live user-mode processes are terminated by this method. For other targets, the target is detached... Yes No Provide product feedback | Get help at Microsoft Q&A. The TerminateProcesses method attempts to terminate all.Syntax Return value This method may also return error values. Return code Description S_OK The method was successful. Remarks Only live user-mode processes are terminated by this method. For other targets, the target is detached... Yes No Provide product feedback | Get help at Microsoft Q&A. The TerminateProcesses method attempts to terminate all.Syntax Return value This method may also return error values. Return code Desc... Remarks Only live user-mode processes are terminated by this method. For other targets, the target is detached from the debugger without terminating. Yes No Provide product feedback | Get help at Microsoft Q&A. The TerminateProcesses method attempts to terminate all.Syntax Return value This method may also return error values. Return code Description S_OK The method was successful. Remarks Only live user-mode processes are terminated by this method. For other targets, the target is detached from the debugger without terminating. Yes No Provide product ... The TerminateProcesses method attempts to terminate.Terminating a Process Terminating a process has the following results: Any remaining threads in the process are marked for termination. Any resources allocated by the process are freed. All kernel objects are closed. The process code is removed from memory. The process exit code is set. The process object is signaled. While open handles to kernel.Terminating a Thread Terminating a thread has the following results: Any resources owned by the thread, such as windows and hooks, are freed. Any thread calls the TerminateProcess function with a handle to the process. The exit code for a thread is either the value specified in the call to ExitThread, ExitProcess, TerminateThread, or.APPLICATION_HANG_KERNEL_LIVEDUMP Parameters Parameter Description 1 Reserved 2 Reserved 3 Reserved 4 Reserved Cause After an application hang report (such as that can be created with the WerReportHang function) was completed, TerminateProcess was called, but the target process failed to terminate, likely because a thread is hung in kernel mode..IDebugPortEx2::TerminateProcess Terminates a process. Syntax C# C++ Parameters pPortProcess [in] An IDebugProcess2 object representing the process to be terminated. Return Value If successful, returns S_OK; otherwise, returns an error code. See also IDebugPortEx2 IDebugProcess2. IDebugPortEx2::TerminateProcess terminates a process..."
212,FindResourceExA,"Microsoft Build · May 19 – 22, 2025FindResourceExA function (winbase.h) Determines the location of the resource with the specified type, name, and language in the specified module. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function.(FindNextVolumeA) FindNextVolumeMountPointA Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. (Unicode) FindResourceA Determines the location of a resource with the specified type and name in the specified module. (FindResourceA) FindResourceExA Determines the location of the resource with the specified.(Unicode) FindResourceA Determines the location of a resource with the specified type and name in the specified module. (FindResourceA) FindResourceExA Determines the location of the resource with the specified type, name, and language in the specified module. (FindResourceExA) FindResourceExW Determines the location of the resource with the....source by using the handle returned FindResourceA function or FindResourceExA function functionRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header libloaderapi.h (include Windows.h) Library."
213,GetNearestColor,"Microsoft Build · May 19 – 22, 2025GetNearestColor function (wingdi.h) The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. Syntax Parameters [in] hdc A handle to the device context. [in] color A color value that identifies a requested color. To create a COLORREF color value,.This method works on 8-bits per pixel or lower display devices for which there is an 8-bit color palette. Syntax Parameters [in, out] color Type: Color* Pointer to a Color object that, on input, specifies the color to be tested and, on output, receives the nearest color found in the color palette. Requirements Requirement Value Minimum supported....rce:Graphics.cs Source:Graphics.cs Source:Graphics.cs Source:Graphics.c the nearest color to the specified Color structureReturns Color A Color structure that represents the nearest color to the one specified with the color parameter. Examples The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e,.Color Functions The following functions are used with color. GetColorAdjustment Retrieves the color adjustment values for the specified DC. GetNearestColor Retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. GetNearestPaletteIndex Retrieves the index for the entry in.(ANSI) GetLogColorSpaceW The GetLogColorSpace function retrieves the color space definition identified by a specified handle. GetNearestColor The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. GetNearestPaletteIndex The.GetEnhMetaFilePaletteEntries The GetEnhMetaFilePaletteEntries function retrieves optional palette entries from the specified enha... GetEnhMetaFileW. (Unicode) GetNearestColor The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used..For example, if an application attempts to create a red pen for a black and white printer, it will receive a black pen instead the system uses black as the ... An application can discover whether the system will approximate a given color by using the GetNearestColor function. The function takes a color value and returns the color value of the.CDC::GetDeviceCaps Retrieves a specified kind of device-specific information about a given display device's capabilities. CDC::GetMiterLimit Returns the miter limit for the device context. CDC::GetNearestColor Retrieves the closest logical color to a specified logical color that the given device can represent. CDC::GetOutlineTextMetrics Retrieves.Graphics class (gdiplusgraphics.h) The Graphics class provides methods for drawing lines, curves, figures, images, and text. A... Graphics::GetLastStatus The Graphics::GetLastStatus method returns a value that indicates the nature of this Graphics object's most recent method failure. Graphics::GetNearestColor The Graphics::GetNearestColor method.Once you realize that the... This is because the browser is mapping the requested color value using an API (GetNearestColor for you geeks out there) so that it can find the closest match within the available color space. Of the browsers I quickly tested (Internet Explorer 4.0, Internet Explorer 5.5, and Netscape 4.7) I noticed that it was only in."
214,LoadMenuA,"Microsoft Build · May 19 – 22, 2025LoadMenuA function (winuser.h) Loads the specified menu resource from the executable (.exe) file associated with an application instance. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) IsMenu Determines whether a.The function searches the entire screen, not just the calling... AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be."
215,QueryDosDeviceW,"Microsoft Build · May 19 – 22, 2025QueryDosDeviceW function (fileapi.h) Retrieves information about MS-DOS device names. The function can obtain the current mapping for a particular MS-DOS device name. The code that converts an MS-DOS path into a c... The QueryDosDevice function enables an application to query the names of the junctions used to implement the MS-DOS device namespace.The most commonly used I/O devices are as follows:_file, file stream, directory, physical disk, volume, console buffer. (Unicode) DefineDosDeviceW Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceW) DeleteFile2... This function can operate either synchronously or asynchronously and can request either an exclusive or a shared.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h... (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA).I tried to list all the Volume GUIDs using FindFirstVolumeW and FindNextVolumeW Windows functions and then used the QueryDosDeviceW Windows function to get the device path for its corresponding GUID of the Volume and then return the Volume GUID of that device path that matches with the BCD device path which I already found. ...W and."
216,GetViewportOrgEx,"Microsoft Build · May 19 – 22, 2025GetViewportOrgEx function (wingdi.h) The GetViewportOrgEx function retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context. ...rameters [in] hdc A handle to the device context. [out] lppoint A pointer to a POINT structure that receives the coordinates of the origin, in deviThe GetViewportOrgEx.GetViewportExtEx Retrieves the x-extent and y-extent of the current viewport for the specified device context. GetViewportOrgEx Retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context. OffsetViewportOrgEx Modifies the viewport origin for a device context using the specified horizontal and vertical.(ANSI) GetEnhMetaFileBits The GetEnhMetaFileBits function retrieves the contents of the specified enh... GetViewportExtEx The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context. GetViewportOrgEx The GetViewportOrgEx function retrieves the x-coordinates and y-coordinates of the....essional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations Ov GetViewportOrgEx OffsetViewportOrgExThe OffsetWindowOrgEx....dows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations Ov GetViewportOrgExThe OffsetViewportOrgEx function....2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations Ov GetViewportOrgEx SetViewportOrgExThe GetWindowOrgEx....i. SetWindowOrgEx function specifies which window point maps to the viewport origin (0,0)Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL.Windows GDI Overview of the Windows GDI technology. AddFontMemResourceEx The AddFontMemResourceEx fun... GetViewportExtEx The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context. GetViewportOrgEx The GetViewportOrgEx function retrieves the x-coordinates and y-coordinates of the.SetViewportOrgEx function (wingdi.h) The SetViewportOrgEx function specifies which device point maps to the window origin (0,0). ...quirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Window Features This overview discusses features of windows such as window types, states, size, and position. Window Types Overlapped Windows Pop-up Windows Child Windows Positioning Clipping Relationship to Parent Window Messages."
217,SetProcessWorkingSetSize,"Microsoft Build · May 19 – 22, 2025SetProcessWorkingSetSize function (memoryapi.h) Sets the minimum and maximum working set sizes for the specified process. Syntax Parameters [in] hProcess A handle to the process whose working set sizes is to be set. The handle must have the PROCESS_SET_QUOTA access right. For more information, see Process Security and Access Rights. [in].GetProcessWorkingSetSize function (memoryapi.h) Retrieves the minimum and maximum working set sizes of the specified process. Syntax Parameters [in] hProcess A handle to the process whose working set sizes will be obtained. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. Remarks The ""working.Process Working Set The working set of a program is a collection of those pages in its virtual address space that have been recently referenced. To get the requested minimum and maximum ... You can also modify the working set sizes using the SetProcessWorkingSetSize function. Related topics Memory Performance Information Working Set. The working.Working Set The working set of a process is the set of pages in the virtual address space of the process that are currently resident in physical memory. ...rocessWorkingSThe process status application programming interface (PSAPI) provides a number of functions that return detailed information about the working set of a process. The working set.Applications that need to lock larger numbers of pages must first call the SetProcessWorkingSetSize function to increase their minimum and maximum working set sizes. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.SetProcessWorkingSetSizeEx function (memoryapi.h) Sets the minimum and maximum working set sizes for the specified process. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header memoryapi.h (include.SetProcessShutdownParameters Sets shutdown parameters for the currently calling process. SetProcessWorkingSetSize Sets the minimum and maximum working set sizes for the specified process. SetProcessWorkingSetSizeEx Sets the minimum and maximum working set sizes for the specified process. TerminateProcess Terminates the specified process and all of.EmptyWorkingSet function (psapi.h) Removes as many pages as possible from the working set of the specified process. Remarks You can also empty the working set by calling the SetProcessWorkingSetSize or SetProcessWorkingSetSizeEx function with the dwMinimumWorkingSetSize and dwMaximumWorkingSetSize parameters set to the value (SIZE_T)(-1)..SetProcessValidCallTargets Provides Control Flow Guard (... SetProcessWorkingSetSize Sets the minimum and maximum working set sizes for the specified process. (SetProcessWorkingSetSize) SetProcessWorkingSetSizeEx Sets the minimum and maximum working set sizes for the specified process. (SetProcessWorkingSetSizeEx) SetSystemFileCacheSize Limits the.Working Set Information The working set of a process is the amount of memory physically mapped to its process context. This oper... Note that the SetProcessWorkingSetSize function does the same thing if you pass it -1 for the minimum and maximum sizes. Related topics Working Set. The working set of a process is the amount of memory physically."
218,CreateStreamOnHGlobal,"Microsoft Build · May 19 – 22, 2025CreateStreamOnHGlobal function (combaseapi.h) The CreateStreamOnHGlobal function creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the IStream interface. The returned stream object supports both reading and writing, is not transacted, and does not support.GetHGlobalFromStream function (combaseapi.h) The GetHGlobalFromStream function retrieves the global memory handle to a stream that was created through a call to the CreateStreamOnHGlobal function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [deskto... The GetHGlobalFromStream function retrieves the global.Structured Storage Overview of the Structured Storage technology. To develop Structured Storage, you need these headers: coml2api.h propapi.h propidlbase.h For programming guidance for this technology, see: Structured Sto... CreateStreamOnHGlobal Creates a stream object that uses an HGLOBAL memory handle to store the stream contents..SHCreateMemStream function (shlwapi.h) Creates a memory stream using a similar process to CreateStreamOnHGlobal. Syntax Parameters [in, optional] pInit Type: const BYTE* A pointer to a buffer of size cbInit. This function creates a memory stream. Requirements Requirement Value Minimum supported client Windows 2000 Professional, Windows XP [desktop.IStream - Compound File Implementation The IStream interface supports reading and writing data to stream objects. To create a simple stream based on global memory, get an IStream pointer by calling the API function CreateStreamOnHGlobal. To get an IStream pointer ... Note If creating a stream object that is larger than the heap in your computer's.Structured Storage functions are described in the following sections: CreateILockBytesOnHGlobal CreateStreamOnHGlobal FmtIdToPropStgName FreePropVariantArray GetConvertStg GetHGlobalFromILockBytes GetHGlobalFromStream OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx.combaseapi.h header This header is used by multiple technologies. This replacement API hides the options for CoWaitForMultipleHandles tha... CreateStreamOnHGlobal Creates a stream object that uses an HGLOBAL memory handle to store the stream contents. DllCanUnloadNow Determines whether the DLL that implements this function is in use..IWICStream::InitializeFromMemory method (wincod... A workaround for this behavior is to create an IStream and use InitializeFromIStream to create the IWICStream. If you require a growable memory stream, use CreateStreamOnHGlobal. Requirements Requirement Value Minimum supported client Windows XP with SP2, Windows Vista [desktop apps | UWP apps].Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CreateStreamOnHGlobal Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. FreePropVariantArray In... Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. APIs from api-ms-win-core-com-l2-1-1.dll API Requirements.We have an Application which requires local admin rights, just for streaming big files using the following function. &quot;CreateStreamOnHGlobal function (combaseapi.h)&quot; We don't want to allow local admin rights for a user, when the application just needs access to this function. We have an Application which requires local admin rights, just."
219,lstrcatW,"Microsoft Build · May 19 – 22, 2025lstrcatW function (winbase.h) Appends one string to another. Warning  Do not use. If the function f... Remarks Note The winbase.h header defines lstrcat as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with.(... (ANSI) LookupAccountSidLocalW Retrieves the name of the account for the specified SID on the local machine. (Unicode) LookupAccountSidW Accepts a security identifier (SID) as input. (ANSI) LookupPrivilegeDisplayNameW Retrieves the display name that represents a specified privilege. (ANSI) LookupPrivilegeNameW Retrie. (Unicode) lstrcatA.(Unicode) LoadMenuW ... (ANSI) LoadStringW Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character. (LookupIconIdFromDirectoryEx) lstrcatA Appends one string to another.Warning  Do not use. (ANSI) lstrcatW Appends one string to....cking OemToCharW WideCharToMultiByte No bounds ch StrCat StringCbCat, StringCbCatEx, StringCchCat, StringCchCatEx Limited error detection StrCatA StringCbCat, StringCbCatEx, StringCchCat, StringCchCatEx Limited error detection StrCatBuff StringCbCat, StringCbCatEx, StringCchCat, StringCchCatEx No NULL-termination StrCatBuffA StringCbCat,."
220,ScreenToClient,"Microsoft Build · May 19 – 22, 2025The ScreenToClient function is used to convert screen coordinates to client coordinates for a specified window. This is particularly useful when you need to determine the position of a point relative to the client area of a window.To use ScreenToClient, you typically follow these steps:Here’s a simple example in C++:Make sure to include the necessary headers and link against the appropriate libraries to use this function in your application.References:ScreenToClient function (winuser.h) The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates. Syntax Parameters [in] hWnd A handle to the window whose client area will be used for the conversion. lpPoint A pointer to a POINT structure that specifies the screen coordinates to be.ClientToScreen function (winuser.h) The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. Syntax Parameters [in] hWnd A handle to the window whose client area is used for the conversion. [in, out] lpPoint A pointer to a POINT structure that contains the client coordinates to be converted..Troubleshooting Applications This section gives solutions to common problems. General Troubleshooting Category Descr... Cause You may need to convert your touch points to pixels, or you may need to convert the screen coordinates. Solution Make sure that you are calling TOUCH_COORD_TO_PIXEL and ScreenToClient. The following code shows how to do.CWnd::ChildWindowFromPoint Determines which, if any, of the child windows contains the specified point. CWnd::ClientToScreen Converts the client coordinates of a given point or rectangle on the display to screen coordinates. CWnd::CloseWindow Minimizes the window. CWnd::RunModalLoop Retrieves, translates, or dispatches mes... CWnd::ScreenToClient.LHITT... Syntax Members pt Type: POINT Location for the hit-test, in client coordinates (not screen coordinates). item Type: LITEM Receives information about the link corresponding to pt. Remarks To convert from screen coordinates to client coordinates, use ScreenToClient. Requirements Requirement Value Minimum supported client Windows Vista.The search is re... Grandchildren, and deeper descendant windows are not searched. ChildWindowFromPointEx Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. ClientToScreen The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates..December 2009 Volume 24 Number 12 Going Places - Enhancing Windows Touch Applications for Mobile Users By Gus Class | December 2009 Windows 7 introduces Windows Touch, which enhances touch input on capable hardware and provides a solid platform for building touch applications. You can also use the ScreenToClient method (see.Remarks A consumer of pointer input messages typically uses ScreenToClient or MapWindowPoints to convert screen coordinates to client coordinates. If a transform is applied on the message consumer, use GetPointerInputTransform to retrieve the transform on the message consumer at the time the input occurred. Requirements Requirement Value Minimum.The coordinates are relative to the upper left corner of the screen, even for a child window. The ScreenToClient or MapWindowPoints function maps the screen coordinates of a child window's bounding rectangle to coordinates relative to the parent window's client area. The GetClientRect function retrieves the coordinates of a window's client area..Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Function Description ClientToScreen Converts the client-area coordinates of a specified point to screen coordinates. ScaleWindowExtEx Modifies the window for a device context using the ratios fo... ScreenToClient Converts the."
221,StgOpenAsyncDocfileOnIFillLockBytes,"Microsoft Build · May 19 – 22, 2025The StgOpenAsyncDocfileOnIFillLockBytes opens an existing root asynchronous storage object on a byte-array wrapper object provided by the caller. Syntax Parameters [in] pflb A IFillLockBytes pointer to the byte-array wrapper object that contains the storage object to be opened. [in] grfMode A value that specifies the access mode to use to open the.StgGetIFillLockBytesOnFile function (objbase.h) [The StgGetIFillLockBytesOnFile function is obsolete. The following information is provided to support versions of Windows prior ... Finally, the moniker calls StgOpenAsyncDocfileOnIFillLockBytes to open the root storage of the compound file to be downloaded into the temporary file. Requirements.IFillLockBytes - Implementation The system provides an IFillLockBytes implementation as part of the Compound Files implementation. Downloading code can create an instance of an asynchronous Compound File object by calling StgOpenAsyncDocFileOnIFillLockBytes. Downloading code can also create an instance of an asynchronous byte array wrapper object.StgGetIFillLockBytesOnFi... StgGetIFillLockBytesOnILockBytes Creates a new wrapper object on a byte array object provided by the caller. StgOpenAsyncDocfileOnIFillLockBytes Opens an existing root asynchronous storage object on a byte-array wrapper object provided by the caller. StgOpenLayoutDocfile Opens a compound file on an ILockBytes.A storage element is a storage object, a stream object, or a byte-array object (LOCKBYTES). StgOpenAsyncDocfileOnIFillLockBytes Opens an existing root asynchronous storage object on a byte-array wrapper object provided by the caller. StgOpenLayoutDocfile Opens a compound file on an ILockBytes implement... StgOpenStorageOnILockBytes The....Ex OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx PropStgNameToFmtId PropVariantClear PropVariantCopy PropVariantInit ReadClassStg ReadClassStm ReadFmtUserTypeStg StgConvertPropertyToVariant SetConvertStg StgConvertVariantToProperty StgCreateDocfile StgCreateDocfileOnILockBytes StgCreatePropSetStg StgCreatePropStg."
222,setsockopt,"Microsoft Build · May 19 – 22, 2025The setsockopt function is used in programming to set various parameters associated with a socket. Here are the key points on how to use it:This function is crucial for configuring socket behavior to meet the requirements of your application.References:setsockopt function (winsock.h) The setsockopt function sets a socket option. Syntax Parameters [in] s A descriptor that identifies a socket. [in] level The level at which the option is defined (for example, SOL_SOCKET). [in] optname The socket option for which the value is to be set (for example, SO_BROADCAST). The optname parameter must be a.setsockopt function (winsock2.h) The setsockopt function sets a socket option. Syntax Parameters [in] s A descriptor that identifies a socket. [in] level The level at which the option is defined (for example, SOL_SOCKET). [in] optname The socket option for which the value is to be set (for example, SO_BROADCAST). The optname parameter must be a.Bluetooth and setsockopt Bluetooth uses the setsockopt function to set various parameters associated with the server channel or the connection. Use of setsockopt with Bluetooth has the following requirements: The s parameter of setsockopt must be a valid Bluetooth socket. The level parameter of setsockopt must be SOL_RFCOMM. For a l... Bluetooth.To avoid having every application that requires sca... The setsockopt function is called to enable the SO_PORT_SCALABILITY socket option on the newly created socket. The setsockopt function is called to enable the SO_PORT_SCALABILITY socket option on the newly created second socket. Requirements Requirement Value Minimum supported client None.Dual-Stack Sockets for IPv6 Winsock Applications In order to support both IPv4 and IPv6 on Windows XP with Service Pack 1 (SP1) and on Windows Server 2003, an application ... In order to make an IPv6 socket into a dual-stack socket, the setsockopt function must be called with the IPV6_V6ONLY socket option to set this value to zero before the.Shared Sockets The WSADuplicateSocket function is introduced to enable socket sharing across processes. As a result, all the states assoc... For example, a setsockopt operation performed using one descriptor is subsequently visible using a getsockopt from any or all descriptors. A process can call closesocket on a duplicated socket and the.Bluetooth Programming with Windows Sockets This section describes how to use Windows Sockets functions and structures to program a Bluetooth application. Complete reference information for the Windows Sockets API elements can be found in Windows Sockets; this section provides only Bluetooth-specific information for each Windows Sockets programming.Error 10013 (WSAEACCES) is returned when a second bind to an excluded port fails in Windows This article provides help to solve an issue where you can't bind an excluded port again even though the SO_REUSEADDR option is set. Original KB number:   3039044 Symptoms Assume that you exclude a port by running the following command on a computer that is.For example, the program uses the Windows Sockets setsockopt function to change the default socket send buffer to 32 KB during its socket initialization routines: Later, when the program sends data, it issues... Method 2: Make the socket send buffer size larger than the program send buffer size To modify the socket send buffer, use the Windows.WSASetSocketSecurity function (ws2tcpip.h) The WSASetSocketSecurity function enab... Server applications should call the setsockopt function to acquire exclusive access to the port used by the socket. The setsockopt function would be called with the level parameter set to SOL_SOCKET, the optname parameter set to SO_EXCLUSIVEADDRUSE, and the."
223,CreateDesktopA,"Microsoft Build · May 19 – 22, 2025CreateDesktopA function (winuser.h) Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the SetProcessWindowStation function. To specify the size.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops tech... CloseWindowStation Closes an open window station handle. CreateDesktopA Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. (ANSI).winuser.h header This header is used by multiple technologies. For more information, see: Data ... CreateCursor Creates a cursor having the specified size, bit patterns, and hot spot. CreateDesktopA Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. (ANSI)."
224,GetCommState,"Microsoft Build · May 19 – 22, 2025GetCommState function (winbase.h) Retrieves the current control settings for a specified communications device. Syntax Parameters [in] hFile A handle to the communications device. The CreateFile function returns this handle. [in, out] lpDCB A pointer to a DCB structure that receives the control settings information. Return value If the function.Communications Functions The following functions are used with communications resources. GetCommProperties Retrieves information about the communications properties for a specified... GetCommState Retrieves the current control settings for a specified communications device. GetCommTimeouts Retrieves the time-out parameters for all read and write.GetCommPorts Gets an array that c... GetCommProperties Retrieves information about the communications properties for a specified communications device. GetCommState Retrieves the current control settings for a specified communications device. GetCommTimeouts Retrieves the time-out parameters for all read and write operations on a specified.To determine the initial configuration of a serial communications resource, a process calls the GetCommState function, which fills in a serial port DCB structure with the current configuration settings. To modify this configuration, a process specifies a DCB structure in a call to the SetCommState function. When a process needs to modify only a.DCB structure (winbase.h) Defines the control setting for a serial communications device. The use of 5 data bits with 2 stop bits is an invalid combination, as is 6,... Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winbase.h (include Windows.h) See also BuildCommDCB.SetCommState function (winbase.h) Configures a communications device according to the specifications in a device-control block (a DCB structure). Remarks The SetCommState function uses a DCB structure to specify the desired configuration. The GetCommState function returns the current configuration. To set only a few members of the DCB structure,.Both sides have to a... Serial protocols are also very much device specific so there is no specification that allows two devices to communicate and &quot;discover&quot; what settings to use, unlike say HTTP. Serial communications is literally just getting bits from one device to another. That is why you have to agree on the settings before you can.GetConvert... GetHGlobalFromILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. PropStgNameToFmtId Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. ReadClassStm Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. WriteClassStm Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240..To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h."
225,GetBitmapBits,"Microsoft Build · May 19 – 22, 2025GetBitmapBits function (wingdi.h) The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. ...rsions ofSyntax Parameters [in] hbit A handle to the device-dependent bitmap. [in] cb The number of bytes to copy from the bitmap into the buffer. [out] lpvBits A pointer to a buffer to receive the bitmap.IMediaDet::GetBitmapBits method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft strongly recommends that new code use MediaPlayer, IMFMediaEngine and Audio/Video Capture in Media Foundation instead of DirectShow,.The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or ... GdiAlphaBlend The GdiAlphaBlend function displays bitmaps that have transparent or semitransparent pixels. GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. GetBitmapDimensionEx The.GdiAlphaBlend The GdiAlphaBlend function displays bitmaps that have transparent or semitransparent pixels. GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. GetDIBits The.GetObjectA function (wingdi.h) The GetObject function retrieves information for the specified graphics object. You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll.CBitmap Class Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap. Syntax Members Public Constructors Name Description CBitmap::CBitmap Constructs a CBitmap object. CBitmap::FromHandle Returns a poin... CBitmap::GetBitmap Fills a BITMAP structure with information about the bitmap..GDI APIs fail when large pages or VAD... Original product version:   Windows Original KB number:   4567569 When large page sizes are configured for virtual memory allocations and/or when buffers spanning multiple VAD are passed to the GDI APIs listed below, the function calls fail. SetDIBitsToDevice function StretchDIBits function GetBitmapBits.GetObject function (wingdi.h) The GetObject function retrieves information for the specified graphics object. Syntax Parameters [i... If hgdiobj is a handle to a bitmap created by any other means, GetObject returns only the width, height, and color format information of the bitmap. You can obtain the bitmap's bit values by calling the GetDIBits or.IMediaDet::GetSampleGrabber method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft strongly recommends that new ... The GetSampleGrabber method retrieves a pointer to the ISampleGrabber interface, which enables an."
226,GetCharWidthA,"Microsoft Build · May 19 – 22, 2025GetCharWidthA function (wingdi.h) The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. Note  This function is provided only for compatibility with 16-bit versions of Windows. ...he last character in the group of consecutive chaNote The wingdi.h header defines.(Unicode) GetCharWidth32A The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. (ANSI) GetCharWidth32W The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. (Unicode).(A... (Unicode) GetCharWidth32A The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. (ANSI) GetCharWidth32W The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.."
227,WindowFromPoint,"Microsoft Build · May 19 – 22, 2025WindowFromPoint function (winuser.h) Retrieves a handle to the window that contains the specified point. Syntax Parameters [in] Point Type: POINT The point to be checked. Return value Type: HWND The return value is a handle to the window that contains the point. If the point is over a static text control, the return value is a handle to the window.TTM_WINDOWFROMPOINT message Allows a subclass procedure to cause a tooltip to display text for a window other than the one beneath the mouse cursor. Return value The return value is the handle to the window that contains the point, or NULL if no window exists at the specified point. ...ssed by an application that subclasses aBy changing the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. ChildWindowFromPoint Determines which, if any,.ChangeClipboardChain Removes a specified window ... ChangeWindowMessageFilterEx Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window. ChildWindowFromPoint Determines which, if any, of the child windows belonging to a parent window contains the specified point. ChildWindowFromPointEx Determines which, if any,.ChangeWindowMessageFilterEx Modifies the User Interface Privilege Isolation (UIPI) message filt... ChildWindowFromPoint Determines which, if any, of the child windows belonging to a parent window contains the specified point. (Unicode) RealChildWindowFromPoint Retrieves a handle to the child window at the specified point. WindowFromPhysicalPoint.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. CWnd::AnimateWindow Animates the associ... CWnd::CenterWindow Centers a window relative to its parent. CWnd::ChildWindowFromPoint Determines which, if any, of the child windows contains the specified point. CWnd::CloseWindow Minimizes the.The desktop window is a system-defined window that paints the background of the screen and serves as the base for all windows displayed by all applications. The WindowFromPoint function retrieves a handle to the window occupying a particular point on the screen. Similarly, the ChildWindowFromPoint and ChildWindowFromPointEx functions retrieve a.WindowFromPoint, as the name implies, simply returns the handle of the window containing the given point. WindowFromPointTherefore, the relative control coordinates have to be adjusted to absolute coordinates, which are expected by WindowFromPoint: You'll also notice that I'm calling WindowFromPointYX, which has the X and Y coordinates reversed,.ChildWindowFromPointEx function (winuser.h) Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.TTM_UPDATE Forces the current tooltip to be redrawn. TTM_UPDATETIPTEXT Sets the tooltip text for a tool. TTM_WINDOWFROMPOINT Allows a subclass procedure to cause a tooltip to display text for a window other than the one beneath the mouse cursor. Notifications Topic Contents NM_CUSTOMDRAW (Tooltip) Sent by a tooltip control to notify its parent."
228,RevokeDragDrop,"Microsoft Build · May 19 – 22, 2025RevokeDragDrop function (ole2.h) Revokes the registration of the specified application window as a potential target for OLE drag-and-drop operations. Syntax Parameters [in] hwnd Handle to a window previously registered as a target for an OLE drag-and-drop operation. Return code Description DRAGDROP_E_NOTREGISTERED An attempt was made to revoke a.IDropTarget interface (oleidl.h) The IDropTarget interface is one of the interfaces you implement to provide drag-and-drop operations in your application. The IDropTarget interface contains methods that handle all these responsibilities except registering and revoking the application window as a drop target, for which you must call the.MSHLFLAGS enumeration (wtypesbase.h) Specifies why the marshaling is to be done. When the data packet is removed from the table, the table implementer must call the CoReleaseMarshalData function on the data packet.MSHLFLAGS_TABLESTRONG is used by the RegisterDragDrop function when registering a window as a drop target. The RevokeDragDrop function.IDropTarget::DragOver method (oleidl.h) Provides target feedback to the user and communicates the drop's effect to the DoDragDrop function so it can communicate the effect of the drop back to the source. Requirements Requirement Value Minimum supported client Windows 2000 Professio... Provides target feedback to the user and communicates the.IDropSource interface (oleidl.h) The IDropSource interface is one of the interfaces you implement to provide drag-and-drop operations in your application. It contains methods... IDropSource contains the methods for generating visual feedback to the end user and for canceling or completing the drag-and-drop operation. You also need to call the.RegisterDragDrop Registers the specified window as one that can be the target of an OLE drag-and-drop operation and specifies the IDropTarget instance to use for drop operations. ReleaseStgMedium Frees the specified storage medium. RevokeDragDrop Revokes the registration of the specified application window as a potential target for OLE.The DoDragDrop function then calls IDropSource::GiveFeedback so th... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header oleidl.h See also DragEnter IDropSource IDropSourceNotify IDropTarget.RegisterDragDrop function (ole... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h Library Ole32.lib DLL Ole32.dll See also RevokeDragDrop. Registers the specified window as one that can be the.Remarks The host (caller) is responsible for calling RegisterDragDrop or RevokeDragDrop, and for calling Release on the returned drop target when done. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header textserv.h.IDropTarget::Drop method (oleidl.h) Inco... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header oleidl.h See also DoDragDrop IDropSource IDropSourceNotify IDropTarget RegisterDragDrop RevokeDragDrop.."
229,WSAStringToAddressW,"Microsoft Build · May 19 – 22, 2025WSAStringToAddressW function (winsock2.h) The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure. Syntax Parameters [in] AddressString A pointer to the zero-terminated string.... WSAStringToAddressA The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure. (ANSI) WSAStringToAddressW The WSAStringToAddress function converts a network address in its.LPWSPDUPLICATESOCKET The LPWSPDuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. LPWSPSTRINGTOADDRESS The WSPStringToAddress function converts a human-readable numeric string to a socket address structure (sockaddr) suitable to passing to Windows Sockets routines....WSADuplicateSocketW WSAEnumNameSpaceProvidersExW WSAEnumNameSpaceProvidersW WSAEnumNetworkEvents WSAEnumProtocolsW WSAEventSelect WSAGetLastError WSAGetOverlappedResult WSAHtonl WSAHtons WSAIoctl WSAJoinLeaf WSALookupServiceBeginW WSALookupServiceEnd WSALookupServiceNextW WSANSPIoctl WSANtohl WSANtohs WSAPoll WSAProviderConfigChange WSARecv.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. APIs from api-ms-win-core-com-l1-1-1.dll API."
230,DeferWindowPos,"Microsoft Build · May 19 – 22, 2025DeferWindowPos function (winuser.h) Updates the specified multiple-window – position structure for the specified window. The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. This structure is returned.For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow. DeferWindowPos Updates the specified multiple-window – position structure for the specified window. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of.BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. ... (Unicode) DeferWindowPos Updates the specified multiple-window � position structure for the specified window. (Unicode) DefWindowProcA Calls the default window procedure to provide default processing for any window messages.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindow::CreateGrayCaret Creates ... CWindow::CreateSolidCaret Creates a solid rectangle for the system caret. CWindow::DeferWindowPos Updates the specified multiple-window-position structure for.BeginDeferWindowPos function (winuser.h) Allocates memory for a multiple-window- position structure and returns the handle to the structure. The DeferWindowPos function increases the size of the structure, if necessary. If the system must increase the size of the multiple-window- position structure beyond the initial size specified by the.There are four types of animation:_roll, slide,... AttachThreadInput Attaches or detaches the input processing mechanism of one thread to that of another thread. BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BeginPaint The BeginPaint function prepares the specified window.Other functions can cause the system to activate a different top-level window, including SetWindowPos, DeferWindowPos, SetWindowPlacement, and DestroyWindow. An application can show (make visible) or hide a window by using the ShowWindow, SetWindowPos, DeferWindowPos, or SetWindowPlacement or SetWindowLong function. ... BeginDeferWindowPos,.EndDeferWindowPos function (winuser.h) Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle. Syntax Parameters [in] hWinPosInfo Type: HDWP A handle to a multiple-window – position structure that contains size and position information for one or more windows. Requirements Requirement Value Minimum.CBasePane::SetRestoredFromRegistry Used internally. CBasePane::SetWindowPos Changes the size, position, and Z-order of a pane. CBasePane::ShowPane Shows or hides the pane. Return Value A handle to a deferred window position structure, or NULL. If you pass a handle, this method performs a deferred window move. You can obtain a handle by calling.For some reason I can not get DeferWindowPos() to work with a child window of a child window. I looked at the documentation of the function of MSDN and didn't find anything and tried searching on Google to no avail.| As the blog says, the purpose of the function is to move multiple child windows at one go. For some reason I can not get."
231,GetPrivateProfileStructA,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileStructA function (winbase.h) Retrieves the data associated with a key in the specified section of an initialization file. As it retrieves the data, the function calculates a checksum and compares it with the checksum calculated by the WritePrivateProfileStruct function when the data was added to the file. Note  This function is.GetPrivateProfileStructA Retrieves the data associated with a key in the specified section of an initialization file. (GetPrivateProfileStructA) GetPrivateProfileStructW The GetPrivateProfileStructW (Unicode) function (winbase.h) retrieves the data associated with a key in the specified section of an initialization file. GetProfileIntA Retrieves.GetPrivateProfileStruct The GetPrivateProfileStruct function (winbase.h) retrieves the data associated with a key in the specified section of an initialization file. GetPrivateProfileStructA Retrieves the data associated with a key in the specified section of an initialization file. (GetPrivateProfileStructA) GetPrivateProfileStructW The."
232,StgIsStorageFile,"Microsoft Build · May 19 – 22, 2025StgIsStorageFile function (coml2api.h) The StgIsStorageFile function indicates whether a particular disk file contains a storage object. Syntax Parameters [in] pwcsName Pointer to the null-terminated Unicode string name of the disk file to be examined. ...ning of the disk file underlying a storage object is a signature distinguishing a storage.coml2api.h header This header is used by Structured Storage. For more information, see: Structured Storage coml2api.h contains th... StgCreateStorageEx Creates a new storage object using a provided implementation for the IStorage or IPropertySetStorage interfaces. StgIsStorageFile The StgIsStorageFile function indicates whether a particular disk.StgCreateStorageEx Creates a new storage object using a provided implementation for the IStorage or IPropertySetStorage interfaces. StgGetIFillLockBytesOnFile Opens a wrapper object on a temporary file. StgIsStorageFile The StgIsStorageFile function indicates whether a particular disk file contains a storage object. StgIsStorageILockBytes The.StgIsStorageILockBytes function (coml2api.h) The StgIsStorageILockBytes function indicates whether the specified byte array contains a storage object. The StgIsStorageILockBytes function is useful to applications whose documents use a byte array (a byte array object supports the ILockBytes interface) that might or might not use stor... The.GetClassFile uses the following strategies to determine an appropriate CLSID: If the file contains a storage object, as determined by a call to the StgIsStorageFile function, GetClassFile returns the CLSID that was written with the IStorage::SetClass method. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.StgCreatePropSetStg Introdu... StgCreatePropStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgCreateStorageEx Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgIsStorageFile Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgIsStorageILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in.Load Method - CPapFile When these operations are successful, the obtained IStorage interface is released. ...le Load method from PapIf it exists, the standard StgIsStorageFile service function is called to verify the format of the file to determine if it is a valid compound file. If the file is valid, the standard StgOpenStorage service function....STREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx PropStgNameToFmtId PropVariantClear PropVariantCopy PropVariantInit ReadClassStg ReadClassStm ReadFmtUserTypeStg StgConvertPropertyToVariant SetConvertStg StgConvertVariantToProperty StgCreateDocfile StgCreateDocfileOnILockBytes.Loading a GraphEdit File Programmatically [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Those features have been optimized f... They are not meant for use by end-user applications. Related topics Simulating Graph Building."
233,GetSystemDefaultLCID,"Microsoft Build · May 19 – 22, 2025GetSystemDefaultLCID function (winnls.h) Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function. Syntax Return value Returns the locale identifier for the system default locale, identified by LOCALE_SYSTEM_DEFAULT..SystemInformationEvent.SystemLocaleId Property Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Gets the locale id (LCID) for the system. This value is retrieved from GetSystemDefaultLCID. Property Value Int32 Applies to. Gets the locale id (LCID) for the system. This value is retrieved from.The locale identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed operating system-defined locales. Alternatively it ... LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Retrieval of Locale Identifiers An application can retrieve the current locale.Referencing locales Important The modern print platform is Windows' preferred means of communicating with printers. The example bases the default paper si... At run time, Unidrv determines the system's default locale by calling GetSystemDefaultLCID. When a printer is installed, the GPD parser reads the printer's GPD file and uses information.GetSystemDefaultLangID Returns the language identifier for the system locale. GetSystemDefaultLCID Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function. GetSystemDefau... GetUserDefaultLCID Returns the locale.Languages Supported by Windows Search This topic describes how Windows Search supports multiple languages. Windows Search attempts to detect the language by calling the GetSystemPreferredUILanguages function to determine the first Multiple User Interface (MUI) language (which is typically the system UI languag... If the call to.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetSystemDefaultLCID GetUserDefaultLCID National Language Support National....ryptography functions"", http://msdn.microsoft.com/en-us/library/aa380252(VS.85).aspx [MSDN-GetActiveProcessorCount] Microsoft Corporation, ""GetActiveProcessorCount function"", http://msdn.microsoft.com/en-us/library/windows/desktop/dd405485(v=vs.85).aspx [MSDN-GetPhyInstSysMem] Microsoft Corporation, ""GetPhysicallyInstalledSystemMemory.Ge... GetStringTypeA Deprecated. (GetStringTypeA) GetSystemDefaultLangID Returns the language identifier for the system locale. GetSystemDefaultLCID Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function..Remarks A call to ConvertDefaultLocale specifying LOCALE_SYSTEM_DEFAULT is equivalent to a call to GetSystemDefaultLCID. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h)."
234,GetModuleHandleW,"Microsoft Build · May 19 – 22, 2025The GetModuleHandleW function retrieves a module handle for the specified module. The module must have been loaded by the calling process. This function is useful for obtaining a handle to a module that can then be used with other functions that require a module handle.References:GetModuleHandleW function (libloaderapi.h) Retrieves a module handle for the specified module. The module must have been loaded by the calling process. To avoid the race conditions described in the Remarks section, use the GetModuleHandleEx function. Syntax Parameters [in, optional] lpModuleName The name of the loaded module (either a .dll or .exe.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.libloaderapi.h header This header is used by multiple technologies. (ANSI) GetModuleHandleExA Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. ... GetModuleHandleExW R a module handle for the specified module and increments the module's....nt_exception_context __intrinsic_setjmp __intrinsic_setjmpex _local_unwind __processing_throw _purecall __report_gsfailure __RTDynamicCast _SetWinRTOutOfMemoryExceptionCallback __std_exception_copy __std_exception_destroy __std_terminate __std_type_info_compare __std_type_info_destroy_list __std_type_info_hash __std_type_info_name....nst *,wchar_t *,unsigned __int64)&quot; (?GetPdbDllPathFromFilePath@@YAHPEB_WPEA_W_K@Z) 1&gt;MSVCRTD.lib(pdblkup.obj) : error LNK2019: unresolved external symbol wcscpy_s referenced in function &quot;int __cdecl GetPdbDllPathFromFilePath(wchar_t const *,wchar_t *,unsigned __int64)&quot; (?GetPdbDllPathFromFilePath@@YAHPEB_WPEA_W_K@Z).IOCTL_CHANGER_SET_POSITION Sets the changer's robotic transport mechanis... This optimizes moving or exchanging media by positioning the transport beforehand. IOCTL_PWM_CONTROLLER_GET_ACTUAL_PERIOD Retrieves the effective output signal period of the Pulse Width Modulation (PWM) controller as it would be measured on its output channels.."
235,GetThreadContext,"Microsoft Build · May 19 – 22, 2025The GetThreadContext function in the Windows API is used to retrieve the context of a specified thread. This context includes information such as the thread's registers, which can be essential for debugging and process control. The function allows a process with the appropriate access rights to examine the state of a thread.References:GetThreadContext function (processthreadsapi.h) Retrieves the context of the specified thread. A 64-bit application can retrieve the context of a WOW64 thread using the Wow64GetThreadContext. Syntax Parameters [in] hThread A handle to the thread whose context is to be retrieved. The handle must have THREAD_GET_CONTEXT access to the thread. For.ICLRDataTarget::GetThreadContext Method Gets the current execution context for the given thread in the target process. Syntax Parameters threadID [in] The operating system identifier of a thread in the target process. contextFlags [in] Flags that specify which parts of the context to return. The implementation will return at least these parts of.Table of contents Exit focus mode Save Tabl... Syntax Parameters [out] Context Receives the current thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. Yes No Provide product feedback | Get help at Microsoft Q&A. The (IDebugAdvanced3) GetThreadContext method returns the current thread.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Emai... Syntax Parameters [out] Context Receives the current thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. The (IDebugAdvanced2) GetThreadContext method returns the current thread.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email ... Syntax Parameters [out] Context Receives the current thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. The (IDebugAdvanced) GetThreadContext method returns the current thread.ICorProfilerInfo::GetThreadContext Method Gets the context identity currently associated with the specified thread. Syntax Parameters threadId [in] The ID of the thread. pContextId [out] A pointer to the context ID currently associated with the specified thread. If the thread has no context currently associated with it, this function will return.ICorDebugDataTarget::GetThreadContext Method Returns the current thread context for the specified thread. Syntax Parameters dwThreadID [in] The identifier of the thread whose context is to be retrieved. The identifier is defined by the operating system. contextFlags [in] A bitwise combination of platform-dependent flags that indicate which.ICorDebugRegisterSet::GetThreadContext Method Gets the context of the current thread. Syntax Parameters contextSize [in] The size, in bytes, of the context array. context [in, out] An array of bytes that compose the Win32 CONTEXT structure for the current platform. Remarks The debugger should call this function instead of the Win32.ICorDebugRegisterSet.GetThreadContext(UInt32, Byte[]) Method Definition Namespace: Microsoft.VisualStudio.CorDebugInterop Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Parameters contextSize UInt32 context Byte[] Applies to. Learn more about the.ICorDebugProcess.GetThreadContext(UInt32, UInt32, IntPtr) Method Definition Namespace: Microsoft.VisualStudio.CorDebugInterop Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Parameters threadID UInt32 contextSize UInt32 context Applies to. Learn more about the."
236,CharLowerBuffA,"Microsoft Build · May 19 – 22, 2025CharLowerBuffA function (winuser.h) Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A buffer containing one or more characters to be processed. [in] cchLength Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windo... If the operand is a character string, the function converts.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) CharLower... (ANSI)."
237,SetCurrentDirectoryA,"Microsoft Build · May 19 – 22, 2025SetCurrentDirectory function (winbase.h) Changes the current directory for the current process. Syntax Parameters [in] lpPathName The path to the new current directory. This parameter may specify a relative path or a full path. In either case, the full path of the specified directory is calculated and stored as the current directory. For more."
238,CreateSemaphoreW,"Microsoft Build · May 19 – 22, 2025CreateSemaphoreW function (synchapi.h) Creates or opens a named or unnamed semaphore object. To specify an access mask for the object, use the CreateSemaphoreEx function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions Acquire... (Unicode) CreateSemaphoreExW Creates or opens a named or unnamed semaphore object and returns a handle to the object. (CreateSemaphoreExW) CreateSemaphoreW Creates or.Hi, I have maui app in windows, .NET 8. Thanks, namespace XXXXXX {| Semaphore Sil... Use windows o/s global semaphores if you want share between processes. https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createsemaphorew?redirectedfrom=MSDN| Hello, Semaphores are of two types: local semaphores and named system semaphores..AddSnapshotToRecove... AddToSnapshotSet The AddToSnapshotSet method adds an original volume or original remote file share to the shadow copy set. AddVDisk Creates a virtual disk object for an existing virtual disk file. Advise Registers the caller's IVdsAdviseSink interface with VDS so that the caller receives notifications from the VDS service..CoTaskMemRealloc Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoUninitialize Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoUnmarshalInterface Introduced into api-ms-win-core-com-l1-1-1.dll in."
239,CharUpperW,"Microsoft Build · May 19 – 22, 2025CharUpperW function (winuser.h) Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A null-terminated string, or a single character. If the high-order word of this p... Return value Type: LPTSTR If the.(ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase characters. (Unicode) CharUpperW Converts a character string or a single character to uppercase. (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. (Unicode).(Unicode) CharToOemW Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase characters. (Unicode) CharUpperW Converts a character string or a single character to."
240,MoveFileExW,"Microsoft Build · May 19 – 22, 2025MoveFileExW function (winbase.h) Moves an existing file or directory, including its children, with various move options. The MoveFileWithProgress function is equivalent to the MoveFileEx function, except that MoveFileWithProgress allows you to provide a callback function that receives progress notifications. To perform this operation as a.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.Hi Team, I have ... --If the reply is helpful, please Upvote and Accept it as an answer--| the host file is typically read only. you need to change the permission to write before save. you may need to do the same to the etc folder.| If the installed antivirus software prevents changes to the hosts file while the system is running you may be able.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,....0 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, Copy CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW,.(CopyFileA) CopyFileExA Copies an existing file to a new file, notifying the application of its progress through a callback function. (CopyFileExA) CopyFileExW Copies an existing file to a new file, notifying the application of its progress through a callback function. (CopyFileExW) CopyFileTransactedA Copies an existing file to a new file as a.WriteFileEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. GetFileInformationByHandleEx Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. MoveFileExW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. ReplaceFileW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. APIs from."
241,AbortDoc,"Microsoft Build · May 19 – 22, 2025AbortDoc function (wingdi.h) The AbortDoc function stops the current print job and erases everything drawn since the last call to the StartDoc function. Syntax Parameters [in] hdc Handle to the device context for the print job. Return value If the function succeeds, the return value is greater than zero. If the function fails, the return value is.GDI Print API Functions In this section Function Description AbortDoc The AbortDoc function stops the current print job and erases everything drawn since the last call to the StartDoc function. AbortProc The AbortProc function is an application-defined callback function used with the SetAbortProc function. It is called when a print job is to be.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.2.3.6.2 ABORTDOC Record The ABORTDOC Record stops processing the current document and erases everything drawn since the last STARTDOC Record (section 2.3.6.44) was processed. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction EscapeFunction ByteCount RecordSize (4 bytes): A 32-bit unsigned integer that.Public Methods Name Description CDC::AbortDoc Terminates the current print job, erasing everything the application has written to the device since the last call of the StartDoc member function. CDC::AbortPath Closes and discards any paths in the device context. Inheritance Hierarchy CObject CDC Requirements Header: afxwin.h CDC::AbortDoc.This is zero if iEsc is set to DOCUMENTEVENT_CREATEDCPRE. For restrictions on printing from a 32-bit application on a 64-bit version of Windows, see Remarks. iEsc An escape code that identifies the event to be handled. This parameter can be one of the following integer constants. Constant Event DOCUMENTEVENT_ABORTDOC GDI is about to process a call.Escape function (wingdi.h) The Escape function enables an application to a... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also.SetAbortProc function (wingdi.h) The SetAbortProc function sets the application-defined abort function that allows a print job to be canceled during spooling. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Ta... The SetAbortProc.2.3.6 Escape Record Types This section defines the Escape Record Types, which specify extensions to metafile functionality. The generic format of all escape records is specified by the META_ESCAPE Record (section 2.3.6.1). The following are the Escape Record Types. Name Section Description ABORTDOC 2.3.6.2 Stops processing the current document..The handle is used by the FaxPrintCoverPage function, and by the AbortDoc, EndDoc, DeleteDC, StartPage, EndPage and other Win32 Windows Graphics Device Interface (GDI) functions. Note  The application must also call the AbortDoc function or the EndDoc function to complete the print job, and call the DeleteDC function to deallocate the handle to."
242,WSAAsyncSelect,"Microsoft Build · May 19 – 22, 2025The WSAAsyncSelect function requests Windows message-based notification of network events for a socket. Syntax Parameters [in] s A descriptor that identifies the socket for which event notification is required. [in] hWnd A handle that identifies the window that will receive a message when a network event occurs. [in] wMsg A message to be received.The WSAAsyncSelect function requests Windows message-based notification of network events for a socket. Syntax Parameters [in] s A descriptor that identifies the socket for which event notification is required. [in] hWnd A handle that identifies the window that will receive a message when a network event occurs. [in] wMsg A message to be received.WSAAsyncGetServByPort The WSAAsyncGetServByPort function (winsock2.h) asynchronously retrieves service information that corresponds to a port and protocol. WSAAsyncSelect The WSAAsyncSelect function (winsock2.h) requests Windows message based notification of network events for a socket. WSACancelAsyncRequest The WSACancelAsyncRequest function.The WSAAsyncSelect or WSAEventSelect routine automatically sets a socket to non-blocking mode. If WSAAsyncSelect or WSAEventSelect has been issued on a socket, then any attempt to use WSAIoctl to set the socket back to blocking mode will fail with... To set the socket back to blocking mode, an application must first disable WSAAsyncSelect by.WSAECOMPARATOR The Windows Sockets WSAECOMPARATOR enumeration type is used for version-comparison semantics in Windows Sockets 2. WSAAsyncSelect The WSAAsyncSelect function (winsock2.h) requests Windows message based notification of network events for a socket. WSAAsyncSelect The WSAAsyncSelect function (winsock.h) requests Windows message-based.Asynchronous Notification Using Event Objects The WSAEventSelect and WSAEnumNetworkEvents functions are provided to accommodate applications such as daemons and services that have no user interface (and hence do not use Windows handles). The WSAEventSelect function behaves exactly like the WSAAsyncSelect function. The WSAEventSelect and.The select, WSAAsyncSelect or WSAEventSelect function can be used to determine when it is possible to send more data. W... Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h.The select, WSAAsyncSelect or WSAEventSelect function can be used to determine when it is possible to send more data. Windows Phone 8: This function is supported for Windows Phone Store apps on Windows Phone 8 and later. Windows 8.1 and Windows Server 2012 R2: This function is supported for Windows Store apps on Windows 8.1, Windows.winsock.h header This header is used by Windows Sockets 2. For more information, see: Windows Sockets 2 ... WSAAsyncGetServByPort The WSAAsyncGetServByPort function (winsock.h) asynchronously retrieves service information that corresponds to a port and protocol. WSAAsyncSelect The WSAAsyncSelect function (winsock.h) requests Windows message-based.In Windows network programming, I understand that there is a limit to the number o... Does this limit apply to WSAAsyncSelect() as well?| Hi @Joseph Klasen. WSAAsyncSelect() also supports 64 connections by default. ============================================ If the Answer is helpful, please click &quot;Accept Answer&quot; and upvote it. In."
243,GetTextColor,"Microsoft Build · May 19 – 22, 2025GetTextColor function (wingdi.h) The GetTextColor function retrieves the current text color for the specified device context. Syntax Parameters [in] hdc Handle to the device context. Return value If the function succeeds, the return value is the current text color as a COLORREF value. If the function fails, the return value is CLR_INVALID. Remarks.TextView.GetTextColor(Context, TypedArray, Int32) Method Definition Namespace: Android.Widget Assembly:Mono.Android.dll Returns the default color from the TextView_textColor attribute from the AttributeSet, if set, or the default color from the TextAppearance_textColor from the TextView_textAppearance attribute, if TextView_textColor was not set.SwipeViewExtensions.GetTextColor(ISwipeItemMenuItem) Method Definition Namespace: Microsoft.Maui.Platform Assembly:Microsoft.Maui.dll Source:SwipeViewExtensions.cs Source:SwipeViewExtensions.cs Source:SwipeViewExtensions.cs Parameters swipeItemMenuItem ISwipeItemMenuItem Returns Color Applies to. Learn more about the.TextAppearanceInfo.TextColor Property Definition Namespace: Android.Views.InputMethods Assembly:Mono.Android.dll Returns the current text color of the editor. Property Value Int32 Attributes RegisterAttribute Remarks Returns the current text color of the editor.Java documentation for.TVM_GETTEXTCOLOR message Retrieves the current text color of the control. You can send this message explicitly or by using the TreeView_GetTextColor macro. Return value Returns a COLORREF value that represents the current text color. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server.ListView_GetTextColor macro (commctrl.h) Gets the text color of a list-view control. You can use this macro or send the LVM_GET... Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header commctrl.h. Gets the text color.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. GetTex... GetTextCharacterExtra Gets the current intercharacter spacing for a device context. GetTextColor Gets the text color for a device context..TextView.GetTextColors(Context, TypedArray) Method Definition Namespace: Android.Widget Assembly:Mono.Android.dll Returns the TextView_textColor attribute from the TypedArray, if set, or the TextAppearance_textColor from the TextView_textAppearance attribute, if TextView_textColor was not set directly. ...et TextAppearance_textColor from the.AssistStructure.ViewNode.TextColor Property Definition Namespace: Android.App.Assist Assembly:Mono.Android.dll If #getText() is non-null, this is the main text color associated with it. Property Value Int32 Attributes RegisterAttribute Remarks If #getText() is non-null, this is the main text color associated with it. Note that the text may also.GetTextCharacterExtra The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. GetTextColor The GetTextColor function retrieves the current text color for the specified device context. GetTextExtentExPointA The GetTextExtentExPoint function retrieves the number of characters in a specified."
244,GlobalLock,"Microsoft Build · May 19 – 22, 2025GlobalLock is a function used in Windows programming to lock a global memory object and return a pointer to the first byte of that object's memory block. This function is part of the global memory management functions, which are primarily used for compatibility with 16-bit Windows applications.When you allocate memory using GlobalAlloc, you can use GlobalLock to obtain a pointer to that memory, allowing you to read from or write to it directly. After you are done using the memory, you should call GlobalUnlock to decrement the lock count associated with the memory object. This is important for managing memory correctly and preventing memory leaks.It's worth noting that the global functions, including GlobalLock, are implemented as wrapper functions that call corresponding heap functions in 32-bit Windows, which means they have greater overhead compared to other memory management functions.References:GlobalLock function (winbase.h) Locks a global memory object and returns a pointer to the first byte of the object's memory block. Note  T... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h.(Unicode) GlobalHandle Retrieves the handle associated with the specified pointer to a global memory block. GlobalLock Locks a global memory object and returns a pointer to the first byte of the object's memory block. GlobalMemoryStatus Retrieves information about the system's current usage of both physical and virtual memory. GlobalUnlock.1.2.2 Informative References [MSDN-CLIPBOARD] Microsoft Corporation, ""Clipboard"", http://msdn.microsoft.com/en-us/library/ms648709(VS.85).aspx [MSDN-GlobalLock] Microsoft Corporation, ""GlobalLock function"", http://msdn.microsoft.com/en-us/library/windows/desktop/aa366584(v=vs.85).aspx [MSDN-METAFILEPICT] Microsoft Corporation, ""METAFILEPICT.Remarks To determine whether the... The clipboard owner must use the GlobalLock function to lock the memory that contains the PAINTSTRUCT structure. Before returning, the clipboard owner must unlock that memory by using the GlobalUnlock function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].GlobalFree function (winbase.h) Frees the specified global memory object and invalidates its handle. The GlobalLock function locks a global memory object and increments the lock count by one. The GlobalUnlock function unlocks it and decrements the lock count by one. Requirements Requirement Value Minimum supported client Windows XP [desktop apps |.Memory Management Functions General memory functions Data execution prevention functions File mapping functions AWE functions Heap functions Virtual memory functions Global and local functions Bad memory functions Enclave functions ATL thunk functions Obsolete functions General memory functions Function Description AddSecureMemoryCacheCallback.Remarks When the GlobalAlloc function allocates a memory object with GMEM_MOVEABLE, it returns a handle to the object. The GlobalLock function converts this handle into a pointer to the memory block, and GlobalHandle converts the pointer back into a handle. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only].GlobalAlloc function (winbase.h) Allocates the specified number of bytes from the heap. Therefore, the GlobalAlloc and LocalAlloc functions are essentially the same. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compatibility with 16-bit Windows. To get a pointer to a movable memory object, use the GlobalLock and LocalLock functions. The actual size of the memory allocated can be larger th... The global and local functions.Remarks When the clipboard viewer window is about to be destroyed or resiz... The clipboard owner must use the GlobalLock function to lock the memory object that contains RECT. Before returning, the clipboard owner must unlock the object by using the GlobalUnlock function. Requirements Requirement Value Minimum supported client Windows 2000."
245,GetTextCharset,"Microsoft Build · May 19 – 22, 2025GetTextCharset function (wingdi.h) Retrieves a character set identifier for the font that is currently selected into a specified device context. ...viceThe function obtains a character set identifier for the font that is selected into this device context. Return value If successful, returns a value identifying the character set of the font that.Unicode and Character Set Functions The following functions are used with character sets. Function Description GetTextCharset Retrieves a character set identifier for the font that is currently selected into a specified device context. GetTextCharsetInfo Retrieves information about the character set of the font that is currently selected into a.GetTextCharsetInfo function (wingdi.h) Retrieves information about the character set of the font that is currently selected into a specified device context. In this case, the application can also call the GetTextCharset function, which is equivalent to calling GetTextCharsetInfo with lpSig set to NULL. [in] dwFlags Reserved; must be.GetNLSVersionEx Retrieves information about the current version of a specified NLS capability for a l... GetNumberFormatA Formats a number string as a number string customized for a locale specified by identifier. (ANSI) GetNumberFormatEx Format. GetTextCharset Retrieves a character set identifier for the font that is currently selected into a.G... GetTextCharacterExtra The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. GetTextCharset Retrieves a character set identifier for the font that is currently selected into a specified device context. GetTextCharsetInfo Retrieves information about the character set of the font that."
246,ShowCursor,"Microsoft Build · May 19 – 22, 2025ShowCursor function (winuser.h) Displays or hides the cursor. Syntax Parameters [in] bShow Type: BOOL If bShow is TRUE, the display count is incremented by one. Remarks Windows 8: Call GetCursorInfo to determine the cursor visibility. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.ShowCursor Method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Note This component is available for use in the Microsoft Windows 2000, Windows XP, and Windows Server 2003 operating systems. It may be altered or un... The.IDirect3DDevice9::ShowCursor method (d3d9helper.h) Displays or hides the cursor. Syntax Parameters [in] bShow Type: BOOL If bShow is TRUE, the cursor is shown. Requirements Requirement Value Target Platform Windows Header d3d9helper.h (include D3D9.h) Library D3D9.lib See also IDirect3DDevice9 IDirect3DDevice9::SetCursorPosition IDirect3DDevice....IDirect3DDevice9::ShowCursor method (d3d9.h) Displays or hides the cursor. Syntax Parameters [in] bShow Type: BOOL If bShow is TRUE, the cursor is shown. ... Requirements Requirement Value Target Platform Windows Header d3d9.h (include D3D9.h) Library D3D9.lib See also IDirect3DDevice9 IDirect3DDevice9::SetCursorPosition.TestTerminal.ShowCursor Method Definition Namespace: System.CommandLine.Rendering Assembly:System.CommandLine.Rendering.dll Package:System.CommandLine.Rendering v0.4.0-alpha.22272.1 Implements ShowCursor() Applies to. Learn more about the System.CommandLine.Rendering.TestTerminal.ShowCursor in the System.CommandLine.Rendering namespace...TerminalBase.ShowCursor Method Definition Namespace: System.CommandLine.Rendering Assembly:System.CommandLine.Rendering.dll Package:System.CommandLine.Rendering v0.4.0-alpha.22272.1 Implements ShowCursor() Applies to. Learn more about the System.CommandLine.Rendering.TerminalBase.ShowCursor in the System.CommandLine.Rendering namespace...SystemConsoleTerminal.ShowCursor Method Definition Namespace: System.CommandLine.Rendering Assembly:System.CommandLine.Rendering.dll Package:System.CommandLine.Rendering v0.4.0-alpha.22272.1 Applies to. Learn more about the System.CommandLine.Rendering.SystemConsoleTerminal.ShowCursor in the System.CommandLine.Rendering namespace...VirtualTerminal.ShowCursor Method Definition Namespace: System.CommandLine.Rendering Assembly:System.CommandLine.Rendering.dll Package:System.CommandLine.Rendering v0.4.0-alpha.22272.1 Applies to. Learn more about the System.CommandLine.Rendering.VirtualTerminal.ShowCursor in the System.CommandLine.Rendering namespace...ITerminal.ShowCursor Method Definition Namespace: System.CommandLine.Rendering Assembly:System.CommandLine.Rendering.dll Package:System.CommandLine.Rendering v0.4.0-alpha.22272.1 Applies to. Learn more about the System.CommandLine.Rendering.ITerminal.ShowCursor in the System.CommandLine.Rendering namespace...CGDisplay.ShowCursor(Int32) Method Definition Namespace: CoreGraphics Assembly:Xamarin.Mac.dll Parameters display Int32 Returns Int32 Applies to. Learn more about the CoreGraphics.CGDisplay.ShowCursor in the CoreGraphics namespace.. /dotnet/api/coregraphics.cgdisplay.showcursor."
247,closesocket,"Microsoft Build · May 19 – 22, 2025closesocket function (winsock2.h) The closesocket function closes an existing socket. Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h (include Winsock2.h) Library Ws2_32.lib.closesocket function (winsock.h) The closesocket function closes an existing socket. Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock.h (include Winsock2.h) Library Ws2_32.lib DLL.Close and Closesocket Sockets are represented by standard file descriptors in Berkeley Sockets, so the close function can be used to close sockets as well as regular files. Ioctl and Ioctlsocket/WSAIoctl Various C language run-time systems use the IOCTLs for purposes unrelated to Windows Sockets. As a consequence, the ioctlsocket function and the.This technique is also not usually suitable for high-perf... Once the accept function is called, the ListenSocket is no longer needed for this example. The closesocket function is called to close the socket. Next Step: Receiving and Sending Data on the Server Related topics Getting Started With Winsock Winsock Server Application Listening on a.Bluetooth and listen, select, and closesocket Bluetooth uses the listen, select, and closesocket functions without any modification from standard Windows Sockets programming. As with Windows Sockets, the closesocket function frees resources associated with the socket. When calling the listen function, it... Bluetooth uses the listen, select, and.The server application can still receive data on the socket. When the client application is done receiving data, the closesocket function is called to close the socket. When the client application is completed using the Windows Sockets DLL, the WSACleanup function is called to release resources. Complete Server Source Code Complete Server Code.Overlapped I/O and Event Objects Windows Sockets 2 supports overlapped I/O and all transport providers support this capability. The closesocket function should be called after canceling an overlapped operation. Therefore, for best results, instead of canceling the I/O directly, the closesocket function should be called to close the socket which.The client application can still receive data on the socket. When the client application is done receiving data, the closesocket function is called to close the socket. When the client application is completed using the Windows Sockets DLL, the WSACleanup function is called to release resources. Complete Client Source Code Complete Client Code.WSAAsyncSelect function (winsock.h) [The WSA... Closing a socket with closesocket also cancels WSAAsyncSelect message sending, but the same caveat about messages in the queue still applies. This results from the remote end performing a shutdown on the send side or a closesocket. Note  FD_CLOSE is not posted after closesocket is called. The.WSAAsyncSelect function (winsock2.h) [The... Closing a socket with closesocket also cancels WSAAsyncSelect message sending, but the same caveat about messages in the queue still applies. This results from the remote end performing a shutdown on the send side or a closesocket. Note  FD_CLOSE is not posted after closesocket is called. The."
248,GetConsoleOutputCP,"Microsoft Build · May 19 – 22, 2025GetConsoleOutputCP function Retrieves the output code page used by the console associated with the calling process. A console uses its output code page to translate the character values written by the various output functions into the images displayed in the console window. To set and query a console's input code page, use the SetConsoleCP and.GetConsoleCP function Retrieves the input code page used by the console associated with the calling process. A console uses its input code page to translate keyboard input into the corresponding character value. To set and query a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias for the specified executable. GetConsoleOriginalTitle Retrieves the original title for the current console window. GetConsoleOutputCP Retrieves the output code page used by the console associated with the calling.Console Code Pages A code page is a mapping of 256 character codes to individual characters. An application can use the SetConsoleCP and GetConsoleCP functions to set and retrieve a console's input code pages and the SetConsoleOutputCP and GetConsoleOutputCP functions to set and retrieve its output code pages. The identifiers of the code pages.SetConsoleCP function Sets the input code page used by... To set and retrieve a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via.System.Console class This article provides supplementary remarks to the reference documentation for this API. The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the ... NET Core notes.6 Appendix A: Product Behavior The information in this specification is applicable to the following Microsoft products or supplemental software. Unless otherwise specified, the term ""MAY"" implies that the product does not follow the prescription. Section 2.2.3:  The console host terminal emulator sequences listed in this section are only.SetConsoleOutputCP function Sets the output code page used by the console associated with the calling process. ...sole's current output code page, GetConsoleOutputCP functionRequirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via.3.1.4.5.2 Remote Shells To create a new Shell, a wst:Create message MUST be sent where the wsman:ResourceURI element of the EPR specifies the type of Shell to be created. WINRS_CODEPAGE The value of the options specifies the client's console output code page. The value is returned by GetConsoleOutputCP API; on the server side, this value is set as.GetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. SetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. APIs from api-ms-win-core-fibers-l2-1-1.dll API Requirements CalloutOnFiberStack Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240. GetDiskFreeSpaceExA."
249,SearchPathW,"Microsoft Build · May 19 – 22, 2025SearchPathW function (processenv.h) Searches for a specified file in a specified path. Syntax Parameters [in, optional] lpPath The path to be searched for the file. If this parameter is NULL, the function searches for a matching file using a registry-dependent system search path. ...t\Control\Session Manager\SafeProcessSearchMode When the value.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.... using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW,.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (Unicode).Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Maximum Path Length Limitation In the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is MAX_PATH, which is defined as 260 characters. Enable long paths in Windows 10, version 1607,.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
250,FindNextFileW,"Microsoft Build · May 19 – 22, 2025FindNextFileW function (fileapi.h) Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions. Syntax Parameters [in] hFindFile The search handle returned by a previous call to the FindFirstFile or FindFirstFileEx function. [out] lpFindFileData A pointer to the WIN32_FIND_DATA structure.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. FindNextFileA Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or.Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. FindNextFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into....file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFi FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW,....s that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW,....file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFi FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW,.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
251,UpdateICMRegKeyA,"Microsoft Build · May 19 – 22, 2025UpdateICMRegKeyA function (wingdi.h) (Obsolete; retained for backward compatibility) The UpdateICMRegKey function manages color profiles and Color Management Modules in the system. Syntax Parameters reserved Reserved, must be set to zero. lpszCMID Points to a string that specifies the ICC profile identifier for the color management DLL to use with.(ANSI) UnregisterCMMW Dissociates a specified ID value from a given color management module dynamic-link library (CMM DLL). (Unicode) UpdateICMRegKeyA The UpdateICMRegKey function manages color profiles and Color Management Modules in the system. (ANSI) UpdateICMRegKeyW The UpdateICMRegKey function manages color profiles and Color Management.GetGValue The GetGValue macro retrieves an intensity value for the green component of a red, green, blue (RGB) value. GetICMProfileA The GetICMProfile function retrieves the file name of the current output color profile for a specified device context. (ANSI) GetICMProfileW The GetICMProfile function retrieves the file name of the current output."
252,GetProfileStringA,"Microsoft Build · May 19 – 22, 2025GetProfileStringA function (winbase.h) Retrieves the string associated with a key in the specified section of the Win.ini file. Note  This function is provided only for compatibility with 16-bit Windows-based applications, therefore this function should not be called from server code. Applications should store initialization information in the.GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (... GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA Retrieves a string from the specified section in an initialization file..GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (... GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA Retrieves a string from the specified section in an initialization file.."
253,EscapeCommFunction,"Microsoft Build · May 19 – 22, 2025EscapeCommFunction function (winbase.h) Directs the specified communications device to perform an extended function. Syntax Parameters [in] hFile A handle to the communications device. The CreateFile function returns this handle. [in] dwFunc The extended function to be performed. Requirements Requirement Value Minimum supported client Windows XP.Communications Functions The following functions are used with communications resources. Function Description BuildCommDCB Fills a specified DCB struct... CommConfigDialog Displays a driver-supplied configuration dialog box. EscapeCommFunction Directs a specified communications device to perform an extended function. GetCommConfig Retrieves the.Extended Functions Some communications functions can be called for a device by using the EscapeCommFunction function. This function sends a code to direct the device to perform an extended function. EscapeCommFuncti... DeviceIoControl gives a device associated with a communications resource capabilities not supported by the standard serial.ClearCommBreak function (winbase.h) Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. Remarks A communications device is placed in a break state by the SetCommBreak or EscapeCommFunction function. Requirements Requirement Value Minimum supported client Windows XP [desktop.(DeregisterE... (Unicode) EnumResourceTypesA Enumerates resource types within a binary module. (ANSI) EnumResourceTypesW Enumerates resource types within a binary module. (Unicode) EraseTape Erases all or part of a tape. EscapeCommFunction Directs the specified communications device to perform an extended function. ExecuteUmsThread Runs the.If handshaking is enabled, it is an error for the application to adjust the line by using the EscapeCommFunction function. fDsrSensitivity If this member is TRUE, the communications driver is sensitive to the state of the DSR signal. If handshaking is enabled, it is an error for the application to adjust the line by using the EscapeCommFunction.In C# it's reasonably easy to create a serial port object, configure it and open the serial port. Tested with an SparkFun RedBoard with FT232 chip. With this option checked, the ... However, I still can use these signals with EscapeCommFunction() method. FTDI VCP driver gives similar option (disable modem signals at startup), but unfortunately it.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
254,SelectClipRgn,"Microsoft Build · May 19 – 22, 2025SelectClipRgn function (wingdi.h) The SelectClipRgn function selects a region as the current clipping region for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] hrgn A handle to the region to be selected. ...region's complexity and can be one of the followinSIMPLEREGION Region is a single rectangle..ExtSelectClipRgn function (wingdi.h) The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode. Syntax Parameters [in] hdc A handle to the device context. [in] hrgn A handle to the region to be selected. Value Meaning RGN_AND The new clipping region combines the overlapping areas of the.Clipping Functions The following functions are used with clipping. RectVisible Determines whether any part of the specified rectangle lies within the ... SelectClipPath Selects the current path as a clipping region for a device context, combining the new region with any existing clipping region by using the specified mode. SelectClipRgn Selects a.When the application retrieves a display device context using the BeginPaint, GetDC, or GetDCEx function, the system sets the clipping region for the device context to the intersection of the visible region and the update region. Applications can change the clipping region by using functions such as SetWindowRgn, SelectClipPath and SelectClipRgn,.Remarks An application-defined clipping region is a clipping region identified by the SelectClipRgn function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.OffsetClipRgn function (wingdi.h) ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Clipping Functions Clipping Overview.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Clipping Functions Clipping Overview CreateRectRgn PtVisible RECT SelectClipRgn..CreateMetaFileW function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format metafile. The file cannot contain functions that modify the viewport origin and extents, nor can it contain device-dependent functions such as the SelectClipRgn function. Once created, the Windows metafile can be scaled and rendered to any.CreateMetaFileA function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format metafile. The file cannot contain functions that modify the viewport origin and extents, nor can it contain device-dependent functions such as the SelectClipRgn function. Once created, the Windows metafile can be scaled and rendered to any.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt."
255,recvfrom,"Microsoft Build · May 19 – 22, 2025The recvfrom function is a Windows Sockets API function used to receive data from a socket. It is particularly useful in datagram-oriented protocols, such as UDP, where data can arrive from any address. The function allows the application to specify a buffer to receive the incoming data, the size of that buffer, and the flags that control the operation.When recvfrom is called, it blocks until data is available, and it fills the provided buffer with the received data. The function also provides information about the sender's address and port, which can be useful for applications that need to handle data from multiple sources.The basic syntax of the recvfrom function is as follows:The function returns the number of bytes received, or an error code if the operation fails.References:recvfrom function (winsock2.h) The recvfrom function receives a datagram, and stores the source address. Syntax Parameters [in] s A descriptor identifying a bound socket. [out] buf A buffer for the incoming data. [in] len The length, in bytes, of the buff... Remarks The recvfrom function reads incoming data on both connected and unconnected.recvfrom function (winsock.h) The recvfrom function receives a datagram and stores the source address. Syntax Parameters [in] s A descriptor identifying a bound socket. [out] buf A buffer for the incoming data. [in] len The length, in bytes, of the buffer pointed to by the buf parameter. [in] flags A set of options that modify the behavior of the.Once associated, the completion port receives the socket state notifications that were specified. recv The recv function (winsock2.h) receives data from a connected socket or a bound connectionless socket. recv The recv function (winsock.h) receives data from a connected socket or a bound connectionless socket. recvfrom The recvfrom function.Once associated, the completion port receives the socket state notifications that were specified. recv The recv function (winsock2.h) receives data from a connected socket or a bound connectionless socket. recvfrom The recvfrom function receives a datagram, and stores the source address. select The select function determines the status of one or.Windows Sockets 1.1 Blocking Routines and EINPROGRESS One major issue in porting applications from a Berkeley Sockets environment to a Windows environment involves blocking; that is, invoking a function that does not return until the associated operation is completed. A problem arises when the operation takes an a... The following functions can.Sending and Receiving PGM Data Sending and receiving PGM data is similar to sending or receiving data on any socket. In overlapped I/O, the operation does not complete until the window advances enough to ... Receiving PGM Data Once a PGM receiver session is created, data is received using the various Windows Sockets receive functions: recv,.Os.Recvfrom Method Definition Namespace: Android.Systems Assembly:Mono.Android.dll Overloads Recvfrom(FileDescriptor, ByteBuffer, Int32, InetSocketAddress) See recvfrom(2). Recvfrom(FileDescriptor, Byte[], Int32, Int32, Int32, InetSocketAddress) See recvfrom(2). Parameters fd FileDescriptor buffer ByteBuffer flags Int32 srcAddress.Readlink(String) See readlink(2). Readv(FileDescriptor, Object[], Int32[], Int32[]) See readv(2). Recvfrom(FileDescriptor, Byte[], Int32, Int32, Int32, InetSocketAddress) See recvfrom(2). Recvfrom(FileDescriptor, ByteBuffer, Int32, InetSocketAddress) See recvfrom(2). Recvmsg(FileDescriptor, StructMsghdr, Int32) See recvmsg(2). Remove(String) See.Once connected, data can be transferred using send and recv calls. Connectionless, message-oriented sockets allow sending and receiving of datagrams to and from arbitrary peers using sendto and recvfrom. If s... So an application can issue a receive call (for example, recv or WSARecvEx) and retrieve the data from several coalesced multiple.Once connected, data can be t... Connectionless, message-oriented sockets allow sending and receiving of datagrams to and from arbitrary peers using sendto/WSASendTo and recvfrom/WSARecvFrom. If such a socket is connected to a specific peer, datagrams can be sent to that peer using send/WSASend and can be received from (only) this peer using."
256,LockResource,"Microsoft Build · May 19 – 22, 2025LockResource function (libloaderapi.h) Retrieves a pointer to the specified resource in memory. Syntax Parameters [in] hResData Type: HGLOBAL A handle to the resource to be accessed. Note LockResource does not actually lock memory; it is just used to obtain a pointer to the memory containing the resource data. The name of the function comes from.Using Resources This section contains code snippets for the following tasks: Updating Resources Creating a Resource List Updating Resources The following example copies a dialog box resource from one executable file, Hand.exe, to another, Foot.exe, by following these steps: Use the LoadLibrary function to load the executable file Hand.exe. Use the.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services li... (LoadLibraryW) LoadResource Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. LockResource.LoadResource function (libloaderapi.h) Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. Do not pass this handle to the G... To obtain a pointer to the first byte of the resource data, call the LockResource function; to obtain the size of the resource, call SizeofResource. Retrieves a.FindResourceW function (libloaderapi.h) Determines the location of a resource with the specified type and name in the specified module. An application can use FindResource to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to LoadResource and then.Remarks When an application passes a cursor handle to the LockResource function, the function returns a pointer to a buffer containing information about the cursor. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h.ICONINFOEX is an extended version of ICONINFO structure with additional szModName/szResName/wResID members that can be used to query an icon or cursor resource bits. These bits are typically loaded by calls to the FindResource, LoadResource, LockResource and LookupIconIdFromDirectoryEx functions. Note The winuser.h header defines ICONINFOEX as an.ICONINFOEXA stru... ICONINFOEX is an extended version of ICONINFO structure with additional szModName/szResName/wResID members that can be used to query an icon or cursor resource bits. These bits are typically loaded by calls to the FindResource, LoadResource, LockResource and LookupIconIdFromDirectoryEx functions. Note The winuser.h header.FindResourceExA function (winbase.h) Determines the location of the resource with the specified type,... An application can use FindResourceEx to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to LoadResource and then to LockResource. To use a.FindResourceA function (winbase.h) Determines the location of a resource with the specified type and na... An application can use FindResource to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to LoadResource and then to LockResource. To use a."
257,OleSave,"Microsoft Build · May 19 – 22, 2025OleSave function (ole2.h) Saves an object opened in transacted mode into the specified storage object. Syntax Parameters [in] pPS Pointer to the IPersistStorage interface on the object to be saved. [in] pStg Pointer to the IStorage interface on the destination storage object to which the object indicated in pPS is to be saved. [in] fSameAsLoad.ole2.h header This header is used by multiple technologies. For more information, see: Componen... OleRun Puts an OLE compound document object into the running state. OleSave Saves an object opened in transacted mode into the specified storage object. OleSaveToStream The OleSaveToStream function (ole2.h) saves an object with the IPersistStream.1.2.2 Informative References [MSDN-OleSave] Microsoft Corporation, ""OleSave function"", http://msdn.microsoft.com/en-us/library/ms691490(VS.85).aspx. [MSDN-OleSave] Microsoft Corporation, OleSave function , http://msdn.microsoft.com/en-us/library/ms691490(VS.85).aspx.....ta OleCreateLinkFromDataEx OleCreateLinkToFile OleCreateLinkToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFromData OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentClipboard OleIsRunning OleLoad OleLoadFromStream OleLoadPicture OleLoadPictureEx.WriteClassStg function (coml2api.h) The WriteClassStg function stores the specified class identifier (CLSID) in a storage object. Container applications typically call this function before calling the IPe... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.IPersistStorage interface (objidl.h) Enables a container application to pass a storage object to one of its contained objects and to load and save the storage object. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.IPersistStorage::Save method (objidl.h) Saves an object, and any nested objects that it contains, into the specified storage object. Notes to Callers Rather than calling IPersistStorage::Save directly, you typically call the OleSave helper function which performs the following steps: Call the WriteClassStg function to write the class identifier.IPersistStorage::HandsOffStorage method (objidl.h) Instructs the object to release all storage objects that have been passed to it by its container and to e... In these scenarios, the HandsOffStorage call comes after a call to either OleSave or IPersistStorage::Save, putting the object in HandsOffAfterSave mode. Instructs the object to release all.If the container were to save it using the treat-as CLSID, the original ap... Typically, in this case, the container calls the OleSave helper function, which performs all the necessary steps. Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly from the object. If you are.2.1.378 Part 4 Section 5.2.2.5, pic (Picture) WordPad supports this element. When the document is loaded, WordPad embeds the picture specified by this element as an object linking and embedding (OLE) object into WordPad. When the document is saved, WordPad writes this picture as a StaticDib or StaticMetafile OLE object. For more information, see."
258,CloseWindowStation,"Microsoft Build · May 19 – 22, 2025CloseWindowStation function (winuser.h) Closes an open window station handle. Syntax Parameters [in] hWinSta A handle to the window station to be closed. This handle is returned by the CreateWindowStation or OpenWindowStation function. To get extended error information, call GetLastError. Requirements Requirement Value Minimum supported client.Window Station and Desktop Functions Applications can use the following functions with window station objects. Function Description CloseWindowStation Closes an open window station handle. CreateWindowStation Creates a window station object, associates it with the current process, and assigns it to the current session. EnumWindowStations.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any... For programming guidance for this technology, see: Window Stations and Desktops Functions CloseDesktop Closes an open handle to a desktop object. CloseWindowStation Closes an open window.CloseWindow Minimizes (but does not destroy) the specified window. CloseWindowStation Closes an open window station handle. CopyAcceleratorTableA Copies the specified accelerator table. (Unicode) DisableProcessWindowsGhosting Disables the window ghosting feature for th... Window ghosting is a Windows Manager feature that lets the user minimize,.Remarks After you are done with the handle, you must call CloseWindowStation to free the handle. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Remarks After you are done with the handle, you must call CloseWindowStation to free the handle. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Process Connection to a Window Station A process automatically establishes a connection to a window station and desktop when it first calls a USER32 or GDI32 function (other than the window station and desktop functions). If the open operation fails because this window station does not exist, the system tries to create the window station and a.CreateWindowStationA function (winuser.h) Creates a window station object, associates it with the calling process, and assigns it to the current session. Remarks After you are done with the handle, you must call CloseWindowStation to free the handle. Note The winuser.h header defines CreateWindowStation as an alias that automatically selects the.CreateWindowStationW function (winuser.h) Creates a window station object, associates it with the calling process, and assigns it to the current session. Remarks After you are done with the handle, you must call CloseWindowStation to free the handle. Note The winuser.h header defines CreateWindowStation as an alias that automatically selects the."
259,CLSIDFromProgID,"Microsoft Build · May 19 – 22, 2025CLSIDFromProgID function (combaseapi.h) Looks up a CLSID in the registry, given a ProgID. If the ProgID cannot be found in the registry, CLSIDFromProgID creates an OLE 1 CLSID for the ProgID and a CLSID entry in the registry. Because of the restrictions placed on OLE 1 CLSID values, CLSIDFromProgID and CLSIDFromString are the only two functions.VersionIndependentProgID Associates a ProgID with a CLSID. This value is used to determine... The version-independent ProgID is stored and maintained solely by application code. When given the version-independent ProgID, the CLSIDFromProgID function returns the CLSID of the current version. You can use CLSIDFromProgID and ProgIDFromCLSID to.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference combaseapi.h contains the following programming interfaces: Functions CLSIDFromProgID Looks up a CLSID in the.version-independent ProgID Key Associates a ProgID with a CLSID. This key is used to determine the latest version of an object application. In this situation, the application can use the version-independent ProgID... The version-independent ProgID is stored and maintained solely by application code. When given the version-independent ProgID, the.Obtaining a Machine SDO The first step in using the SDO API is to create an SDO machine object. Use the CLSIDFromProgID function to obtain the class identifier (CLSID) for the SDO machine object. The programmatic identifier (ProgID) to use for the object is ""IAS.SdoMachine"". Once you have the CLSID, call CoCreateInstance with this CLSID. See.Functions (COM) The following functions are provided by COM. Function Description BindMoniker Locates an object by means of its moniker, activates the object if it is inactive, and retrieves a pointer to the specified interface on that object. CLSIDFromProgID Looks up a CLSID in the registry, given a ProgID. CLSIDFromProgIDEx Triggers automatic.ProgIDFromCLSID function (combaseapi.h) Retrieves the ProgID for a given CLSID. ... clsid The CLSID for whic ProgID is to be requested.Call the CLSIDFromProgID function to find the CLSID associated with a given ProgID. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Component Object Model (COM) Overview of the Component Object Model (COM) technology. CLSIDFromProgID Looks up a CLSID in the registry, given a ProgID. CLSIDFromProgIDEx The CLSIDFromProgIDEx function (objbase.h) triggers automatic installation if the COMClassStore policy is enabled. CLSIDFromProgIDEx The CLSIDFromProgIDEx function (combaseapi.h).When an application requests a GUID from CLSIDFromProgID, COM first searches for the mapping from progid to CLSID in the active activation context. When an application uses ... COM classes can be exported by hosted components without going through the registry. Multiple components can expose the same ProgID for different COM objects, and your.CLSIDFromProgID failed as admin user. Why?| Hello, Welcome to Microsoft Q&amp;A. The final solution to this problem: Need to install or register as an administrator for normal access. ... If the answer is the right solution, please click &quot;Accept Answer&quot; and kindly upvote it. Note: Please follow the steps in our documentation to enable."
260,GetClassFile,"Microsoft Build · May 19 – 22, 2025GetClassFile function (objbase.h) Returns the CLSID associated with the specified file name. ...rs [in] szFilename A pointer to the filename for which you are requesting the associate [out] pclsid A pointer to the location where the associated CLSIDGetClassFile uses the following strategies to determine an appropriate CLSID: If the file contains.FileType Key Used by GetClassFile to match patterns against various file bytes in a non-compound file. Remarks Entries are used by the GetClassFile function to match patterns against various file bytes in a non-compound file. The HKEY_LOCAL_MACHINE\SOFTWARE\Classes key corresponds to the HKEY_CLASSES_ROOT key, which was retained for compatibility.Key Associates a file name extension with a ProgID. Registry Entry Remarks The information contained in the file name extension key is used by both the Windows Explorer and file monikers. GetClassFile uses the file name extension key to supply the associated CLSID. The HKEY_LOCAL_MACHINE\SOFTWARE\Classes key corresponds to the HKEY_CLASSES_ROOT.OleCreateFromFile function (ole.h) Creates an embedded object from the contents of a named file. If not, the function calls the GetClassFile function to get the CLSID associated with the lpszFileName parameter, and then creates an OLE 2-embedded object associated with that CLSID. Requirements Requirement Value Minimum supported client Windows 2000.CLSID Configuration options for COM classes. Associates a file name extension with a ProgID. FileType Used by GetClassFile to match patterns against various file bytes in a non-compound file. Note that the ProgID is not guaranteed to be globally unique, unlike a CL... The subkeys and registry values associated with the.CoGetInstanceFromFile function (objbase.h) Creates a new object and initializes it from a file using IPersistFile::Load. This parameter can be NULL, in which case there is a call to GetClassFile, using pwszName as its parameter to get the class of the object to be instantiated. [in, optional] punkOuter When non-NULL, indicates the instance is.Programmatic Printing OLE provided the means to uniquely identify persistent documents (GetClassFile) and load them into their associated code (CoCreateInstance, QueryInterface(IID_IPersistFile), QueryInterface(IID_IPersistStorage), IPersistFile::Load, and IPersistStorage::Load). To further enable printing documents, active document containment.CreateClassMoniker Introduced into ole32.dll in 10.0.10240. CreateFileMoniker Introduced into ole32.dll in 10.0.10240. GetClassFile Introduced into ole32.dll in 10.0.10240. APIs from iphlpapi.dll API Requirements GetAdaptersAddresses Introduced into iphlpapi.dll in 10.0.10240. GetBestRoute2 Introduced into iphlpapi.dll in 10.0.10586..If not, the function calls the GetClassFile function to get the CLSID associated with the lpszFileName parameter, and then creates an OLE 2-embedded object associated with that CLSID. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.A minimal briefcase reconciler typically looks directly at the storage of the other versions and deals with embedded objects in a very pri... The initiator locates the appropriate briefcase reconciler by using a subset of the logic implemented by the GetClassFile function to determine the type of a given file and then looks in the registry for the."
261,EndPath,"Microsoft Build · May 19 – 22, 2025EndPath function (wingdi.h) The EndPath function closes a path bracket and selects the path defined by the bracket into the specified device context. Syntax Parameters [in] hdc A handle to the device context into which the new path is selected. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop a... The.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following p... This function is typically used to direct the device.This is done by calling the BeginPath function, specifying the appropriate drawing functions, and then by calling the EndPath function. This combination of functions (BeginPath, drawing functions, and EndPath) constitute a path bracket. AngleArc Arc ArcTo Chord CloseFigure Ellipse ExtTextOut LineTo MoveToEx Pie PolyBezier PolyBezierTo PolyDraw.Path Functions (Windows GDI) The following functions are used to create, alter, or draw paths. Function Description AbortPath Closes and discards any paths in the specified device context. CloseFigure Closes an open figure in a path. EndPath Closes a path bracket and selects the path defined by the bracket into the specified device context..Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the.EMRABORTPATH structure (wingdi.h) Contains data for the AbortPath, BeginPath, EndPath, CloseFigure, FlattenPath, WidenPath, SetMetaRgn, SaveDC, and RealizePalette enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimu... Contains data for the AbortPath, BeginPath,.CDC::EndDoc Ends a print job started by the StartDoc member function. CDC::EndPage Informs the device driver that a page is ending. CDC::EndPath Closes a path bracket and selects the path defined by the bracket into the device context. CDC::EnumOb... For specific uses, the Microsoft Foundation Class Library provides several classes derived from.Clip Paths Like a clipping region, a clip path is another graphics object that an application can select into a device context. Unlike a clipping region, a clip path is al... To create a clip path, it's first necessary to create a path that describes the required irregular shape. Paths are created by calling the appropriate graphics device.CloseFigure function (wingdi.h) The CloseFigure fun... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BeginPath EndPath.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BeginPath Clipping Functions Clipping Overview EndPath. The SelectClipPath."
262,IsWindowVisible,"Microsoft Build · May 19 – 22, 2025IsWindowVisible function (winuser.h) Determines the visibility state of the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Because the.AppWindow.IsVisible Property Definition Namespace: Microsoft.UI.Windowing Edit Gets a value that indicates whether the window is shown. Property Value true if the window is shown; otherwise, false. Remarks A window is considered shown (visible) even when other windows are occluding it. The behavior of this property aligns with the IsWindowVisible.NativeMethods.IsWindowVisible(IntPtr) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Checks whether the window is visible. Parameters hWnd Specifies a pointer to the window. Returns Boolean True if the window is visible, otherwise false. Applies to. Checks.IVsNavigateToService.IsWindowVisible Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Returns Boolean Applies to. Learn more about the.Returns Int32 Returns S_OK if the window is visible, otherwise returns S_FALSE. Remarks IsVisible checks to see if a window hosted by the Visual Studio IDE can be visible, taking into consideration whether the instance of the Visual Studio IDE is minimized or obscured. ...if the window is completely obscured or mIsVisible differs from IsOnScreen.If dynamic layout is enabled, the position and size of child windows can change when the user resizes the parent window. CWnd::IsIconic Determine. CWnd::IsTouchWindow Specifies whether CWnd has touch support. CWnd::IsWindowVisible Determines whether the window is visible. CWnd::LockWindowUpdate Disables or reenables drawing in the given window..IVsWindowFrame.IsOnScreen(Int32) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Returns true if the window frame is on the screen. IsOnScreen differs from the behavior of.EnableWindow t... A window is visible when the WS_VISIBLE style is set for the window. If the WS_VISIBLE style is specified in CreateWindowEx, the system sends the WM_SHOWWINDOW message to the window after creating the window, but before displaying it. An application can determine whether a window is visible by using the IsWindowVisible function..Although the window content remains visible on screen, the IsWindowVisible function returns FALSE when called on a window in this state. Passing a WM_SETREDRAW messa... Windows 10 and later; Windows Server 2016 and later. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.CMFCToolBarBut... CMFCToolBarButton::IsVisible Determines whether the toolbar button is visible. CMFCToolBarButton::IsWindowVisible Determines whether the underlying window handle of the button is visible. CMFCToolBarButton::OnAddToCustomizePage Called by the framework when the button is added to a Customize dialog box.."
263,InsertMenuW,"Microsoft Build · May 19 – 22, 2025InsertMenuW function (winuser.h) Inserts a new menu item into a menu, moving other items down the menu. Note  The InsertMenu function has been superseded by the InsertMenuItem function. You can still use InsertMenu, however, if you do not need any of the extended features of InsertMenuItem. Syntax Parameters [in] hMenu Type: HMENU A handle to the.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. The menu is initiall... (ANSI).(ANSI) CreateMDIWindowW Creates a multiple-document interface (MDI) child window. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. (ANSI) CreateWindowExW."
264,getservbyport,"Microsoft Build · May 19 – 22, 2025getservbyport function (winsock.h) The getservbyport function retrieves service information corresponding to a port and protocol. Syntax Parameters [in] port Port for a service, in network byte order. [in] proto Optional pointer to a protocol name. If this is null, getservbyport returns the first service entry for which the port matches the s_port.getservbyport function (winsock2.h) The getservbyport function retrieves service information corresponding to a port and protocol. Syntax Parameters [in] port Port for a service, in network byte order. [in] proto Optional pointer to a protocol name. If this is null, getservbyport returns the first service entry for which the port matches the....tobynumber function (winsock.h) retrieves protocol information corresponding to a protocol n getservbyname The getservbyname function (winsock2.h) retrieves service information corresponding to a service name and protocol. getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and....nsock2.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock2.h) retrieves the protocol information corresponding to a protocol name. getprotobynumber The getprotobynumber function (winsock2.h) retrieves protocol information corresponding to a protocol n getservbyname The.WSAAsyncGetServByPort function (winsock2.h) The WSAAsyncGetServByPort function asynchronously retrieves service information that corresponds to a port and protocol. Remarks The WSAAsyncGetServByPort function is an asynchronous version of getservbyport, and is used to retrieve service information corresponding to a port number. Requirements.WSAAsyncGetServByPort function (winsock.h) The WSAAsyncGetServByPort function asynchronously retrieves service information that corresponds to a port and protocol. Remarks The WSAAsyncGetServByPort function is an asynchronous version of getservbyport, and is used to retrieve service information corresponding to a port number. Requirements.getservbyname and getservbyport Functions in the SPI The WSALookupServiceBegin query uses SVCID_INET_SERVICEBYNAME as the service class GUID. The lpszServiceInstanceName parameter references a string that indicates the service name or service port, and (optionally) the service protocol. The Ws2_32.dll will specify LUP_RETURN_BLOB an... The....tByAddr WSAAsyncGetHostByName WSAAsyncGetProtoByName WSAAsyncGetProtoBy WSAAsyncGetServByName WSAAsyncGetServByPortThe following list describes the topics in this section: Basic Approach for GetXbyY in the API getprotobyname and getprotobynumber Functions in the API getservbyname and getservbyport Functions in the API gethostbyname Function in.getservbyname and getservbyport Functions in the API The getservbyname and getservbyport functions use the WSALookupServiceBegin function to query SVCID_INET_SERVICEBYNAME as the service class GUID. The lpszServiceInstanceName member in the WSAQUERYSET structure passed to the WSALookupServiceBegin function references a string to indicate the....) retrieves the protocol information corresponding to a protocol name. getprotobynumber The getprotobynumber function (winsock.h) retrieves protocol information corresponding to a protocol n getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and protocol. getservbyport The."
265,GetPrivateProfileIntA,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileIntA function (winbase.h) Retrieves an integer associated with a key in the specified section of an initialization file. This value is in the form of a string; the GetPrivateProfileInt function converts the string into an integer and returns the integer. [in] nDefault The default value to return if the key name cannot be found in.GetOsProductContentId Retrieves the content identifier that corresponds to the current installation of the operating system. GetPrivateProfileInt The GetPrivateProfileInt function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileIntA Retrieves an integer associated with a.GetFileAttributesTransactedA... GetPrivateProfileInt The GetPrivateProfileInt function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA)."
266,GetObjectA,"Microsoft Build · May 19 – 22, 2025GetObjectA function (wingdi.h) The GetObject function retrieves information for the specified graphics object. Syntax Parameters h c pv Return value If the function succeeds, and lpvObject is a valid pointer, the return value is the number of bytes stored into the buffer. If the function succeeds, and lpvObject is NULL, the return value is the.GetMetaFileA The GetMetaFile function creates a handle that identifies the metafile stored in the specified file. GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics object. GetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The.GetMetaFileA The Get... GetMonitorInfoA The GetMonitorInfo function retrieves information about a display monitor. GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics object. GetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The.We will describe both basic and advanced implementations of GetObject and EnumerateInstances. Implementing GetObject The purpose of GetObject is to locate a specific instance of a class. By the time your providerï¿½s implementation of GetObject is called, the framework will have created a new instance of the class and filled in its key properties."
267,IsIconic,"Microsoft Build · May 19 – 22, 2025IsIconic function (winuser.h) Determines whether the specified window is minimized (iconic). Syntax Parameters [in] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the window is iconic, the return value is nonzero. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].Most applications define a class icon when registering the window class for the window, and the system draws the icon when the window is minimized. In the following example, the window procedure draws a star in th... The procedure uses the IsIconic function to determine when the window is minimized. This ensures that the star is drawn only when.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. Therefore, one of the first ....CWnd::ArrangeIconicWindows Arranges all the minimized (iconic) child windows. If dynamic layout is enabled, the position and size of child windows can change when the user resizes the parent window. CWnd::IsIconic Determines whether CWnd is minimized (iconic). CWnd::IsWindowEnabled Determines whether the window is enabled for mouse and keyboard.IsWindowArranged function (winuser.h) Note Some information relates to pre-released product, which may be substantially modified before it's commercially released. Example Requirements Minimum supported client Windows 10, version 1903 Minimum supported server Target platform Windows Header None Library None DLL User32.dll API set Not yet released..If an application specifies the WS_MAXIMIZE or WS_MINIMIZE style in the CreateWindowEx function, the window is initially maximized or minimized. The ArrangeIconicWindows function arranges the icons on the desktop, or it arranges a parent window's minimized child windows in the parent window. The IsZoomed and IsIconic functions determine whether a....WindowsProc FindWindow FindWindowEx GetAltTabInfo GetAncestor GetClientRect GetDesktopWindow GetForegroundWindow GetGUIThreadInfo GetLastActivePopup GetLayeredWindowAttributes GetNextWindow GetParent GetProcessDefaultLayout GetShellWindow GetSysColor GetTitleBarInfo GetTopWindow GetWindow GetWindowDisplayAffinity GetWindowInfo.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-window-l1-1-4 (introduced in Windows 10, version 10.0.14393).The display device conte... If the application draws its own minimized window, the system also sends the WM_ERASEBKGND message to the window procedure to draw the background for the minimized window. You can use the same technique used by WM_PAINT to determine whether the window is minimized that is, call the IsIconic function and check for the.IsWindowArranged function (winuser.h) Important Some information relates to a prerelease product which may be substantially modified before it's commercially released. W... Example Requirements Requirement Value Minimum supported client Windows 10, version 1903 Header winuser.h Library User32.lib DLL User32.dll See also IsIconic IsZoomed Windows."
268,StretchDIBits,"Microsoft Build · May 19 – 22, 2025The StretchDIBits function is a Windows API function that copies color data for a rectangle of pixels in a Device Independent Bitmap (DIB), JPEG, or PNG image to a specified destination rectangle. It allows for stretching or compressing the image based on the dimensions of the destination rectangle. If the destination rectangle is larger than the source rectangle, StretchDIBits stretches the image to fit. Conversely, if the destination rectangle is smaller, it compresses the image.This function is particularly useful for applications that need to display images at different sizes while maintaining visual quality. It is often used in graphics programming for rendering images in various contexts.References:StretchDIBits function (wingdi.h) The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the.Sizing a JPEG or PNG Image The StretchDIBits function copies the color data for a rectangle of pixels in a DIB to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the destination rectangle is smaller.Collectively, the DrawDib functions are similar to the StretchDIBits function in that they provide image-stretching and dithering capabilities. Still, StretchDIBits is more diverse than the DrawDib functions and should be used when the DrawDib functions cannot provide the desired functionality. If your application uses StretchDIBits with a.COLORADJUSTMENT structure (wingdi.h) The COLORADJUSTMENT structure defines the color adjustment values used by the StretchBlt and StretchDIBits functions when the stretch mode is HALFTONE. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.For more information, see the RC_BITBLT raster capability entry in the GetDeviceCaps function as well as... BitBlt returns an error if the source and destination device contexts represent different devices. To display the DIB to the second device, call SetDIBits or StretchDIBits. The BitBlt function performs a bit-block transfer of the color data.2.3.1.7 EMR_STRETCHDIBITS Record The EMR_STRETCHDIBITS record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination with a brush pattern, according to a specified raster operation, stretching or compressing the output to fit the dimensions of the destination, if necessary. Type (4 bytes):.JPEG and PNG Extensions for Specific Bitmap Functions and Structures On certain versions of Microsoft Windows, the StretchDIBits and SetDIBitsToDevice functions allow JPEG and PNG images to be passed as the source image to printer devices. This extension is not intended as a means to supply general JPEG and PNG decompression to applications, but.DrawDibProfileDisplay function (vfw.h) The DrawDibProfileDisplay function determines settings for the display system when using DrawDib ... PD_STRETCHDIB_1_1_OK StretchDIBits draws unstretched images using this format faster than an alternative method. PD_STRETCHDIB_1_2_OK StretchDIBits draws stretched images (in a 1:2 ratio) using this format....supported Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BitBlt Bitmap Functions Bitmaps Overview GetDIBits GetDeviceCaps PlgBlt SetDIBits StretchBlt StretchDIBitsThe MaskBlt.GetDeviceCaps function (wingdi.h) The GetDeviceCaps function retrieves device-specific information for the specified device. RC_STRETCHBLT Capable of performing the StretchBlt function. RC_STRETCHDIB Capable of performing the StretchDIBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps."
269,MapViewOfFile,"Microsoft Build · May 19 – 22, 2025The MapViewOfFile function is used to create a view of a file in the virtual memory of a process. It requires a file mapping object handle, which is obtained from the CreateFileMapping function. When called, MapViewOfFile returns a pointer to the file view, allowing an application to read from and write to the file by dereferencing this pointer.Writing to the file view results in changes to the file mapping object, but the actual writing to the disk is managed by the system, which caches much of the file I/O to enhance performance. If immediate disk transactions are required, the FlushViewOfFile function can be called to force the system to write changes to disk.Additionally, the MapViewOfFileEx function operates similarly to MapViewOfFile but allows the process to specify the base address of the view in its virtual address space.References:MapViewOfFile function (memoryapi.h) Maps a view of a file mapping into the address space of a calling process. To specify a suggested base address for the view, use the MapViewOfFileEx function. However, this practice is not recommended. Syntax Parameters [in] hFileMappingObject A handle to a file mapping object. The CreateFileMapping and.MapViewOfFile3 function (memoryapi.h) Maps a view of a file or a pagefile-backed section into the address space of the specified process. Syntax Parameters [in] FileMapping A HANDLE to a section that is to be mapped into the address space of the specified process. [in] Process A HANDLE to a process into which the section will be mapped. [in,.Creating a File View To map the data from a file to the virtual memory of a process, you must create a view of the file. The MapViewOfFile and MapViewOfFileEx functions use the file mapping object handle returned by CreateFileMapping to create a view of the file or a portion of the file in the process's virtual address space. The MapViewOfFile.MapViewOfFile3FromApp function (memoryapi.h) Maps a view of a file mapping into the address space of a calling Windows Store app. Using this function, you can: for new allocations, specify a range of virtual address space and a power-of-2 alignment restriction; specify an arbitrary number of extended parameters; specify a preferred NUMA node for.... of the specified p(MapViewOfFile3) MapViewOfFile3FromApp Maps a view of a file mapping into the address space of a calling Windows Store app. (MapViewOfFile3FromApp) MapViewOfFileEx Maps a view of a file mapping into the address space of a calling process. MapViewOfFileFromApp Maps a view of a file mapping into the address space of a calling.Reading and Writing From a File View To read from a file view, dereference the pointer returned by the MapViewOfFile function as shown in the examples below. The following example uses the pointer returned by MapViewOfFile to read from the file view: The following example uses the pointer returned by MapViewOfFile to write to the file view: The.MapViewOfFile2 function (memoryapi.h) Maps a view of a file or a pagefile-backed section into the address space of the specified process. Requirements Requirement Value Minimum supported client Windows 10, version 1703 [desktop apps only] Minimum supported server Windows Server 2016 [desktop apps only] Target Platform Windows Header memoryapi.h.The MapViewOfFile and MapViewOfFileEx functions map a view of a file into a process address space. With one important exception, file views derived from any file mapping object that is backed by the same file are coherent or identical at a specific time. Coherency is guaranteed for views with... Therefore, to fully close a file mapping object, an.Each process specifies its handle to the file-mapping object in the MapViewOfFile function to map a view of the file into its own address space. The views of all processes for a single file-mapping object are mapped into the same sharable pages of physical storage. However, the virtual addresses of the mapped views can vary from one process to.Creating a file mapping object does no... The MapViewOfFile and MapViewOfFileEx functions map a view of a file into a process address space. With one important exception, file views derived from any file mapping object that is backed by the same file are coherent or identical at a specific time. Therefore, to fully close a file mapping object, an."
270,GetGlyphOutlineA,"Microsoft Build · May 19 – 22, 2025GetGlyphOutlineA function (wingdi.h) The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] uChar The character for which data is to be returned. [in] ... Note The wingdi.h header defines.(ANSI) GetGlyphIndicesW The GetGlyphIndices function translates a string into an array of glyph indices. (Unicode) GetGlyphOutlineA The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. (ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the.(ANSI) GetGlyphIndic... (Unicode) GetGlyphOutlineA The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. (ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the."
271,SetDIBitsToDevice,"Microsoft Build · May 19 – 22, 2025SetDIBitsToDevice function (wingdi.h) The SetDIBitsToDevice function sets the pixels in the specified rectangle on the device that is associated with the destination device context using color data from a DIB, JPEG, or PNG image. ...pper-left corne destinationThe SetDIBitsToDevice function sets the pixels in the specified rectangle on the device.Testing a Printer for JPEG or PNG Support The SetDIBitsToDevice function uses color data from a DIB to set the pixels in the specified rectangle on the device that is associated with the destination device context. SetDIBitsToDevice is extended to allow a JPEG or PNG i... The SetDIBitsToDevice function uses color data from a DIB to set the pixels.EMRSETDIBITSTODEVICE structure (wingdi.h) The EMRSETDIBITSTODEVICE structure contains members for the SetDIBitsToDevice enhanced metafile record. Syntax Members emr The base structure for all record types. rclBounds Bounding rectangle, in device units. xDest Logical x-coordinate of the upper-left corner of the destination rectangle. yDest Logical.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.An application can use a DIB to set pixels on the display device by calling the SetDIBitsToDevice or the StretchDIBits function. To determine whether a device supports the SetDIBitsToDevice function, call the GetDeviceCaps function, specifying RC_DIBTODEV as the RASTERCAPS flag. For example, a spreadsheet application can open existing charts and.JPEG and PNG Extensions for Specific Bitmap Functions and Structures On certain versions of Microsoft Windows, the StretchDIBits and SetDIBitsToDevice functions allow JPEG and PNG images to be passed as the source image to printer devices. These compression values are only valid for SetDIBitsToDevice and StretchDIBits when the hdc parameter.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-block transfer. SetDIBColorTable Sets RGB values in a DIB. SetDIBits Sets the pixels in a bitmap using color data from a DIB. SetDIBitsToDevice Sets the.2.3.1.5 EMR_SETDIBITSTODEVICE Record The EMR_SETDIBITSTODEVICE record specifies a block transfer of pixels from specified scanlines of a source bitmap to a destination rectangle. Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETDIBITSTODEVICE. BitmapBuffer (variable): A buffer con... The EMR_SETDIBITSTODEVICE record.RGBQUAD structur... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also BITMAPINFO Bitmap Structures Bitmaps Overview CreateDIBSection CreateDIBitmap GetDIBits SetDIBits SetDIBitsToDevice.sRGB: A Standard Color Space As a result of Internet bandwidth considerations, Hewlett-Packard and Microsoft have proposed the adoption of a standard predefined color space known as sRGB (IEC 61966-2-1), so as to allow accurate color mapping with very little data overhead. A help-file version of a white paper discussing the technical details of."
272,GetConsoleTitleW,"Microsoft Build · May 19 – 22, 2025GetConsoleTitle function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h).For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoGetObjectContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoSwitchCallContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240.."
273,GetLastActivePopup,"Microsoft Build · May 19 – 22, 2025GetLastActivePopup function (winuser.h) Determines which pop-up window owned by the specified window was most recently active. Syntax Parameters [in] hWnd Type: HWND A handle to the owner window. Return value Type: HWND The return value identifies the most recently active pop-up window. The return value is the same as the hWnd parameter, if any of.CWnd::GetAncestor Retrieves the ancestor window object of the specified window. CWnd::GetIcon Retrieves the handle to an icon. CWnd::GetLastActivePopup Determines which pop-up window owned by CWnd was most recently active. CWnd::GetLayeredWindowAttributes Retrieves the opacity and transparency color key of a layered window. Similar to.CWindow::GetIcon Retrieves the window's large or small icon. CWindow::GetLastActivePopup Retrieves the most recently active pop-up window. CWindow::GetMenu Retrieves the window's menu. CWindow::GetNextDlgGroupItem Retrieves the previous. Other... Return Value An icon handle. Remarks GetIcon sends a WM_GETICON message to the window..GetGUIThreadInfo Retrieves information about the active window or a specified GUI thread. GetLastActivePopup Determines which pop-up window owned by the specified window was most recently active. GetLayeredWindowAttributes Retrieves the opacity and transparency color key of a layered window. GetNextWindow Retrieves a handle to the next or previous.... GetGUIThreadInfo Retrieves information about the active window or a specified GUI thread. GetInputState Determines whether there are mouse-button or keyboard messages in the calling thread's message queue. GetLastActivePopup Determines which pop-up window owned by the specified window was most recently active. GetLayeredWindowAttributes.AnyPopup function (winuser.h) Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include....BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx DeferWindowPos DeregisterShellHookWindow DestroyWindow EndDeferWindowPos EndTask EnumChildProc EnumChildWindows EnumThreadWindows EnumThreadWndProc.There are four types of animation:_roll... AnyPopup Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area. (BroadcastSystemMessageW) CalculatePopupWindowPosition Calculates an appropriate pop-up window position using."
274,GetBitmapDimensionEx,"Microsoft Build · May 19 – 22, 2025GetBitmapDimensionEx function (wingdi.h) The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been set by the SetBitmapDimensionEx function. Syntax Parameters [in] hbit A handle to a compatible bitmap (DDB). [out] lpsize A pointer to a SIZE structure to receive the bitmap dimensions..GetAspectRatioFilterEx The GetAspectRatioFilterEx function retrieves the setting for the curren... GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions.GetAspectRatioFilterEx The GetAspectRatioFilterEx function retrieves the setting for the curren... GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit... CreateDIBSection Creates a DIB that applications can write to directly. ExtFloodFill Fills an area of the display surface with the current brush..SetBitmapDimensionEx function (wingdi.h) The SetBitmapDimensionEx function assigns preferred dimensions to a bitmap. Remarks An application can retrieve the dimensions assigned to a bitmap with the SetBitmapDimensionEx function by calling the GetBitmapDimensionEx function. Requirements Requirement Value Minimum supported client Windows 2000."
275,SetClipboardData,"Microsoft Build · May 19 – 22, 2025SetClipboardData function (winuser.h) Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the OpenClipboard function. (When responding to the WM_RENDERFORMAT message, the clipboard owner must not call OpenClipboard before calling SetClipboardData.)..OleSetClipboard function (ole2.h) Places a pointer to a specific data object onto the clipboard. This makes the data object accessible to the OleGetClipboard function. Syntax Parameters [in] pDataObj Pointer to the IDataObject interface on the data object from which the data to be placed on the clipboard can be obtained. This parameter can be.The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. Parameters wParam The clipboard format to be rendered. lParam This parameter is not used. Remarks When responding to a WM_RENDERFORMAT message, the clipboard owner must not open the clipboard before calling.EdpGetDataInfoFromWin32Clipboard function Note Starting in July 2022, Microsoft is deprecating Windows Information Protection (WIP) and the APIs that support WIP. For your data protection needs, Microsoft recommends that you use Microsoft Purview Information Protection and Microsoft Purview Data Loss Prevention. In the presence of WIP policy,.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. SetClipboardData Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the.Clipboard Operations A window should use the clipboard when cutting, copying, or pasting data. After emptying the clipboard, the window places data on the clipboard in as many clipboard formats as possible, ordered from the most descriptive clipboard f... For each format, the window calls the SetClipboardData function, specifying the format.For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. Remarks When responding to a WM_RENDERALLFORMATS message, the application must call the OpenClipboard function.Step 1 : SetClipboardData(CF_UNICODETEXT, hMem) ; Step 2 : OnClipboardUpdate Step 3: GetClipboardData() -&gt; GlobalLock Fail :GetLastError(6) When calling SetClipboardData, it only fails when a handle is specified in the OpenClipboard() argument. SetClipbo... Step 1 : SetClipboardData(CF_UNICODETEXT, hMem) ; Step 2 : OnClipboardUpdate Step 3:.Using the Clipboard This section has code samples for the following tasks: Implementing the Cut, Copy, and Paste Commands Selecting Data Creating an Edit Menu Processing the WM_INITMENUPOPUP Message Processing the WM_COMMAND Message Copying Information to th... Calls the SetClipboardData function once for each clipboard format the application.OleGetClipboardWithEnterpriseInfo function (ole2.h) Enables Windows Information Protection enlightened applications to retrieve an IDataObject from the OLE Clipboard accompanied by Windows Information Protection information about the data and the source application.This info... Syntax Parameters [out] dataObject Address of IDataObject pointer."
276,SetPaletteEntries,"Microsoft Build · May 19 – 22, 2025SetPaletteEntries function (wingdi.h) The SetPaletteEntries function sets RGB (red, green, blue) color values and flags in a range of entries in a logical palette. Syntax Parameters [in] hpal A handle to the logical palette. [in] iStart The first logical-palette entry to be set. [in] cEntries The number of logical-palette entries to be set. [in].IDirect3DDevice9::SetPaletteEntries method (d3d9helper.h) Sets palette entries. Syntax Parameters [in] PaletteNumber Type: UINT An ordinal value identifying the particular palette upon which the operation is to be performed. [in] pEntries Type: const PALETTEENTRY* Pointer to a PALETTEENTRY structure, representing the palette entries to set. The.IDirect3DDevice9::SetPaletteEntries method (d3d9.h) Sets palette entries. Syntax Parameters [in] PaletteNumber Type: UINT An ordinal value identifying the particular palette upon which the operation is to be performed. [in] pEntries Type: const PALETTEENTRY* Pointer to a PALETTEENTRY structure, representing the palette entries to set. Requirements.CPalette::ResizePalette Changes the size of the logical palette specified by the CPalette object to the specified numbe... CPalette::SetPaletteEntries Sets RGB color values and flags in a range of entries in a logical palette. Public Operators Name Description CPalette::operator HPALETTE Returns the HPALETTE attached to the CPalette..EMRSETPALETTEENTRIES structure (wingdi.h) The EMRSETPALETTEENTRIES structure contains members for the SetPaletteEntries enhanced metafile record. Syntax Members emr The base structure for all record types. ihPal Palette handle index. iStart Index of first entry to set. cEntries Number of entries. aPalEntries[1] Array of PALETTEENTRY structures....Color Functions The following functions are used with color. SetColorAdjustment Sets the color adjustment values for a DC using the specified values. SetPaletteEntries Sets RGB (red, green, blue) color values and flags in a range of entries in a logical palette. SetSystemPaletteUse Allows an application to specify whether the system palette.2.3.8.8 EMR_SETPALETTEENTRIES Record The EMR_SETPALETTEENTRIES record defines RGB color values in a range of entries for an existing logical palette. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size ihPal Start NumberofEntries aPalEntries (variable). Type (4 bytes): An unsigned integer that identifies this record type....ELLIPSE = 0x0000002A, EMR_RECTANGLE = 0x0000002B, EMR_ROUNDRECT = 0x0000002C, EMR_ARC = 0x0000002D, EMR_CHORD = 0x0000002E, EMR_PIE = 0x000 EMR_SELECTPALETTE = 0x00000030, EMR_CREATEPALETTE = 0x00000031, EMR_SETPALETTEENTRIES = 0x00000032, EMR_RESIZEPALETTE = 0x00000033, EMR_REALIZEPALETTE = 0x00000034, EMR_EXTFLOODFILL = 0x00000035, EMR_LINETO.Texture Palettes (Direct3D 9) Direct3D 9 supports paletted textures through a set of 256 entry palettes associated with the IDirect3DDevice9 object. A palette is made current by calling the IDirect3DDevice9::SetCurrentTexturePalette method. The current palette is used for translating all paletted textures for all active texture stages..Logical Palette A logical palette is a color palette that an application creates and associates with a given device context. Logical palettes let applications define and use colors that meet their specific needs. Once a logical palette is created, an application can change colors in the palette by using the SetPaletteEntries function. If the."
277,OleRun,"Microsoft Build · May 19 – 22, 2025OleRun function (ole2.h) Puts an OLE compound document object into the running state. Syntax Parameters [in] pUnknown Pointer to the IUnknown interface on the object, with which it will query for a pointer to the IRunnableObject interface, and then call its Run method. Remarks The OleRun function puts an object in the running state. Requirements.In this case, the client should call IOleLink::BindToSource. OleRun is a helper function that conveniently repackages the functionality offered by IRunnableObject::Run. With the release of OLE 2.01, the implementation of OleRun was changed so that it calls QueryInterface, asks for IRunnableObject, and then calls IRunnableObject::Run. In other....CreateLinkFromData OleCreateLinkFromDataEx OleCreateLinkToFile OleCreateLinkToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFromData OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentCli OleIsRunning OleLoad OleLoadFromStream OleLoadPicture OleLoadPictureEx.ole2.h header This header is used by multiple technologies. OleIsRunning Determines whether a compound document object is currently in the running state. OleLoad Loads into memory an object... OleLoadFromStream The OleLoadFromStream function (ole2.h) loads an object from the stream. OleLockRunning Locks an already running object into its running.OLEMISC enumeration (oleidl.h) Describes miscellaneous characteristics of an object or class of objects. OLEMISC_INVISIBLEATRUNTIMEValue: 0x400This value is used with controls. It indicates that the control has no run-time user interface, but that it should be visible at design time. For e... OLEMISC_ALWAYSRUNValue: 0x800This value is used with.IOleLink::BindToSource method (oleidl.h) Activates the connection to the link source by binding the moniker stored within the linked object. Your container can also call the OleRun function, which calls IOleLink::BindToSource when called on a linked object. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desk....IOleItemContainer::GetObject method (oleidl.h) Retrieves a pointer to the specified object. If the object is loaded, your implementation should determine whether the object is running (for example, by calling the OleIsRunning function). If the object is not running and dwSpeedNeeded is BINDSPEED_INDEFINITE, your implementation should call the.OleCreate function (ole.h) Creates an embedded object identified by a CLSID. You use it typically to implement the menu item that allows the end user to insert a new object. When OleCreate returns, the object it has created is blank (contains no data), unless renderopt is OLERENDER_DRAW or OLERENDER_FORMAT, and is loaded. Containers typically then.OleCreate function (ole2.h) Creates an embedded object identified by a CLSID. You use it typically to implement the menu item that allows the end user to insert a new object. When OleCreate returns, the object it has created is blank (contains no data), unless renderopt is OLERENDER_DRAW or OLERENDER_FORMAT, and is loaded. Containers typically.OLEMISC Enum Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Constants that describe characteristics of objects. For example, a timer control that fires a specific event periodically would not."
278,PropVariantCopy,"Microsoft Build · May 19 – 22, 2025PropVariantCopy function (combaseapi.h) The PropVariantCopy function copies the contents of one PROPVARIANT structure to another. Syntax Parameters [in, out] pvarDest Pointer to an uninitialized PROPVARIANT structure that receives the copy. [in] pvarSrc Pointer to the PROPVARIANT structure to be copied. Remarks Copies a PROPVARIANT structure by.PropVariantCopy function (propidl.h) Creates a copy of a PROPVARIANT structure. Syntax Parameters [out] pvarDest Type: PROPVARIANT* Pointer to the destination PROPVARIANT structure that receives the copy. [in] pvarSrc Type: const PROPVARIANT* Pointer to the source PROPVARIANT structure. Return value Type: HRESULT If this function succeeds, it.Structured Storage Overview of the Structured Storage technology. To develop Structured Storage, you need these headers: coml2a... PropVariantClear Frees all elements that can be freed in a given PROPVARIANT structure. PropVariantCopy The PropVariantCopy function copies the contents of one PROPVARIANT structure to another. PropVariantInit The.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runt... PropVariantClear Frees all elements that can be freed in a given PROPVARIANT structure. PropVariantCopy The PropVariantCopy.propidl.h header This header is used by multiple technologies. For more information, see: Structured Storage The Windows Shell Windows Property System propidl.h contains the following programming interfaces: Inter... PropVariantClear Clears a PROPVARIANT structure. PropVariantCopy Creates a copy of a PROPVARIANT structure. PropVariantInit The.Structured Storage functions are described in the following sections: CreateILockBytesOnHGlobal CreateStreamOnHGlobal FmtIdToPropStgName FreePropVariantArray GetConvertStg GetHGlobalFromILockBytes GetHGlobalFromStream OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx.PropVariantCompare Compares two PROPVARIANT structures, based on default comparison units and settings. PropVariantCompareEx Extends PropVariantCompare by allowing the caller to compare two PROPVARIANT structures based on specified comparison units and flags. PropVariantCopy Creates a copy of a PROPVARIANT structure. PropVariantGetBooleanElem.PROPVARIANT and VARIANT Functions This section describes a set of Windows Shell conversion and helper functions used with PROPVARIANT and VARIANT types. PropVariantCompareEx Extends PropVariantCompare by allowing the caller to compare two PROPVARIANT structures based on specified comparison units and flags. PropVariantCopy Creates a copy of a.IIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. PropVariantClear Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. PropVariantCopy Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240..In addition, there are four helper functions, designed to aid in dealing with properties that have been read from a property set into memory (into a PROPVARIANT structure): PropVariantInit PropVariantClear FreePropVariantArray PropVariantCopy The following sections discuss property set implementations in COM in greater detail: Managing Property."
279,OffsetRect,"Microsoft Build · May 19 – 22, 2025OffsetRect function (winuser.h) The OffsetRect function moves the specified rectangle by the specified offsets. Syntax Parameters [in, out] lprc Pointer to a RECT structure that contains the logical coordinates of the rectangle to be moved. [in] dx Specifies the amount to move the rectangle left or right. This parameter must be a negative value to.Rectangle Functions The following functions are used with rectangles. Function Description CopyRect Copies the coordinates of one rectangle to another. IsRectEmpty Determines whether the specified rectangle is empty. OffsetRect Moves the specified rectangle by the specified offsets. PtInRect Determines whether the specified point lies within the.The Infla... It can add or remove width from both ends of the rectangle; it can add or remove height from both the top and bottom of the rectangle. The OffsetRect function moves a rectangle by a given amount. It moves the rectangle by adding the given x-amount, y-amount, or x- and y-amounts to the corner coordinates. The PtInRect function.AdornerPanel.OffsetRect Property Definition Namespace: Microsoft.VisualStudio.DesignTools.Extensibility.Interaction Assembly:Microsoft.VisualStudio.DesignTools.Interaction.dll Package:Microsoft.VisualStudio.DesignTools.Extensibility v17.10.34916.79 Property Value Rect Applies to. Learn more about the.CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::CopyRect Copies the ... CRect::IsRectNull Determines whether the top, bottom, left, and right member variables are all equal to 0. CRect::OffsetRect Moves CRect by the specified offsets..InflateRect function (winuser.h) The InflateRect function increases or decreases the width and height of the specified rectangle. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include.If you’re using MFC (Microsoft Foundation Classes), you can add the following code to your message map: ON_WM_NCPAINT() // ... void CMainFrame::OnNcPaint() { // Trigger the default handler first to ensure the menu bar is drawn Default(); // Get menu bar bounds MENUBARINFO menuInfo = { sizeof(MENUBARINFO) }; if (GetMenuBarInfo(OBJID_MENU, 0,.....VisualStudio.DesignTools.Extensibility.Interaction Assembly:Microsoft.VisualStudio.DesignTools.Interaction.dll Package:Microsoft.VisualStudio.DesignTools.Extensibility v17.10.34916.79 Inheritance Panel AdornerPanel Constructors AdornerPanel() Fields AdornerHorizontalAlignmentProperty AdornerMarginProperty AdornerVerticalAlignmentProperty.UnionRect function (winuser.h) The UnionRect function creates the union of two rectangles. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect OffsetRect RECT Rectangle Functions Rectangles Overview UnionRect.."
280,OleSaveToStream,"Microsoft Build · May 19 – 22, 2025OleSaveToStream function (ole2.h) Saves an object with the IPersistStream interface on it to the specified stream. Syntax Parameters [in] pPStm Pointer to the IPersistStream interface on the object to be saved to the stream. The OleSaveToStream function does the following: Calls the IPersist::GetClassID method to get the object's CLSID. The.OleSaveToStream function (ole.h) Saves an object with the IPersistStream interface on it to the specified stream. Syntax Parameters unnamedParam1 Pointer to the IPersistStream interface on the object to be saved to the stream. The OleSaveToStream function does the following: Calls the IPersist::GetClassID method to get the object's CLSID. ... The.OleRegGetUserTyp... OleRun Puts an OLE compound document object into the running state. OleSave Saves an object opened in transacted mode into the specified storage object. OleSaveToStream The OleSaveToStream function (ole2.h) saves an object with the IPersistStream interface on it to the specified stream. OleSetAutoConvert Specifies a CLSID for.ole.h header This header is used by Component Object Model (COM). For more information, see: Component Object Model (COM) ole.h contains the following programming interfaces: Functions OleCreate The OleCreate function (ole.h) creates an embedded object id... OleLoadFromStream The OleLoadFromStream function (ole.h) loads an object from the stream..IPersistStream::Save method (objidl.h) Saves an object to the specified stream. Syntax Parameters [in] pStm An IStream pointer to the stream into which the object should... The position of the seek pointer is undefined if an error returns. Notes to Callers Rather than calling IPersistStream::Save directly, you typically call the OleSaveToStream.OleConvertIStorageToOLESTREAM function (ole2.h) The OleConvertIStorageToOLESTREAM function converts the specified storage object from OLE 2 structured storage to the OLE 1 storage object model but does not include the presentation data. This is one of several compa... On entry, the stream to which lpolestm points should be created and positioned.OleLoadFromStream function (ole2.h) Loads an object from the stream. The CLSID of the object must immediately precede the object's data in the stream, which is accomplished by the companion function OleSaveToStream (or the operations it wraps, which are described under that topic). Requirements Requirement Value Minimum supported client....ta OleCreateLinkFromDataEx OleCreateLinkToFile OleCreateLinkToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFromData OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentClipboard OleIsRunning OleLoad OleLoadFromStream OleLoadPicture OleLoadPictureEx.OleLoadFromStream function (ole.h) Loads an object from the stream. The CLSID of the object must immediately precede the object's data in the stream, which is accomplished by the companion function OleSaveToStream (or the operations it wraps, which are described under that topic). Requirements Requirement Value Minimum supported client.The OleLoadF... This storage pattern is used by the generic, composite-moniker implementation provided by OLE. If the objects are not stored using this pattern, you must call the methods separately yourself. URL Moniker Notes Initializes an URL moniker from data within a stream, usually stored there previously using its IPersistStream::Save (using."
281,GlobalSize,"Microsoft Build · May 19 – 22, 2025GlobalSize function (winbase.h) Retrieves the current size of the specified global memory object, in bytes. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps].Conversation.GlobalSize Property Definition Namespace: Microsoft.Exchange.WebServices.Data Assembly:Microsoft.Exchange.WebServices.dll Gets the size of the conversation calculated from the size of all conversation items in the mailbox. Property Value Int32 The size of the conversation in KBs. Remarks Use the Size property to get the size of the.ConversationType.GlobalSize Property Definition Namespace: ExchangeWebServices Assembly:EWS.dll Property Value Int32 Applies to. Learn more about the ExchangeWebServices.ConversationType.GlobalSize in the ExchangeWebServices namespace.. /dotnet/api/exchangewebservices.conversationtype.globalsize.ConversationSchema.GlobalSize Field Definition Namespace: Microsoft.Exchange.WebServices.Data Assembly:Microsoft.Exchange.WebServices.dll Defines the GlobalSize property. This property is read-only. Field Value PropertyDefinition Applies to. Defines the GlobalSize property. This property is read-only. ..GlobalSize The GlobalSize element contains the size of the conversation calculated from the size of all conversation items in the mailbox. FindConversationResponse Conversations Conversation (ConversationType) GlobalSize xs:int Attributes and elements The following sections describe attributes, child elements, and parent elements. Text value The.To determine the actual number of bytes allocated, use the GlobalSize or LocalSize function. If the amount allocated is greater than the amount requested, the process can use the entire amount. The GlobalReAlloc and LocalReAlloc functions change the size or the attributes of a memory object allocated by GlobalAlloc and LocalAlloc. The global and.Not applicable. GlobalReAlloc, LocalReAlloc Changes the size or attributes of a specified global memory object. HeapReAlloc GlobalSize, LocalSize Retrieves the current size of the specified global memory object. HeapSize GlobalUnlock, LocalUnlock Decrements the lock count associated with a memory object. This function should be u... Instead, use.ConversationSchema Class Definition Namespace: Microsoft.Exchange.WebServices.Data Assembly:Microsoft.Exchange.WebServices.dll Defines the schema for conversation properties. Inheritance Object ServiceObjectSchema ConversationSchema Remarks Caution:Contains a list of properties that are available on Conversation objects. GlobalMessageC... This.LoadResource function (libloaderapi.h) Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. To obtain a pointer to the first byte of the resource data, call the LockResource function; to obtain the size of the resource, call SizeofResource. GlobalSize returns 0 for a resource HGLOBAL. As a.You could use interop to marshal the String through COPY... I couldn't find any common language runtime function to get the length of a global memory block, so I used interop to call ::GlobalSize directly: Windows needs to know the size (in bytes) of the WM_COPYDATA memory block in order to copy it across the process boundary. It's not generally."
282,SetICMMode,"Microsoft Build · May 19 – 22, 2025SetICMMode function (wingdi.h) The SetICMMode function causes Image Color Management to be enabled, disabled, or queried on a given device context (DC). Syntax Parameters hdc Identifies handle to the device context. mode Turns on and off image color management. This parameter can take one of the following constant values. Value Meaning ICM_ON.Enable color management Important The modern print platform is Windows' preferred means of communicating with printers. We recommend that you use Microsoft's IPP inbox class driver, along with Print Support Apps (PSA), to customize the print experience in Windows 10 and 11 for printer device development. For more information, see the Print support.3.2.6.2 EMR_SETICMMODE Example 1 This section provides an example of the EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 00064BA0:                        62 00 00 00 0C 00 00 00 00064BB0:02 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000002) Type (4 bytes):.3.2.6.8 EMR_SETICMMODE Example 2 This section provides an example of the EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 00064BF0:                        62 00 00 00 0C 00 00 00 00064C00:02 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000002) Type (4 bytes):.3.2.4 EMR_SETICMMODE Example 1 This section provides an example of the EMF EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 000000A0: 62 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000001) Type (4 bytes): 0x00000062 identifies the record.Basic Functions for Use Within a Device Context The following WCS functions deliver basic color mapping capabilities within device contexts. SetICMMode Turns color management on or off in a device context. SetICMProfile Sets the output color profile for a given device context. The following WCS functions deliv... They are useful to all.EMRSELECTCLIPPATH structure (wingdi.h) Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records. Syntax Members emr The base structure for all reco... Contains parameters for the SelectClipPath, SetBkMode, SetMapMode,.3.2.6 EMR_SETICMMODE Example 2 This section provides an example of the EMF EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 000000B0:             62 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000001) Type (4 bytes): 0x00000062 identifies.3.2.2.8 EMR_SETICMMODE Example 2 This section provides an example of the EMF EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 00000130:62 00 00 00 0C 00 00 00 02 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000002) Type (4 bytes): 0x00000062 identifies this record.3.2.6.31 EMR_SETICMMODE Example 3 This section provides an example of the EMF EMR_SETICMMODE record ([MS-EMF] section 2.3.11.14). 00065260:                        62 00 00 00 0C 00 00 00 00065270:01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000062) Size (0x0000000C) ICMMode (0x00000001) Type (4 bytes):."
283,GetIconInfo,"Microsoft Build · May 19 – 22, 2025GetIconInfo function (winuser.h) Retrieves information about the specified icon or cursor. Syntax Parameters [in] hIcon Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify the identifier beginning with the IDI_ prefix or the identifier beginning with the IDC_ prefix in this parameter. [out].An application replaces a default image by using the SetSystemCursor function. An application can use the GetIconInfo function to retrieve the current image for a cursor and can draw the cursor by using the DrawIconEx function. Custom cursors are designed for use in a specific application and can be any design the developer defines. The.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. The term icon can refer to either of the followin... GetIconInfoEx Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX.About Icons The system uses icons throughout the user interface to represent objects such as files, folders, shortcuts, applications, and documents. ...enable applications to load, display, arrange, animate, and destroy iconsAlso, starting with Windows Vista, an additional set of standard system shell icons is available through the.GetIconInfoExW function (winuser.h) Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure. Note The winuser.h header defines GetIconInfoEx as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also Conceptual CreateIconFromResourceEx CreateIconIndirect FindResource.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..(Unicode) GetFileVersionInfoW Retrieves version information for the specified file. (GetFileVersionInfoW) GetIconInfo Retrieves information about the specified icon or cursor. GetIconInfoExA Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure. (ANSI) GetIconInfoExW....unction (winuser.h) Searches throug (RT_GROUP_ICON)Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also Conceptual.CreateIconFromResource function (winuser.h) Creates an icon or cursor from resource bits describing the icon. Remarks The CreateIconFromResource, CreateIconFromResourceEx, CreateIconIndirect, GetIconInfo, LookupIconIdFromDirectory, and LookupIconIdFromDirectoryEx functions allow shell applications and icon browsers to examine and use resources."
284,htonl,"Microsoft Build · May 19 – 22, 2025htonl function (winsock2.h) The htonl function converts a u_long from host to TCP/IP network byte order (which is big-endian). Remarks The htonl function takes a 32-bit number in host byte order and returns a 32-bit number in the network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family). The htonl function can be used to.htonl function (winsock.h) The htonl function converts a u_long from host to TCP/IP network byte order (which is big-endian). Remarks The htonl function takes a 32-bit number in host byte order and returns a 32-bit number in the network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family). The htonl function can be used to....2.h) converts a u_long from host to TCP/IP network byte order, which is big-endian. htonl The htonl function (winsock.h) converts a u_long from host to TCP/IP network byte order (which is big-endian). htonll Converts an unsigned __int64 from host to TCP/IP network byte (which is big-endian). htons The htons function (winsock2.h) converts a....ated with a socket of any type, in any state, and stores the result in optval. htond Converts a double from host to TCP/IP network byte order (which is big-endian). htonf Converts a float from host to TCP/IP network byte order (which is big-en htonl The htonl function (winsock2.h) converts a u_long from host to TCP/IP network byte order, which....sock.h) retrieves protocol information corresponding to a protocol number. getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and protocol. getservbyport The getservbyport function (winsock.h) retrieves service information corresponding to a port and protocol. getsockname The.htonll function (winsock2.h) The htonll inline function converts an unsigned __int64 from host to TCP/IP network byte order (which is big-endian). The htonll inline function can be used to convert an IPv4 address in host byte order to the IPv4 address in network byte order. Windows Phone 8: This function is supported for Windows Phone Store apps.htons function (winsock2.h) The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian). Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h.htons function (winsock.h) The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian). Windows 8.1 and Windows Server 2012 R2: This function is supported for Windows Store apps on Windows 8.1, Windows Server 2012 R2, and later. ...pported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.Extended Byte-Order Conversion Routines Windows Sockets 2 does not assume that the network byte order for all protocols is the same. The NetworkByteOrder member of the WSAPROTOCO... Related topics htonl htons ntohl ntohs Porting Socket Applications to Winsock Winsock Programming Considerations WSAHtonl WSAHtons WSANtohl WSANtohs WSAPROTOCOL_INFO..ntohd function (winsock2.h) The ntohd inline function converts an unsigned __int64 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a double. Requirements Requirement Value Minimum supported client Windows 8.1, Windows 8 [desktop apps | UWP apps] Minimum supported server Windows Server 2012."
285,StgOpenStorage,"Microsoft Build · May 19 – 22, 2025StgOpenStorage function (coml2api.h) The StgOpenStorage function opens an existing root storage object in the file system. Use this function to open compound files. Nested storage objects can only be opened using their parent IStorage::OpenStorage method. Note  Applications should use the new function, StgOpenStorageEx, instead of StgOpenStorage,.coml2api.h header This header is used by Structured Storage. StgOpenStorage Opens an existing root storage object in the file system. StgOpenStorageEx Opens an existing root storage object in the file system. StgOpenStorageOnILockBytes The StgOpenStorageOnILockBytes function opens an existing storage object that does not reside i... Structures.StgOpenPropStg Opens a specified property set in a specified storage or stream object. StgOpenStorage Opens an existing root storage object in the file system. StgOpenStorageEx Opens an existing root storage object in the file system. StgOpenStorageOnILockBytes The StgOpenStorageOnILockBytes function opens an existing storage object that does not.The STGM constants are included in the IStorage, IStream, and IPropertySetStorage interfaces and in the StgCreateDocfile, StgCreateStorageEx, StgCreateDocfileOnILockBytes, StgO... It is not valid when opening a root object, such as with StgOpenStorageEx, or when creating or opening a subelement, such as with IStorage::CreateStream. (A root storage.GetHGlobalFromILockBytes function... The contents of the returned memory handle can be written to a clean disk file, and then opened as a storage object using the StgOpenStorage function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop.StgIsStorageFile Introdu... StgIsStorageILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgOpenPropStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgOpenStorage Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgOpenStorageEx Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240..Opening a message Applies to: Outlook 2013 | Outlook 2016 To open a message Retrieve the message's entry identifier from one of the following sources: The row that represents the message in the contents table of its pare... To open a message that has been saved on disk Call StgOpenStorage to retrieve an IStorage interface pointer, passing the name.Structured Storage Interfaces Structured Storage services are organized into three categories ... Pointers to the compound file implementation of these interfaces are acquired by calling the StgCreateStorageEx function to create a new compound file object, or StgOpenStorageEx to open a previously created compound file. An alternative method for.This differs from the IPersistStorage::Load and IPersistStream::Load, in which the caller opens the storage or stream and then passes an open storage or stream pointer to the ... For an application that normally uses OLE compound files, your IPersistFile::Load implementation can simply call the StgOpenStorage function to open the storage object in.IStorage-Compound File Implementation The compound file implementation of IStorage allows you to create and manage substorages and streams within a storage object residing in a compound file object. To open an existing compound file object and get its root IStorage pointer, call StgOp... The compound file implementation of IStorage allows you to."
286,EnumResourceLanguagesW,"Microsoft Build · May 19 – 22, 2025EnumResourceLanguagesW function (winbase.h) Enumerates language-specific resources, of the specified type and name, associated with a binary module. Syntax Parameters [in] hModule Type: HMODULE The handle to a module to be searched. Starting with Windows Vista, the binary module is typically a language-neutral Portable Executable (LN file), and.Enumerating resources In certain situations, you might want to discover the resource contents of an unknown portable executable (PE) module. The Windows SDK provides resource enumeration functions that enable your application to obtain lists of resource types... The EnumResourceLanguagesW and EnumResourceLanguagesExW functions provide the language.ENUMRESLANGPROCW callback function (libloaderapi.h) An application-defined callback function used with the EnumResourceLanguagesW and the EnumResourceLanguagesExW functions. The EnumResourceLanguagesW or EnumResourceLanguagesExW function provides this value. An application must register this function by passing its address to the.(Unicode) EndUpdateResourceA Commits or discards changes made prior t... (ANSI) EndUpdateResourceW Commits or discards changes made prior to a call to UpdateResource. EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumResourceLanguagesW Enumerates.(Unicode) ENUMRESLANGPROCA An application-defined callback function used with the EnumResourceLanguages and EnumResourceLanguagesEx functions. (ANSI) ENUMRESLANGPROCW An application-defined callback function used with th... (ANSI) EnumResourceLanguagesExW Enumerates language-specific resources, of the specified type and name, associated with a."
287,GetColorSpace,"Microsoft Build · May 19 – 22, 2025GetColorSpace function (wingdi.h) The GetColorSpace function retrieves the handle to the input color space from a specified device context. Syntax Parameters hdc Specifies a device context that is to have its input color space handle retrieved. Return value If the function succeeds, the return value is the current input color space handle. Remarks.ID2D1ColorContext::GetColorSpace method (d2d1_1.h) Gets the color space of the color context. Syntax Return value Type: D2D1_COLOR_SPACE This method returns the color space of the contained ICC profile. Requirements Requirement Value Target Platform Windows Header d2d1_1.h DLL D2d1.dll See also ID2D1ColorContext. Gets the color space of the color.Basic Functions for Use Within a Device Context The following WCS functions deliver basic color mapping capabilities within device contexts. The name of this function i... GetColorSpace Gets the current input color space in a device context. GetICMProfile Gets the current output color profile of a device context. They are useful to all.YuvImage.ColorSpace Property Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Property Value ColorSpace the color space of the image. Attributes RegisterAttribute Remarks Java documentation for android.graphics.YuvImage.getColorSpace().Portions of this page are modifications based on work created and shared by the Android Open.GetColorProfileFromHandle Given a handle to an open color profile, the GetColorProfileFrom... GetColorProfileHeader Retrieves or derives ICC header structure from either ICC color profile or WCS XML profile. GetColorSpace The GetColorSpace function retrieves the handle to the input color space from a specified device context..ColorObject.ColorSpace Property Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Returns this color's ... Property Value ColorSpace A non-null instance of ColorSpace Attributes RegisterAttribute Remarks Returns this color's color space.Java documentation for android.graphics.Color.getColorSpace().Portions of this page are.GetEnhMetaFilePaletteEntries The GetEnhMetaFilePaletteEntries function retrieves. GetLogColorSpaceA The GetLogColorSpace function retrieves the color space definition identified by a specified handle. (ANSI) GetLogColorSpaceW The GetLogColorSpace function retrieves the color space definition identified by a specified handle. GetNearestColor The.IDXGIDecodeSwapChain::GetColorSpace method (dxgi1_3.h) Gets the color space used by the swap chain. Syntax Return value A combination of DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space for the swap chain. Requirements Requirement Value Minimum.....Camera2.Params Assembly:Mono.Android.dll Retu current color spaceProperty Value ColorSpace the currently set color space, or null if not set Attributes RegisterAttribute Remarks Return the current color space.Java documentation for android.hardware.camera2.params.ExtensionSessionConfiguration.getColorSpace().Portions of this page are.AccessibilityService.ScreenshotResult.ColorSpace Property Definition Namespace: Android.AccessibilityServices Assembly:Mono.Android.dll Gets the ColorSpace identifying a specific organization of colors of the screenshot. Property Value ColorSpace the color space Attributes RegisterAttribute Remarks Gets the ColorSpace identifying a specific."
288,CharNextExA,"Microsoft Build · May 19 – 22, 2025CharNextExA function (winuser.h) Retrieves the pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. Syntax Parameters [in] CodePage Type: WORD The identifier of the code page to use to check lead-byte ranges. Remarks CharNextExA specifies a code-page to use, whereas.CharNextA function (winuser.h) Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. Syntax Parameters [in] lpsz Type: LPCTSTR A character in a null-terminated string. Return value Type: LPTSTR The return value is a pointer ... Remarks When called as an ANSI.String Functions In This Section CharLower CharLowerBuff CharNext CharNextExA CharPrev CharPrevExA CharToOem CharToOemBuff CharUpper CharUpperBuff IsCharAlpha IsCharAlphaNumeric IsCharLower IsCharUpper LoadString lstrcat lstrcmp lstrcmpi lstrcpy lstrcpyn lstrlen OemToChar OemToCharBuff wsprintf wvsprintf. String Functions..To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) CharNextA Retrieves a pointer.CharNextW function (winuser.h) Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. If lpsz points to the terminating null character, the return value is equal to lpsz. Remarks When called as an ANSI function, CharNext uses the system default code-page,.Strings This section describes the string functions and explains how to use them in your applications. In This Section Name Description About Strings Discusses the string functions. The function c... CharNext Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte.If the operand is a chara... (Unicode) CharNextA Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. (ANSI) CharNextExA Retrieves the pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte.CharPrevW function (winuser.h) Retrieves a pointer to the preceding character in a string. For more information... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).CharPrevA function (winuser.h) Retrieves a pointer to the preceding character in a string. For more information... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).CharPrevExA function (winuser.h) Retrieves the pointer to the preceding character in a string. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL."
289,EndPage,"Microsoft Build · May 19 – 22, 2025EndPage function (wingdi.h) The EndPage function notifies the device that the application has finished writing to a page. This function is typically used to direct the device driver to advance to a new page. Syntax Parameters [in] hdc A handle to the device context for the print job. Return value If the function succeeds, the return value is.CGContext.EndPage Method Definition Namespace: CoreGraphics Assembly:Xamarin.iOS.dll Assembly:Xamarin.Mac.dll Called to indicate the end of a page in a page-based context. Applies to. Called to indicate the end of a page in a page-based context. . /dotnet/api/coregraphics.cgcontext.endpage.DeviceCapabilities The DeviceCapabilities function retrieves the capabilities of a printer driver. EndDoc The EndDoc function ends a print job. EndPage The EndPage function notifies the device that the application has finished writing to a page. This function is typically used to direct the device driver to advance to a new page. Escape enables an.AdditionalInfo.EndPage Property Definition Namespace: Microsoft.ReportingServices.Diagnostics.Internal Assemblies:Microsoft.ReportingServices.Diagnostics.dll, Microsoft.ReportingServices.SharePoint.UI.WebParts.dll Gets or sets the end page. Property Value String The end page. Applies to. Gets or sets the end page. ..VisWebPageSettings.EndPage property Specifies the page number of the last page in the range when you save a range of pages as a webpage. The EndPage property value corresponds to the value in the to box on the General tab of the Save As Web Page dialog box (BackstageButton tab > Save As > Save as type list > Web Page (*.htm;*.html) > Publish)..Pdf.Tables Syntax Pdf.Tables(pdf as binary, optional options as nullable record) as table About Returns any tables found in pdf. An optional record parameter, options, may be provided to specify additional properties. Default: 1. EndPage: Specifies the last page in the range of pages to examine. Default: the last page of the document..CGContextPDF.EndPage Method Definition Namespace: CoreGraphics Assembly:Xamarin.iOS.dll Assembly:Xamarin.Mac.dll Applies to. Learn more about the CoreGraphics.CGContextPDF.EndPage in the CoreGraphics namespace.. /dotnet/api/coregraphics.cgcontextpdf.endpage.printPageRange resource type Namespace: microsoft.graph Important APIs under the /beta version in Microsoft Graph are subject to change. Use of these APIs in production applications is not supported. Specifies the range of pages to be printed. Properties Property Type Description startPage Int32 The start page (inclusive) for the range. Read-only..SKDocument.EndPage Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Completes the drawing for the current page created by BeginPage(Single, Single). Applies to. Completes the drawing for the current page created by BeginPage(Single, Single). . /dotnet/api/skiasharp.skdocument.endpage.PDF device information settings for Power BI paginated reports APPLIES TO: Power BI Report Builder Power BI Desktop The following table lists the device information settings for rendering Power BI paginated reports in PDF format. EndPage The last page of the report to render. The default value is the value for ... Learn about the device."
290,SetActiveWindow,"Microsoft Build · May 19 – 22, 2025SetActiveWindow function (winuser.h) Activates a window. The window must be attached to the calling thread's message queue. Syntax Parameters [in] hWnd Type: HWND A handle to the top-level window to be activated. Return value Type: HWND If the function succeeds, the return value is the handle to the window that was previously active. Remarks The.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. The Keyboard and Mouse Input technology is not associated with any headers. ReleaseCapture Releases the mouse capture from a window in the current thread and restore... SendInput Synthesizes keystrokes, mouse motions, and button clicks. SetActiveWindow Activates a.When the keyboard focus changes from one window to another, the system sends a WM_KILLFOCUS message to the window that has lost the focus, and then sends a WM_SETFOCUS m... The user can activate a top-level window by clicking it, selecting it using the Alt+Tab or Alt+Esc key combination, or selecting it from the Task List. A thread can activate a.WINDOW_ACTION structure Used by the API ApplyWindowAction and WM_INTERCEPTED_WINDOW_ACTION. This structure describes one or more changes to a top level window's position, size, state, and other related fields. WAK_INSERT_AFTER Moves the window in Z-Order, to be after ... WAK_ACTIVATE Activates the window, like SetActiveWindow WAK_PLACEMENT_STATE.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Descriptio... CWindow::NextDlgCtrl Sets the keyboard focus to the next control in the dialog box. CWindow::PrevDlgCtrl Sets the keyboard focus to the previous control in the.CWnd::RegisterTouchWindow Register... CWnd::ScrollWindow Scrolls the contents of the client area. Similar to ScrollWindow, with additional features. CWnd::SetActiveWindow Activates the window. CWnd::SetDlgCtrlID Sets the window or control ID for the window (which can be any child window, not only a control in a dialog box). CWnd::SetDlgItemInt.If ... Value Meaning WA_ACTIVE 1 Activated by some method other than a mouse click (for example, by a call to the SetActiveWindow function or by use of the keyboard interface to select the window). Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.To bring the window to the foreground or to activate it programmatically, use SetForegroundWindow or SetActiveWindow. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).WS_EX_NOACTIVATE 0x08000000L A top-level windo... The system does not bring this window to the foreground when the user minimizes or closes the foreground window. The window should not be activated through programmatic access or via keyboard navigation by accessible technology, such as Narrator. To activate the window, use the SetActiveWindow or.To bring the window to the foreground or to activate it programmatically, use SetForegroundWindow or SetActiveWindow. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h)."
291,IsDBCSLeadByte,"Microsoft Build · May 19 – 22, 2025The IsDBCSLeadByte function is used to determine if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). In double-byte character sets (DBCS), characters are encoded using either one or two bytes, and the lead byte indicates that the following byte is part of the same character. This function helps applications correctly interpret multi-byte characters by identifying whether a given byte can be the first byte of a two-byte character.To use the IsDBCSLeadByte function, you would typically pass a character value to it, and it will return a non-zero value if that character is a lead byte, or zero if it is not. This is essential for string handling in applications that support DBCS, as it ensures that characters are processed correctly without splitting them incorrectly.References:IsDBCSLeadByte function (winnls.h) Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. Note  To use a different code page, your application should use the IsDBCSLeadByteEx function..Unicode and Character Set Functions The following functions are used with character sets. GetTextCharsetInfo Retrieves information about the character set of the font that is currently selec... IsDBCSLeadByte Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). IsDBCSLeadByteEx Determines if a.Double-byte Character Sets A double-byte character set (DBCS), also known as an ""expanded 8-bit character set"", is an extended single-byte character set (SBCS), implemented as a code page. An application can use the IsDBCSLeadByte function to determine if a given value can be used as the lead byte of a 2-byte character. A double-byte character set.IsDBCSLeadByteEx function (winnls.h) Determines if a specified character is potentially a lead byte. A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.IS_SURROGATE_PAIR Determines if the specified code units form a UTF-16 surrogate... IsDBCSLeadByte Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. IsDBCSLeadByteEx Determines if a.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and.CompareStringW The CompareStringW (Unicode) function (stringapiset.h) compares two character strings, for a locale specified by identifier. ComprehensiveCheck Spell-check the provider text in a more thorough manner than ISpellCheckProvider::Check. ComprehensiveCheck Checks the spelling of the supplied text in a more thorough manner than."
292,LoadImageA,"Microsoft Build · May 19 – 22, 2025LoadImageA function (winuser.h) Loads an icon, cursor, animated cursor, or bitmap. Syntax Parameters [in, optional] hInst Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of 32-bit Windows, an instance handle (HINSTANCE), such.ImageList_LoadImageA function (commctrl.h) Creates an image list from the specified bitmap. Syntax Parameters hi Type: HINSTANCE A handle to the instance that contains the resource. This parameter can be NULL if you are loading an image from a file or loading an OEM resource. lpbmp Type: LPCTSTR The image to load. Requirements Requirement Value.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar,.ImageList_LoadBitmap Calls the ImageList_LoadImage function to create an image list from the specified bitmap resource. ... An image list can have up to four overlay masks in version 4.70 and earlier and up to 15 in version 4.71. New applications should use the InitCommonControlsEx function. InitCommonControlsEx Ensures that the common control DLL.ActivateAs Handles Activate As behavior by unloading all objects of the old class, telling OLE to treat those objects as objects of the new class, and reloading the objects. If objects cannot be reloaded, they are deleted. Add Adds an image or images to an image list. (IImageList.Add) Add Adds a string to the end of the collection. AddMasked Adds.This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determi... CopyIcon Copies the specified icon from another module to the current module. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the."
293,GetQueueStatus,"Microsoft Build · May 19 – 22, 2025GetQueueStatus function (winuser.h) Retrieves the type of messages found in the calling thread's message queue. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.AgentPoolsOperationsExtensions.GetQueueStatus Method Definition Namespace: Microsoft.Azure.Management.ContainerRegistry Assembly:Microsoft.Azure.Management.ContainerRegistry.dll Package:Microsoft.Azure.Management.ContainerRegistry v6.0.0 Gets the count of queued runs for a given agent pool. Parameters o... Returns AgentPoolQueueStatus Applies to..ID3DX10ThreadPump::GetQueueStatus method Get the number of items in each of the three queues inside the thread pump. Syntax Parameters pIoQueue [in] Type: UINT* Number of items in the I/O queue. pProcessQueue [in] Type: UINT* Number of items in the process queue. pDeviceQueue [in] Type: UINT* Number of items in the device queue. Requirements.ID3DX11ThreadPump::GetQueueStatus method Note The D3DX (D3DX 9, D3DX 10, and D3DX 11) utility library is deprecated for Windows 8 and is not supported for Windows Store apps. Gets the number of items in each of the three queues inside the thread pump. Syntax Parameters pIoQueue [in] Type: UINT* Number of items in the I/O queue. pProcessQueue [in].AgentPoolsGetQueueStatusResponse type Package: @azure/arm-containerregistry Contains response data for the getQueueStatus operation. Contains response data for the getQueueStatus operation. . /javascript/api/@azure/arm-containerregistry/agentpoolsgetqueuestatusresponse.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. The time is a long integer that specifies the elapsed time, in milliseconds, from the time the system.ContainerRegistryAgentPoolResource.GetQueueStatus(CancellationToken) Method Definition Namespace: Azure.ResourceManager.ContainerRegistry Assembly:Azure.ResourceManager.ContainerRegistry.dll Package:Azure.ResourceManager.ContainerRegistry v1.2.1 Package:Azure.ResourceManager.ContainerRegistry v1.3.0-beta.3....g, string, string, AgentPoolUpdateParameters, AgentPoolsUpdateOptionalParams) Updates an agent pool with the specified parameters. beginUpdateAndWait(string, string, string, AgentPoolUpdateParameters, AgentPoolsUpdateOptionalParams) Updates an agent pool with the specified parameters. get(string, string, string, AgentPoolsGetOptionalParams).Using Messages and Message Queues The following code examples demonstrate how to perform the following tasks associated with W... Other functions, including GetQueueStatus and GetInputState, also allow you to examine the contents of a thread's message queue. GetQueueStatus returns an array of flags that indicates the types of messages in the.ID3DX10ThreadPump interface Used to execute tasks asynchronously, and created with D3DX10CreateThreadPump. There are several D3DX10 APIs that can optionally take a thread pump as a parameter, such as D3DX10CreateTextureFromFile and D3DX10CompileFromFile (see remarks for ... Method Description AddWorkItem Add a work item to the thread pump.."
294,OleFlushClipboard,"Microsoft Build · May 19 – 22, 2025OleFlushClipboard function (ole2.h) Carries out the clipboard shutdown sequence. If you are writing an application that acts as the source of a clipboard operation, you can call the OleFlushClipboard function when your application is closed, such as when the user exits from your application. Calling OleFlushClipboard enables pasting and....teDataCache CreateFormatEnumerator CreateOleAdviseHolder DoDragDrop OleCreate OleCreateDefaultHandler OleCreateEmbeddingHelper OleCreateEx OleCreateFontIndirect OleCreateFromData OleCreateFromDataEx OleCreateFromFile OleCreateFromFileEx OleCreateLink OleCreateLinkEx OleCreateLinkFromData OleCreateLinkFromDataEx OleCreateLinkToFile.ICB_DefaultValu... Remarks You can use the DelayedCopy flag to interact directly with the data object and add additional formats to the clipboard. Caution  To avoid potential memory leaks as a result of using the DelayedCopy flag, you must call the OleFlushClipboard or OleSetClipboard method. This must be done before the application exits if the.OleDoAutoConvert Automatically converts an object to a new class if automatic conversion for that object c... OleDraw The OleDraw function (ole2.h) enables drawing objects more easily. OleDuplicateData Duplicates the data found in the specified handle and returns a handle to the duplicated data. The source data is in a clipboard format..OleGetClipboard function (ole2.h) Retrieves a data object that you can use to access the contents of the clipboard. If you are writing an application that can accept data from the clipboard, call the OleGetClipboard function t... OleGetClipboard handles three cases: The application that placed data on the clipboard with the OleSetClipboard.It is not supported under Windows Vista and later. Use OleFlushClipboard instead.] [This function is available through Windows XP SP2 and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. SHFindFiles SHFindFiles may be altered or unavailable. SHFlushClipboard Carries out the clipboard shutdown sequence. It.OleGetClipboardWithEnterpriseInfo function (ole2.h) Enables Windows Information Protection enlightened applications to retrieve an IDataObject from the OLE Clipboard accompanied by Windows Information Protection information about the data and the source application.This information allows the enlightened application to take over responsibility for.To copy an InkDisp object to the Clipboard, call the ClipboardCopy method with the strokes parameter set to NULL. Caution  To avoid potential memory leaks as a result of using the ICB_DelayedCopy flag, you must call the OleFlushClipboard or OleSetClipboard method. This must be done before the application exits if the last call to the.EN_PROTECTED Sent when the user takes an action that changes the prot... EN_REQUESTRESIZE Sent when a rich edit control's contents are different from the control's window size. EN_SAVECLIPBOARD Sent when an edit control is being destroyed. The text host should indicate whether OleFlushClipboard should be called. Data indicating the number of.Note  OleInitialize(NULL) must be called before the clipboard APIs can work. Caution  To avoid potential memory leaks as a result of using the ICB_DelayedCopy flag, you must call the OleFlushClipboard or OleSetClipboard method. This must be done before the application exits if the last call to the ClipboardCopy method used the ICB_DelayedCopy."
295,RemoveFontResourceW,"Microsoft Build · May 19 – 22, 2025RemoveFontResourceW function (wingdi.h) The RemoveFontResource function removes the fonts in the specified file from the system font table. If the font was added using the AddFontResourceEx function, you must use the RemoveFontResourceEx function. Syntax Parameters [in] lpFileName A pointer to a null-terminated string that names a font resource.CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font. DeleteColorSpace The DeleteColorSpace function removes and destroys a specified color space. (ANSI).CreateScalableFontResourceA The C... (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font. DeleteFont The DeleteFont macro deletes a font object, freeing all system resources associated with the font object. DrawStateW The DrawState function displays an image and applies a."
296,GetModuleHandleA,"Microsoft Build · May 19 – 22, 2025The GetModuleHandleA function retrieves a module handle for the specified module. The module must have been loaded by the calling process. This function is used to obtain a handle that can be used in other functions that require a module handle, such as GetProcAddress or FreeLibrary. It is important to note that this function is specific to ANSI character strings.References:GetModuleHandleA function (libloaderapi.h) Retrieves a module handle for the specified module. The module must have been loaded by the calling process. To avoid the race conditions described in the Remarks section, use the GetModuleHandleEx function. Syntax Parameters [in, optional] lpModuleName The name of the loaded module (either a .dll or .exe.libloaderapi.h header This header is used by multiple technologies. ... The module must have been loaded by the current process. (Unicode) GetModuleHandleA Retrieves a module handle for the specified module. The module must have been loaded by the calling process. (ANSI) GetModuleHandleExA Retrieves a module handle for the specified module and.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.** 功能描述: ** ** ** ** 全局变量: ** 调用模块: ** 作 者: ** 日 期: ** 版 本 ** ** ** 修 改: ** 日 期: ** 版 本 ****************************************************************/ DWORD dword. ...ext:00BE8883 ; _ .text:00BE8885 lea eax, [esp+33Ch+Filename] .text:00BE8889 push 125h ; nSize .text:00...IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned to a calling application by a number of query methods. It provides detailed information about a file or set of files (a file set). IVssWriterComponents Contains methods used to obtain and modify component information. Recalibration may involve returning the transport."
297,CompareStringA,"Microsoft Build · May 19 – 22, 2025CompareStringA function (winnls.h) Compares two character strings, for a locale specified by identifier. Caution  Using CompareString incorrectly can compromise the security of your application. Strings that are not compared correctly can produce invalid input. For example, the function can raise security issues when used for a non-linguistic....: Internationalization for Windows Applications winnls.h contains the following programming inter Functions CompareString The CompareString function (winnls.h) compares two character strings for a locale specified by an identifierCompareStringA Compares two character strings, for a locale specified by identifier.Caution  Using CompareString.CompareString The CompareString function (winnls.h) compares two character strings for a locale specified by an identifier. CompareStringA Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application. (CompareStringA) CompareStringEx Compares two.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`.This impacts the behavior of the following functions: NLS LCMapStringEx CompareStringEx CompareString CompareStringA Collation std::collate strcoll wcscoll _mbscoll _stricoll _wcsicoll _mbsicoll _strncoll _wcsncoll _mbsncoll _strnicoll _wcsnicoll _mbsnicoll Uppercasing std::toupper toupper towupper _toupper _toupper_l _towupper_l std::isupper."
298,IsBadStringPtrW,"Microsoft Build · May 19 – 22, 2025IsBadStringPtrW function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.MNLS_IsBadStringPtrW Applies to: Outlook 2013 | Outlook 2016 Verifies that a pointer to a wide string is valid. Parameters lpsz [in] A pointer to the wide character string. ucchMax [in] The maximum length of the string in characters including terminator. Return value Returns a Boolean that is true if the string is bad. Describes the syntax,.winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and R... (IsBadReadPtr) IsBadStringPtrA Verifies that the calling process has read access to the specified range of memory. (IsBadStringPtrA) IsBadStringPtrW Verifies that the calling process has....ineObj HrSzFromEntryID HrSetOneProp HrValidateIPMSubtree HrThisThreadAdvi LAUNCHWIZARDENTRY IsBadBoundedStringPtr LPropCompareProp LPFNBUTTON MAPIAdminProfiles LpValFindProp MAPIAllocateMore MAPIAllocateBuffer MAPIDeInitIdle MAPICrashRecovery MAPIGetDefaultMalloc MAPIFreeBuffer MAPIInitIdle MAPIInitialize MAPIOFFLINE_AGGREGATEINFO MAPILogonEx.To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h."
299,FreeResource,"Microsoft Build · May 19 – 22, 2025...For 32-bit Windows applications, it is not necessary to free the resources loaded using LoadResource. Remarks For resources loaded with other functions, FreeResource has been replaced by the following functions: Resource type FreeResource replacement Accelerator DestroyAcceleratorTable Bitmap DeleteObject Cursor DestroyCursor Icon DestroyIcon.IHolder::FreeResource method (comsvcs.h) Returns a resource to the inventory. Syntax Parameters [in] __MIDL__IHolder0002 The handle of the resource to be freed. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.IHolder interface (comsvcs.h) Allocates or frees resources for an installed Resource Dispenser. IHolder::FreeResource Returns a resource to the inventory. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows.Implementing a COM+ Resource Dispenser The following steps outline a general procedure for implementing a COM+ resource dispenser: Decide on RESTYPID format that categorizes how your resources differ from each other. Store this pointer so that you can call IHolder::AllocResource and IHolder::FreeResource. You can now (in response to calls to your.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloaderapi.h contains the following programming interfaces: Functions AddDllDirectory Adds a directory to the process DLL search path. FreeLibrary Frees the loaded.Hello All. I am attempting to implement a virtual miniport driver for class=DiskDrive device. Storport next calls freeresources and the install fails with a code 10 and the message &quot;The request is not supported&quot; This is the result whether or not i activate ScsiSetBootConfig. Storport next calls freeresources and the install fails with a.Resource Functions (Menus and Other Resources) In This Section BeginUpdateResource CopyImage EndUpdateResource EnumResLangProc EnumResNameProc EnumResourceLanguages EnumResourceLanguagesEx EnumResourceNames EnumResourceNamesEx EnumResourceTypes EnumResourceTypesEx EnumResTypeProc FindResource FindResourceEx FreeResource LoadImage LoadResource.FreeResource Returns a resource to the inventory. get__NewEnum Retrieves an enumerator for the instance CLSIDs of the CRM clerks. get__NewEnum Retrieves an enumerator for the security call context collection. get__NewEnum Retrieves an enumerator for the security callers collection. get__NewEnum Retrieves an enumerator for the security identity.(Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the UpdateResource functi... DestroyMenu Destroys the specified menu and frees any memory that the menu occupies.."
300,EnumThreadWindows,"Microsoft Build · May 19 – 22, 2025EnumThreadWindows function (winuser.h) Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE. To enumerate child windows of a particular window, use.The thread that creates a window must contain the code for its window procedure. An application can use the EnumThreadWindows function to enumerate the windows created by a particular thread. This function passes the handle to each thread window, in turn, to an application-defined callback function, EnumThreadWndProc. The GetWindowThreadProcessId.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical W... EnumThreadWindows Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows.Window functions AdjustWindowRect AdjustWindowRectEx AllowSetForegroundWindow AnimateWindow AnyPopup ArrangeIconicWindows BeginDeferWindowPos BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx.EnumProps continues until the last entry is enumerated or the callback function returns FALSE. (Unicode) EnumThreadWindows Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows Enumerates all top-level windows on the screen by passing the....ssing the handle to each child w in turn, to an application-defined callback functionRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll.EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. (Unicode) EnumThreadWindows Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined."
301,ShowScrollBar,"Microsoft Build · May 19 – 22, 2025ShowScrollBar function (winuser.h) The ShowScrollBar function shows or hides the specified scroll bar. Syntax Parameters [in] hWnd Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the wBar parameter. [in] wBar Type: int Specifies the scroll bar(s) to be shown or hidden. Requirements....ShowSettings.ShowScrollbar property (PowerPoint) Determines whether to display the scroll bar during a slide show in browsReturn value MsoTriState Remarks Use the ShowType property prior to setting the ShowScrollbar property. The value of the ShowScrollbar property can be one of these MsoTriState constants. msoFalse msoTrue Example This example.EM_SHOWSCROLLBAR message Shows or hides one of the scroll bars in the host window of a rich edit control. Parameters wParam Identifies which scroll bar to display: horizontal or vertical. This parameter must be SB_VERT or SB_HORZ. lParam Specifies whether to show the scroll bar or hide it. Specify TRUE to show the scroll bar and FALSE to hide it..Window.ShowScrollBars property (Visio) Determines whether scroll bars are shown in the drawing window. ShowScrollBars expression A variable that represents a Window object. Return value Integer Remarks The ShowScrollBars property value can be any combination of the following VisScrollbarStates constants, which are declared in the Visio type.FlatSB_ShowScrollBar function (commctrl.h) Shows or hides a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard ShowScrollBar function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. ...handle must have been passed previously in a call to.Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.NoNamespace.showScrollbar Field Definition Namespace: DocumentFormat.OpenXml.Linq Assembly:DocumentFormat.OpenXml.Linq.dll Package:DocumentFormat.OpenXml.Linq v2.15.0 Package:DocumentFormat.OpenXml.Linq v2.16.0 Package:DocumentFormat.OpenXml.Linq v2.17.1 Package:DocumentFormat.OpenXml.Linq v2.18.0 Package:DocumentFormat.OpenXml.Linq v2.19.0.BrowseSlideMode.ShowScrollbar Property Definition Namespace: DocumentFormat.OpenXml.Presentation Assembly:DocumentF... Attributes SchemaAttrAttribute Remarks The following information from the ECMA International Standard ECMA-376 can be useful when working with this class. Specifies whether to show the scroll bar in the viewing window. Show Scroll.When provided with a scroll bar, the user can scroll a data object in the client area to bring into view the portions of the object that extend beyond the borders of the window. Overviews Topic Contents About Scroll Bars A scroll bar consists of a shaded shaft with an arrow button at each end and a scroll box (sometimes called a thumb) between the.Flat Scroll Bar This section contains information about the programming elements used to control flat scroll bars. Overviews Topic Contents Flat Scroll Bars Microsoft Internet Explorer 4.0 introduced a new visual technology called flat scroll bars. FlatSB_ShowScrollBar Shows or hides a flat scroll bar. If flat scroll bars are not initialized for."
302,CopyFileExA,"Microsoft Build · May 19 – 22, 2025CopyFileExA function (winbase.h) Copies an existing file to a new file, notifying the application of its progress through a callback function. To perform this operation as a transacted operation, use the CopyFileTransacted function. Syntax Parameters [in] lpExistingFileName The name of an existing file. By default, the name is limited to MAX_PATH.CopyFile The CopyFile function (winbase.h) copies an existing file to a new file. CopyFile2 Copies an existing file to a new file, notifying the application of its progress t... (CopyFile2) CopyFileA Copies an existing file to a new file. (CopyFileA) CopyFileExA Copies an existing file to a new file, notifying the application of its progress.FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code started with Windows 10. (Co... (CopyFileA) CopyFileExA Copies an existing file to a new file, notifying the application of its progress through a callback function. (CopyFileExA) CopyFileExW Copies an existing.CreateFiberEx Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-file-ansi-l2-1-0.dll API Requirements ReplaceFileA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.10240. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API."
303,connect,"Microsoft Build · May 19 – 22, 2025To connect to a Microsoft product or service, you typically need to have a Microsoft account. You can check if you already have one or create a new account by visiting the Microsoft account page. Additionally, if you are looking to integrate your service with Microsoft products, you can utilize various connectors provided by Microsoft to enhance the functionality and accessibility of your services.For specific Microsoft products, you may need to access the respective admin center or support portal to get started, depending on the service you are using.References:Connect to a project Azure DevO... You can connect to a project from any of the following clients: Web portal Visual Studio or Team Explorer Android Studio with the Azure DevOps Services Plugin for Android Studio IntelliJ with the Azure DevOps Services Plugin for IntelliJ Visual Studio Code A project defines a process and data storage in which you.Connect to Exchange Online Protection PowerShell This article contains instructions for how to connect to Exchange Online Protection PowerShell using the Exchange Online PowerShell module with or without using multi-factor authentication (MFA). The Exchange Online PowerShell module uses modern authentication for connecting to all Exchange-related.Connect your organization to Microsoft Entra ID Azure DevOps Services This article shows how to connect your Azure DevOps organization to Microsoft Entra ID. Connecting Azure DevOps Services organizations to Microsoft Entra Government and accessing Azure DevOps Services with u... Connect your organization to Microsoft Entra ID To connect your.Connect using SSH You can use OpenSSH to connect to your Factory OS test devices and VMs and run commands or transfer files. OpenSSH (Secure Shell) is a standard protocol for secure terminal connections. You can use SSH to connect to all Factory OS images What you need to connect using SSH To connect to a device using SSH, you'll have need: The.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Quickstart: Connect and query a SQL Server... The article demonstrates how to follow the below steps: Connect to a SQL Server instance Create a database Create a table in your new database Insert rows into your new table Query the new.Connect to Security & Compliance PowerShell This article contains instructions for how to connect to Security & Compliance PowerShell using the Exchange Online PowerShell module with or without multi-factor authentication (MFA). The Exchange Online PowerShell module uses modern authentication for connecting ... Step 1: Load the Exchange Online.SharePoint folder Summary Item Description Release State General Availability Products ExcelPower BI (Semantic models)Power BI (Dataflows)Fabric (Dataflow Gen2)Power Apps (Dataflows)Dynamics 365 Customer Insights Authentication T... Connect to a SharePoint folder from Power Query Desktop To connect to a SharePoint folder: From Get Data, select.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Configure Start VM on Connect Start VM on Connect lets you reduce costs by enabling end users to power on the virtual machines (VMs) used as session hosts only when they're needed. Yes No Provide product feedback | Get help at Microsoft.Connect to a Linux VM When hosting a Linux virtual machine on Azure, the most common method for accessing that VM is through the Secure Shell Protocol (SSH). Any standard SSH client commonly found in Linux and Windows allows you to connect. You can also use Azure Cloud Shell from any browser. This document describes how to connect, via SSH, to a.Connect to Azure Data Lake Storage and Blob Storage Note This article describes legacy patterns for configuring access to Azure Data Lake Storage. This article explains how to conne... Connect to Azure Data Lake Storage or Blob Storage using Azure credentials The following credentials can be used to access Azure Data Lake Storage or Blob Storage:."
304,CoInitializeEx,"Microsoft Build · May 19 – 22, 2025CoInitializeEx is a function in the Component Object Model (COM) that initializes the COM library for use by a thread. It must be called before any other COM functions can be used in that thread. The function has the following signature:The first parameter, pvReserved, is reserved and must be set to NULL. The second parameter, dwCoInit, specifies the threading model that the program will use. COM supports two threading models:To specify the threading model, you set one of the following flags in the dwCoInit parameter:It is also advisable to set the COINIT_DISABLE_OLE1DDE flag in the dwCoInit parameter to avoid overhead associated with the obsolete OLE 1.0 technology.Each thread that uses a COM interface must make a separate call to CoInitializeEx, and it is important to call CoUninitialize when the thread is done using COM.References:CoInitializeEx function (combaseapi.h) Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required. You should call Windows::Foundation::Initialize to initialize the thread instead of CoInitializeEx if you want to use the Windows Runtime APIs or if.Applies to:   All supported operating system Symptoms If an application calls HtmlHelp before calling CoInitializeEx with the specified COINIT_MULTITHREADED value, CoInitializeEx can return RPC_E_CHANGED_MODE (0x80010106). Cause If a thread that calls HtmlHelp hasn't been initialized with CoInitialize or CoInitializeEx, HtmlHelp initializes the.To use basic COM services, all COM threads of execution in clients and out-of-process servers must call either the CoInitialize or the CoInitializeEx function before calling any other COM function except memory allocation calls. CoInitializeEx replaces the other function, adding a parameter that allows you to specify the threading model of the.Initializing the COM Library Any Windows program that uses COM must initialize the COM library by calling the CoInitializeEx function. Each thread that uses a COM interface must make a separate call to this function. CoInitializeEx has the following signature: The first parameter is reserved and must be NULL. Uninitializing the COM Library For.Original version:   Windows shell and Interface Original KB number:   287087 Cause A call to CoInitializeEx (COINIT_MULTITHREADED) allows calls to objects created on the calling thread to be run on any thread. Calls that can affect shell functions The following are examples of how calls to CoInitializeEx (COINIT_MULTITHREADED) can affect functions.IInitializeSpy::PostInitialize method (objidl.h) Performs initialization steps required after calling the CoInitializeEx function. Syntax Parameters [in] hrCoInit The value returned by CoInitializeEx. [in] dwCoInit The apartment type passed to CoInitializeEx, specified as a member of the COINIT enumeration. [in] dwNewThreadAptRefs The number of.Initializing COM for a WMI Application The first step in connecting to WMI is setting up the COM calls to CoInitializeEx and CoInitializeSecurity. To initialize COM from a client application Initialize COM with a call to CoInitializeEx. Calling CoInitializeEx is a standard procedure for setting up a COM interface. Therefore, WMI does not require.COM+ Thre... Threads must call CoInitializeEx before they can use COM+. The main thread apartment is determined to be the first STA called by CoInitializeEx. CoInitializeEx indicates the type of apartment required by the thread by setting the following flags: COINIT_MULTITHREADED—Locates the thread in the single multithreaded apartment..CAMThread.CoInitializeHelper method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft s... The CoInitializeHelper method calls the CoInitializeEx function at the start of the thread. Return code Description S_FALSE.IInitializeSpy::PostInitialize Performs initialization steps required after calling the CoInitializeEx function. IInitializeSpy::PreInitialize Performs initialization steps required before calling the CoInitializeEx function. Requirements Requirement Value Minimum supported client Windows XP with SP1 [desktop apps only] Minimum supported server."
305,PackDDElParam,"Microsoft Build · May 19 – 22, 2025PackDDElParam function (dde.h) Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes. Syntax Parameters [in] msg Type: UINT The DDE message to be posted. [in] uiLo Type: UINT_PTR A value that corresponds to the 16-bit Windows low-order word of an lParam parameter for the DDE message.Dynamic Data Exchange This section provides guidelines for implementing dynamic data exchange for applications that cannot use the Dynamic Data Exchange Management Library (DDEML). PackDDElParam Packs a DDE lParam value into an internal structure used for sharing DDE data between processes. ReuseDDElParam Enables an application to reuse a packed.This protects secure server data from unauthorized DDE clients. PackDDElParam Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes. ReuseDDElParam Enables an application to reuse a packed Dynamic Data Exchange (DDE) lParam parameter, rather than allocating a new packed lParam..Dynamic Data Exchange Protocol Uses for Windows Dynamic Data Exchange Dynamic Data Exchange from the User's Point of View Dynamic Data Exchange Concepts Client, Server, and Conversation Application, Topic, and Item Names The System Topic Permanent Data Links Atoms and Shared Memory Objects Dynamic Data Exchange Messages Overview Dynamic Data.Remarks PackDDElParam eases the porting of 16-bit DDE applications to 32-bit DDE applications. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header dde.h (include Windows.h) Library User32.lib DLL.DDE Functions In this section DdeSetQualityOfService FreeDDElParam ImpersonateDdeClientWindow PackDDElParam ReuseDDElParam UnpackDDElParam. . | DDE Functions. /windows/win32/dataxchg/dynamic-data-exchange-functions.All posted WM_DDE_ACK messages must create or reuse the lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Dde.h (include Windows.h) See.The client application must create or reuse the WM_DDE_ADVISE lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. The server must create or reuse the WM_DDE_ACK lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. Requirements Requirement Value Minimum supported client Windows.The server must create or reuse the WM_DDE_DATA lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. The client must create or reuse the WM_DDE_ACK lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. Requirements Requirement Value Minimum supported client Windows 2000.ReuseDDElParam function (dde.h) Enables an application to reuse a packed Dynamic Data Exchange (DDE) lParam parameter, rather than allocating a new packed lParam. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform."
306,Beep,"Microsoft Build · May 19 – 22, 2025Beep function (utilapiset.h) Generates simple tones on the speaker. The function is synchronous; it performs an alertable wait and does not return control to its caller until the sound finishes. Syntax Parameters [in] dwFreq The frequency of the sound, in hertz. This parameter must b... Remarks A long time ago, all PC computers shared a common..beep (Speaker Beep) The .beep command makes noise on the computer speaker. Environment This command cannot be used in script files. Item Description Modes User mode, kernel mode Targets Live, crash dump Platforms All. The .beep command makes noise on the computer speaker.. /windows-hardware/drivers/debuggercmds/-beep--speaker-beep-.Beep macro action Applies to: Access 2013, Office 2013 You can use the Beep action to sound a beep tone through the computer's speaker. Remarks You can use the Beep action to signal the following occurrences: Important screen changes have occurred. The frequency and duration of the beep depend on the hardware, which may vary between computers. To.Beep statement Sounds a tone through the computer's speaker. Syntax Beep Remarks The frequency and duration of the beep depend on your hardware and system software, and vary among computers. Example This example uses the Beep statement to sound three consecutive tones through the computer's speaker. See also Data types Statements Support and.DoCmd.Beep method (Access) The Beep method carries out the Beep action in Visual Basic. Syntax expression.Beep expression A variable that represents a DoCmd object. Remarks This method has no arguments and can be called directly by using the syntax DoCmd.Beep. You can also use the VBA command Interaction.Beep to accomplish the same result. Please.Beep Use instead of alarm or tone to refer to a beeping sound. Example Recording begins when you hear the beep. This article outlines use of the word beep per Microsoft style guidelines, with an example.. /style-guide/a-z-word-list-term-collections/b/beep.6.1.2.8.2.2 Beep Function Declaration Sub Beep() Runtime Semantics. § Sounds a tone through the computer's speaker. § The frequency and duration of the beep depend on hardware and system software, and vary among computers. Function Declaration  Sub Beep() Runtime Semantics. § Sounds a tone through the computer's speaker. § The..MessageBeep function (winuser.h) Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry. Note  On Windows Server 2022, the Microsoft\Windows\Multimedia\SystemSoundsService task in Task Scheduler is disabled. This task will need to be enabled for MessageBeep to function. Syntax Parameters [in] uType.Console.Beep Method Definition Namespace: System Assemblies:netstandard.dll, System.Console.dll Assembly:System.Console.dll Assembly:mscorlib.dll Assembly:netstandard.dll Plays the sound of a beep through the console speaker. Beep(Int32, Int32) Plays the sound of a beep of a specified frequency and duration through the console speaker. Whether.ExceptionMessageBox.Beep Property Definition Namespace: Microsoft.NetEnterpriseServers Assembly:Microsoft.NetEnterpriseServers.ExceptionMessageBox.dll This feature will be removed in a future version of Microsoft SQL Server. Avoid using this feature in new development work, and plan to modify applications that currently use this feature. This."
307,GetCharABCWidthsA,"Microsoft Build · May 19 – 22, 2025GetCharABCWidthsA function (wingdi.h) The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts. Syntax Parameters [in] hdc A handle to the device context. [in] wFirst The first character in the group of.ExtCreatePen The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes. GetCharABCWidthsA The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. (ANSI) GetCharABCWidthsFloatA The.GetBitmapBits The GetBitmapBits function copies the. GetCharABCWidthsA The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. (ANSI) GetCharABCWidthsFloatA The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive."
308,RedrawWindow,"Microsoft Build · May 19 – 22, 2025RedrawWindow function (winuser.h) The RedrawWindow function updates the specified rectangle or region in a window's client area. Syntax Parameters [in] hWnd A handle to the window to be redrawn. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server....to update another also when calling rate of this function (for example 700 times in a second) increases the some child controls on that window take long time to update themselve ui changes when clicking them (eg: check boxes). this problem ocures when RDW_UPDATENOW flag is used. how solve this problem? thanks| I solve the problem by calling.WM_SETREDRAW message You send the WM_SETRED... Finally, your application can call RedrawWindow(hWnd, NULL, NULL, RDW_ERASE | RDW_FRAME | RDW_INVALIDATE | RDW_ALLCHILDREN) to cause the list box to be repainted. Note You should use RedrawWindow with the specified flags, instead of InvalidateRect, because the former is necessary for some controls.IWTSProtocolConnectionCallback::RedrawWindow method (wtsprotocol.h) [IWTSProtocolConnectionCallback::RedrawWindow is no longer available for use as of Windows Server 2012. Instead, use IWRdsProtocolConnectionCallback::RedrawWindow.]. Requests that the Remote Desktop Services service redraw the client window. Syntax Parameters [in, optional] rect A.IWRdsProtocolConnectionCallback::RedrawWindow method (wtsprotocol.h) Requests that the Remote Desktop Services service redraw the client window. Syntax Parameters [in, optional] rect A WRDS_SMALL_RECT structure that contains the x and y coordinates of the screen to redraw. A value of NULL requests that the entire screen be redrawn. Return value If.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a ... PaintDesktop Fills the clipping region in a device context with a pattern. RedrawWindow Updates a region in a window's client area. SetBkColor Sets the background to a color value. WindowFromDC Returns a handle.IWTSProtocolConnectionCallback interface (wtsprotocol.h) [IWTSProtocolConnectionCallback is no longer available for use as of Windows Server 2012. Exposes methods that provide information about the status of a client connection and th... This interface is implemented by the Remote Desktop Services service and called by the protocol..Synchronous and Asynchronous Drawing Most drawing carried out during processing of the WM_PAINT message is asynchronous; that is, there is a delay between the time a por... The UpdateWindow and RedrawWindow functions allow for synchronous drawing. RedrawWindow also sends a WM_PAINT message, but gives the application greater control over how to.Metrics This section describes the metrics reported by the Internet Explorer Startup assessment, common causes of poor results for each metric and possible remediation for these issues. Use InvalidateRect or RedrawWindow to redraw the window. Additional Information MSDN: IDockingWindow::ShowDW method MSDN: WM_SETREDRAW message Issues The Internet.IWRdsProtocolConnectionCallback interface (wtsprotocol.h) Exposes methods that provide information about the status of a client connection and that perform actions for the client. This interface is implemented by the Remote Desktop Services service and called by the protocol. IWRdsProtocolConnectionCallback::RedrawWindow Requests that the Remote."
309,GetSystemDirectoryW,"Microsoft Build · May 19 – 22, 2025GetSystemDirectoryW function (sysinfoapi.h) Retrieves the path of the system directory. The system directory contains system files such as dynamic-link libraries and drivers. This function is provided primarily for compatibility. Applications should store code in the Program Files folder and persistent data in the Application Data folder in the.sysinfoapi.h header This header is used by multiple technologies. For more information, see: Syste... (ANSI) GetSystemDirectoryW Retrieves the path of the system directory. GetSystemWindowsDirectoryA Retrieves the path of the shared Windows directory on a multi-user system. (ANSI) GetSystemWindowsDirectoryW Retrieves the path of the shared Windows.The GetSystemDirectory API is one where you pass a buffer and a buffer size, the API fills the buffer, and returns the number of characters put into the buffer. Figure 6 Tamil Unicode in Window 9x Notice that despite the minor syntax differences in all three samples, each is doing basic... By providing a simple wrapper around the.GetThreadErrorM... APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. CreateDirectoryW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in."
310,InvalidateRect,"Microsoft Build · May 19 – 22, 2025The InvalidateRect function is used in Windows programming to invalidate a portion of a window's client area, marking it as needing to be redrawn. When you call this function, you specify a rectangle (in client coordinates) that you want to invalidate. This rectangle is added to the update region of the window, which is a designated area that needs to be updated visually.The InvalidateRect function does not immediately generate a WM_PAINT message. Instead, it allows the system to accumulate changes while the window processes other messages in its message queue. This means that all changes can be processed at once, rather than updating bits and pieces individually.If you want the invalidated area to be redrawn immediately, you can use the UpdateWindow function, which forces the WM_PAINT message to be sent directly to the window procedure.References:InvalidateRect function (winuser.h) The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn. Syntax Parameters [in] hWnd A handle to the window whose update region has changed. If this parameter is NULL, the system invalidates....crosoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13 Enables an object to invalidate a specified rectangle of its in-place image on the screenParameters pRect RECT[] [in] Rectangle to invalidate, in client coordinates of the containing window. If this parameter is NULL,.IOleInPlaceSiteWindowless::InvalidateRect method (ocidl.h) Enables an object to invalidate a specified rectangle of its in-place image on the screen. Syntax Parameters [in] pRect The rectangle to be invalidated, in client coordinates of the containing window. If this parameter is NULL, the object's full extent is invalidated. [in] fErase Specifies.Invalidating and Validating the Update Region An application invalidates a portion of a window and sets the update region by using the InvalidateRect or InvalidateRgn function. These functions add the specified rectangle or region (in client coordinates) to the update region, combining the rectangle or region with anything the system or the.Invalidating ... The InvalidateRect or InvalidateRgn function can indirectly generate WM_PAINT messages for your windows. In this example, the NULL argument used by InvalidateRect specifies the entire client area; the TRUE argument causes the background to be erased. The InvalidateRect or InvalidateRgn function can indirectly generate WM\_PAINT.ValidateRect function (winuser.h) The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window. If this parameter is NULL, the system invalidates and redraws all windows and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure before the function.(Unicode) InflateRect The InflateRect function increases or decreases the width and height of the specifie... IntersectClipRect The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle. IntersectRect The IntersectRect function calculates the intersection of two.Painting and Drawing Functions The following functions are used with painting and drawing. Func... GrayString Draws gray text at a location. InvalidateRect Adds a rectangle to a window's update region. InvalidateRgn Invalidates the client area within a region. LockWindowUpdate Disables or enables drawing in a window. WindowFromDC Returns a handle.IOleInPlaceSiteWindowless Interface Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Enables a windowless object to process window messages, participate in drag-and-drop operations, and draw..Ink Hit Test Sample This sample illustrates two methods to... To simplify redrawing the form, the application tracks a bounding box, the invalidateRect member variable, for the area where paint is added, which is invalidated each time the form is redrawn. The nearest point coordinates are then converted to pixels from ink space, The."
311,WriteFileEx,"Microsoft Build · May 19 – 22, 2025WriteFileEx function (fileapi.h) Writes data to the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when writing is completed or canceled and the calling thread is in an alertable wait state. To write data to a file or device synchronously, use the WriteFile.FileIOCompletionRoutine An application-defined callback function used with the ReadFileEx and WriteFileEx functions. FindClose Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransac... WriteEncryptedFileRaw Restores (import).Read and Write Operations Windows supports both synchronous and asynchronous (overlapped) file I/O operations on serial communications resources. A thread uses the ReadFile or ReadFileEx function to read from a communications resource, and the WriteFile or WriteFileEx function to write to a communications resource. ReadFileEx and WriteFileEx can.Reading From and Writing to Files An application reads from and writes to a file by using the ReadFile, ReadFileEx, WriteFile, and WriteFileEx functions. These fun... Flushing System-Buffered I/O Data to Disk Windows stores the data in file read and write operations in system-maintained data buffers to optimize disk performance. An application.Using Completion Routines The ReadFileEx and WriteFileEx functions provide another form of overlapped I/O. The completion routine is not executed until the thread that called ReadFileEx and WriteFileEx starts an alertable wait operation by calling one of the alertable wait functions with the fAlertable parameter set to TRUE. In an alertable wait.Time-Outs A handle to a communications resource has an associated set of time-out parameters that affect the behavior of read and write operations. Time-outs can cause a ReadFile, ReadFileEx, WriteFile, or WriteFileEx operation to conclude when a time-out interval elapses, even though the specified number of characters have not been read or.Overlapped Operations Overlapped operations enable a thread to perform a time-consuming I/O operation in the background, leaving the thread free to perform other tasks. To run the ReadFile or WriteFile function as an overlapped operation, the calling thread must specify a pointer to an OVERLAPPED structure. The ReadFileEx and WriteFileEx functions.About Communications Resources The file input and output (I/O) functions ( CreateFile, CloseHandle, ReadFile, ReadFileEx, WriteFile, and WriteFileEx) provide the basic interface for opening and closing a communications resource handle and for performing read and write operations. The file input and output (I/O) functions ( CreateFile, CloseHandle,.The behavior of these functions depends on the type of pipe and the modes in effect for ... The ReadFileEx and WriteFileEx functions can be used with either byte-type or message-type pipes if the pipe handle was opened for overlapped operations. Yes No Provide product feedback | Get help at Microsoft Q&A. Pipe operations, including pipe clients.FlushFileBuffers function (fileapi.h) Flushes the buffers of a specified file and causes all buffered data to be written to a file. Remarks Typically the WriteFile and WriteFileEx functions write data to an internal buffer that the operating system writes to a disk or communication pipe on a regular basis. Requirements Requirement Value Minimum."
312,GetComputerNameA,"Microsoft Build · May 19 – 22, 2025GetComputerNameA function (winbase.h) Retrieves the NetBIOS name of the local computer. This name is established at system startup, when the system reads it from the registry. GetComputerName retrieves only the NetBIOS name of the local computer. To retrieve the DNS host name, DNS domain name, or the fully qualified DNS name, call the.https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getcomputernamea C++ BOOL GetComputerNameA( [out] LPSTR lpBuffer, [in, out] LPDWORD nSize ); Is there a maximum length allowed from a computer name, so I can size my lpBuffer?| The maximum number of characters for a Netbios computer name is 15. .(Get... GetBackupStatus Retrieves the backup status value for an FhConfigMgr object. GetComputerNameA Retrieves the NetBIOS name of the local computer. (ANSI) GetComputerNameW Retrieves the NetBIOS name of the local computer. (Unicode) GetConfigurationDetails This method enumerates File History configurations that were discovered on a storage.(Unicode) GetComputerNameA Retrieves the NetBIOS name of the local computer. (ANSI) GetComputerNameW Retrieves the NetBIOS name of the local computer. (ANSI) GetLongPathNameTransactedW Converts the specified path to its long form as a transacted operation. GetNamedPipeClientComputerNameA The GetNamedPipeClientComputerNameA (ANSI) function.APIs from api-ms-win-core-kernel32-legacy-l1-1-1.dll API Requirements MoveFileExA Introduced into api-ms-win-core-kernel32-legacy-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.14393. GetModuleFileNameA Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. Moved into."
313,GetClipboardOwner,"Microsoft Build · May 19 – 22, 2025GetClipboardOwner function (winuser.h) Retrieves the window handle of the current owner of the clipboard. Syntax Return value Type: HWND If the function succeeds, the return value is the handle to the window that owns the clipboard. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device.CWnd::get_accName... CWnd::GetCheckedRadioButton Returns the ID of the currently checked radio button in a group of buttons. CWnd::GetClientRect Gets the dimensions of the CWnd client area. CWnd::GetClipboardOwner Retrieves a pointer to the current owner of the Clipboard. CWnd::GetClipboardViewer Retrieves a pointer to the first window in the.This function sends the WM_DESTROYCLIPBOARD message to the previous clipboard owner, frees resources associated with data on the clipboard, and assigns clipboard ownership to the window that has the clipboard open. To find out which window owns the clipboard, call the GetClipboardOwner function. Upon receiving this message, the window should open.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. GetClipboardOwner Retrieves the window handle of the current owner of the clipboard. GetClipboardSequenceNumber Retrieves the clipboard.Remarks When responding to a WM_RENDERALLFORMATS message, the application must call the OpenClipboard function and then check that it is still the clipboard owner by calling the GetClipboardOwner function before calling SetClipboardData. The application needs to check that it is still the clipboard owner after opening the clipboard because after.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.COleDataSource Class Acts as a cache into which an application places the data that it will offer during data transfer operations, such as Clipboard or drag-and-drop operations. COleDataSource::GetClipboardOwner Verifies that the data placed on the Clipboard is still there. COleDataSource::GetClipboardOwner Determines whether the data on the.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom ta... The function copies the name to the specified buffer. (Unicode) GetClipboardOwner.In such a case... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also Clipboard Conceptual GetClipboardOwner GetClipboardViewer."
314,FillRect,"Microsoft Build · May 19 – 22, 2025The FillRect function is used in programming to repaint the interior of a rectangle. To use this function, you typically need a device context (DC) that specifies where to draw, and you will also need to define the rectangle you want to fill. The function takes three parameters: the handle to the device context, a pointer to a RECT structure that defines the rectangle, and a handle to a brush that specifies the fill color.Here's a basic example of how to use FillRect in a Windows application:Make sure to release the device context and delete the brush after use to avoid resource leaks.References:FillRect function (winuser.h) The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle. Syntax Parameters [in] hDC A handle to the device context. [in] lprc A pointer to a RECT structure that contains the logical coordinates of.UIGraphicsRendererContext.FillRect Method Definition Namespace: UIKit Assembly:Xamarin.iOS.dll Overloads FillRect(CGRect) Fills the rect with the active color. FillRect(CGRect, CGBlendMode) Paints with the current fill color, blending with. FillRect(CGRect) Fills the rect with the active color. Parameters rect CGRect The rectangle to be filled..A.fillRect Field Definition Namespace: DocumentFormat.OpenXml.Linq Assembly:DocumentFormat.OpenXml.Linq.dll Package:DocumentFormat.OpenXml.Linq v2.15.0 Package:DocumentFormat.OpenXml.Linq v2.16.0 Package:DocumentFormat.OpenXml.Linq v2.17.1 Package:DocumentFormat.OpenXml.Linq v2.18.0 Package:DocumentFormat.OpenXml.Linq v2.19.0....Ili9341.FillRect(C Int32, Int32, Int32, Int32) Method Definition Namespace: Iot.Device.Ili934x Assembly:Iot.Device.Bindings.dll Package:Iot.Device.Bindings v3.0.0 Fill rectangle to the specified color Parameters color Color The color to fill the rectangle with. x Int32 The x co-ordinate of the point to start the rectangle at in pixels. y Int32.CGContext.FillRect(CGRect) Method Definition Namespace: CoreGraphics Assembly:Xamarin.iOS.dll Assembly:Xamarin.Mac.dll Paints the specified rect. Parameters rect CGRect The RectangleF to be filled. Applies to. Paints the specified rect. . /dotnet/api/coregraphics.cgcontext.fillrect....ckage:DocumentFormat.OpenXml v2.16.0 Package:DocumentFormat.OpenXml v2.17.1 Package:DocumentFormat.OpenXml v2.18.0 Package:DocumentFormat.OpenXml v2.19.0 Package:DocumentFormat.OpenXml v2.20.0 Package:DocumentFormat.OpenXml v2.7.1 Package:DocumentFormat.OpenXml v2.7.2 Package:DocumentFormat.OpenXml v2.8.0 Package:DocumentFormat.OpenXml v2.8.1.You can optionally provide dimensions to be used for clipping, opaquing, or both. (Unicode) FillPath The FillPath function closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode. FillRect The FillRect function fills a rectangle by using the specified brush. This function....ed rectangle to the ssd1351 dParameters color Color The color to fill the rectangle with. x Byte The x co-ordinate of the point to start the rectangle at in pixels (0..126 for the Ssd1351 where 0 represents the leftmost pixel). y Byte The y co-ordinate of the point to start the rectangle at in pixles (0..126 for the Ssd1351 where 0 represents.CDC::ExtTextOut Writes a character string within a rectangular region using the currently selected font. CDC::FillPath Closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode. CDC::FillRect Fills a given rectangle by using a specific brush. CDC::FillRgn Fills a specific region.Ili9341.FillRect(Color, UInt32, UInt32, UInt32, UInt32) Method Definition Namespace: Iot.Device.Ili9341 Assembly:Iot.Device.Bindings.dll Package:Iot.Device.Bindings v2.0.0 Package:Iot.Device.Bindings v2.1.0 Send filled rectangle to the ILI9341 display. ...rameters color Color The color to fill the rectangle with. x UInt32 The x co-ordinate of the."
315,ClearCommError,"Microsoft Build · May 19 – 22, 2025ClearCommError function (winbase.h) Retrieves information about a communications error and reports the current status of a communications device. The function is called when a communications error occurs, and it clears the device's error flag to enable additional input and output (I/O) operations. The ClearCommError function fills the status.Break conditions, parity errors, or framing errors ... When an error occurs, the process must call the ClearCommError function to clear the error flag before it can begin additional I/O operations. ClearCommError reports the specific error that occurred and the current status of the device. There are other circumstances where a read or write.Communications Functions The following functions are used with communications resources. ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports the current status of a communications.This structure is filled by the ClearCommError function. Syntax Members fCtsHold If this member is TRUE, transmission is waiting for the CTS (clear-to-send) signal to be sent. fDsrHold If this member is TRUE, transmission is waiting for the DSR (data-set-ready) signal to be sent. fRlsdHold If this member is TRUE, transmission is waiting for the.... from Winbase API, an IOCTL call with IOCTL_SERIAL_GET_COMMSTATUS is sent to the device (the COM port) driver and a pointer Request is passed as a parameterIf it is a struct then what struct?| ClearCommError calls NtDeviceIoControlFile and, from IOCTL_SERIAL_GET_COMMSTATUS, it returns a SERIAL_STATUS structure. In the function ClearCommError.(Unicode) ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports the current status of a communications device. ClearEventLogA Clears the specified event log, and optionally saves the.DCB structure (winbase.h) Defines the control setting f... The driver will not accept any further communications operations until the application has acknowledged the error by calling the ClearCommError function. fDummy2 Reserved; do not use. wReserved Reserved; must be zero. Requirements Requirement Value Minimum supported client Windows XP.ClearCommBreak function (winbase.h) Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ...erver Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll ClearCommErrorRestores character.PWM_POLARITY Represents the Pulse Width Modulation (PWM) signal level polarity with respect to the duty cycle. VDS_DISK_FLAG Defines the set of valid flags for a disk object.Note   Except for VDS_DF_READ_ONLY, these flags cannot be set by using the IVdsDisk::SetFlags method or cleared by using the IVdsDisk::ClearFlags method..APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
316,CoRevokeClassObject,"Microsoft Build · May 19 – 22, 2025CoRevokeClassObject function (combaseapi.h) Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use. Syntax Parameters [in] dwRegister A token previously returned from the CoRegisterClassObject function. Return value This function can return the standard return values.Even though a process may call this function, the process still must call the CoRevokeClassObject function for each CLSID it has registered, in the apartment it registered in. Applications typically do not need to call this function, which is generally only called internally by OLE when used in conjunction with the CoReleaseServerProcess function..combaseapi.h header This header is used by multiple technologies. CoResumeClassObjects Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. CoRevertToSelf Restores the authentication information on a thread of execution..(See Instance Creation Helper Functions for a description of several instance creation and activation functions.). The server for a class object should call CoRevokeClassObject to revoke the class object (remove its registration) when all of the following are true: There are no existing instances of the object definition. There are no locks on the.Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoResumeClassObjects Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoRevokeClassObject Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299..Integrating MAPI Form Server Code with Windows Code Applies to: Outlook 2013 | Outlook 2016 Recall that your form server is a Win32 application. When your form server exits, it should perform the following tasks: Call the OLE function CoRevokeClassObject to revoke your message class's OLE registration. Call MAPIUninitialize to properly close the.The function CoRevokeClassObject is to be used only to remove a class object's CLSID from the system registry. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header combaseapi.h (include Objbase.h) Library.... CoResumeClassObjects Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. CoRevertToSelf Restores the authentication information on a thread of execution. CoRevokeClassObject Informs OLE that a class object, previously registered.REGCLS enumeration (combaseapi.h) Controls the type of connections to a class object. Syntax Constants REGCLS_SINGLEUS... This value is commonly used for single document interface (SDI) applications. Specifying this value does not affect the responsibility of the object application to call CoRevokeClassObject; it must always call.To avoid returning an error, applications that support multiple classes with single-use class objects can revoke the registered class object of the first class by calling CoRevokeClassObject when a request for instantiating a second is received. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP."
317,SetClassLongA,"Microsoft Build · May 19 – 22, 2025SetClassLongA function (winuser.h) Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. Note  This function has been superseded by the SetClassLongPtr function. To write code that is compatible with both 32-bit and 64-bit.(RegisterClassExW) RegisterClassW Registers a window class for subsequent use in calls to the CreateWindow or Create. SetClassLongA Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. (ANSI) SetClassLongPtrA Replaces the.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
318,FormatMessageA,"Microsoft Build · May 19 – 22, 2025The FormatMessageA function is used to format a message string from a message table resource or from the system's message table. It retrieves the message string that corresponds to a specified message identifier and can also format the message with additional arguments. This function is particularly useful for displaying error messages or other formatted strings in applications.References:FormatMessageA function (winbase.h) Formats a message string. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested. Syntax Parameters [in] dwFlags The formatting options, and how to interpret the lpSource parameter. The low-order byte can also specify the maximum width of a.(FindResourceExA) FindVolumeMountPointClose Closes the specified mounted folder search handle. FormatMessage The FormatMessage function (winbase.h) formats a message string. FormatMessageA Formats a message string. (FormatMessageA) FormatMessageW The FormatMessageW (Unicode) function (winbase.h) formats a message string. GetAtomNameA Retrieves a.For the fourth all three functions fail and the output of GetLastError and FormatMessageA is. I assumed that these are all USB devices because of the documentation on usage pages &quot;For detailed information about industry standard HID usage, see the Universal Serial Bus (USB) specification HID Usage Tables that is located at the USB.CoFreeUnusedLibrariesEx Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetApartmentType Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in."
319,GetKeyboardLayoutList,"Microsoft Build · May 19 – 22, 2025The GetKeyboardLayoutList function retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. It copies these identifiers to a specified buffer, allowing applications to access the list of available keyboard layouts.This function is particularly useful for applications that need to determine which keyboard layouts are installed and available for use, enabling users to switch between different input methods as needed.References:GetKeyboardLayoutList function (winuser.h) Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. Syntax Parameters [in] nBuff Type: int The maximum number of handles that the buffer can hold. [out] lpList Type: HKL* A pointer to the buffer that receives the.If the user edits text in a language which is not in the active list, the application can call the LoadKeyboardLayout function with the language to get a layout based on that language. Keyboard layout handles can be obtained from the LoadKeyboardLayout or GetKeyboardLayoutList function. The GetKeyboardLayoutName function retrieves the name of the.To get the name of the currently active keyboard layout, call the GetKeyboardLayoutName. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h (include Windows.h) See also Reference DefWindowProc WindowProc.GetKBCodePage Retrieves the current code page. GetKeyboardLayout Retrieves the active input locale identifier (formerly called the keyboard layout). GetKeyboardLayoutList Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the.InputLanguage.FromCulture(CultureInfo) Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:InputLanguage.cs Source:InputLanguage.cs Source:InputLanguage.cs Returns the input language associated with the specified culture. Remarks The FromCulture method returns the first keyboard layout with matchi....Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.GetKeyboardLayout Retrieves the active input locale identifi... If the idThread parameter is zero, the input locale identifier for the active thread is returned. GetKeyboardLayoutList Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies.If you read between the lines one can see that the HKEY_USERS.DEFAULT\Keyboard Layout (I think th... I create a list of keyboard layouts from GetKeyboardLayoutList(). (See Pre-Load above) I keep this list in Big-&gt;KeyBoardLayoutList: class KeyBoardLayout { public: HKL KeyboardHkl; TCHAR KLID[9]; TCHAR Language[50]; TCHAR LayoutText[100]; }; The....ndows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows."
320,GetClassInfoExA,"Microsoft Build · May 19 – 22, 2025GetClassInfoExA function (winuser.h) Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the instance of the application that created the.GetAltTabInfoA Retrieves status information for the specified window if it is the application-switching (ALT... (ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about.(ANSI) GetAltTa... (Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a."
321,EnumObjects,"Microsoft Build · May 19 – 22, 2025The IOleContainer::EnumObjects Method This method is used to enumerate over all the OLE objects contained in a document or form, returning an interface pointer for each OLE object. The container must return pointers to each OLE object that shares the same container. Nested forms or nested controls must also be enumerated. Some containers implement.EnumObjects function (wingdi.h) The EnumObjects function enumerates the pens or brushes available for the specified device context (DC). This function calls the application-defined callback function once for each available object, supplying data describing that object. EnumObjects continues calling the callback function until the callback function.IShellFolder::EnumObjects method (shobjidl_core.h) Enables a client to determine the contents of a folder by creating an item identifier enumeration object and returning its IEnumIDList interface. The methods supported by that interface can then be used to enumerate the folder's contents. Syntax Parameters [in] hwnd Type: HWND If user input is....d Definition Namespace: Microsoft.SqlServer.Management.Smo Assembly:Microsoft.SqlServer.SmoExtended.dll Package:Microsoft.SqlServer.SqlManagementObjects v150.18208.0 Package:Microsoft.SqlServer.SqlManagementObjects v160.2004021.0 Ove EnumObjects(Boolean) Gets URNs to be transferred EnumObjects() Gets URNs to be transferred EnumObjects(Boolean).EnumObject Constructor Definition Namespace: Microsoft.SqlServer.Management.Sdk.Sfc Assembly:Microsoft.SqlServer.Management.Sdk.Sfc.dll Package:Microsoft.SqlServer.SqlManagementObjects v150.18208.0 Package:Microsoft.SqlServer.SqlManagementObjects v160.2004021.0 default constructor Applies to. default constructor ..Database.EnumObjects Method Definition Namespace: Microsoft.SqlServer.Management.Smo Assembly:Microsoft.SqlServer.Smo.dll Package:Microsoft.SqlServer.SqlManagementObjects v150.18208.0 Package:Microsoft.SqlServer.SqlManagementObjects v160.2004021.0 Overloads EnumObjects(DatabaseObjectTypes) EnumObjects() EnumObjects(DatabaseObjectTypes, SortOrder).FileGroup.EnumObjects Method Definition Namespace: Microsoft.SqlServer.Management.Smo Assembly:Microsoft.SqlServer.Smo.dll Package:Microsoft.SqlServer.SqlManagementObjects v150.18208.0 Package:Microsoft.SqlServer.SqlManagementObjects v160.2004021.0 Returns SqlSmoObject[] Applies to. Learn more about the.IOleContainer.EnumObjects(UInt32, IEnumUnknown) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters grfFlags UInt32 ppEnum IEnumUnknown Remarks For information on the COM interface,.IPortableDeviceContent::EnumObjects method (portabledeviceapi.h) The EnumObjects method retrieves an interface that is used to enumerate the immediate child objects of an object. It has an optional filter that can enumerate objects with specific properties. Requirements Requirement Value Target Platform Windows Header portabledeviceapi.h Library.EnumObject.Name Property Definition Namespace: Microsoft.SqlServer.Management.Sdk.Sfc Assembly:Microsoft.SqlServer.Management.Sdk.Sfc.dll Package:Microsoft.SqlServer.SqlManagementObjects v150.18208.0 Package:Microsoft.SqlServer.SqlManagementObjects v160.2004021.0 name of the xpath level Property Value String Applies to. name of the xpath level .."
322,GetCommandLineW,"Microsoft Build · May 19 – 22, 2025GetCommandLineW function (processenv.h) Retrieves the command-line string for the current process. Syntax Return value The return value is a pointer to the command-line string for the current process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop.WinMain function (winbase.h) The user-provided entry point for a graphical Windows-based application. WinMain is th... To retrieve the entire command line, use the GetCommandLine function. [in] nShowCmd Type: int Controls how the window is to be shown. This means that WinMain cannot be used by Unicode programs. The GetCommandLineW function can be.CommandLineToArgvW function (shellapi.h) Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values. For... The GetCommandLineW function can be used to get a command line string that is suitable.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (Unicode).Rich activation with the app lifecycle API In the Windows App SDK, the app lifecycle API brings support for UWP-style rich activation behavior to all apps, packaged and unpackaged alike. Each type ... For example, C++ Win32 apps expect to receive activation arguments to be passed into WinMain in the form of a string (though they also have the.Office URI scheme with the following command image ms-excel:nft|u| http://localhost:8080/excel/XXXXX.xlsm?Param1 In Excel macro Get startup parameters using 'GetCommandLineW' Office version : 365 or 2019 Thank you.| Hi All, Thank you for your some support. Office URI scheme with the following command image ms-excel:nft|u|.To avoid this problem, use the GetCommandLineW function to receive the Unicode command line, or use an application manifest (on Windows Version 1903 or later) to set UTF-8 as the process code page. ...ted server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processenv.h (include Windows.h on Windows Server 2003,.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into."
323,CoDisconnectObject,"Microsoft Build · May 19 – 22, 2025CoDisconnectObject function (combaseapi.h) Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object. Only the process that actually manages the object should call CoDisconnectObject. ...Return value This function returns S_OK to indicate that all connections to remote.CoDisableCallCancellation Undoes the action of a call to CoEnableCallCancellation. CoDisconnectContext Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context. CoDisconnectObject Disconnects all remote process connections being maintained on behalf of all the.Prior to shutting down, the server calls the CoDisconnectObject function to release external connections to all its running objects. For each object that implements IMarshal, however, this function calls DisconnectObject so that each object that manages its own marshaling can take steps to notify its proxy th... Notes to Implementers As part of.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).Prior to shutting down, the server calls the CoDisconnectObject function to release external connections to all its running objects. For each object that implements IMarshal, however, this function calls DisconnectObject so that each object that manages its own marshaling can take steps to notify its proxy th... Notes to Implementers As part of.Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCance... CoDisconnectContext Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context. CoDisconnectObject Disconnects all remote process connections being maintained on.RegistrationServices.UnregisterTypeForComClients(Int32) Method Definition Namespace: System.Runtime.InteropServices Assembly:mscorlib.dll Removes references to a type registered with the RegisterTypeForComClients(Type, RegistrationClassContext, RegistrationConnectionType) methodAttributes ComVisibleAttribute SecurityCriticalAttribute Remarks Note.If the accessible object... To indicate that the object has been destroyed, it is recommended that servers return the error code CO_E_OBJNOTCONNECTED because this error is returned by Component Object Model (COM) after a server calls CoDisconnectObject. The proxy object is transparent to the client. The purpose of the proxy object is to monitor.CoDisconnectContext function (combaseapi.h) Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context. The CoDisconnectContext function performs the following tasks: Calls CoDisconnectObject on all objects in the current context. Blocks until all objects have been.To develop Component Object Mo... Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation are balanced by calls to CoDisableCallCancellation. CoDisconnectContext Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current."
324,GetProcessAffinityMask,"Microsoft Build · May 19 – 22, 2025GetProcessAffinityMask function (winbase.h) Retrieves the process affinity mask for the specified process and the system affinity mask for the system. Syntax Parameters [in] hProcess A handle to the process whose affinity mask is desired. This handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For.GetLogicalProcessorInformation Retrieves information about logical processors and related hardware. GetPriorityClass Retrieves the priority class for the specified process. GetProcessAffinityMask Retrieves a process affinity mask for the specified process and the system affinity mask for the system. GetProcessGroupAffinity Retrieves the processor.Processor Affinity Under WOW64 32-bit Windows supports a maximum of 32 processors. Therefore, functions such as GetProcessAffinityMask simulate a computer with 32 processors when called under WOW64. The affinity mask i... For more information about processor affinity, see Multiple Processors.. 32-bit Windows supports a maximum of 32 processors..Thx.| @John Cary Below is the response I got from Product Group: To get the affinity of the process, you can use GetProcessAffinityMask function: https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getprocessaffinitymask and print out the result. On the systems with more than 64 logical processes, you may also want to use.You can also use the GetProcessAffinityMask function to check the processors on which the thread is allowed to run. Note that GetProcessAffinityMask returns a bitmask whereas SetThreadIdealProcessor uses an integer value to represent the processor. Starting with Windows 11 and Windows Server 2022, on a system with more than 64 processors, process.Multiple Processors Computers with multiple processors are typically designed for one of two architectures: non-uniform memory access (NUMA) or symmetric multiprocessing (SMP). The system represents affinity with a bitmask called a processor affinity mask. You can obtain the current thread affinity for all threads of the process by calling the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print NUMA Architecture The traditional model for multiprocessor architecture is symmetric multiprocessor (SMP). System designers use non-uniform memory access (NUMA) to increase processor speed without increasing the load on the processor.GetNumaProcessorNodeEx Retrieves the node number as a USHORT value for the specified logical processor. GetProcessAffinityMask Retrieves the process affinity mask for the specified process and the system affinity mask for the system. GetProcessDEPPolicy Gets the data execution prevention (DEP) and DEP-ATL thunk emulation settings for the specified.GetNumaProximityNode Retrieves the NUMA node number that corresponds to the specified proximity domain identifier. GetProcessAffinityMask Retrieves the process affinity mask for the specified process and the system affinity mask for the system. GetProcessIoCounters Retrieves accounting information for all I/O operations performed by the specified.If the process is running in a single group, it can read and modify its affinity using GetProcessAffinityMask and SetProcessAffinityMask while remaining in the same group; if the process affinity is modified, the new affinity is applied to its threads. Affinity APIs that are not group-aware or operate on a single group implicitly use the primary."
325,EnumClipboardFormats,"Microsoft Build · May 19 – 22, 2025EnumClipboardFormats function (winuser.h) Enumerates the data formats currently available on the clipboard. Clipboard data formats are stored in an ordered list. To perform an enumeration of clipboard data formats, you make a series of calls to the EnumClipboardFormats function. For each call, the format parameter specifies an available clipboard.IVsSimpleObjectList2.EnumClipboardFormats Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Asks the given list item to enumerate its supported clipboard formats. Remarks COM.IVsObjectList2.EnumClipboardFormats Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Asks the given list item to enumerate its supported clipboard formats. Remarks COM Signature From.IVsObjectList.EnumClipboardFormats Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Asks the given list item to enumerate its supported clipboard formats. The environment calls.IVsObjectList.GetClipboardFormat Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStud... Remarks COM Signature From vsshell.idl: When the user requests a copy-paste or drag-drop operation on an item in your object list, the environment will call EnumClipboardFormats to see which formats your list.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email P... EnumClipboardFormats Enumerates the data formats currently available on the clipboard. Clipboard data formats are stored in an ordered list. To perform an enumeration of clipboard data formats, you make a series of calls to the.Clipboard Operations A window should use the clipboard when cutting, copying, or pasting data. Paste Operations To retrieve paste information from the clipboard, a window first determines the clipboard format to retrieve. Typically, a window enumerates the available clipboard formats by using the EnumClipboardFormats function and uses the first.To get extended error information, call GetLastError. Remarks Caution  Clipboard data is not trusted. Parse the data carefully before using it in your application. An application can enumerate the available formats in advance by using the EnumClipboardFormats function. The clipboard controls the handle that the GetClipboardData function returns,.If the atom's reference... EmptyClipboard Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open. EnumClipboardFormats Enumerates the data formats currently available on the clipboard. (Unicode) FreeDDElParam Frees the memory.IVsSimpleObjectList2.GetClipboardFormat Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.V... Remarks COM Signature From vsshell80.idl: When the user requests a copy-paste or drag-drop operation on an item in your object list, the environment calls."
326,DefDlgProcW,"Microsoft Build · May 19 – 22, 2025DefDlgProcW function (winuser.h) Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. Remarks The DefDlgProc function is the window procedure for the predefined class of dialog box. This procedure provides internal processing for the.(Unicode) DefDlgProcA Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. (ANSI) DefDlgProcW Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window.Dialog Boxes Overview of the Dialog Boxes technology. (Unicode) DefDlgProcA Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a p... (ANSI) DefDlgProcW Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a....7db010e8 : 00000000 00000001 000000ba 970fa348 : Procmon64+0x40a28 000000ba a38a28b0 : 00000000 970fa4a8 00000000 00000000 : atlthunk!AtlThunk_0x04+0x18 000000ba a38a2052 : 00000000 7db010d0 00 071d37a0 : user32!UserCallDlgProcCheckWow+0x144 000000ba a38a1f66 : 00000000 00000001 00000000 000000ea : user32!DefDlgProcWorker+0xd2 000000ba a389e7e8."
327,CreateHatchBrush,"Microsoft Build · May 19 – 22, 2025CreateHatchBrush function (wingdi.h) The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. Value Meaning HS_BDIAGONAL 45-degree upward left-to-right hatch HS_CROSS Horizontal and vertical crosshatch HS_DIAGCROSS 45-degree crosshatch HS_FDIAGONAL 45-degree downward left-to-right hatch HS_HORIZONTAL.Hatch Brush There are six predefined logical hatch brushes maintained by GDI. The following rectangles were painted by using the six predefined hatch brushes. An application can create a hatch brush by calling the CreateHatchBrush function, specifying one of the six hatch styles. There are six predefined logical hatch brushes maintained by GDI..ICM-Enabled Brush Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following brush functions are enabled for use with ICM:.CreateFontW The CreateFont function creates a logical font with the ... (Unicode) CreateHalftonePalette The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC.(Unicode) CreateFontW The CreateFont function creates a logical font... (Unicode) CreateHalftonePalette The CreateHalftonePalette function creates a halftone palette for the specified device context (DC). CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.FillRect function (winuser.h) The FillRect function fills a rectangle by using the specified brush. If specifying a handle to a logical brush, call one of the following functions to obtain the handle: CreateHatchBrush, CreatePatternBrush, or CreateSolidBrush. Requirements Requirement Value Minimum supported client Windows 2000 Professional.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,.CBrush Class Encapsulates a Windows graphics device interface (GDI) brush. CBrush::CreateDIBPatternBrush Initializes a brush wi... CBrush::CreateHatchBrush Initializes a brush with the specified hatched pattern and color. CBrush::CreatePatternBrush Initializes a brush with a pattern specified by a bitmap. If you use the constructor with no.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color."
328,CoGetMalloc,"Microsoft Build · May 19 – 22, 2025CoGetMalloc function (combaseapi.h) Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. Syntax Parameters [in] dwMemContext This parameter must be 1. [out] ppMalloc The address of an IMalloc* pointer variable that.Whenever ownership of an allocated chunk of memory is passed through a COM interface or between a client and the COM library, you must use this COM allocator to allocate the memory. A call to the API function CoGetMalloc provides a pointer to the OLE allocator, which is an implementation of the IMalloc interface. However, it is more efficient to.CoGetMalloc Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. CoGetMarshalSizeMax Returns an upper bound on the number of bytes needed to marshal the ... CoTaskMemAlloc Allocates a block of task memory in the same.IMalloc Interface Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Allocates, frees, and manages memory. In general, use an existing implementation such as that provided by the CoGetMalloc.CoGetInterfaceAndReleaseStream Unmarshals a buffer containing an interface poi... CoGetMalloc Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. CoGetMarshalSizeMax Returns an upper bound on the number of bytes.IEnumSTATSTG::Reset Resets th... IEnumSTATSTG::Skip Skips a specified number of STATSTG structures in the enumeration sequence. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header objidl.h.For information on getting pointers to other interfaces on an object... Creating an Object of a Predetermined Type There are numerous COM functions, such as CoGetMalloc, that return pointers to specific interface implementations. (CoGetMalloc retrieves a pointer to the standard COM memory allocator.). Most of these are helper functions, and most.OleInitialize function (ole2.h) Initializes the COM library on the current apartment, identifies the concurrency model as single-thread apartment (STA), and ena... Applications must initialize the COM library before they can call COM library functions other than CoGetMalloc and memory allocation functions. You need to initialize the COM library on.Remarks CoTaskMemAlloc uses the default allocator to allocate a memory block in the same way that IMalloc::Alloc does. It is not necessary to call the CoGetMalloc function before calling CoTaskMemAlloc. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000.IMalloc::Realloc The IMalloc::Realloc (objidlbase.h) method changes the siz... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objidlbase.h (include ObjIdl.h) See also CoGetMalloc CoRegisterMallocSpy."
329,EnumFontsW,"Microsoft Build · May 19 – 22, 2025EnumFontsW function (wingdi.h) The EnumFonts function enumerates the fonts available on a specified device. For each font with the specified typeface name, the EnumFonts function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired..Is is possible to get all the font path with GDI. EnumFontsW can use a callback which use the EnumFontsProc and we can use LOGFONTA , but it doen't give any path.| It can be done with the Shell, like the sample in C# I had posted in this thread : Get the Font file name Path as shown in File Explorer. Is is possible to get all the fo... EnumFontsW.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.(Unicode) EnumFontFamiliesW The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (Unicode) EnumFontsA The EnumFonts function enumerates the fonts available on a specified device. (ANSI) EnumFontsW The EnumFonts function enumerates the fonts available on a specified device.."
330,GetTextMetricsA,"Microsoft Build · May 19 – 22, 2025GetTextMetricsA function (wingdi.h) The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font. Syntax Parameters [in] hdc A handle to the device context. [out] lptm A pointer to the TEXTMETRIC structure that receives the text metrics. Remarks To determine whether a font is a TrueType font, first select.GetOutlineTextMetricsA The GetOutlineTextMetrics function retrieves text metrics f... (Unicode) GetTextMetrics The GetTextMetrics function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetTextMetricsA The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font..(ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the fo... (Unicode) GetTextMetrics The GetTextMetrics function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetTextMetricsA The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font.."
331,CreatePipe,"Microsoft Build · May 19 – 22, 2025The CreatePipe function is used in programming to create an anonymous pipe, which allows for interprocess communication. When you call CreatePipe, it returns two handles: one for reading from the pipe and another for writing to it. The read handle has read-only access, while the write handle has write-only access.Here’s a basic outline of how to use the CreatePipe function:Here is a simple example in C++:Keep in mind that anonymous pipes do not support asynchronous operations, so you should handle reading and writing in a synchronous manner.References:CreatePipe function (namedpipeapi.h) Creates an anonymous pipe, and returns handles to the read and write ends of the pipe. Syntax Parameters [out] hReadPipe A poi... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Anonymous Pipe Operations The CreatePipe function creates an anonymous pipe and returns two handles: a read handle to the pipe and a write handle to the pipe. The read handle has read-only access to t... Yes No Provide product feedback |.Pipe Functions The following function is used with anonymous pipes. Function Description CreatePipe Creates an anonymous pipe. The following functions are used with named pipes. Function Description CallNamedPipe Connects to a message-type pipe, writes to and reads from the pipe, ... WaitNamedPipe Waits until either a time-out interval elapses or.ParcelFileDescriptor.CreatePipe Method Definition Namespace: Android.OS Assembly:Mono.Android.dll Create two ParcelFileDescriptors structured as a data pipe. The first ParcelFileDescriptor in the returned array is the read side; the second is the write side.Java documentation for android.os.ParcelFileDescriptor.createPipe().Portions of this page.Anonymous Pipe Security and Access Rights Windows security enables you to control access to anonymous pipes. For more information abo... You can specify a security descriptor for a pipe when you call the CreatePipe function. The CreatePipe function returns two handles to the anonymous pipe: a read handle with GENERIC_READ and SYNCHRONIZE access;.namedpipeapi.h header This header is used by multiple technologies. (CallNamedPipeW) ConnectNamedPipe Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. CreateNamedPipeW The CreateNamedPipeW (Unicode) function (winbase.h) creates an instance of a named pipe and returns a handle for.sh_pipe keyword The sh_pipe keyword specifies that a system_handle holds a handle to a pipe. Remarks In order to use this keyword with the system_handle attribute, the -target flag must be set to NT100 (or higher) when running midl.exe. Examples Requirements Minimum supported client Windows 10 Anniversary Update (version 1607, build 14393) Minimum.Creating a Child Process with Redirected Input and Output The example in this topic demonstrates how to create a child process using the CreateProcess function from a console process. The CreatePipe function uses the SECURITY_ATTRIBUTES structure to create inheritable handles to the read and write ends of two pipes. The example in this topic.Pipe Handle Inheritance The pipe server controls whether its handles can be inherited in the following ways: The CreatePipe function receives a SECURITY_ATTRIBUTES structure. If the pipe server sets the bInheritHandle member of this structure to TRUE, the handles created by CreatePipe can be inherited. The CreateProcess function enables the pipe.ParcelFileDescriptor Class Definition Namespace: Android.OS Assembly:Mono.Android.dll The FileDescriptor returned by Parcel#readFileDescriptor, allowing you to close it when done with it. Inheritance Object Object ParcelFileDescriptor Attributes RegisterAttribute Implements IParcelable IJavaObject IJavaPeerable ICloseable IDisposable Remarks The."
332,IsBadHugeReadPtr,"Microsoft Build · May 19 – 22, 2025Warning C28720 Banned API Usage: '*function-name' is insecure and has been marked deprecated. Remarks Using one of these APIs indicates that you are testing to see if memory is mapped, which implies that you either don'... Code analysis name: ISBADXXXPTR_API_USAGE Banned Functions Banned API IsBadCodePtr IsBadHugeReadPtr IsBadHugeWritePtr."
333,SetBitmapBits,"Microsoft Build · May 19 – 22, 2025SetBitmapBits function (wingdi.h) The SetBitmapBits function sets the bits of color data for a bitmap to the specified values. Note  This function is provided only for compatibility with 16-bit versions of Windows. Syntax Parameters [in] hbm A handle to the bitmap to be set. This must be a compatible bitmap (DDB). [in] cb The number of bytes.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. AddFontMemResourceEx The.CBitmap Class Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap. CBitmap::LoadOEMBitmap Initializes the object by loading a predefined Windows bitmap and attaching the bitmap to the object. CBitmap::SetBitmapBits Sets the bits of a bitmap to the specified bit values..GDI APIs fail when large pages or VAD... Original product version:   Windows Original KB number:   4567569 When large page sizes are configured for virtual memory allocations and/or when buffers spanning multiple VAD are passed to the GDI APIs listed below, the function calls fail. SetDIBitsToDevice function StretchDIBits function GetBitmapBits.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.CreateBitmap function (wingdi.h) The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps on... The CreateBitmap.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. SetDIBits Sets the pixels in a bitmap using color data from a DIB. Obsolete Functions The following functions are provided only for compatibility with 16-bit versions of."
334,SuspendThread,"Microsoft Build · May 19 – 22, 2025SuspendThread function (processthreadsapi.h) Suspends the specified thread. A 64-bit application can suspend a WOW64 thread using the Wow64SuspendThread function. Syntax Parameters [in] hThread A handle to the thread that is to be suspended. Calling SuspendThread on a thread that owns a synchronization object, such as a mutex or critical section,.Suspending Thread Execution A thread can suspend and resume the execution of another thread. ...d, it is not scheduled for time on the pSuspending a thread at creation can be useful for one-time synchronization, because this ensures that the suspended thread will execute the starting point of its code when you call ResumeThread. The SuspendThread.ResumeThread function (processthreadsapi.h) Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed. Syntax Parameters [in] hThread A handle to the thread to be restarted. Debuggers are expected to use the SuspendThread and ResumeThread functions to limit the set of threads that.Wow64SuspendThread function (wow64apiset.h) Suspends the specified WOW64 thread. Syntax Parameters hThread A handle to the thread that is to be suspended. Calling Wow64SuspendThread on a thread that owns a synchronization object, such as a mutex or critical section, can lead to a deadlock if the calling thread tries to obtain a synchronization.SleepEx Suspends the current thread until the spe... SuspendThread Suspends the specified thread. SwitchToThread Causes the calling thread to yield execution to another thread that is ready to run on the current processor. TerminateThread Terminates a thread. Wow64SuspendThread Suspends the specified WOW64 thread. CancelThreadpoolIo Cancels the.Processes and threads Provides information about a newly created process and its primary thread. (QueueUserAPC2) ResumeThread Decrements a thread's suspend count. (SetThreadSelectedCpuSets) SetThreadStackGuarantee Sets the minimum size of the stack associated with the calling thread or fiber that will be available during any stack ov....processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA ... The function can also cause a thread to stop using an impersonation token..Do not use the Win32 functions ExitThr... Using SuspendThread can lead to a deadlock when more than one thread is blocked waiting for the suspended thread to complete its access to a C run-time data structure. The _beginthread and _beginthreadex functions The _beginthread and _beginthreadex functions create a new thread. You can use this function.CMsgThread.SuspendThread method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Vi... Uses the Microsoft Win32 SuspendThread function to suspend the operation of a running thread. Remarks The client thread calls this member function to suspend the operation.View threads in the Visual Studio debugger (C#, Visual Basic, C++) The Threads window in the Visual Studio debugger lets you examine and work with threads in the application you're debugging. In native code, you can suspend or resume threads by calling the Windows functions SuspendThread and ResumeThread. You can also call the MFC functions."
335,SetFileAttributesW,"Microsoft Build · May 19 – 22, 2025SetFileAttributesW function (fileapi.h) Sets the attributes for a file or directory. To perform this operation as a transacted operation, use the SetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file whose attributes are to be set. Note The fileapi.h header defines SetFileAttributes as an alias that.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit....For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. SetFileApisToOEM Causes the file I/O functions for the process to use the OEM character set code page..We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path names. Best Regards, Molly.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:....reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW,.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,."
336,GetLocalTime,"Microsoft Build · May 19 – 22, 2025The GetLocalTime function is used to retrieve the current local date and time based on the system's current time-zone settings. When you call this function, it converts the system time to local time and copies the result into a SYSTEMTIME structure.Here’s a basic outline of how to use the GetLocalTime function:Here is a simple example in C++:In this example, GetLocalTime fills the SYSTEMTIME structure st with the current local time, which is then printed to the console.References:GetLocalTime function (sysinfoapi.h) Retrieves the current local date and time. To retrieve the current date and time in Coordinated Universal Time (UTC) format, use the GetSystemTime function. Syntax Parameters [out] lpSystemTime A pointer to a SYSTEMTIME structure to receive the current local date and time. Requirements Requirement Value Minimum.To support boundaries for daylight saving time that change from year to year, use the GetTimeZoneInformationForYear, GetDynamicTimeZoneInformation and SetDynamicTimeZoneInformation functions. To retrieve the local time, use the GetLocalTime function. GetLocalTime converts the system time to a local time based on the current time-zone settings and.GetSystemT... To retrieve the current system date and time in local time, use the GetLocalTime function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header sysinfoapi.h (include Windows.h).GetDynamicTimeZoneInformationEffectiveYears Retrieves a range, expressed in years, for which a DYNAMIC_TIME_ZONE_INFORMATION has valid entries. GetLocalTime Retrieves the current local date and time. GetTimeZoneInformation Retrieves the current time zone settings. GetTimeZoneInformationForYear Retrieves the time zone settings for the specified.When I use GetLocalTime in server 2019, the time difference is always about 15ms, while in other systems, such as win10 or server2012, the time difference can be accurate to 1ms. What's the reason?| Have a look at the https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime ... When I use.SYSTEMTIME structure (minwinbase.h) Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. Examples The following example demonstrates the difference between the time values retrieved by the GetSystemTime and GetLocalTime functions. Requirements Requirement V... The time is.sysinfoapi.h header This header is used by multiple technologies. For more information, see: System Services Windows Sidebar sysinfoapi.h contains the following programming interfaces: Functions EnumSystemFirmwareTables Enumerates all syste... GetIntegratedDisplaySize Retrieves the best estimate of the diagonal size of the built-in screen, in.Hello Everybody. Is here way how can i chan... Thanks for answare. include &lt;windows.h&gt; include &lt;stdio.h&gt; void main() { SYSTEMTIME st, lt; GetLocalTime(&amp;lt); lt.wHour--; SetLocalTime(&amp;lt); }| You must enable the SE_SYSTEMTIME_NAME privilege, as said in the doc. Hello Everybody. Thanks for answare. include &lt;windows.h&gt;.SetLocalTime function (sysinfoapi.h) Sets the current local time and date. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header sysinfoapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See.Deprecated as obsolete in Visual Studio 2015 Obsolete function Alternative is_wctype iswctype _loaddll LoadLibrary, LoadLibraryEx, or LoadPackagedLibrary _unloaddll FreeLibrary _getdllprocaddr GetProcAddress _seterrormode SetErrorMode _beep Beep _sleep Sleep _getsystime GetLocalTime _setsystime SetLocalTime Removed from the CRT in Visual Studio."
337,IsWindowEnabled,"Microsoft Build · May 19 – 22, 2025IsWindowEnabled function (winuser.h) Determines whether the specified window is enabled for mouse and keyboard input. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the window is enabled, the return value is nonzero. If the window is not enabled, the return value is zero. Remarks A child.An application can specify the WS_DISABLED style, however, to disable a new window. The system sends a WM_ENABLE message to a window when its enabled state is about to change. An application can determine whether a window is enabled by using the IsWindowEnabled function. By default, the CreateWindowEx function creates a hidden window unless the.CWindow::IsParentDialog Determines if the parent window of a control is a dialog window. CWindow::IsWindowEnabled Determines whether the window is enabled for input. CWindow::IsWindowUnicode Determines whether the specified window is a native Unicode window. Remarks See IsDlgButtonChecked in the Windows SDK. Example CWindow::IsWindowEnabled.COleControlSite::IsDefaultButton Determines if the control is the default button in the window. COleControlSite::IsWindowEnabled Checks the visible state of the control site. COleControlSite::SetDlgCtrlID Retrieves the identifier of the control. Public Data Members Name Descr... Return Value Nonzero if the control is the default button on the.CWn... CWnd::IsDynamicLayoutEnabled Determines whether dynamic layout is enabled on this window. CWnd::IsIconic Determines whether CWnd is minimized (iconic). CWnd::IsWindowEnabled Determines whether the window is enabled for mouse and keyboard input. CWnd::IsWindowVisible Determines whether the window is visible. CWnd::IsZoomed Determines whether.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. The Keyboard and Mouse Input technology is not associated with any headersGetRegisteredRawInputDevices Retrieves the information about the raw input devices for the current application. IsWindowEnabled Determines whether the specified window is enabled for mouse and.A doub... The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. IsWindowEnabled Determines whether the specified window is enabled for mouse and keyboard input. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except.Name Type Description canApplyUpdates boolean If updates can be applied. isRegionReady boolean Indicates if the region is ready to configure maintenance windows. isWindowActive boolean If maintenance window is active. isWindowEnabled boolean If maintenance window is enabled on this cluster. lastWindowEndTimeUTC string (date-time) Last window end.ManagedMaintenanceWindowStatus.IsWindowEnabled Property Definition Namespace: Azure.ResourceManager.ServiceFabricManagedClusters.Models Assembly:Azure.ResourceManager.ServiceFabricManagedClusters.dll Package:Azure.ResourceManager.ServiceFabricManagedClusters v1.2.0 Package:Azure.ResourceManager.ServiceFabricManagedClusters v1.3.0-beta.2.Keyboard Input Reference Contains the API reference. Functions Name Description ActivateKeyboardLayout Sets the input locale... The status specifies whether the key is up, down, or toggled (on, off alternating each time the key is pressed). GetLastInputInfo Retrieves the time of the last input event. IsWindowEnabled Determines whether the."
338,ExcludeUpdateRgn,"Microsoft Build · May 19 – 22, 2025ExcludeUpdateRgn function (winuser.h) The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region. Syntax Parameters [in] hDC Handle to the device context associated with the clipping region. [in] hWnd Handle to the window to update. Return value The return.Excluding the Update Region The ExcludeUpdateRgn function excludes the update region from the clipping region for the display device context. This function is useful when drawing in a window other than when a WM_PAINT message is processing. It prevents drawing in the areas that will be updated during the next WM_PAINT message. The ExcludeUpdateRgn.Escape calls made by an application are translated and sent to the device driver. CDC::ExcludeClipRect Creates a new clipping region that consists of the existing clipping region minus the specified rectangle. CDC::ExcludeUpdateRgn Prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for p... EndPaint Marks the end of painting in a window. ExcludeUpdateRgn Prevents drawing within invalid areas of a window. GdiFlush Flushes the calling thread's current batch. WindowFromDC Returns a handle.EnumWindows Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-d... The function passes the name of each window station, in turn, to an application-defined callback function. The function passes the name of each window station, in turn, to an application-defined callback function..To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. ExcludeClipRect Th....UpdateWindow function (win... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced in.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced in Windows 8) See also BeginPaint.MFC ActiveX Controls: Painting an ActiveX Control This article describes the ActiveX control painting process and how you can alter paint code to optimize the process. These include CPale... Functions that are not recorded in a metafile are: DrawFocusRect, DrawIcon, DrawText, ExcludeUpdateRgn, FillRect, FrameRect, GrayString, InvertRect, ScrollDC,."
339,MoveToEx,"Microsoft Build · May 19 – 22, 2025MoveToEx function (wingdi.h) The MoveToEx function updates the current position to the specified point and optionally returns the previous position. Syntax Parameters [in] hdc Handle to a device context. [in] x Specifies the x-coordinate, in logical units, of the new position, in logical units. [in] y Specifies the y-coordinate, in logi... The.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.3.2.2.6 EMR_MOVETOEX Example This section provides an example of the EMF EMR_MOVETOEX record ([MS-EMF] section 2.3.11.4). 00000110:1B 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001B) Size (0x00000010) Offset (0x0000000000000000). Type (4 bytes): 0x0000001B identifies.EMRLINETO structure (wingdi.h) The EMRLINETO and EMRMOVETOEX structures contains members for the LineTo and MoveToEx enhanced metafile records. Syntax Members emr Base structure for all record types. ptl Coordinates of the line's ending point for the LineTo function or coordinates of the new current position for the MoveToEx function in logical.3.2.6.6 EMR_MOVETOEX Example This section provides an example of the EMR_MOVETOEX record ([MS-EMF] section 2.3.11.4). 00064BD0:                        1B 00 00 00 10 00 00 00 00064BE0:00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001B) Size (0x00000010) Offset (0x0000000000000000). This.BeginPath function (wingdi.h) The BeginPath function opens a path bracket in the specified device context. AngleArc Arc ArcTo Chord CloseFigure Ellipse ExtTextOut LineTo MoveToEx Pie PolyBezier PolyBezierTo PolyDraw Polygon Polyline PolylineTo PolyPolygon PolyPolyline Rectangle RoundRect TextOut Examples For an example, see Using Paths..Remarks The CloseFigure function closes the figure by drawing a line from the current position to the first point of the figure (usually, the point specified by the most recent call to the MoveToEx function) and then connects the lines by using the line join style. Requirements Requirement Value Minimum supported client Windows 2000 Professional.InkDraw clearly has a dual responsibility. The Win32 MoveToEx and LineTo calls are made to draw line images on the GUI screen (using the device context handle kept in m_hDC). The ink data is also passed to the COPaper object for recording using the IPaper interface's InkDraw method. When m_b... InkStart sets it to TRUE to signal that a drawing.3.2.23 EMR_MOVETOEX Example 1 This section provides an example of the EMF EMR_MOVETOEX record ([MS-EMF] section 2.3.11.4). 00000180:             1B 00 00 00 10 00 00 00 00 00 00 00 00000190: 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001B) Size (0x00000010) Offset (0x00000000) ... (0x00000000) Type.3.2.54 EMR_MOVETOEX Example 2 This section provides an example of the EMF EMR_MOVETOEX record ([MS-EMF] section 2.3.11.4). 00000740:                                     1B 00 00 00 00000750: 10 00 00 00 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000001B) Size (0x00000010) Offset (0x00000000)."
340,GetForegroundWindow,"Microsoft Build · May 19 – 22, 2025GetForegroundWindow is a function in the Windows API that retrieves a handle to the foreground window, which is the window currently being interacted with by the user. This function is useful in programming for determining which window is active at any given time, allowing developers to manage window behavior or interactions based on user focus.In programming, you can use GetForegroundWindow to check if your application's window is the active one by comparing the handle returned by this function with the handle of your application window. This can help in scenarios where you need to ensure that your application is responding to user input or to manage interactions with other windows.References:GetForegroundWindow function (winuser.h) Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads. Syntax Return value Type: HWND The return value is a handle to the foreground.Syntax Return value Type: HWND The return value is the handle to the active window attached to the calling thread's message queue. Remarks To get the handle to the foreground window, you can use GetForegroundWindow. To get the window handle to the active window in the message queue for another thread, use GetGUIThreadInfo. Requirements Requirement.Use the GetForegroundWindow function to retrieve the handle to the window with which the user is currently working. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).CWnd::GetDescendantWindow Searc... CWnd::GetDesktopWindow Retrieves the Windows desktop window. CWnd::GetFont Retrieves the current font. CWnd::GetForegroundWindow Returns a pointer to the foreground window (the top-level window with which the user is currently working). CWnd::GetIcon Retrieves the handle to an icon. CWnd::GetNextWindow Returns.To retrieve a handle to the foreground window, use the GetForegroundWindow function. To check if your application window is the foreground window, compare the handle returned by GetForegroundWindow to that of your application window. An application sets the foreground window by using the SetForegroundWindow function. A process can set the.AdjustWindowRectEx Calculates the required size of the window rectangle, b... AdjustWindowRectExForDpi Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI. AllowSetForegroundWindow Enables the specified process to set the foreground window using the SetForegroundWindow.NET Matters Const in C#, Exception Filters, IWin32Window, and More Stephen Toub Welcome to .NET Matters. This new column will delve into the ins and outs of the Microsoft® .NET Framework, answering readers' questions on various topics rela... In Win32®, I know I can use the GetForegroundWindow function to get a handle to the window with which the.AdjustWindowRectEx Calculates the required size of the window rectangle, based on the desired size of the client rectangle. AllowSetForegroundWindow Enables the specified process to set the foreground window using the SetForegroundWindow function. AnimateWindow Enables you to produce special effects when showing or hiding windows..AllowSetForegroundWindow Enables the specified process to set the foreground window using the SetForegroundWindow function. AnimateWindow Enables you to produce special effects ... GetForegroundWindow Retrieves a handle to the foreground window (the window with which the user is currently working). SetForegroundWindow Brings the thread that.Please tell me how to programmatically force the use of the old print dialog in... Note: Using GetForegroundWindow() to get another application's window does not reproduce the issue. The window must be created by your application, then the print dialog will always be displayed in the new style. Note: Using GetForegroundWindow() to get another."
341,CreateEllipticRgn,"Microsoft Build · May 19 – 22, 2025CreateEllipticRgn function (wingdi.h) The CreateEllipticRgn function creates an elliptical region. Syntax Parameters [in] x1 Specifies the x-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse. [in] y1 Specifies the y-coordinate in logical units, of the upper-left corner of the bounding rectangle of the.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreateEllipticRgn Creates an elliptical region. CreateEllipticRgnIndirect Creates an elliptical region. CreatePolygonRgn Creates a polygonal region. CreatePolyPolygonRgn Creates.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases e....... CRgn::CopyRgn Sets a CRgn object so that it is a copy of a specified CRgn object. CRgn::CreateEllipticRgn Initializes a CRgn object with an elliptical region. CRgn::CreateEllipticRgnIndirect Initializes a CRgn object with an elliptical region defined by a RECT structure. CRgn::CreateFromData Creates a region from the given region and.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. CreateDisc....SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,.Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region....teSolidBrush DeleteObject DC CreateDC DeleteDC, ReleaseDC Enhanced metafile CreateEnhMetaFile DeleteEnhMetaFile Enhanced-metafile DC CreateEnhMetaFile CloseEnhMetaFile Font CreateFont, CreateFontIndirect DeleteObject Memory DC CreateCompatibleDC DeleteDC Metafile CreateMetaFile DeleteMetaFile Metafile DC CreateMetaFile CloseMetaFile Palette.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.CombineRgn function (wingdi.h) The CombineRgn function combines t... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also."
342,SetWindowPlacement,"Microsoft Build · May 19 – 22, 2025SetWindowPlacement function (winuser.h) Sets the show state and the restored, minimized, and maximized positions of the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [in] lpwndpl Type: const WINDOWPLACEMENT* A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions..Then use SetWindowPos to position and size the window to cover the monitor. However, a full-screen window covers the taskbar--for example, in Microsoft PowerPoint slide shows and games. To save, and later restore, the position of a window when an application exits, use the GetWindowPlacement and SetWindowPlacement functions. However, check that.An application can show (make visible) or hide a window by using the ShowWindow, SetWindowPos, DeferWindowPos, or SetWindowPlacement or SetWindowLong function. Size and Position Functions After creating a window, an application can set the window's size or position by calling one of several different functions, including SetWindowPlacement,.CWnd::GetWindowlessChildCount Returns ... CWnd::GetWindowPlacement Retrieves the show state and the normal (restored), minimized, and maximized positions of a window. CWnd::GetWindowRect Gets the screen coordinates of CWnd. CWnd::SetWindowContextHelpId Sets the help context identifier. CWnd::SetWindowPlacement Sets the show state and the normal.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized ... CWindow::SetWindowLongPtr Changes an attribute of the specified window, and also sets a value at the.SetForegroundWindow Puts the thread that created the specified window into the foreground and activates the window. SetWindowDisplayAffinity Stores the display affinity setting in kernel mode on the hWnd associated with the window. SetWindowPlacement Sets the show state and the restored, minimized, and maximized positions of the specified window..(ANSI) SetWindowLongPtrW Changes an attribute of the specified window. (Unicode) SetWindowLongW Changes an attribute of the specified window. (Unicode) SetWindowPlacement Sets the show state and the restored, minimized, and maximized positions of the specified window. SetWindowPos Changes the size, position, and Z order of a child, pop-up, or.WINDOWPLACEMENT structure (winuser.h) Contains information about the placement of a window on the screen. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include Windows.h) See also Conceptual GetWindowPlacement....rocessId InternalGetWindowText IsChild IsGUIThread IsHungAppWindow IsIconic IsProcessDPIAware IsWindow IsWindowUnicode IsWindowVisible IsZoomed LockSetForegroundWindow LogicalToPhysicalPoint MoveWindow OpenIcon PhysicalToLogicalPoint RealChildWindowFromPoint RealGetWindowClass RegisterShellHookWindow SetForegroundWindow....nu Retrieves the show state and the restored, minimized, and maximized positions of the specified windowRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library."
343,SendDlgItemMessageA,"Microsoft Build · May 19 – 22, 2025SendDlgItemMessageA function (winuser.h) Sends a message to the specified control in a dialog box. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box that contains the control. [in] nIDDlgItem Type: int The identifier of the control that receives the message. [in] Msg Type: UINT The message to be sent. Using SendDlgItemMessage is.ReplaceTextA Creates a system-defined mode... (Unicode) SelectionChange Called by PrintDlgEx when the user selects a different printer from the list of installed printers on the General page of the Print Property Sheet. SendDlgItemMessageA Sends a message to the specified control in a dialog box. (ANSI) SendDlgItemMessageW Sends a message to the.GetClipboardFormatNameA Retrieves from the ... GetCurrentInputMessageSource Retrieves the source of the input message. GetDC The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDCEx The GetDCEx function retrieves a handle to a. GetDlgItem Retrieves a handle to a."
344,_lcreat,"Microsoft Build · May 19 – 22, 2025Files In this section _lcreat _llseek _lwrite FSCTL_SRV_REQUEST_RESUME_KEY IOCTL_COPYCHUNK IOCTL_LMR_DISABLE_LOCAL_BUFFERING Master File Table NtCreateFile NtCancelIOFile NtCancelIOFileEX NtCreateNamedPipeFile NtOpenDirectoryObject NtOpenFile NtOpenSymbolicLinkObject NtQueryDirectoryObject NtQuerySymbolicLinkObject_lcreat function (winbase.h) [This function is provided for compatibility with 16-bit versions of Windows.Remarks If the file does not exist, _lcreat creates and opens a new file for writing.Use the _lcreat function with care.This handle is created by _lcreat. lpBuffer The buffer that contains the data to be added. uBytes The number of bytes to write to the file.This handle is created by _lcreat. lOffset The number of bytes that the file pointer is to be moved. iOrigin The starting point and the direction that the pointer will be moved._lcreat Creates or opens the specified file._lcreat Creates or opens the specified file."
345,PaintDesktop,"Microsoft Build · May 19 – 22, 2025PaintDesktop function (winuser.h) The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops. Syntax Parameters [in] hdc Handle to the device context. Requi... The PaintDesktop function fills the clipping region in the specified.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. ... It is used to draw a string. PaintDesktop Fills the clipping region in a device context with a pattern. RedrawWindow Updates a region in a window's client area. WindowFromDC Returns a handle.windowsu etkinleştir yazsının gitmesi için paintdesktopu açıp yeniden başlattım ve birisi bilgisayarmın bilgilerinin çalıncağını söyledi şuanda çok endişeliyim ne yapmam gerek?| Hello, &quot;PaintDesktop&quot; is just a Windows registry setting, usually used for debugging purposes, and it will not cause your computer information to be stolen. .BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BeginPaint The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting. BlockInput Blocks keyboard and mouse input events from reaching applications..Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the."
346,GetCharacterPlacementW,"Microsoft Build · May 19 – 22, 2025GetCharacterPlacementW function (wingdi.h) The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the dwFlags parameter and is based on the currently selected font in the specified.(Unicode) GetCharacterPlacementA The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. (ANSI) GetCharacterPlacementW The GetCharacterPlacement function retrieves information about a character string, such as character widths,.(Unicode) GetCharacterPlacementA The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. (ANSI) GetCharacterPlacementW The GetCharacterPlacement function retrieves information about a character string, such as character widths,."
347,WriteFmtUserTypeStg,"Microsoft Build · May 19 – 22, 2025WriteFmtUserTypeStg function (ole2.h) The WriteFmtUserTypeStg function writes a clipboard format and user type to the storage object. Syntax Parameters [in] pstg IStorage pointer to the storage object where the information is to be written. [in] cf Specifies the clipboard format that describes the structure of the native area of the storage.Unicode Considerations The WriteFmtUserTypeStg service function, used in the IPaper::Save method, requires Unicode string parameters. When compiling for ANSI strings, the expected Unicode parameters need conversion from ANSI to Unicode. When StoServe is compiled for ANSI (not for Unicode), this call actually reduces to a call to an internal.Because DllPaper deals with editable data, it is also appropriate to record a clipboard format in the storage. The WriteFmtUserTypeStg service function is called to store both a clipboard format designation and a user-readable name for the format. The user-readable name is meant for GUI display in selection lists. The name passed above uses a.ReadFmtUserTypeStg The ReadFmtUserTypeStg function returns the clipboard format and user type previously saved with the WriteFmtUserTypeStg function. SetConvertStg The SetConvertStg function sets the convert bit in a storage object to indicate that the object is to be converted to a new cl... The setting can be retrieved with a call to the.SetConvertStg function (ole2.h) The SetConvertStg function sets the convert bit in a storage object to indicate that the object is to be converted to a new class when it is opened. Call WriteFmtUserTypeStg to write the new user-type name and the existing main format to the storage. When the object is asked to save itself, the object should call.ReadFmtUserTypeStg function (ole2.h) The ReadFmtUserTypeStg function returns the clipboard format and user type previously saved with the WriteFmtUserTypeStg function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [deskt... The ReadFmtUserTypeStg.ReadFmtUserTypeStg The ReadFmtUserTypeStg function returns the clipboard format and user type previously saved with the WriteFmtUserTypeStg function. WriteClassStg The WriteClassStg function stores the specified class identifier (CLSID) in a storage object. WriteClassStm The WriteClassStm function stores the specified CLSID in the stream.....SetConvertStg StgConvertVariantToProperty StgCreateDocfile StgCreateDocfileOnILockBytes StgCreatePropSetStg StgCreatePropStg StgCreateStorageEx StgDeserializePropVariant StgGetIFillLockBytesOnFile StgGetIFillLockBytesOnILockBytes StgIsStorageFile StgIsStorageILockBytes StgOpenAsyncDocfileOnIFillLockBytes StgOpenLayoutDocfile StgOpenPropStg.Notes to Implementers An implementation of IPersistStorage::InitNew should initialize the object to its default state, taking the following steps: Pre-open a... Call AddRef and cache the storage pointer that is passed in. Call the WriteFmtUserTypeStg function to write the native clipboard format and user type string for the object to the storage."
348,CreateMutexA,"Microsoft Build · May 19 – 22, 2025CreateMutexA function (synchapi.h) Creates or opens a named or unnamed mutex object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista,.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. (Unicode) CreateEventW Creates or opens a named or unnamed event object. (Unicode) CreateMutexA.Find a sample for the API you're interested in You can use Microsoft Visual Studio to search an entire repo's source code to see whether the usage of a particular Windows API is being demonstrated. Be careful of checking Match whole word if the API can be called in various forms—for example, CreateMutex, CreateMutexA, and CreateMutexW. The Windows.Using Mutex Objects You can use a mutex object to protect a shared resource from simultaneous access by multiple threads or processes. The following example uses the CreateMutex function to create a mutex object and the CreateThread function to create worker threads. When a thread of this process writes to the database, it first requests.IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned.Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFinalPathNameByHandleA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-io-l1-1-0.dll in 10.0.16299. GetOverlappedResultEx Introduced into api-ms-win-core-io-l1-1-1.dll in 10.0.10240.."
349,WinExec,"Microsoft Build · May 19 – 22, 2025The WinExec function is an obsolete function in Windows that was used to execute a specified program. It is part of the Windows API and allows for launching applications. However, it has been replaced by more robust functions such as CreateProcess. The use of WinExec is discouraged in modern applications due to its limitations and the availability of better alternatives.References:WinExec function (winbase.h) Runs the specified application. Note  This function is provided only for compatibility with 16-bit Windows. Remarks The WinExec function returns when the started process calls the GetMessage function or a time-out limit is reached. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only].Shell Functions This section describes the Windows Shell functions. This dialog box allows the user to ... Note: Windows XP SP2 or later: This function is no longer supported. WinExecError Retrieves the error value generated if the WinExec function cannot run a specified application. WinHelp Launches Windows Help (Winhelp.exe) and passes.Executing Control Panel Items Note If you are looking for the list of canonical and module names for Control Panel items, see Canonical Names of Control Panel Items. An application can open the Control Panel programmatically by using the WinExec function. The following example shows how an application can start the Control Panel item named.ShellExecute, ShellExecuteEx, and Related Functions There are several Shell functions that you can use to launch applications: ShellExecute, ShellExecuteEx, WinExec, and SHCreateProcessAsUserW. Feature Mitigation ShellExecute, ShellExecuteEx Searches ... Related topics Microsoft Security Security Developer Center Microsoft Solution Accelerators.UmsThreadYield Yields control to the user-mode scheduling (UMS) scheduler thread on which the calling UMS worker thread is running. UnregisterWait Cancels a registered wait operation issued by the RegisterWaitForSingleObject function. (UnregisterWait) WinExec Runs the specified application. WriteTapemark Writes a specified number of filemarks,.Im trying to configure a badge printer into my local workstation. However, when i tried to setup the message shows; &quot;WinExec Error #0 - WinExec(IDSETUP.EXE -KEY 14)&quot. Im trying to configure a badge printer into my local workstation. However, when i tried to setup the message shows; &quot;WinExec Error #0 - WinExec(IDSETUP.EXE -KEY.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.Hi everybody, first at ... I’ve developed an application to graph mathematical functions and expressions. This application has been developed using Visual C++ ’22 in a Windows 10 environment. Many thanks to read my question.| Hi brickoff , I created an MFC program that successfully calls another .exe file in a .cpp using WinExec(). Sample code is.UmsSchedulerProc The application-defined UMS scheduler entr... UmsThreadYield Yields control to the UMS scheduler thread on which the calling UMS worker thread is running. Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess NtQueryInformationThread WinExec ZwQueryInformationProcess Feedback Was this page helpful. Yes No.The IShellExecuteHook Interface IShellExecuteHook is a rather simple COM interface introduced with Internet Explorer 4.01 on all Win32Â®-based platforms except Windows CE. There is just one case in which it doesn't work: when you run a script through a direct call to CreateProcess or WinExec. IShellExecuteHook has just one metho... The prototype."
350,CoGetMarshalSizeMax,"Microsoft Build · May 19 – 22, 2025CoGetMarshalSizeMax function (combaseapi.h) Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object. Syntax Parameters [out] pulSize A pointer to the upper-bound value on the size, in bytes, of the data packet to be written to the marshaling stream. Requirements Requirement Value.CoGetMalloc Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. CoGetMarshalSizeMax Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object. CoGetObject.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).IMarshal::GetMarshalSizeMax method (objidl.h) Retrieves the maximum size of the buffer that will be needed during marshaling. Remarks This method is called indirectly, in a call to CoGetMarshalSizeMax, by whatever code in the server process is responsible for marshaling a pointer to an interface on an object. Notes to Callers The marshaling stub,.... CoGetMalloc Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. CoGetMarshalSizeMax Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object..MSHCTX enumeration (wtypesbase.h) Specifies the destination context, which is the process in which the unmarshaling is to be done. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wtypesbase.h (include WTypes.h) See also.CoGetInterfaceAndReleaseStr... CoGetMalloc Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory. CoGetMarshalSizeMax Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the.The stub's call to CoMarshalInterface is normally preceded by a call to CoGetMarshalSizeMax to get the maximum size of the stream buffer into which the marshaling data will be written. Your stub implementation should cal... Because the value returned by GetMarshalSizeMax is guaranteed to be valid only as long as the internal state of the object.The stub's call to CoMarshalInterface is normally preceded by a call to CoGetMarshalSizeMax to get the maximum size of the stream buffer into which the marshaling data will be written. Your stub implementation should cal... Because the value returned by GetMarshalSizeMax is guaranteed to be valid only as long as the internal state of the object.NdrInterfacePointerBufferSize function (rpcndr.h) The NdrInterfacePointerBufferSize function calculates the size of the buffer, in bytes, needed to marshal the interface pointer. In addition, the function can throw exception codes from CoGetMarshalSizeMax. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop."
351,GetDiskFreeSpaceW,"Microsoft Build · May 19 – 22, 2025GetDiskFreeSpaceW function (fileapi.h) Retrieves information about the specified disk, including the amount of free space on the disk. Syntax Parameters [in] lpRootPathName The root directory of the disk for which information is to be returned. If this parameter is NULL, the function uses the root of the current disk. If this parameter is a UNC.Moved into api-ms-win-cor... Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. GetFileAttributesExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into.(Unicode) GetDiskFreeSpaceA Retrieves information about the specified disk, including the amount of free space on the disk. (ANSI) GetDiskFreeSpaceExA Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
352,UnloadKeyboardLayout,"Microsoft Build · May 19 – 22, 2025UnloadKeyboardLayout function (winuser.h) Unloads an input locale identifier (formerly called a keyboard layout). Syntax Parameters [in] hkl Type: HKL The input locale identifier to be unloaded. Return value Type: BOOL If the function succeeds, the return value is nonzero. The function can fail for the following reasons: An invalid input locale.LoadKeyboardLayoutA function (winuser.h) Loads a new input locale identifier (formerly called the keyboard layout) into the system. KLF_UNLOADPREVIOUS This flag is unsupported. Use the UnloadKeyboardLayout function instead. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. The Keyboard and Mouse Input technology is not associated with any headers. (ToUnicodeEx) TrackMouseEvent Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. UnloadKeyboardLayout Unloads an input locale identifier.Use the UnloadKeyboardLayout function instead. Return value Type: HKL The return value is of type HKL. If the function succeeds, the return value is the previous input locale identifier. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.LoadKeyboardLayoutW function (winuser.h) Loads a new input locale identifier (formerly called the keyboard layout) into the system. LoadKeyboardLayout always activates an input... KLF_UNLOADPREVIOUS This flag is unsupported. Use the UnloadKeyboardLayout function instead. Return value Type: HKL If the function succeeds, the return value is the.To specify a handle to the keyboard layout to use to translate the specified code, use the ToUnicodeEx function. ToUnicodeEx Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. UnloadKeyboardLayout Unloads an input locale identifier (formerly called a keyboard layout). UnregisterHotKey.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also ActivateKeyboardLayout Conceptual Keyboard Input LoadKeyboardLayout Reference.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also ActivateKeyboardLayout Conceptual Keyboard Input LoadKeyboardLayout Reference.If an applica... The GetKeyboardLayout function, however, can be used to determine the input language. The LoadKeyboardLayout function loads a keyboard layout and makes the layout available to the user. For multilingual support, the LoadKeyboardLayout function provides the KLF_REPLACELANG and KLF_NOTELLSHELL flags. The UnloadKeyboardLayout.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey."
353,SetWindowTextW,"Microsoft Build · May 19 – 22, 2025SetWindowTextW function (winuser.h) Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application. Syntax Parameters [in] hWnd Type: HWND A handle to the window or control whose text is.Working with Strings This topic explains how Windows supports Unicode strings for UI elements, file names, and so on (Unicode is the preferred character encoding because it supports all character sets and languages). ... SetWindowTextW takes a Unicode string. The function is documented under the name SetWindowText, even though that is really the....PCWSTR It works fine in regular c++ and older versions, but only in VS2022 and 2019 it shows up here's the code: static std::string title; title.push_back((char)wParam); SetWindowText(hWnd, title.c_str()); Is there any way to fix this?| It is more likely that the error message relates to the call to SetWindowTextThe mention of LPCWSTR (a.(Unicod... SetWindowPos Changes the size, position, and Z order of a child, pop-up, or top-level window. (Unicode) SetWindowTextA Changes the text of the specified window's title bar (if it has one). However, SetWindowText cannot change the text of a control in another application. (ANSI) SetWindowTextW Changes the text of the specified window's.I created a office style MFC application in VS2015. I need change the title of main window. I tried by SetWindowTextW, but it doesn't seams to work. It doesn't work. void CMainFrame::OnButton2() { SetWindowTextW(_T(&quot;This is my title&quot;)); }| Lets try a different approach. In an Office style MFC SDI application (error checking omitted) ....Hi, I'm developping a little MFC project to drive an Arduino board. My code: The problem is I expected &quot;Connecté&quot; but it appears &quot;Connect Ã ©&quot; The function SetWindowTextW expects a LPCTSTR. The garbage text comes when I call SetWindowTextW (idem with SetWindowText). The garbage text comes when I call SetWindowTextW (idem with.... Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell....ed external symbol __imp_GetDeviceGammaRamp referenced in function _glfwPlatformGetGammaRamp 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_SetDeviceGammaRamp referenced in function _glfwPlatformSetGammaRamp 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_GetDC referenced."
354,OpenClipboard,"Microsoft Build · May 19 – 22, 2025The OpenClipboard function is a Windows API function that opens the clipboard for examination and prevents other applications from modifying the clipboard content while it is open. This function is essential in clipboard operations, as it ensures that the clipboard can be accessed safely by the application that needs to read or write data.When using OpenClipboard, an application typically follows these steps:This sequence ensures that clipboard data remains consistent and prevents conflicts between multiple applications trying to access the clipboard simultaneously.References:OpenClipboard function (winuser.h) Opens the clipboard for examination and prevents other applications from modifying the clipboard content. Syntax Parameters [in, optional] hWndNewOwner Type: HWND A handle to the window to be associated with the open clipboard. If this parameter is NULL, the open clipboard is associated with the current task..This function does the following: Opens the clipboard by calling the OpenClipboard function. Empties the clipboard by calling the EmptyClipboard function. Calls the SetClipboardData function once for each clipboard format the application provides. Closes the clipboard by calling the CloseClipboard function. Pasting Information from the.GetOpenClipboardWindow function (winuser.h) Retrieves the handle to the window that currently has the clipboard open. Syntax Return value Type: HWND If the function succeeds, the return value is the handle to the window that has the clipboard open. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.Remarks Before calling EmptyClipboard, an application must open the clipboard by using the OpenClipboard function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).Clipboard Operations A window should use the clipboard when cutting, copying, or pasting data. A window places data on the clipboard for cut and copy operations and retrieves data from the clipboard for paste operations. To place data on or retrieve data from the clipboard, a window must first open the clipboard by using the OpenClipboard.EnumClipboardFormats function (winuser.h) Enumerates the data formats currently available on the clipboard. Use the OpenClipboard function to open the clipboard. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. OpenClipboard Opens the clipboard for examinat... The window must be the current clipboard owner, and the application must have called.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats....dData fu will not return a valid HGLOBAL even though a clipboard format has been enumerated.| I copy different content，and openClipboard。The Remarks section of the documentation for OpenClipboard states &quot; OpenClipboard fails if another window has the clipboard open.&quot; If the function fails you can call the GetOpenClipboardWindow.Remarks When responding to a WM_RENDERALLFORMATS message, the application must call the OpenClipboard function and then check that it is still the clipboard owner by calling the GetClipboardOwner function before calling SetClipboardData. The application needs to check that it is still the clipboard owner after opening the clipboard because after."
355,GetTempFileNameW,"Microsoft Build · May 19 – 22, 2025GetTempFileNameW function (fileapi.h) Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated. Syntax Parameters [in] lpPathName The directory path for the file name. Applications typically specify a period (.) for the current.GetFileType Introduced into... GetFullPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetLongPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetTempFileNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetTempPathW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240..For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (Unicode) GetShortPathNam... (GetShortPathNameW) GetTempFileNameA Creates a name for a temporary file..To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technol.......Client: WebClient(06E53FF8): Download attempt #1 (max 10) 07/14/2021 14:38:26.000 WebClient: WebClient(06E5 BeginDownloadAttempt: using BITS 07/14/2021 14:38:30.146 Chk: !ERROR! (0x80004005) (webclient.cpp:963) ERROR: &quot;&quot; failed with 0x80004005 in . 07/14/2021 14:38:30.162 WebClient: WebClient(06E53FF8): BITS temporary."
356,SetWindowOrgEx,"Microsoft Build · May 19 – 22, 2025SetWindowOrgEx function (wingdi.h) The SetWindowOrgEx function specifies which window point maps to the viewport origin (0,0). Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical units, of the new window origin. [in] y The y-coordinate, in logical units, of the new window origin. [out] lppt A pointer to a.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. SetWindowExtEx Sets the hor... SetWindowOrgEx Specifies which window point maps to the viewport origin (0,0). SetWorldTransform Sets a two-dimensional linear transformation between world space and page space for the specified.2.3.11.31 EMR_SETWINDOWORGEX Record The EMR_SETWINDOWORGEX record defines the window origin. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Origin. Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETWINDOWORGEX. Origin (8 bytes): A PointL object ([MS... The EMR_SETWINDOWORGEX record defines.SetViewportOrgEx function (wingdi.h) The SetViewportOrgEx function specifies which device point maps to the window origin (0,0). This is related to the SetWindowOrgEx function. ... 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and.These values are specified in the Type fields of EMF records (section 2.3). typedef  enum { EMR_HEADER = 0x00000001, EMR_POLYBEZIER = 0x00000002, EMR_POLYGON = 0x00000003, EMR_POLYLINE = 0x00000004, EMR_POLYBEZIERTO = 0x00000005, EMR_POLYLINETO = 0x00000006, EMR_POLYPOLYLINE = 0x00000007, EMR_POLYPOLYGON = 0x00000008, EMR_SETWINDOWEXTEX =.EMRSETVIEWPORTORGEX structure (wingdi.h) The EMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, and EMRSETBRUSHORGEX structures contain members for the SetViewportOrgEx, SetWindowOrgEx, and SetBrushOrgEx enhanced metafile records. Requirements Requirement Value Minimum supporte... The EMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, and EMRSETBRUSHORGEX structures.SetMapMode function (wingdi.h) The SetMapMode function sets the mapp... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also....Rgn LineToMoveToEx OffsetClipRgn OffsetViewpor OffsetWindowOrgEx PaintRgn PatBlt Pie Polygon Polyline PolyPolygon RealizePalette Rectangle ResizePalette RestoreDC RoundRect SaveDC ScaleViewportExtEx ScaleWindowExtEx SelectClipRgn SelectObject SelectPaletteSetBkColor SetBkMode SetDIBitsToDevice SetMapMode SetMapperFlags SetPaletteEntries.Mapping Modes and Translations The mapping modes are described in the following table. The window and ... Set the window and viewport origins by using the SetWindowOrgEx and SetViewportOrgEx functions. The origins are independent of the extents, and an application can set them regardless of the current mapping mode. Changing a mapping mode does."
357,TranslateAcceleratorA,"Microsoft Build · May 19 – 22, 2025TranslateAcceleratorA function (winuser.h) Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window.TrackPopupMenuEx Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen. TranslateAcceleratorA Processes accelerator keys for menu commands. (ANSI) TranslateAcceleratorW Processes accelerator keys for menu commands. (Unicode) UpdateResourceA.If you want the parent window hosting your extension not to bother showing its own help (since you'll be handling it), set the parameter of this method to false. If you don't, your user will see two help screens, which would be no help at all. long TranslateAcceleratorA My extension doesn't worry about special accelerator keys, so I return S_FALSE.CopyAcceleratorTableA Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table... (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. This function is used to obtain the accelerator-table."
358,GetLogicalDrives,"Microsoft Build · May 19 – 22, 2025Directory.GetLogicalDrives Method Definition Namespace: System.IO Assemblies:netstandard.dll, System.Runtime.dll Assemblies:netstandard.dll, System.IO.FileSystem.dll Assemblies:netstandard.dll, System.IO.FileSystem.dll, System.Runtime.dll Assembly:System.IO.FileSystem.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:Directory.cs.GetLogicalDrives function (fileapi.h) Retrieves a bitmask representing the currently available disk drives. Syntax Return value If the function succeeds, the return value is a bitmask representing the currently available disk drives. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported....ce:Environment.U Retrieves the names of the logical drivesRemarks On Windows, GetLogicalDrives returns the names of all accessible drives on a particular machine, including any optical drives or removable media devices, in the form "":\"" (for example, ""C:\""). On Unix, it returns the paths of all filesystem mount points mounted on a particular.Directory.GetLogicalDrives Method Definition Namespace: Microsoft.IO Assembly:Microsoft.IO.Redist.dll Package:Microsoft.IO.Redist v6.1.3 Returns String[] Applies to. Learn more about the Microsoft.IO.Directory.GetLogicalDrives in the Microsoft.IO namespace.. /dotnet/api/microsoft.io.directory.getlogicaldrives.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. (ANSI) GetFullPathNameW Retrieves the full path and... (Unicode) GetLogicalDrives Retrieves a bitmask representing the currently available disk drives..C++ Q&A Get Logical Drives with VolInfo, Modifying the System Menu Paul DiLascia Code download available at: CQA0401.exe (127 KB) Browse the Code Online Q I'm trying to write an MFC program that lists the disk drives on the system (C:, D:, and so on). ... MFC class for that information, but Microsoft® Windows® has a volume management.To ensure that your application works with large capacity hard drives, use the GetDiskFreeSpaceEx function. The GetDriveType function indicates whether the volume referenced by the specified drive letter is a removable, fixed, CD-ROM, RAM, or network drive. The GetLogicalDrives function identifies the volumes present. The GetLogicalDriveStrings.Volume Management Functions Functions used in volume management. GetDriveType Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. GetLogicalDrives Retrieves a bitmask representing the currently available disk drives. GetLogicalDriveStrings Fills a buffer with strings that specify valid drives in the system..This can affect applications that call one of the WNet functions to create a network drive letter under one user logon, but query ... An example of this situation could be when a user's second logon is created within a logon session, for example, by calling the CreateProcessAsUser function, and the second logon runs an application that calls the.Windows Server 2003 and Windows XP:  This function queries the MS-DOS device namespaces associated with a logon session because MS-DOS devices are identified b... An example of this situation could be when a user's second logon is created within a logon session, for example, by calling the CreateProcessAsUser function, and the second logon runs an."
359,CharLowerA,"Microsoft Build · May 19 – 22, 2025CharLowerA function (winuser.h) Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar,.(Unicode) ChangeWindowMessageFilter Adds or removes a message from the User Interface Privilege Isolation (UIPI) message filter. ChangeWindowMessageFilterEx Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window. CharLowerA Converts a character string or a single character to lowercase. If the operand is a."
360,GetProcessVersion,"Microsoft Build · May 19 – 22, 2025GetProcessVersion function (processthreadsapi.h) Retrieves the major and minor version numbers of the system on which the specified process expects to run. Syntax Parameters [in] ProcessId The process identifier of the process of interest. A value of zero specifies the calling process. Requirements Requirement Value Mi... Retrieves the major and.Obtaining Additional Process Information There are a variety of functions for obtaining information about processes. To retrieve the ST... To obtain the version information from the executable header, use the GetProcessVersion function. To obtain the full path and file name for the executable file containing the process code, use the.GetProcessShutdownParameters Retrieves shutdown parameters for the currently calling process. GetProcessTimes Retrieves timing information about for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. GetProcessWorkingSetSize Retrieves the minimum and.Win32_Process class The Win32_Process WMI class represents a process on an operating system. VirtualSize Data type: uint64 Access type: Read-only Qualifiers: MappingStrings (""Win32API|Process Status|SYSTEM_PROCESS_INFORMATION|Virtua... WindowsVersion Data type: string Access type: Read-only Qualifiers: MappingStrings (""Win32API|Process and Thread.GetProcessTimes Retrieves timing information for t... GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. GetStartupInfoW Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created. (Unicode) THREAD_POWER_THROTTLING_STATE.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsa... GetProcessTimes Retrieves timing information for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the."
361,UnregisterClassA,"Microsoft Build · May 19 – 22, 2025UnregisterClassA function (winuser.h) Unregisters a window class, freeing the memory required for the class. Syntax Parameters [in] lpClassName Type: LPCTSTR A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or.SystemParametersInfoA Retrieves or sets the value of one of the system-wide parameters. UnhookWindowsHookEx Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. UnregisterClassA Unregisters a window class, freeing the memory required for the class. (ANSI) UnregisterClassW Unregisters a window class, freeing the.(Unicode) CreateWindowStationA ... (ANSI) CreateWindowStationW Creates a window station object, associates it with. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu. DeregisterShellHookWindow Unregisters a specified Shell window that is registered to."
362,GetClassNameW,"Microsoft Build · May 19 – 22, 2025GetClassNameW function (winuser.h) Retrieves the name of the class to which the specified window belongs. Syntax Parameters [in] hWnd Type: HWND A handle to the window and, indirectly, the class to which the window belongs. [out] lpClassName Type: LPTSTR The class name string. [in] nMaxCount Type: int The length of the lpClassName buffer, in.(Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which th... (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW).(ANSI) Get... (Unicode) GetClassLongW Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which the."
363,GetFileAttributesW,"Microsoft Build · May 19 – 22, 2025GetFileAttributesW function (fileapi.h) Retrieves file system attributes for a specified file or directory. To get more attribute information, use the GetFileAttributesEx function. To perform this operation as a transacted operation, use the GetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file or directory.....allDriver+0x59 mup!MupiCallUncProvider+0xb8 mup!MupStateMachine+0x59 mup!MupCreate+0x1cf ntoskrnl!IofCallDriver+0x59 fltMgr!FltpLegacyProcessingAfterPreCallbacksCompleted+0x15e fltMgr!FltpCreate+0x307 ntoskrnl!IoCallDriverWithTracing+0x34 ntoskrnl!IopParseDevice+0x62b ntoskrnl!ObpLookupObjectName+0x78f ntoskrnl!ObOpenObjectByNameEx+0x201.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,....reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW,....pLookupObjectName+0xac1 ffffd18b 47ec8f45 : 00001000 0778ed60 00000000 0778ed90 : nt!ObOpenObjectByNameEx+0x1f1 ffffd18b 47c2a275 : ffffae0a 00ad1220 ffffae0a 00000001 : nt!NtQueryAttributesFile+0x1c5 ffffd18b 963046b4 : 00007ffb 00730061 0069006e 006f0001 : nt!KiSystemServiceCopyEnd+0x25 00000000 938c4c75 : 005c0065 0069006d.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CompareFileTime Compares two file times. (ANSI) CreateDirectory2W Creates a new directory..These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for thi...."
364,FoldStringW,"Microsoft Build · May 19 – 22, 2025FoldStringW function (stringapiset.h) Maps one Unicode string to another, performing the specified transformation. For an overview of the use of the string functions, see Strings. Caution  Using FoldString incorrectly can compromise the security of your application. Strings that are not mapped correctly can produce invalid input. Test strings to.stringapiset.h header This header is used by Internationalization for Windows Applications. CompareStringW The CompareStringW (Unicode) function (stringapiset.h) compares two character strings, for a locale specified by identifier. FoldStringW Maps one Unicode string to another, performing the specified transformation. (FoldStringW).FindNLSString... Note  For interoperability reasons, the application should prefer the FindNLSStringEx function because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. FoldStringA Maps one Unicode string to another, performing the specified transformation. (FoldStringA) FoldStringW Maps one."
365,SetComputerNameW,"Microsoft Build · May 19 – 22, 2025SetComputerNameW function (sysinfoapi.h) Sets a new NetBIOS name for the local computer. The name is stored in the registry and the name change takes effect the next time the user restarts the computer. If the local computer is a node in a cluster, SetComputerName sets NetBIOS name of the local computer, not that of the cluster virtual server. To.sysinfoapi.h header This header is used by multiple technologies. For more information, see: System Services Windows Sidebar sysinfoapi.h contains the following programming interfaces: Functions EnumSyst... SetComputerNameA Sets a new NetBIOS name for the local computer. (ANSI) SetComputerNameExA Sets a new NetBIOS or DNS name for the local.Hi, I have a software that need to protect on offline machines. When UAC is enabled the batch file ... You can remove the need for a batch file by using P/Invoke to call the Windows API function SetComputerNameW. Adminstrator privileges are still required so your application needs to run with elevated privilege or use ShellExecute to start an."
366,GetEnhMetaFileA,"Microsoft Build · May 19 – 22, 2025GetEnhMetaFileA function (wingdi.h) The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file. Syntax Parameters [in] lpName A pointer to a null-terminated string that specifies the name of an enhanced metafile. ... no longer needs an enhanced-metafile handle, it should delete the.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. ENHMFENUMPROC The.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc....FontW, CreateFontIndirectA, CreateFontIndirectW metafile CreateMetaFileA, CreateMeta CreateEnhMetaFileA, CreateEnhMetaFileW, GetEnhMetaFileA, GetEnhMetaFileW,Figure 7 Functions that Free GDI Objects Object Type API Functions to Free Handles Display context DeleteDC Metafile DeleteMetaFile CloseMetaFile Enhanced Metafile DeleteEnhMetaFile."
367,GetDiskFreeSpaceExA,"Microsoft Build · May 19 – 22, 2025GetDiskFreeSpaceExA function (fileapi.h) Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. Syntax Parameters [in, optional] lpDirectoryName A.FindNextFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExA I... FindFirstFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393..(ANSI) GetDiskFreeSpaceExA Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. ...t of space, the total amount of free space, and the total amount.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
368,GetSystemMenu,"Microsoft Build · May 19 – 22, 2025GetSystemMenu function (winuser.h) Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying. Syntax Parameters [in] hWnd Type: HWND A handle to the window that will own a copy of the window menu. [in] bRevert Type: BOOL The action to be taken. If this... Enables the application.CWnd::GetNextDlgTabI... CWnd::GetScrollRange Copies the current minimum and maximum scroll-bar positions for the given scroll bar. CWnd::GetStyle Returns the current window style. CWnd::GetSystemMenu Allows the application to access the Control menu for copying and modification. CWnd::GetTitleBarInfo Retrieves information about the specified title.CWindow::GetNextDlgGroupItem Retrieves the previous or next control wit... CWindow::GetStyle Retrieves the window styles. CWindow::GetSystemMenu Creates a copy of the system menu for modification. CWindow::GetTopLevelParent Retrieves the top-level parent or owner window. CWindow::HideCaret Hides the system caret. Remarks To retrieve the extended.Control has Control.ContextMenu for the context menu, and Form has Form.Menu for the main Menu, but there's no SystemMenu or any other property to access the system menu directly using Menu. Figure 5 SysMenu Figure 6** Modified System Menu ** To use GetSystemMenu, first declare it the interop way, using DllImport. For SysMenu, you actually need.This menu is called the system menu and has commands like Restore, Minimize, Maximize, and Close. Figure 1** Sys Menu ** You can call ::GetSystemMenu to get the system menu, then modify it by adding, deleting, or changing items. You can even suppress the system menu entirely by turning off the WS_SYSMENU style in your window creation flags or.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. A submenu is not visible, however, until the user selects a menu item that activates it. An application can use the GetSystemMenu function to create a copy of the default window menu to modify. Any window that does not use the.The menu items in a window menu can be modified by using the GetSystemMenu, AppendMenu, InsertMenu, ModifyMenu, InsertMenuItem, and SetMenuItemInfo functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h.GetMenuString Copies the text string of the specified menu item into the specified buffer. GetSubMenu Retrieves a handle to the drop-down menu or submenu activated by the specified menu item. GetSystemMenu Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying. HiliteMenuItem.Menus and Other Resources Overview of the Menus and Other Resources technology. GetSubMenu Retrieves a handle to the drop-down menu or submenu activated by the specified menu item. GetSystemMenu Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying. HideCaret Removes the.OBJID_SYSMENU ((LONG)0xFFFFFFFF) The system menu associated with the window (see the GetSystemMenu function). [in] idItem Type: LONG The item for which to retrieve information. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only]."
369,WriteProcessMemory,"Microsoft Build · May 19 – 22, 2025WriteProcessMemory is a function in the Windows API that allows a process to write data to an area of memory in a specified process. The entire area that is being written to must be accessible; otherwise, the operation will fail. This function is commonly used in scenarios where one process needs to modify the memory of another process, such as in debugging or inter-process communication.To successfully use WriteProcessMemory, the calling process must have the appropriate access rights to the target process. Specifically, the PROCESS_VM_WRITE access right is required to write to the memory of another process. Additionally, if the calling process needs to open a handle to another process, it may need to enable the SeDebugPrivilege privilege to obtain full access rights.References:WriteProcessMemory function (memoryapi.h) Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails. Syntax Parameters [in] hProcess A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. [in].It writes memory to the process being debugged. The entire area to be written must be accessible, or the operation fails. Syntax Parameters offset Specifies the base address of the memory to be written in the process that is being debugged. lpBuffer Points to the buffer that contains the data to be written. cb Specifies the number of bytes that.Process Security and Access Rights The Microsoft Windows security model enables you to control access to process objects. PROCESS_VM_OPERATION (0x0008) Required to perform an operation on the address space of a process (see VirtualProtectEx and WriteProcessMemory). PROCESS_VM_READ (0x0010) Required to read memory in a process using.Process Functions for Debugging The CreateProcess function enables a debugger to start a process and debug it. Typically, debuggers open a process with the PROCESS_VM_READ and PROCESS_VM_WRITE flags. Using these flags enables the debugger to read from and write to the virtual memory of the process by using the ReadProcessMemory and.The debugger can interact with the user, or manipulate the state of the process being debugged, by using the GetThreadContext, GetThreadSelectorEntry, ReadProcessMemory, SetThreadContext, and WriteProcessMemory functions. The ReadProcessMemory and WriteProcessMemory functions require linear virtual addresses. Debuggers frequently read the memory.Debugging Functions The following functions are used with debugging. Function Description CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. Wow64GetThreadSelectorEntry Retrieves a descriptor table entry for the specified selector ... Wow64SetThreadContext Sets the context of the specified WOW64 thread..VirtualQueryE... VirtualUnlock Unlocks a specified range of pages in the virtual address space of a process, enabling the system to swap the pages out to the paging file if necessary. WriteProcessMemory Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails. Structures.OB_PRE_CREATE_HANDLE_INFORMATION structure (wdm.h) The OB_PRE_CREATE_HANDLE_INFORMATION structure provides information to an ObjectPreCallback routine about a thread or process handle that is being opened. PROCESS_VM_OPERATION Modify the address space of the process, such as by calling the user-mode WriteProcessMemory and VirtualProtectEx.PWINDBG_READ_PROCESS_MEMORY_ROUTINE The PWINDBG_READ_PROCESS_MEMORY_ROUTINE (ReadMemory) function works like the Win32 ReadProcessMemory function. It reads ... Returns the number of frames read into the buffer pointed to by StackFrames. PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE The PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE (WriteMemory) function works like.The ReadProcessMemory and WriteProcessMemory functions use linear virtual addresses. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also."
370,CoInitializeSecurity,"Microsoft Build · May 19 – 22, 2025CoInitializeSecurity function (combaseapi.h) Registers security and sets the default security values for the process. Syntax Parameters [in, optional] pSecDesc The access permissions that a server will use to receive calls. This parameter is used by COM only when a server calls CoInitializeSecurity. Its value is a pointer to one of three types: an.Setting Process-Wide Security with CoInitializeSecurity The CoInitializeSecurity function allows you to control complex security scenarios by setting security for an application programmatically. This topic describes scenarios when you might use CoInitializeSecurity and provides some details on how you use it. There are several reasons why you.Initializing COM for a WMI Application The first step in connecting to WMI is setting up the COM calls to CoInitializeEx and CoInitializeSecurity. Set the general COM security levels with a call to the CoInitializeSecurity interface. CoInitializeSecurity is a standard function you must call when setting up a COM interface for a process. Call.Security Blanket Negotiation A security blanket is... A server's call to CoInitializeSecurity, whether implicit or explicit, determines the server's security blanket, which remains fixed. When the application is acting as a client, the following values passed to CoInitializeSecurity are relevant: an authentication level, an impersonation level,.Setting Client Application Process Security Client applications that call WMI interfaces can control the security levels of their processes. All WMI applications access WMI through COM, and you can call the COM function CoInitializeSecurity to set security for your processes. The following procedure describes the steps you must perform to set the.For more ... For complex security requirements, you can handle all security programmatically rather than allowing COM to handle it for you. To do this, call CoInitializeSecurity to disable automatic authentication, and then control all the security settings by setting security on a per-interface proxy basis. For more information, see Setting.Using System Restore The following examples demonstrate how to create and cancel restore points using the SRSetRestorePoint functionThe first step to using System Restore is setting up the COM calls to CoInitializeEx and CoInitializeSecurity. This is required for any process that uses the SRSetRestorePoint function. The following.4.1 General Hookup Example The following example demonstrates how to get a handle that the DCOM Class Object can use to make the rest of the calls. For more information, see [MSDN-CoInitialize]. The client initializes COM security by calling the CoInitializeSecurity function. The IMSAdminBaseW interface doe... The following example demonstrates.Setting Process-Wide Security Through the Registry If you want to set security for an entire process, one solution is to set the security levels you wa... If your application cannot call CoInitializeSecurity or if you prefer not to use programmatic security, this might be a good option. If you decide to set process-wide security using the.The second technique offers the programmer more control, and it requires a call to CoInitializeSecurity. For more information about these techniques, see the following topics: Setting Process-Wide Security Using DCOMCNFG Setting Process-Wide Security with CoInitializeSecurity Setting Process-Wide Security Through the Registry Related topics."
371,OffsetClipRgn,"Microsoft Build · May 19 – 22, 2025OffsetClipRgn function (wingdi.h) The OffsetClipRgn function moves the clipping region of a device context by the specified offsets. Syntax Parameters [in] hdc A handle to the device context. [in] x The number of logical units to move left or right. [in] y The number of logical units to move up or down. Requirements Requirement Value Minimum.Clipping Functions The following functions are used with clipping. Function Description ExcludeClipRe... IntersectClipRect Creates a new clipping region from the intersection of the current clipping region and the specified rectangle. OffsetClipRgn Moves the clipping region of a device context by the specified offsets. PtVisible Determines whether.EMROFFSETCLIPRGN structure (wingdi.h) The EMROFFSETCLIPRGN structure contains members for the OffsetClipRgn enhanced metafile record. Syntax Members emr The base structure for all record types. ptlOffset The logical coordinates of offset. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.2.3.5.5 META_OFFSETCLIPRGN Record The META_OFFSETCLIPRGN Record moves the clipping region in the playback device context  by the specified offsets. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction YOffset XOffset RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures,.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functi... OffsetClipRgn The.2.3.2.4 EMR_OFFSETCLIPRGN Record The EMR_OFFSETCLIPRGN record moves the current clipping region in the playback device context by the specified offsets. ...s rec as EMR_OFFSETCLIPRGNOffset (8 bytes): A PointL object ([MS-WMF] section 2.2.2.15) that specifies the horizontal and vertical offsets in logical units. The EMR_OFFSETCLIPRGN record moves.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). It is typically rectangular. Determine whether part of the client area intersects a region by calling the RectVisible function. Move the existing region by a specified offset by calling the OffsetClipRgn function. Exclude a.CDC::GetFontData Retrieves font metric info... The information to retrieve is identified by specifying an offset into the font file and the length of the information to return. CDC::GetFontLanguageInfo Returns information about the currently selected font for the specified display context. CDC::MoveTo Moves the current position. CDC::OffsetClipRgn.2.3.2 Clipping Record Types The Clipping record types define and manage clipping regions. EMR_INTERSECTC... EMR_OFFSETCLIPRGN 2.3.2.4 Specifies a clipping region as the current clipping region moved by a specified offset. EMR_SELECTCLIPPATH 2.3.2.5 Specifies a clipping region as the current clipping region combined with the current path bracket,.2.3.5 State Record Types This section defines the State Record Types, which define and manage the graphics properties specified in the Playback Device Context (section 3.1.5). META_MOVETO 2.3.5.4 Sets the output position in the playback device conte... META_OFFSETCLIPRGN 2.3.5.5 Moves the clipping region that is defined in the playback device."
372,SetEvent,"Microsoft Build · May 19 – 22, 2025The SetEvent function is typically used in programming to set the state of an event object to signaled, which allows any waiting threads to proceed. In the context of Windows driver development, you would call KeSetEvent to set an event object.When using KeSetEvent, you can specify a Wait parameter. If this parameter is set to TRUE, it indicates that the caller intends to wait for the event to be signaled. However, there are important guidelines to follow:Additionally, you may want to use KeClearEvent to reset the event to a non-signaled state, and KeResetEvent to retrieve the previous state of the event.References:SetEvent function (synchapi.h) Sets the specified event object to the signaled state. Syntax Parameters [in] hEvent A handle to the event object. Windows Store apps can respond to named events and semaphores as described in How to respond to named events and semaphores. Requirements Requirement Value Minimum supported client Windows XP [desktop.DataViewBrowseObject.SetEvents(EventDescriptor[]) Method Definition Namespace: Microsoft.VisualStudio.Data.Framework Assembly:Microsoft.VisualStudio.Data.Framework.dll Package:Microsoft.VisualStudio.Data.Framework v17.10.40170 Sets the specified events for the current browse object. Parameters events EventDescriptor[] An array of EventDescriptor.Event Commands The commands in this section are used by the microdriver for device event support. CMD_GET_INTERRUPT_EVENT Called by the WIA Flatbed Driver in a separate thread to monitor the status of button events ... The lVal member of the VAL structure holds an event handle that should be signaled by the microdriver using the SetEvent function.CEvent Class Represents an event, which is a synchronization object that enables one thread to notify another that an event has occurred. Syntax Members Public Constructors Name Description CEvent::CEvent Constructs a CEvent object. CEvent::ResetEvent Sets the event to unavailable (nonsignaled). CEvent::SetEvent Sets the event to available.sp_trace_setevent (Transact-SQL) Applies to: SQL Server Adds or removes an event or event column to a trace. sp_trace_setevent can be executed only on existing traces that are stopped (@status is 0). An error is returned if this stored procedure is executed on a trace that doesn't exist or whose @status isn't 0. This table lists the events that.IStiUSD::SetNotificationHandle method (stiusd.h) A still image minidriver's IStiUSD::SetNotificationHandle method specifies an event handle that the minidriver should use to inform th... If hEvent is an event handle, the IStiUSD::SetNotificationHandle method should store the handle and use it as an input argument to SetEvent (described in the.Remarks TerminateThread is a dangerous function that should only be used in the most extreme cases. For more informat... Code analysis name: USINGTERMINATETHREAD To properly terminate threads Create an event object using the CreateEvent function. Create the threads. Each thread ends its own execution when the event is set to the signaled state.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Event Objects (Synchronization) An event object is a synchronization object whose state can be explicitly set to signaled by use of the SetEvent function. Following are the two types of eve... An event object is a synchronization object.Enable close exception The Enable close exception flag raises a user-mode exception whenever an invalid handle is passed to the CloseHandle interface or related interfaces, such as SetEvent, that take handles as arguments. Abbreviation ece Hexadecimal value 0x00400000 Symbolic Name FLG_ENABLE_CLOSE_EXCEPTIONS Destination System-wide registry.ISynchronizeEvent interface (objidl.h) Assigns an event handle to a synchronization object. Thus, the logic of the ISynchronize::Signal method on an event synchronization object can pass its handle to the SetEvent function. ISynchronizeEvent::SetEventHandle The ISynchronizeEvent::SetEventHandle method (objidl.h) assigns an event handle to a."
373,CallMsgFilterA,"Microsoft Build · May 19 – 22, 2025CallMsgFilterA function (winuser.h) Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. ... and, optionally, modifies messages for a dialog box, message box, Remarks The system calls CallMsgFilter to enable applications to examine and control the flow of messages during.(BroadcastSy... (BroadcastSystemMessageA) BroadcastSystemMessageExA Sends a message to the specified recipients. CallMsgFilterA Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. (ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures.(BroadcastSy... (BroadcastSystemMessageA) BroadcastSystemMessageExA Sends a message to the specified recipients. CallMsgFilterA Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. (ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures."
374,GetClassNameA,"Microsoft Build · May 19 – 22, 2025GetClassNameA function (winuser.h) Retrieves the name of the class to which the specified window belongs. Syntax Parameters [in] hWnd Type: HWND A handle to the window and, indirectly, the class to which the window belongs. [out] lpClassName Type: LPTSTR The class name string. [in] nMaxCount Type: int The length of the lpClassName buffer, in.(Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window.(Unicode) GetClassLongW Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (Unicode) GetClassName The GetClassName function retrieves the name of the class to which the specified window belongs. (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window....As Long 'Part 1 --- Locate IES Private strHwndIES As String Private lngHwndIndex As Long Private Declare PtrSafe Function EnumWindows Lib &quot;user32&quot; ( _ ByVal lpEnumFunc As LongPtr, ByVal lParam As Long) As Long Private Declare PtrSafe Function EnumChildWindows Lib &quot;user32&quot; ( _ ByVal hWndParent.This naming pattern is used in the Windows headers, but we also followed it in the Spy++ code when we had to add a Unicode version of a function that was already defined in only an MBCS version. In some cases we had to replace a type to use a version that resolves correctly (WNDCLASS instead of WNDCLASSA for example). In many cases we had to use."
375,WSALookupServiceNextW,"Microsoft Build · May 19 – 22, 2025WSALookupServiceNextW function (winsock2.h) The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. The provider will pass back a WSAQUERYSET structure in the lpqsResults buffer. The client should continue to call this function until.(Unicode) WSALookupServiceEnd The WSALookupServiceEnd function is called to free the handle after previous calls... WSALookupServiceNextA The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. (ANSI) WSALookupServiceNextW The.WSAECOMPARATOR The Windows Sockets WSAECOMPARATOR enumeration type is used for version-comparison semantics in W... WSALookupServiceNextA The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. (ANSI) WSALookupServiceNextW The....ect send sendto SetAddrInfoExW setipv4sourcefilter setsockopt setsourcefilter shutdown socket TransmitFile TransmitPackets WSAAccept WSAAddressToStringW WSACleanup WSACloseEvent WSAConnect WSAConnectByList WSAConnectByNameW WSACreateEvent WSADuplicateSocketW WSAEnumNameSpaceProvidersExW WSAEnumNameSpaceProvidersW WSAEnumNetworkEvents.WSALookupServiceNextA function (winsock2.h) The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. The ... Windows Phone 8: The WSALookupServiceNextW function is supported for Windows Phone Store apps on Windows Phone 8 and later..Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-file-l1-1-0.dll in."
376,GetFileAttributesA,"Microsoft Build · May 19 – 22, 2025GetFileAttributesA function (fileapi.h) Retrieves file system attributes for a specified file or directory. To get more attribute information, use the GetFileAttributesEx function. To perform this operation as a transacted operation, use the GetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file or directory..For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (Unicode) GetFileAttributesA Retrieves file system attributes for a specified file or directory..GetTempPathW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileAttributesA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileAttributesW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceA In... GetDiskFreeSpaceW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393..FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. NVME_LOG_PAGES Contains values that indicate....wn the Microsoft APIs that are called when this exception is thrown: _wgetenv() GetCurrentThread() GetCurrentProcess() RtlCaptureContext( &amp;ctxt ) StackWalk64( IMAGE_FILE_MACHINE_I386, process, thread, &amp;frame, &amp;ctxt, NULL, SymFunctionTableAccess64, SymGetModuleBase64, NULL ) SymSetOptions( SYMOPT_CASE_INSENSITIVE | SYMOPT_LOAD_LINES."
377,OpenEventA,"Microsoft Build · May 19 – 22, 2025OpenEventA function (synchapi.h) Opens an existing named event object. Syntax Parameters [in] dwDesiredAccess The access to the event object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. InitOn... LeaveCriticalSection Releases ownership of the specified critical section object..IOCTL_CHANGER_QUERY_VOLUME_TAGS Retrieves the volume tag information for the specified elements. IOCTL_CHANGER_REINITIALIZE_TRANSPORT Physically recalibrates a transport element. Recalibration may involve returning the transport to its home position. IOCTL_CHANGER_SET_ACCESS Sets the state of the device's insert/eject port, door, or keypad..GetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. SetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. APIs from api-ms-win-core-fibers-l1-1-1.dll API Requirements FlsAlloc Introduced into api-ms-win-core-fibers-l1-1-1.dll in 10.0.10240. Moved into."
378,DdeDisconnect,"Microsoft Build · May 19 – 22, 2025DdeDisconnect function (ddeml.h) Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle. Syntax Parameters [in] hConv Type: HCONV A handle to the active conversation to be terminated. The DdeGetLastError function can be used to get the error code, which can be one of.Data Exchange Overview of the Data Exchange technology. A Dynamic Data E... (Unicode) DdeDisconnect Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle. DdeDisconnectList Destroys the specified conversation list and terminates all conversations associated with the.ddeml.h header This header is used by Data Exchange. A Dynamic Data Exch... (Unicode) DdeDisconnect Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle. DdeDisconnectList Destroys the specified conversation list and terminates all conversations associated with the.In This Section Name Description About the DDEML Discusses dynamic data exchange. ... DdeDisconnect Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle. DdeDisconnectList Destroys the specified conversation list and terminates all conversations associated with the.DdeDisconnectList function (ddeml.h) Destroys the specified conversation list and terminates all conversations associated with the list. The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks An application can use the DdeDisconnect function to terminate individual conversations in the.DdeReconnect function (ddeml.h) Enables a client Dynamic Data Exchange Management Library (DDEML) application to attempt to reestablish a conversation with a service that has terminated a conversation with the client. The DdeGetLastError function can be used to get the ... Enables a client Dynamic Data Exchange Management Library (DDEML).Class Return value Transaction XCLASS_BOOL TRUE or FALSE XTYP_ADVSTART XTYP_CONNECT XC... XTYP_CONNECT Server A client called the DdeConnect function and specified a service name and topic name supported by the server. XTYP_DISCONNECT Client/Server A partner in a conversation called the DdeDisconnect function, causing both partners to receive this.Conversation Management A conversation be... The partners use this handle in other Dynamic Data Exchange Management Library (DDEML) functions to send transactions and manage the conversation. Single Conversations Multiple Conversations Single Conversations A client application requests a single conversation with a server by calling the DdeConnect.XTYP_DISCONNECT transaction An application's Dynamic Data Exchange (DDE) callback function, DdeCallback, receives the XTYP_DISCONNECT transaction when the application's partner in a conversation uses the DdeDisconnect function to terminate the conversation. An application's Dynamic Data Exchange (DDE) callback function, DdeCallback, receives the.User object Creator function Destroyer function Accelerator table CreateAcceleratorTable DestroyAcceleratorTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect,."
379,CharPrevW,"Microsoft Build · May 19 – 22, 2025CharPrevW function (winuser.h) Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters. Syntax Parameters [in] lpszStart Type: LPCTSTR The beginning of the string. [in] lpszCurrent Type: LPCTSTR A character in a null-terminated string. Return value Type:.CharNextW Retrieves a pointer to the next character in a string. (Unicode) CharPrevA Retrieves a pointer to the preceding character in a string. (ANSI) CharPrevExA Retrieves the pointer to the preceding character in a string. CharPrevW Retrieves a pointer to the preceding character in a string. (Unicode) CharToOemA Translates a string into the.CharNextW Retrieves a pointer to the next character in a string. (Unicode) CharPrevA Retrieves a pointer to the preceding character in a string. (ANSI) CharPrevExA Retrieves the pointer to the preceding character in a string. CharPrevW Retrieves a pointer to the preceding character in a string. (Unicode) CharToOemA Translates a string into the."
380,GetEnhMetaFileDescriptionA,"Microsoft Build · May 19 – 22, 2025GetEnhMetaFileDescriptionA function (wingdi.h) The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer. Syntax Parameters [in] hemf A handle to the enhanced metafile. [in] cchBuffer The size, in characters, of the buffer to receive the data. .(ANSI) GetEnhMetaFileBits The GetEnhMetaFileBits function retrieves the contents of the specified enhanced-format metafile and c... GetEnhMetaFileDescriptionA The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer. (ANSI).(ANSI) GetEnhMetaFileBits The GetEnhMetaFileBits function retrieves the contents of the specified enhanced-format metafile and c... GetEnhMetaFileDescriptionA The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer. (ANSI)."
381,ImpersonateDdeClientWindow,"Microsoft Build · May 19 – 22, 2025ImpersonateDdeClientWindow function (dde.h) Enables a Dynamic Data Exchange (DDE) server application to impersonate a DDE client application's security context. This protects secure server data from unauthorized DDE clients. Syntax Parameters [in] hWndClient Type: HWND A handle to the DDE client window to be impersonated. The client window must.FreeDDElParam F... An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam value. ImpersonateDdeClientWindow Enables a Dynamic Data Exchange (DDE) server application to impersonate a DDE client application's security context. This protects secure server data from.RevertToSelf function (securitybaseapi.h) The RevertToSelf function terminates the impersonation of a client application. Remarks A process should call the RevertToSelf function after finishing any impersonation begun by using the DdeImpersonateClient, ImpersonateDdeClientWindow, ImpersonateLoggedOnUser, ImpersonateNamedPipeClient,.ImpersonateDdeClientWindow If the function fails, subsequent client requests are made in the security context of the calling process. This can be a problem if the calling process is running as a highly privileged account. DdeImpersonateClient If the function fails, subsequent client requests are made in the security context of the calling process..Dynamic Data Exchange and Impersonation To allow a server to impersonate a client, the client calls the DdeSetQualityOfSer... The SECURITY_IMPERSONATION_LEVEL structure is used to control the level of impersonation the server may perform. A DDE server can impersonate a DDE client by calling the ImpersonateDdeClientWindow function. A DDEML server.Dynamic Data Exchange This section provides guidelines for implementing dynamic data exchange for applications that cannot use the Dynamic Data Exchange Management Library (DDEML). An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam ....DDE Functions In this section DdeSetQualityOfService FreeDDElParam ImpersonateDdeClientWindow PackDDElParam ReuseDDElParam UnpackDDElParam. . | DDE Functions. /windows/win32/dataxchg/dynamic-data-exchange-functions.Data Exchange Overview of the Data Exchange. DdeClientTransaction Begins a data transaction between a client and a server. DdeGetLastError ... DdeImpersonateClient Impersonates a Dynamic Data Exchange (DDE) client application in a DDE client conversation. DdeInitializeA Registers an application with the Dynamic Data Exchange Management Library.Let SQL Server handle impersonation Since impersonation operates on the thread level and SQL can run in fiber mode, managed code should not impersonate users, and should not call RevertToSelf. Do not use RevertToSelf, ImpersonateAnonymousToken, DdeImpersonateClient, ImpersonateDdeClientWindow, ImpersonateLoggedOnUser, ImpersonateNamedPipeClient,."
382,CopyFileW,"Microsoft Build · May 19 – 22, 2025CopyFileW function (winbase.h) Copies an existing file to a new file. The CopyFileEx function provides two additional capabilities. CopyFileEx can call a specified callback function each time a portion of the copy operation is completed, and CopyFileEx can be canceled during the copy operation. To perform this operation as a transacted operation,.CopyFile The CopyFile function (winbase.h) copies an existing file to a new file. CopyFile2 Copies an existing file to a new file, notifying the application of ... (ANSI) CopyFileTransactedW Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function. (Unicode) CopyFileW.... (CopyFileExA) CopyFileExW Copies an existing file to a new file, notifying the application of its progress through a callback function. (CopyFileExW) CopyFileFromAppW Copies an existing file to a new file. The behavior of this function is identical to CopyFile, except that this function adheres to the Universal Windows Platform app security.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.Maximum Path Length Limitation https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell --If the reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions.APIs from api-ms-win-core-file-ansi-l2-1-0.dll API Requirements ReplaceFileA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.10240. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll."
383,gethostbyname,"Microsoft Build · May 19 – 22, 2025The gethostbyname function is used to resolve a host name into an IP address. It utilizes the WSALookupServiceBegin function to query the service class GUID SVCID_INET_HOSTADDRBYNAME. The host name is provided in the lpszServiceInstanceName member of the WSAQUERYSET structure that is passed to WSALookupServiceBegin.The function can return various types of information based on specified flags. For example, the LUP_RETURN_NAME flag returns the host name from the HOSTENT structure, while the LUP_RETURN_ADDR flag provides addressing information from the HOSTENT in CSADDR_INFO structures, with port information defaulted to zero. However, it is important to note that this function does not resolve host names that consist of a dotted IPv4 address.References:Dns.GetHostByName(String) Method Definition Namespace: System.Net Assemblies:netstandard.dll, System.Net.NameResolution.dll Assembly:System.Net.NameResolution.dll Assembly:System.dll Assembly:netstandard.dll Source:Dns.cs Source:Dns.cs Source:Dns.cs Caution GetHostByName has been deprecated. Caution GetHostByName is obsoleted for... Parameters.gethostbyname Function in the API The gethostbyname function uses the WSALookupServiceBegin function to query SVCID_INET_HOSTADDRBYNAME as the service class GUID. The host name is supplied in the lpszServiceInstanceName member in the WSAQUERYSET structure passed to the WSALookupServiceBegin function. The Ws2_32.dll specifies LUP_RETURN_BLOB and.gethostbyname Function in the SPI The WSALookupServiceBegin query uses SVCID_INET_HOSTADDRBYNAME as the service class GUID. The host name is supplied in lpszServiceInstanceName. The Ws2_32.dll specifies LUP_RETURN_BLOB and the NSP places a HOSTENT structure in the blob (using offsets instead of pointers as described above). Note that this routine.gethostbyname function (winsock.h) The gethostbyname function retrieves host information corresponding to a host name from a host database. Note  The gethostbyname function has been deprecated by the introduction of the getaddrinfo function. Developers creating Windows Sockets 2 applications are urged to use the getaddrinfo function instead of.gethostbyname function (winsock2.h) The gethostbyname function retrieves host information corresponding to a host name from a host database. Note  The gethostbyname function has been deprecated by the introduction of the getaddrinfo function. Developers creating Windows Sockets 2 applications are urged to use the getaddrinfo function instead of.gethostbyname macro (wsipv6ok.h) The gethostbyname function retrieves host information corresponding to a host name from a host database. Note  The gethostbyname function has been deprecated by the introduction of the getaddrinfo function. Windows Phone 8: This function is supported for Windows Phone Store apps on Windows P... The gethostbyname.HOSTENT structure (winsock2.h) The hostent structure is used by functions to store information about a given host, such as host name, IPv4 address, and so forth. Remarks The gethostbyaddr and gethostbyname functions returns a pointer to a hostent structure—a structure allocated by Windows Sockets. The hostent ... The HOSTENT structure (winsock2.h).HOSTENT structure (winsock.h) The hostent structure is used by functions to store information about a given host, such as host name, IPv4 address, and so forth. Remarks The gethostbyaddr and gethostbyname functions returns a pointer to a hostent structure—a structure allocated by Windows Sockets. The hostent stru... The HOSTENT (winsock.h).gethostname function (winsock.h) The gethostname function retrieves the standard host name for the local computer. Note  If no local host name has been configured, gethostname must succeed and return a token host name that gethostbyname or WSAAsyncGetHostByName can resolve. Windows Phone 8: This function is supported for Windows Phone Store apps.gethostname function (winsock2.h) The gethostname function retrieves the standard host name for the local computer. Note  If no local host name has been configured, gethostname must succeed and return a token host name that gethostbyname or WSAAsyncGetHostByName can resolve. Windows Phone 8: This function is supported for Windows Phone Store apps."
384,SetWindowLongW,"Microsoft Build · May 19 – 22, 2025SetWindowLongW function (winuser.h) Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory. Note  This function has been superseded by the SetWindowLongPtr function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the.(ANSI) SetClassLongPtrW Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. (Unicode) SetClassLongW Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to.Subclassing and Automatic Message Translation Subclassing is a technique that allows an application to intercept and process messages sent or posted to a particular window before a window procedure has a chance to process them. Similarly, a call to the SetWindowLongW or SetWindowLongPtrW function subclasses the current window procedure with a.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device.This is where I see all the Linker Errors: Build started... 1&gt;------ Build started: Project: NovaForge, Configuration: Debug x64 ------ 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_TranslateMessage referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external."
385,OpenWindowStationA,"Microsoft Build · May 19 – 22, 2025OpenWindowStationA function (winuser.h) Opens the specified window station. Syntax Parameters [in] lpszWinSta The name of the window station to be opened. Window station names are case-insensitive. Note The winuser.h header defines OpenWindowStation as an alias that automatically selects the ANSI or Unicode version of this function based on the.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any headers. (Unicode) OpenInputDesktop Opens the desktop that receives user input. OpenWindowStationA Opens the specified window station. (ANSI) OpenWindowStationW Opens the specified window.CloseWindow Minimizes (but does not destroy) the specified window. CloseWindowStation Closes an open window station handle. CopyAcceleratorTableA Copies the specified accelerator table. (ANSI) CreateWindowExW Creates an ov... (Unicode) CreateWindowStationA Creates a window station object, associates it with the calling process, and assigns it to."
386,MulDiv,"Microsoft Build · May 19 – 22, 2025MulDiv function (winbase.h) Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value. The final result is rounded to the nearest integer. Syntax Parameters [in] nNumber The multiplicand. [in] nNumerator The multiplier. [in] nDenominator The number by which the result of the multiplication operation is to be divided..Large Integer Functions The following functions are used with large integers. The function provides improved shifting code for right logical shifts where the shift count is in the range 0-31. MulDiv Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value. Multiply128 Multiplies two 64-bit integers to produce a.Applications can shift bits in 64-bit values to the left or ri... These functions provide logical and arithmetic shifting. Applications can also multiply and divide 32-bit values in a single operation by using the MulDiv function. Although the result of the operation is a 32-bit value, the function stores the intermediate result as a 64-bit value,.Eng-prefixed function Win32 equivalent EngAllocMem HeapAlloc EngAllocUserMem HeapAlloc EngEnumForms EnumForms EngFreeMem HeapFree EngFreeUserMem HeapFree EngFindImageProcAddress GetProcAddress EngGetForm GetForm EngGetLastError GetLastError EngGetPrinter GetPrinter EngGetPrinterData GetPrinterData EngGetPrinterDriver GetPrinterDriver EngLoadImage.LOGFONTW structure (dimm.h) Defines the attributes of a font. For the MM_TEXT mapping mode, you may use the following formula to specify a height for a font with a given point size. where MulDiv is defined as follows: lfWidth Type: LONG Specifies the average width, in logical units, of characters in the font. If lfWidth is not zero, the aspect.LOGFONTA structure (dimm.h) Defines the attributes of a font. For the MM_TEXT mapping mode, you may use the following formula to specify a height for a font with a given point size. where MulDiv is defined as follows: lfWidth Type: LONG Specifies the average width, in logical units, of characters in the font. If lfWidth is not zero, the aspect.LOGFONTW structure (shtypes.h) Defines the attributes of a font. For the MM_TEXT mapping mode, you may use the following formula to specify a height for a font with a given point size. where MulDiv is defined as follows: lfWidth Type: LONG Specifies the average width, in logical units, of characters in the font. If lfWidth is not zero, the aspect.LOGFONTA structure (shtypes.h) Defines the attributes of a font. For the MM_TEXT mapping mode, you may use the following formula to specify a height for a font with a given point size. where MulDiv is defined as follows: lfWidth Type: LONG Specifies the average width, in logical units, of characters in the font. If lfWidth is not zero, the aspect.Moved into api-ms-win-core-kernel32-legacy-l1-1-1.dll in 1... Moved into api-ms-win-core-kernel32-legacy-l1-1-0.dll in 10.0.16299. APIs from api-ms-win-core-largeinteger-l1-1-0.dll API Requirements MulDiv Introduced into api-ms-win-core-largeinteger-l1-1-0.dll in 10.0.10240. APIs from api-ms-win-core-libraryloader-l1-2-0.dll API Requirements.LoadConfiguration Loads the File History configuration information for the... MoveToNextItem Moves to the next item in the inclusion or exclusion list. MulDiv Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value. Multiply128 Multiplies two 64-bit integers to produce a 128-bit integer. MultiplyExtract128."
387,UnionRect,"Microsoft Build · May 19 – 22, 2025UnionRect function (winuser.h) The UnionRect function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles. Syntax Parameters [out] lprcDst A pointer to the RECT structure that will receive a rectangle containing the rectangles pointed to by the lprcSrc1 and lprcSrc2 parameters. [in].OffsetRect Moves the specified rectang... PtInRect Determines whether the specified point lies within the specified rectangle. SetRect Sets the coordinates of the specified rectangle. SetRectEmpty Creates an empty rectangle in which all coordinates are set to zero. SubtractRect Determines the coordinates of a rectangle formed by subtracting one.The IntersectRect function creates a new rectangle that is the intersection of two existing rectangles, as shown in the following figure. The UnionRect function creates a new rectangle that is the union of two existing rectangles, as shown in the following figure. For information about functions that draw ellipses and polygons, see Filled Shapes..CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::CopyRect Copies the dimensions of a source rectangle to CRect. CRect::DeflateR... CRect::SetRect Sets the dimensions of CRect. CRect::SubtractRect Subtracts one rectangle from another. CRect::UnionRect.SubtractRect function (winuser.h) The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform... The.The ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also IntersectRect OffsetRect RECT Rectangle Functions Rectangles Overview.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect... The IntersectRect function calculates the intersection of two.Examples For an examp... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect IntersectRect RECT Rectangle Functions.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other.(ANSI) CopyEnhMetaFileW The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. (ANSI) CopyMetaFileW The CopyMetaFile function copies the content of a Windows-format metafile to the."
388,SendMessageTimeoutA,"Microsoft Build · May 19 – 22, 2025SendMessageTimeoutA function (winuser.h) Sends the specified message to one or more windows. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible.(SendMessageA) SendMessageCallbackA Sends the specified message to a window or windows. (SendMessageCallbackA) SendMessageCallbackW Sends the specified message to a window or windows. (SendMessageCallbackW) SendMessageTimeoutA Sends the specified message to one or more windows. (ANSI) SendMessageTimeoutW Sends the specified message to one or more....lassName As String, ByVal nMaxCount As Long) As Long 'Part 2 --- Get HTMLDocument from IES Private Const SMTO_ABORTIFHUNG = &amp;H2 Private Const GUID_IHTMLDocument2 = &quot;{332C4425-26CB-11D0-B483-00C04FD90119}&quot; Private Declare PtrSafe Function RegisterWindowMessage Lib &quot;user32&quot; Alias.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
389,TextOutW,"Microsoft Build · May 19 – 22, 2025TextOutW function (wingdi.h) The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string. [in].I am using Visual C++ 2019 16.9.2 Community, and MFC. If has not, these are unknown unicodes: I tried CDC:: and global form of TextOutW so. The number of 0s is 28 = number of special characters in text[].| To solve the drawing problem of TextOut , consider a powerful alternat... If has not, these are unknown unicodes: I tried CDC:: and global form.I use TextOutW to display a font. When a font doesn't have the glyph, GDI uses a fallback font. How can I know which font it uses for the fallback. I want to be able to get the LOGFONT, the HFONT, the font data OR the font filename of the font fallback. Same thing for IDWriteGdiInterop::CreateFontFaceFromHdc. Same thing for GetCurrentObject. I use.My English is not perfect. At my own program (Visual C++ with MFC, with TextOutW and DrawText), some characters, for example ∃ ∄ ∀, about as wide as other characters. In other programs, for example Visual Studio, LibreOffice Writer, these are wider than others: for example t... At my own program (Visual C++ with MFC, with TextOutW and DrawText),.The font can subsequently be used for text output by any application. (ANSI) ChangeDisplaySettingsExA The Change... (ANSI) EnumFontsW The EnumFonts function enumerates the fonts available on a specified device. (ANSI) ExtTextOutW The ExtTextOut function draws text using the currently selected font, background color, and text color. (ANSI).(ANSI) EnumICMProfilesW The EnumICMProfiles function enumerates the different output color profiles that the system supports for a given device context. (ANSI) ExtTextOutW The ExtTextOut function draws text using the currently selected font, background color, and text color. (ANSI) GetCharABCWidthsFloatW The GetCharABCWidthsFloat function."
390,DeleteColorSpace,"Microsoft Build · May 19 – 22, 2025DeleteColorSpace function (wingdi.h) The DeleteColorSpace function removes and destroys a specified color space. Syntax Parameters hcs Specifies the handle to a color space to delete. Return value If this function succeeds, the return value is TRUE. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.CreateProfileFromLogColorSpaceA Converts a logical color space to a device profile. (ANSI) CreateProfileFromLogColorSpaceW Converts a logical color space to a device profile. (Unicode) DeleteColorSpace The DeleteColorSpace function removes and destroys a specified color space. DeleteColorTransform Deletes a given color transform..Basic Functions for Use Within a Device Context The following WCS functions deliver basic color mapping capabilities within device contexts. The... CreateColorSpace Creates a color space. DeleteColorSpace Deletes a color space. EnumICMProfiles Enumerates output color profiles available for a given device context. They are useful to all.DeleteEnhMetaFile The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle. DeleteMetaFile The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle. DeleteObject The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing.CreateColorSpaceW function (wingdi.h) The CreateColorSpace function creates a logical color space. Remarks When the color space is no longer needed, use DeleteColorSpace to delete it. Windows 95/98/Me: CreateColorSpaceW is supported by the Microsoft Layer for Unicode. Requirements Requirement Value Minimum supported client Windows 2000.CreateColorSpaceA function (wingdi.h) The CreateColorSpace function creates a logical color space. Remarks When the color space is no longer needed, use DeleteColorSpace to delete it. Windows 95/98/Me: CreateColorSpaceW is supported by the Microsoft Layer for Unicode. Requirements Requirement Value Minimum supported client Windows 2000.2.3.8.2 EMR_DELETECOLORSPACE Record The EMR_DELETECOLORSPACE record deletes a logical color space object. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size ihCS Type (4 bytes): An unsigned integer that identifies this record type as EMR_DELETECOLORSPACE. The color space is specified by either a LogColorSpace or....the mode of Image Color Management (ICM) for graphics opera EMR_CREATECOLORSPACE: This record creates a logical color space object from a color profile with a name consisting of ASCII characters. EMR_SETCOLORSPACE: This record defines the current logical color space object for graphics operations. EMR_DELETECOLORSPACE: This record deletes a.CreateMultiProfileTransform Accepts an array of profiles or a single device link profile and creates a color transform that applications... [CreateProfileFromLogColorSpaceW]((/windows/win32/api/icm/nf-icm-createprofilefromlogcolorspacew) Converts a logical color space to a device profile. DeleteColorSpace Deletes a color space..2.3.8 Object Manipulation Record Types The Object Manipulation record types manage and modify graphics objects. Name Section Description EMR_COLORCORRECTPALETTE 2.3.8.1 Specifies how to correct the entries of a LogPalette object (section 2.2.17) by using WCS valuesEMR_DELETECOLORSPACE 2.3.8.2 Specifies how to delete a logical color space from the."
391,GetModuleFileNameA,"Microsoft Build · May 19 – 22, 2025GetModuleFileNameA function (libloaderapi.h) Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process. To locate the file for a module that was loaded by another process, use the GetModuleFileNameEx function. Requirements Requirement Value Minimum supported client.XLaunchNewGame Ends the current game, frees any allocated resources, and launches a new game. This path can be either relative t... Games that need to know the path to the calling executable can call GetModuleFileNameA with a nullptr for the module handle. args   _In_opt_z_ Type: char* Any applicable, game-specific arguments with which to launch.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and... When the reference count reaches zero, the memory occupied by the resource is freed. GetModuleFileNameA Retrieves the fully qualified path for the file that contains the specified module. The.Ge... APIs from api-ms-win-core-kernel32-legacy-l1-1-1.dll API Requirements MoveFileExA Introduced into api-ms-win-core-kernel32-legacy-l1-1-1.dll in 10.0.10240. GetModuleFileNameA Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. GetModuleFileNameW Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. APIs.... traced and listed down the Microsoft APIs that are called when this exception is thrown: _wgetenv() GetCurrentThread() GetCurrentProcess() RtlCaptureContext( &amp;ctxt ) StackWalk64( IMAGE_FILE_MACHINE_I386, process, thread, &amp;frame, &amp;ctxt, NULL, SymFunctionTableAccess64, SymGetModuleBase64, NULL ) SymSetOptions( SYMOPT_CASE_INSENSITIVE.** 功能描述: ** ** ** ** 全局变量: ** 调用模块: ** 作 者: ** 日 期: ** 版 本 ** ** ** 修 改: ** 日 期: ** 版 本 ****************************************************************/ DWORD d. ...; .text:00BE8883 ; _ .text:00BE8885 lea eax, [esp+33Ch+Filename] .text:00BE8889 push 125h ; nSize .text:00...IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned."
392,SetPriorityClass,"Microsoft Build · May 19 – 22, 2025SetPriorityClass function (processthreadsapi.h) Sets the priority class for the specified process. This value together with the priority value of each thread of the process determines each thread's base priority level. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows.Use the function SetPriorityClass method in C++ application| Hello, use the function SetPriorityClass: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setpriorityclass?redirectedfrom=MSDN Regards, Guido| Hello To ensure that your UI application runs in full screen while your C++ application runs in the.(QueueUserAPC2) ResumeThread Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed. SetPriorityClass Sets the priority class for the specified process. This value together with the priority value of each thread of the process determines each thread's base priority level..Get... QueryProcessCycleTime Retrieves the sum of the cycle time of all threads of the specified process. SetEnvironmentVariable Sets the value of an environment variable for the current process. SetPriorityClass Sets the priority class for the specified process. SetProcessAffinityMask Sets a processor affinity mask for the threads of a specified.Developing a Soft Real-Time Application Once a device is configured for real-time performance, an application can be set to run in real-time using standard Win32 APIs. The only factors that will give a thread or process real-time... Configure a Process for Real-Time Use the SetPriorityClass Function to: Set the process’ ProcessPriorityClass.For a table that shows the base-priority levels for each combination of priority class and thread priority value, refer to the SetPriorityClass function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Processes, Threads, and Apartments A process is a collection of virtual memory space, code, data, and system resources. The thread scheduler determines... You set a process's priority class attribute by calling the SetPriorityClass.Use the GetPriorityClass function to determine the current priority class of a process and the SetPriorityClass function to change the priority class of a process. If your application performs one task that requires the high-priority class while the rest of its tasks are normal priority, use SetPriorityClass to raise the priority class of the....Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib DLL Kernel32.dll See also AssignProcessToJobObject CloseHandle CreateProcess CreateRemoteThread DuplicateHandle.SetThreadPriority function (processthreadsapi.h) Sets the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base priority level. Syntax Parameters [in] hThread A handle to the thread whose priority value is to be set. The SetThreadPriority function enables setting."
393,SetFileTime,"Microsoft Build · May 19 – 22, 2025SetFileTime function (fileapi.h) Sets the date and time that the specified file or directory was created, last accessed, or last modified. Syntax Parameters [in] hFile A handle to the file or directory. The handle must have been created using the CreateFile function with the FILE_WRITE_ATTRIBUTES access right. Requirements Requirement Value.Changing a File Time to the Current Time The following example sets the last-write time for a file to the current system time using the SetFileTime function. The NTFS file system stores time values in UTC format, so they are not affe... The file must be opened with the CreateFile function using FILE_WRITE_ATTRIBUTES access. The following example.Setting and Getting the Timestamp of a File Applications can retrieve and set the date and time a file is created, last modified, or last accessed by using the GetFileTime and SetFileTime functions. The NTFS file system delays update to the last access time for a file by up to one ... Applications can retrieve and set the date and time a file is.SWbemDateTime.SetFileTime method The SetFileTime method of the SWbemDateTime object converts a date in the string FILETIME format to the CIM datetime format. The FILETIME format is a 64-bit datetime structure that represents the number of 100-nanosecond units since the beginning of January 1, 1601. ...Error codes After completing the SetFileTime.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). When writing to a file, the last... To set the file.To obtain a handle to an existing directory, call the CreateFile function with the FILE_FLAG_BACKUP_SEMANTICS flag. You can pass a dir... ReadDirectoryChangesW Retrieves information that describes the changes within the specified directory. SetFileTime Sets the date and time that the specified file or directory was created, last accessed, or last.Obtaining and Setting File Information The following topics describe how to get and set file information. Setting and Getting the Timestamp of a File Applications can retrieve and set the date and time a file is created, last modified, or last accessed by using the GetFileTime and SetFileTime functions. Determining the Current Character Set Code.SWbemDateTime object The SWbemDateTime object is a helper object to parse and set Common Information Model (CIM) datetime values. SWbemDateTime is the only Windows Management Instrumentation (WMI) scripting object that is marked safe for initialization and scripts running on HTML pages in Internet Explorer. GetVarDate Converts a WMI DATE....Windows Server 2003 and Windows XP:  This value is available starting with Windows XP with SP2 and Windows Server 2003 with SP1. When modifying a file through a mapped view, the last mod... If required, the caller should use SetFileTime to set the timestamp. To have a file with executable permissions, an application must call CreateFileMapping.FILETIME structure (minwinbase.h) Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC). Therefore, the GetFileTime function may not return the same file time information set using the SetFileTime function. For example, the SetFileTime function uses 0xFFFFFFFF to specify that a file's previous."
394,SetConsoleCtrlHandler,"Microsoft Build · May 19 – 22, 2025To use the SetConsoleCtrlHandler function in a program, you need to follow these steps:Here is a basic example in C:In this example, the HandlerRoutine function handles CTRL+C and console close events. The SetConsoleCtrlHandler function registers this handler, allowing your program to respond to these signals.References:SetConsoleCtrlHandler function Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process. If no handler function is specified, the function sets an inheritable attr... Windows 7, Windows 8, Windows 8.1 and Windows 10: If a console application loads the gdi32.dll or user32.dll library,.Registering a Control Handler Function Basic Control Handler Example This is an example of the SetConsoleCtrlHandler function that is used to install a control handler. The workaround specified is to create a hidden window, if no window already exists, by calling the CreateWindowEx method with the dwExStyle parameter set to 0 and listen for the.Console Functions The following functions are used to access a console. ... GetStdHandle Retrieves a handle for the standard input, standard output, or standard error device. HandlerRoutine An application-defined function used with the SetConsoleCtrlHandler function. PeekConsoleInput Reads data from the specified console input buffer without.Console Control Handlers Each console process has its own list of control handler functions that are called by the system when the process receives a CTRL+C, CTRL+BREAK, or CTRL+CLOSE signal. Initially, the list of control handlers for each process contains only a default handler function that calls the ... A console process can add or remove.HandlerRoutine callback function An application-defined function used with the SetConsoleCtrlHandler function. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) See also Console Control Handlers.Shutting Down There are three ways for an application to shut down local or remote computers: shut down the system shut down the sys... To register a console handler, use the SetConsoleCtrlHandler function. There are three ways for an application to shut down local or remote computers:shut down the systemshut down the system and restart itshut.Console applications can use the SetConsoleCtrlHandler function to receive shutdown notification. Service applications can use the RegisterServiceCtrlHandlerEx function to receive shutdown notificati... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop.A console process can use the SetConsoleCtrlHandler function to install or remove other handler functions. SetConsoleCtrlHandler can also enable an inheritable at... Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via.In C++, are global objects guaranteed to exist throughout the execution of a callback function. While it isn't accurate, the startup code essentially does: If there is a major concern that the handler may use something that gets destroyed, use SetConsoleCtlHandler again just before the main funtion returns to remove the handler. Passing in the.Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. Some level of overall process management may be required with the AllocConsole, AttachConsole and FreeConsole to join or leave a console device session. Signals and signal handling will."
395,SetMapMode,"Microsoft Build · May 19 – 22, 2025SetMapMode function (wingdi.h) The SetMapMode function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes. Requirements Requirement Value Minimum supported client Windows 2000.2.3.11.19 EMR_SETMAPMODE Record The EMR_SETMAPMODE record specifies the current mapping mode, which specifies the unit of measure used to transform page space units into device space units, and also specifies the orientation of the device's x-axis and y-axis. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size MapMode Type.Mapping Modes and Translations The mapping modes are described in the following table. For the six predefined mapping modes (MM_HIENGLISH, MM_LOENGLISH, MM_HIMETRIC, MM_LOMETRIC, MM_TEXT, and MM_TWIPS), the extents are set by the system when SetMapMode is called. This is done by calling SetMapMode to set the appropriate mode and then calling the.CDC::Set... CDC::SetDCPenColor Sets the current pen color. CDC::SetGraphicsMode Sets the current graphics mode for the specified device context. CDC::SetLayout Changes the layout of a device context (DC). CDC::SetMapMode Sets the current mapping mode. CDC::SetMapperFlags Alters the algorithm that the font mapper uses when it maps logical fonts to.EMRSELECTCLIPPATH structure (wingdi.h) Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records. Syntax Members emr The base structure for all reco... Contains parameters for the SelectClipPath, SetBkMode, SetMapMode,.2.3.5.17 META_SETMAPMODE Record The META_SETMAPMODE Record defines the mapping mode in the playback device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. MapWindowPoints Converts (maps) a set of points from a coordinate space relative to one window to a... SetGraphicsMode Sets the graphics mode for the specified device context. SetMapMode Sets the mapping mode of the specified.Display Device Context Defaults Upon first creating a display device context, the system assigns default v... Viewport extent (1,1) Viewport origin (0,0) Window extent (1,1) Window origin (0,0) An application can modify the values of the display device context attributes by using selection and attribute functions, such as SelectObject, SetMapMode,.Graphic Modes Windows supports five graphic modes that allow an application to specify how colors are mixed, where output appears, how the output is scaled, and so on. Graphics mode Function Background SetBkMode Drawing SetROP2 Mapping SetMapMode Polygon-fill SetPolyFillMode Stretching SetStretchBltMode. Windows supports five graphic modes that.Enhanced Metafile Records An enhanced metafile is an array of records. A metafile record is a variable-length ENHMETARECORD structure. The following hexadecimal output corresponds to a record generated for a call to the SetMapMode function. The value 0x00000011 specifies the record ty... The value 0x00000004 identifies the mapping mode."
396,LoadCursorFromFileW,"Microsoft Build · May 19 – 22, 2025LoadCursorFromFileW function (winuser.h) Creates a cursor based on data contained in a file. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_LOADFROMFILE flags set). Syntax Parameters [in] lpFileName Type: LPCTSTR The source of the file data to be used to create the cursor. ... winuser.h header defines.(Unicode) LoadCursorA Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. (ANSI) LoadCursorFromFileA Creates a cursor based on data contained in a file. (ANSI) LoadCursorFromFileW Creates a cursor based on data contained in a file. (Unicode) LoadCursorW Loads the specified cursor resource.CopyImage Creates a new ... (ANSI) CreateAcceleratorTableW Creates an accelerator table. CreateCursor Creates a cursor having the specified size, bit patterns, and hot spot. (ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling."
397,GetMetaFileA,"Microsoft Build · May 19 – 22, 2025GetMetaFileA function (wingdi.h) [GetMetaFile is no longer available for use as of Windows 2000. The GetMetaFile function creates a handle that identifies the metafile stored in the specified file. Syntax Parameters [in] lpName A pointer to a null-terminated string that specifies the name of a metafile. Return value If the function succeeds, the.GetEnhMetaFileA The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file. (Unicode) GetGlyphOutlineA The GetGlyphOutline function retrieves the outline or bitmap for a character ... GetMetaFileA The GetMetaFile function creates a handle that identifies the metafile stored in the.... CreateFontInd metafile CreateMetaFileA, CreateMetaFileW, CreateEnhMetaFileA, CreateEnhMetaFileW, GetEnhMetaFileA, GetEnhMetaFileW, GetMetaFileA, GetMetaFileWFigure 7 Functions that Free GDI Objects Object Type API Functions to Free Handles Display context DeleteDC Metafile DeleteMetaFile CloseMetaFile Enhanced Metafile DeleteEnhMetaFile.(Unicode) GetCharWidthA The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. GetEnhMetaFileA The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file. (ANSI) GetEnhMetaFileBits The."
398,lstrcpyW,"Microsoft Build · May 19 – 22, 2025lstrcpyW function (winbase.h) Copies a string to a buffer. Warning  Do not use. Consider using StringCchCopy instead. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).MNLS_lstrcpyW Applies to: Outlook 2013 | Outlook 2016 Copies a string to a buffer. Parameters lpString1 [out] A buffer to receive the contents of the string pointed to by the lpString2 parameter. lpString2 [in] The null-terminated string to be copied. Return value If the function succeeds, the return value is a pointer to the buffer. If the.(ANSI) lstrcpynA Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (ANSI) lstrcpynW Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (Unicode) lstrcpyW Copies a string to a buffer. (Unicode) lstrlenA Determines the length of the specified string (not....OneProp HrValidateIPMSubtree HrThisThreadAdviseSink LAUNCHWIZARDENTRY IsBadBoundedStringPtr LPropCompareProp LPFNBUTTON MAPIAdminProfiles LpValFindProp MAPIAllocateMore MAPIAllocateBuffer MAPIDeInitIdle MAPICrashRecovery MAPIGetDefaultMalloc MAPIFreeBuffer MAPIInitIdle MAPIInitialize MAPIOFFLINE_AGGREGATEINFO MAPILogonEx MAPIOpenFormMgr.Figure 4 Sample Banned Functions Banned API Strsafe Replacement Safe C and C++ Libraries strcpy, wcscpy, _tcscpy, _mbscpy, lstrcpy, lstrcpyA, lstrcpyW, strcpyA, strcpyW String*Copy or String*CopyEx strcpy_s strcat, wcscat String*Cat or String*CatEx strcat_s wnsprintf, wnsprintfA, wnsprintfW String*Printf or String*PrintfEx sprintf_s _snwprintf,....ringCchCopy, StringCchCopyEx No bounds checking StrCpyA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx No bounds checking StrCpyN StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNW StringCbCopy,.(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA."
399,UnpackDDElParam,"Microsoft Build · May 19 – 22, 2025...E)lParam value received from a posted DDE mSyntax Parameters [in] msg Type: UINT The posted DDE message. [in] lParam Type: LPARAM The lParam parameter of the posted DDE message that was received. The application must free the memory object specified by the lParam parameter by calling the FreeDDElParam function. [out] puiLo Type: PUINT_PTR A.An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam value. ImpersonateDdeClientWindow Enables a Dynamic Data Exchange (DDE) server application to impersonate a DDE client applicati... PackDDElParam Packs a Dynamic Data Exchange (DDE) lParam value into an.Dynamic Data Exchange Concepts The following sections explain the important concepts and terminology that are key to understanding dynamic data exchange. For example, the lParam of the WM_DDE_DATA message contains a data handle and an atom... Applications must use the PackDDElParam function to pack the handle and atom into an lParam parameter, and.Dynamic Data Exchange This section provides guidelines for implementing dynamic data exchange for applications that cannot use the Dynamic Data Exchange Management Library (DDEML). An applicati... PackDDElParam Packs a DDE lParam value into an internal structure used for sharing DDE data between processes. ReuseDDElParam Enables an application to.DDE Functions In this section DdeSetQualityOfService FreeDDElParam ImpersonateDdeClientWindow PackDDElParam ReuseDDElParam UnpackDDElParam. . | DDE Functions. /windows/win32/dataxchg/dynamic-data-exchange-functions.FreeDDElParam function (dde.h) Frees the memory specified by the lParam parameter of a posted Dynamic Data Exchange (DDE) message. An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam value. Requirements Requirement Value Min... An application receiving a posted.PackDDElParam function (dde.h) Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes. ...2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header dde.h (include Windows.h) Library User32.lib DLL User32.dll.If the receiving (client) application responds with a negative WM_DDE_ACK message, the posting (server) application must delete the global memory object; otherwise, the client must delete the object after extracting its contents by calling the UnpackDDElParam function. Requirements Requirement Value Minimum supported client Windows 2000.The client application must create or reuse the WM_DDE_ADVISE lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. The server must create or reuse the WM_DDE_ACK lParam parameter by calling the PackDDElParam function or the ReuseDDElParam function. Requirements Requirement Value Minimum supported client Windows.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Dde.h (include Windows.h) See also Reference GlobalAddAtom PackDDElParam PostMessage ReuseDDElParam SendMessage UnpackDDElParam WM_DDE_ACK WM_DDE_ADVISE Conceptual About."
400,GetStdHandle,"Microsoft Build · May 19 – 22, 2025GetStdHandle is a function in the Windows API that retrieves a handle to a specified standard device, which can be standard input, standard output, or standard error. The function is defined as follows:The parameter nStdHandle can take one of the following values:When called, if the function succeeds, it returns a handle to the specified device, which can be used for reading from or writing to the console. If the function fails, it returns INVALID_HANDLE_VALUE. The handle returned has GENERIC_READ and GENERIC_WRITE access rights unless modified by a previous call to SetStdHandle.The handles obtained from GetStdHandle can be used with various functions like ReadFile, WriteFile, or console-specific functions such as ReadConsoleInput and WriteConsole.References:GetStdHandle function Retrieves a handle to the specified standard device (standard input, standard output, or standard error). Syntax Parameters nStdHandle [in] The standard device. This parameter can be one of the following values. Value Meaning STD_INPUT_HANDLE ((DWORD)-10) The standard input device. Initially, this is the console input buffer,.Console Handles A console process uses handles to access the input and screen buffers of its console. A process can use the GetStdHandle, CreateFile, or CreateConsoleScreenBuffer function to open one of these handles. The GetStdHandle function provides a mechanism for retrieving the standard input (STDIN), standard output (STDOUT), and standard.The parent process typically does this by redirecting the standard output handle to the child process, as shown in the following steps: Call the GetStdHandle function to get the current standard output handle; save this handle so you can restore the original standard output handle after the child process has been created. The child process uses.Write CGI Applications in Visual Basic This article describes how to write CGI applications. Original product version:   Visu... You can use the GetStdHandle function to get the handles to STDIN or STDOUT. In this article, aliasing is used on the GetStdHandle function to simplify the function calls. The declarations for these functions are as.CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use GetStdHandle..CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use GetStdHandle..For console handles, set the CreateFile3 parameters as follows: Parameters Value lpFileName Use the CONIN$ value to specify con... To get the standard input handle, use the GetStdHandle function.CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.Use th... CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.Creation of a Console The system creates a new console when it starts a console process, a character-mode process whose entry point is the main function. For example, the... Creating a new console results in a new console window, as well as separate I/O buffers for output to the screen and input from the user. The process associated with the new.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization Objects A synchronization object is an object whose handle can be specified in one of the wait functions to coordinate the execution of multiple threads. The handle to console input is returned by the CreateFile function."
401,IsCharLowerW,"Microsoft Build · May 19 – 22, 2025IsCharLowerW function (winuser.h) Determines whether a character is lowercase. Syntax Parameters ch Type: WCHAR The character to be tested. Remarks Note The winuser.h header defines IsCharLower as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant..winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Ide... (ANSI) CharLowerBuffA Converts uppercase characters in a buffer to lowercase characters. (ANSI)."
402,EnumResourceNamesW,"Microsoft Build · May 19 – 22, 2025EnumResourceNamesW function (libloaderapi.h) Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable.Enumerating resources In certain situations, you might want to discover the resource contents of an unknown portable executable (PE) module. The Windows SDK provides resource enumeration functions that enable your application to obtain lists of resource types, names, and lang... The EnumResourceNamesW and EnumResourceNamesExW functions provide the.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloaderapi.h conta... The search can include both an LN file and its associated .mui files, or it can be limited in several ways. (Unicode) EnumResourceNamesW.(ANSI) ENUMRESLANGPROCW An application-defined callback function used with the EnumResourceLanguages and EnumResourceLanguagesEx functions. (ANSI) ENUMRESNAMEPROCA An application-defined callback function used with the EnumResourceNames and EnumResourceNamesEx functions. (ANSI) ENUMRESNAMEPROCW An application-defined callback function used with."
403,SetScrollInfo,"Microsoft Build · May 19 – 22, 2025SetScrollInfo function (winuser.h) The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested. Syntax Parameters [in] hwnd Type: HWND Handle to a scroll bar control or a.Pager_SetScrollInfo macro (commctrl.h) [Inten... Sets the scrolling parameters of the pager control, including the timeout value, the lines per timeout, and the pixels per line. You can use this macro or send the PGM_SETSETSCROLLINFO message explicitly. Syntax Parameters hwnd Type: HWND Handle to the pager control. cTimeOut Type: UINT The timeout.ScrollWindowEx The ScrollWindowEx function scrolls the contents of the specified window's client area. SetScrollInfo The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if.How to Scroll Text This section describes the changes you can make to an application's main window procedure to enable a user to scroll text. ... The SetScrollInfo function sets the minimum and maximum position values, the page size, and the scrolling position for a scroll bar. After the increment is applied to the current scrolling position, the.FormWindowControl.setScrollInfo Method Definition Namespace: Dynamics.AX.Application Assembly: Applies to. Learn more about the Dynamics.AX.Application.FormWindowControl.setScrollInfo in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formwindowcontrol.setscrollinfo.How to Scroll a Bitmap This section describes changes you can make to an application's main window procedure to enable the user to scroll a bitmap. The SetScrollInfo function sets the minimum and maximum position values, the page size, and the scrolling position for a scroll bar. Processing the WM_HSCROLL and WM_VSCROLL Messages When the.PGM_SETSCROLLINFO message [Intended for internal use; not recommended for use in applications. This message may not be ... Sets the scrolling parameters of the pager control, including the timeout value, the lines per timeout, and the pixels per line. You can send this message explicitly or by using the Pager_SetScrollInfo macro. Parameters wParam.SBM_SETSCROLLINFO message The SBM_SETSCROLLINFO message is sent to set the parameters of a scroll bar. Instead, they should use the SetScrollInfo function... Applications which implement a custom scroll bar control must respond to these messages for the SetScrollInfo function to function properly. Before calling SetScrollInfo, set the cbSize.Flat Scroll Bar This section contains information about the programming elements used to control flat scroll bars. Overviews Topic Contents Flat Scroll Bars Microsoft Internet Explorer 4.0 introduced a new visual technology called flat scroll bars. FlatSB_SetScrollInfo Sets the information for a flat scroll bar. If flat scroll bars are not.FlatSB_SetScrollInfo function (commctrl.h) Sets the information for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard SetScrollInfo function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. This window handle must have been passed."
404,EndPaint,"Microsoft Build · May 19 – 22, 2025The EndPaint function in Windows programming marks the end of painting in a specified window. It is required to be called after completing painting operations that were initiated by the BeginPaint function. The function takes two parameters: a handle to the window that has been repainted and a pointer to a PAINTSTRUCT structure that contains painting information retrieved by BeginPaint. The return value of EndPaint is always nonzero.Additionally, if the caret was hidden during the painting process, EndPaint will restore it to the screen and release the display device context that was retrieved by BeginPaint.References:EndPaint function (winuser.h) The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete. Syntax Parameters [in] hWnd Handle to the window that has been repainted. [in] lpPaint Pointer to a PAINTSTRUCT structure that contains the.The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush. EndPaint The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is.Device Contexts A device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer. Device contexts allow device-independent drawing in Windows. Device contexts can be used to draw to... CPaintDC objects encapsulate the common idiom of Windows, calling the BeginPaint.Upon receiving a WM_PAINT message, an application can call BeginPaint to retrieve the display device context for the client area and use it in calls to GDI functions to carry out whatever drawing operation... After completing the drawing operations, the application calls the EndPaint function to release the display device context. For most.winuser.h header This header is used by multiple technologies. BeginPaint The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting. BlockInput Blocks keyboard and mouse input events from reac... EndMenu Ends the calling thread's active menu. EndPaint The EndPaint.In Windows 7, Microsoft introduced a new graphics engine, named Direct2D, which supports high-performance graphics operations, such as hardware acceleration. Direct2D is also available for Windows Vista through the Platform Update for Windows Vista and for Windows Server 2008 through the Platform Update for Windows Server 2008. (GDI i... After you.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. DrawStateProc A callback function that renders a complex image for DrawState. EndPaint Marks the end of painting in a window. ExcludeUpdateRgn Prevents drawing within invalid areas of a window..Private Display Device Contexts A private device context enables an application to avoid retrieving and initializing a display device context each time the application must draw in a window. If the application does not validate the update region, the window receives an endless series of... Because BeginPaint hides the caret if a window is showing.Display Device Contexts An application obtains a display DC by calling the BeginPaint, GetDC, or GetDCEx function and identifying the window in which the corresponding output will appear. When the application is finished drawing, it must release the DC by calling the EndPaint or ReleaseDC function. There are five types of DCs for video displays:.Public Methods Name Description CWnd::accDoDefaultAction Called by the framework to perform the object's default action. CWnd::accHitTest Called by the framework to retrieve the child element or child object at a given point on the screen. CWnd::EndModalState Call this member function to change a frame window from modal to modeless. CWnd::EndPaint."
405,SetSystemTime,"Microsoft Build · May 19 – 22, 2025SetSystemTime function (sysinfoapi.h) Sets the current system time and date. The system time is expressed in Coordinated Universal Time (UTC). Syntax Parameters [in] lpSystemTime A pointer to a SYSTEMTIME structure that contains the new system date and time. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.UTC-based time is loosely defined as the current date and time of day in Greenwich, England. To set the system time, use the SetSystemTime function. SetSystemTime assumes you have specified a UTC-based time. The GetSystemTimeAdjustment and SetSystemTimeAdjustment functions synchronize the time-of-day clock with another time source using a periodic.sysinfoapi.h header This header is used by multiple technologies. For more information, see: System Services Windows Sidebar sysinfoapi.h contains the following programming interfaces: Functions EnumSystemFirmwareTables Enumerates all system firmware tables of the specified type. (Unicode) SetLocalTime Sets the current local time and date..RtlLoc... RtlTimeToSecondsSince1970 Converts the specified system time to the number of seconds since the first second of January 1, 1970. SetSystemTime Sets the current system time and date. SetSystemTimeAdjustment Enables or disables periodic time adjustments to the system's time-of-day clock. SystemTimeToFileTime Converts a system time to a.GetSystemTime function (sysinfoapi.h) Retrieves the current system date and time in Coordinated Universal Time (UTC) format. To retrieve the current system date and time in local time, use the GetLocalTime function. Return value None Remarks To set the current system date and time, use the SetSystemTime function. Requirements Requirement Value.DTM_SETSYSTEMTIME message Sets the time in a date and time picker (DTP) control. You can send this message explicitly or use the DateTime_SetSystemtime macro. This value must be set to one of the following: Value Meaning GDT_VALID Set the DTP control according to the data within the structure that lParam points to. This flag applies only to DTP.Using a System-Defined Callback Object The system defines three callback objects for driver use: \Callback\SetSystemTime \Callback\PowerState \Callback\ProcessorAdd Drivers that use the system time (for example, file system drivers) might register for the \Callback\SetSystemTime callback object. This callback provides for notification when the.DateTime_SetSystemtime macro (commctrl.h) Sets a date and time picker (DTP) control to a given date and time. You can use this macro or send the DTM_SETSYSTEMTIME message explicitly. Syntax Parameters hdp Type: HWND A handle to a DTP control. gd Type: DWORD A value that specifies the action that should be performed. Sets a date and time picker.This code i used: include &lt;windows.h&gt; include &lt;stdio.h&gt; void main() { SYSTEMTIME st, lt; }| Hi, For more details about the effect in your computer, I suggest you could refer to the Doc: Change the system time - security policy setting And you need you need certain privileges in Windows to alter the time, so if you do not have those.DTM_SETRANGE message Sets the minimum and maximum allowable system times for a date and time picker (DTP) control. You can send this message explicitly or use the DateTime_SetRange macro. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header."
406,GetPropW,"Microsoft Build · May 19 – 22, 2025GetPropW function (winuser.h) Retrieves a data handle from the property list of the specified window. ...erty list by a previous call to the SetProp Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be searched. [in] lpString Type: LPCTSTR An atom that identifies a string. Remarks Note The winuser.h header.(ANSI) Ge... (Unicode) GetWindowTextW Copies the text of the specified window's title bar (if it has one) into a buffer. (ANSI) PROPENUMPROCEXW Application-defined callback function used with the EnumPropsEx function. (Unicode) PROPENUMPROCW An application-defined callback function used with the EnumProps function. (ANSI) RemovePropW Removes an.(Unic... (ANSI) EnumPropsExW Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. (Unicode) EnumPropsW Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. GET_WHEEL_DELTA_WPARAM Retrieves the wheel-delta value.Hello, I have been creating a project using OpenGL, namely glfw3.lib. Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.exe&quot; /MANIFEST /NXCOMPAT /PDB:&quot;D:\Users\Alex."
407,CreateColorSpaceW,"Microsoft Build · May 19 – 22, 2025CreateColorSpaceW function (wingdi.h) The CreateColorSpace function creates a logical color space. Syntax Parameters lplcs Pointer to the LOGCOLORSPACE data structure. Return value If this function succeeds, the return value is a handle that identifies a color space. Windows 95/98/Me: CreateColorSpaceW is supported by the Microsoft Layer for.CreateBrushIndirect The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern. CreateColorSpaceA The CreateColorSpace function creates a logical color space. (ANSI) CreateColorSpaceW The CreateColorSpace function creates a logical color space. (Unicode) CreateCompatibleBitmap The.ConvertIndexToColorName Transforms indices in a color space to an array of names in a named color space. (ConvertIndexToColorName) CreateColorSpaceA The CreateColorSpace function creates a logical color space. (ANSI) CreateColorSpaceW The CreateColorSpace function creates a logical color space. (Unicode) CreateColorTransformA Creates a color.CreateColorSpaceA function (wingdi.h) The CreateColorSpace function creates a logical color space. Syntax Parameters lplcs Pointer to the LOG... Remarks When the color space is no longer needed, use DeleteColorSpace to delete it. Windows 95/98/Me: CreateColorSpaceW is supported by the Microsoft Layer for Unicode. To use this, you must add certain.2.3.7.3 EMR_CREATECOLORSPACEW Record The EMR_CREATECOLORSPACEW record creates a logical color space object from a color profile with a name consisting of Unicode characters. Fields not specified in this section are specified in section 2.3.7. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size ihCS lcs (variable) ....EMR_ABORTPATH EMR_ALPHABLEND EMR_ANGLEARC EMR_ARC EMR_ARCTO EMR_BEGINPATH EMR_BITBLT EMR_CHORD EMR_CLOSEFIGURE EMR_COLORCORRECTPALETTE EMR_COLORMATCHTOTARGETW EMR_CREATEBRUSHINDIRECT EMR_CREATECOLORSPACE EMR_CREATECOLORSPACEW EMR_CREATEDIBPATTERNBRUSHPT EMR_CREATEMONOBRUSH EMR_CREATEPALETTE EMR_CREATEPEN EMR_DELETECOLORSPACE EMR_DELETEOBJECT.2.3.7 Object Creation Record Types The Object Creation record types create graphics objects. The following are EMF object creation record types. EMR_CREATECOLORSPACE 2.3.7.2 Defines a logical color space with a LogColorSpace object ([MS-WMF] section 2.2.2.11). EMR_CREATECOLORSPACEW 2.3.7.3 Defines a logical color space with a LogColorSpaceW object.... one per string. EMR_SETICMMODE: This record specifies the mode of Image Color Management (ICM) for graphics opera EMR_CREATECOLORSPACE: This record creates a logical color space object from a color profile with a name consisting of ASCII characters. EMR_SETCOLORSPACE: This record defines the current logical color space object for graphics....cord EMR_COMMENT_EMFSPOOL packet EMR_COMMENT_EMFSPOOL Record EMR_COMMENT_ENDGROUP packet EMR_COMMENT_ENDGROUP Record EMR_COMMENT_MULTIFORMATS packet EMR_COMMENT_MULTIFORMATS Record EMR_COMMENT_PUBLIC packet EMR_COMMENT_PUBLIC Record Types EMR_COMMENT_WINDOWS_METAFILE packet EMR_COMMENT_WINDOWS_METAFILE Record EMR_CREATEBRUSHINDIRECT example....ows NT 4.0 do not support EMR_TRANSPARENTBLT. Section 2.1.1: Windows NT 3.1, Windows NT 3.5, Windows NT 3.51, and Windows NT 4.0 do not support EMR_GRADIENTFILL. Section 2.1.1: Windows GDI uses an EMR_EXTTEXTOUTW record (section 2.3.5.8) to perform this function. Section 2.1.1: Windows NT 3.1, Windows NT 3.5, Windows NT 3.51, and Windows NT."
408,CreateCaret,"Microsoft Build · May 19 – 22, 2025CreateCaret function (winuser.h) Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. Syntax Parameters [in] hWnd Type: HWND A handle to the window that owns the caret. [in, optional] hBitmap Type: HBITMAP A handle to the bitmap that defines the.Using Carets This section has code samples for the following tasks: Creating and Displaying a Caret Hiding a Caret Destroying a Caret Adjusting the Blink Time Processing Keyboard Input Creating and Displaying a Caret Upon receiving... Use the CreateCaret function to create a caret in the given window. You can then call SetCaretPos to set the.About Carets The system provides one caret per message queue. A window should create a... For more information on keyboard input, see Keyboard Input. Use the CreateCaret function to specify the parameters for a caret. The system forms a caret by inverting the pixel color within the rectangle specified by the caret's position, width, and height..ITextHost::TxCreateCaret method (textserv.h) Creates a new shape for windowless rich edit control's caret. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header textserv.h DLL Msftedit.dll See also Conceptual.Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. Caret Reference Contains the API reference. Caret Functions Name Description CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.Public Methods Name Description CWnd::accDoDefaultAction Called by the framework to perform the object's default action. CWnd::CreateAccessibleProxy Creates an Active Accessibility proxy for the specified object. CWnd::CreateCaret Creates a new shape for the system caret and gets ownership of the caret. CWnd::CreateControl Create an ActiveX.CWindow::BringWindowToTop Bring... CWindow::ClientToScreen Converts client coordinates to screen coordinates. CWindow::Create Creates a window. CWindow::CreateCaret Creates a new shape for the system caret. CWindow::CreateGrayCaret Creates a gray rectangle for the system caret. CWindow::CreateSolidCaret Creates a solid rectangle for the system.If necessary, the function stretches the bits t... CreateAcceleratorTableA Creates an accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap..CreateAcceleratorTableA Creates an accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. CreateCursor Creates a cursor having the specified size,."
409,RemoveDirectoryW,"Microsoft Build · May 19 – 22, 2025RemoveDirectoryW function (fileapi.h) Deletes an existing empty directory. To perform this operation as a transacted operation, use the RemoveDirectoryTransacted function. Syntax Parameters [in] lpPathName The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the.We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path... Here are the directory management functions that no longer.(QueryDosDeviceW) ReadFile Reads data from the specified file or in... ReadFileScatter Reads data from a file and stores it in an array of buffers. RemoveDirectory2A Deletes an existing empty directory. (ANSI) RemoveDirectory2W Deletes an existing empty directory. (Unicode) RemoveDirectoryA Deletes an existing empty directory. (ANSI).It reboots to winPE and I have to do the same thin... TSManager6/1/2023 7:35:41 AM1852 (0x073C) RemoveDirectoryW failed (0x80070091) for C:_SMSTaskSequenceTSManager6/1/2023 7:35:41 AM1852 (0x073C)| I am able to see the Windows disk from diskpart so I would not guess its driver related. TSManager6/1/2023 7:35:41 AM1852 (0x073C) RemoveDirectoryW.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). RemoveDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file... Moved into.Hi, I Have TS which applies a PowerShell script to create new registry key but this TS is keep failing on some machine. Error executing Task Sequence Manager service. TSManager20/01/2021 15:39:169960 (0x26E8) RemoveDirectoryW failed (0x80070091) for C:_SMSTaskSequenceTSManager20/01/2021 15:39:169960 (0x26E8) Deleting volume ID file.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h.Enable long paths in Windows 10, version 1607, and later Starting in Windows 10, version 1607, MAX_PATH limitations have been removed from many common Win32 file and directory functions. Functions without MAX_PATH restrictions These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path.TSManager    09/02/2023 10:00:55    9072 (0x2370) RemoveDirectoryW failed (0x80070091) for C:_SMSTaskSequence\sms\bin\x64    TSManager    09/02/2023 10:00:55    9072 (0x2370) RemoveDirectoryW failed (0x80070091) for C:_SMSTaskSequence\sms\bin    TSManager    09/02/2023 10:00:55    9072 (0x2370) RemoveDirectoryW failed (0x80070091) for."
410,EnumResourceLanguagesA,"Microsoft Build · May 19 – 22, 2025EnumResourceLanguagesA function (winbase.h) Enumerates language-specific resources, of the specified type and name, associated with a binary module. Syntax Parameters [in] hModule Type: HMODULE The handle to a module to be searched. Starting with Windows Vista, if this is a language-neutral Portable Executable (LN file), then appropriate .mui.(Unicode) EnterUmsSchedulingMode Converts the calling thread into a user-mode scheduling (UMS) scheduler t... EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumResourceLanguagesW Enumerates language-specific resources, of the specified type and name,.ENUMRESLANGPROCA callback function (libloaderapi.h) An application-defined callback function used with the EnumResourceLanguagesA and the EnumResourceLanguagesExA functions. The EnumResourceLanguagesA or EnumResourceLanguagesExA function provides this value. See also EnumResourceLanguagesA EnumResourceLanguagesExA IS_INTRESOURCE MAKELANGID.(ANSI) ENUMRESNAMEPROCW An application-defined callback function used with the Enu... (Unicode) EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumResourceLanguagesExA Enumerates language-specific resources, of the specified type and name, associated with a."
411,DPtoLP,"Microsoft Build · May 19 – 22, 2025DPtoLP function (wingdi.h) The DPtoLP function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation. Syntax Parameters [in] hdc A handle to the device context. [in, out] lppt A pointer.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Function Description Cli... CombineTransform Concatenates two world-space to page-space transformations. DPtoLP Converts device coordinates into logical coordinates. GetCurrentPositionEx Retrieves the current position in.(ANSI) DeviceCapabilitiesW The DeviceCapabilities function retrieves the capabilities of a printer driver. (Unicode) DPtoLP The DPtoLP function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world.DIBINDEX The DIBINDEX macro takes an index to an entry in a DIB color table and returns a COLORREF value that specifies the color associated with the given index. DPtoLP The DPtoLP function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents.CDC::Detach Detaches the Windows device context from this CDC object. CDC::DPtoHIMETRIC Converts device units into HIMETRIC units. CDC::DPtoLP Converts device units into logical units. CDC::Draw3dRect Draws a three-dimensional rectangle. CDC::HIMETRICtoDP Converts HIMETRIC units into device units. CDC::HIMETRICtoLP Converts HIMETRIC units into.LPtoDP function (wingdi.h) The LPtoDP function converts logical coordinates into device coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation. Syntax Parameters [in] hdc A handle to the device context. [in, out] lppt A pointer.The formula first offsets the point fr... This value, no longer biased by the origin, is then scaled into the destination coordinate system by the ratio of the extents. Finally, the scaled value is offset by the destination origin to its final mapping. The LPtoDP and DPtoLP functions may be used to convert from logical points to device points and.All input... Use the LPtoDP and DPtoLP functions to convert to and from logical coordinates, if necessary. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.(The name tagRECT is a less-commonly-used name for the RECT structure.). This means that the data members (left, top, right, and bottom) of the RECT structure are accessible data members of CRect. Use caution when manipulating a CRect with the CDC::DPtoLP and CDC::LPtoDP member functions. If the mapping mode of a display context is such that the.CWnd::DrawMenuBar ... CWnd::EnableActiveAccessibility Enables user-defined Active Accessibility functions. CWnd::EnableDynamicLayout Enables the position and size of child windows to adjust dynamically when the user resizes the window. CWnd::EnableD2DSupport Enables or disables window D2D support. Call this method before the main window is."
412,GetMenuDefaultItem,"Microsoft Build · May 19 – 22, 2025GetMenuDefaultItem function (winuser.h) Determines the default menu item on the specified menu. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu for which to retrieve the default menu item. [in] fByPos Type: UINT Indicates whether to retrieve the menu item's identifier or its position. Requirements Requirement Value Minimum supported.(Unicode) GetMenu Retrieves a handle to... GetMenuBarInfo Retrieves information about the specified menu bar. GetMenuCheckMarkDimensions Retrieves the dimensions of the default check-mark bitmap. GetMenuDefaultItem Determines the default menu item on the specified menu. GetMenuInfo Retrieves information about a specified menu. GetMenuItemCount.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. Clicking a menu item opens a submenu or causes the application to carry out a command. If there is no default command item, the submenu remains open. To retrieve and set the default item for a submenu, use the GetMenuDefaultItem and.The system displays this bitmap next to selected menu items. Before calling the SetMenuItemBitmaps function to replace the default check-mark bitmap for a menu item, an application must determine the correct bitmap size by calling GetMenuCheckMarkDimensions. GetMenuDefaultItem Determines the default menu item on the specified menu. GetMenuInfo.SetMenuDefaultItem function (winuser.h) Sets the default menu item for the specified menu. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. Public Methods Name Description CMenu::AppendMenu ... CMenu::EnableMenuItem Enables, disables, or dims (grays) a menu item. CMenu::GetDefaultItem Determines the default menu item on the specified menu..Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.CheckMenuRadioItem Checks a specified menu item and makes it a radio... At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem,."
413,MsgWaitForMultipleObjectsEx,"Microsoft Build · May 19 – 22, 2025MsgWaitForMultipleObjectsEx function (winuser.h) Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The MsgWaitForMultipleObjectsEx function can specify handles of any of the following object types in.Single-object Wait Functions Multiple-object Wait Functions Al... Multiple-object Wait Functions The WaitForMultipleObjects, WaitForMultipleObjectsEx, MsgWaitForMultipleObjects, and MsgWaitForMultipleObjectsEx functions enable the calling thread to specify an array containing one or more synchronization object handles. Feedback Was this page.MsgWaitForMultipleObjects function (winuser.h) Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the dwWakeMask parameter. To enter an alertable wait state, use the MsgWaitForMultipleObjectsEx function. Syntax Parameters.Therefore, the thread must provide a message loop to process the messages in its message queue. In addition, you must use MsgWaitForMultipleObjects or MsgWaitForMultipleObjectsEx in that thread, rather than the other wait functions, so that it can process messages. Otherwise, the system can become deadlocked when the thread is sent a message while.For these scenarios, use MsgWaitForMultipleObjects or MsgWaitForMultipleObjectsEx, rather than SleepEx. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Vista,.LPOVERLAPPED_COMPLETION_ROUTINE callback function (minwinbase.h) An application-defined callback function used with the ReadFileEx and WriteFileEx functions. It is called when the asynchronous input and output (I/O) operation is completed or canceled and the calling thread is in an alertable state (by using the SleepEx,.Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only when they are in an alertable state. A thread can only do this by calling one of the following functions with the appropriate flags: SleepEx WaitForSingleObjectEx WaitForMultipleObjectsEx SignalObjectAndWait MsgWaitForMultipleObjectsEx.Contents Windows 9x versus Windows XP How GDI Manages Handles Tracking Object Allocation with API Hooking Using Stack Tracing to Monitor Allocations Debugging to Determine DLLs to Patch Injecting Running Code into Another Process De... For example, the infiltrated thread waits for a specific named event and calls MsgWaitForMultipleObjectsEx to.COWAIT_FLAGS enumeration (combas... In this case, the behavior of CoWaitForMultipleHandles corresponds to the behavior of the MsgWaitForMultipleObjectsEx function with the dwFlags parameter set to MWMO_WAITALL. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Wait functions Wait function Description MsgWaitForMultipleObjects Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects. MsgWaitForMultipleObjectsEx Waits until one or all of the specified objects are in the signaled state, an I/O completion routine."
414,CharNextW,"Microsoft Build · May 19 – 22, 2025CharNextW function (winuser.h) Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. Syntax Parameters [in] lpsz Type: LPCTSTR A character in a null-terminated string. Return value Type: LPTSTR The return value is a pointer to the next character in the string,.(ANSI) CharLowerBuffW Converts uppercase ch... (Unicode) CharLowerW Converts a character string or a single character to lowercase. (Unicode) CharNextA Retrieves a pointer to the next character in a string. (ANSI) CharNextExA Retrieves the pointer to the next character in a string. CharNextW Retrieves a pointer to the next character in a string..(Unicode) CharLowerW Converts a character string or a sing... (Unicode) CharNextA Retrieves a pointer to the next character in a string. (ANSI) CharNextExA Retrieves the pointer to the next character in a string. CharNextW Retrieves a pointer to the next character in a string. (Unicode) CharPrevA Retrieves a pointer to the preceding character in a."
415,LoadStringW,"Microsoft Build · May 19 – 22, 2025LoadStringW function (winuser.h) Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to an instance of the.CHString::LoadStringW(UINT,LPWSTR,UINT) method (chstring.h) [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The LoadStringW method reads a Windows string resource.CHString::LoadStringW(UINT) method (chstring.h) [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The LoadStringW method reads a Windows string resource (identified by.(Unicode) LoadMenuW Loads the specified menu resource from the executable (.exe... LoadStringA Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character. (ANSI) LoadStringW Loads a string resource from the executable file associated with a.CPSFUNC_LOAD_CPSUI_STRING The CPSFUNC_LOAD_CPSUI_STRING function code causes the ComPropSheet function to load a CPSUI-supplied string resource. The ComPropSheet function calls the LoadString](/windows/win32/api/winuser/nf-winuser-loadstringw) function to load the specified string. Parameters (CPSFUNC_LOAD_CPSUI_STRING) hComPropSheet: Group parent.CHString class [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The MI APIs should be used for all new deve... Left Extracts the left part of a string (like the Basic.In this section AllocSysString method CHString constructors Collate method Compare method CompareNoCase method Empty method Find methods FindOneOf method Format methods FormatMessageW methods FormatV method FreeExtra method GetAllocLength method GetAt method GetBuffer method GetBufferSetLength method GetData method GetLength method IsEmpty method.CHString class (chstring.h) [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further... CHString::LoadStringW The LoadStringW method reads a Windows string resource (identified by nID) into an existing CHString object. (overload 1/2) CHString::LoadStringW The LoadStringW method reads a....000\120\127D\142\141\163e&quot;, '\000\000' &lt;repeats 11 times&gt;&quot;\000, \155\100\164\162\151\170\061\062\063\000\137\163\165\160\160\157\162t\123\121\114\040\123\145\162\166\145r&quot;, '\000\000' &lt;repeats 497 times&gt;&quot;\xbf0a,.The LoadString function loads a string resource from an application's executable file. The FormatMessage function loads a string resource and interprets formatting options that may be emb... When loading resources, applications can use the Unicode version of the resource functions (LoadStringW, for example) to obtain resources as Unicode data.."
416,CreateMailslotW,"Microsoft Build · May 19 – 22, 2025CreateMailslotW function (winbase.h) Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. The mailslot is local to the computer that creates it. An error occurs if a mailslot with the specified name already exists. Syntax Parameters [in] lpName The name of the.(Unicode) Crea... (CreateJobObjectA) CreateMailslotA Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. (ANSI) CreateMailslotW Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot..AddSnapshotToRecove... AddToSnapshotSet The AddToSnapshotSet method adds an original volume or original remote file share to the shadow copy set. AddVDisk Creates a virtual disk object for an existing virtual disk file. Advise Registers the caller's IVdsAdviseSink interface with VDS so that the caller receives notifications from the VDS service.."
417,FlushConsoleInputBuffer,"Microsoft Build · May 19 – 22, 2025FlushConsoleInputBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite f... Our preferred modern solution focuses on virtual terminal sequences for.Low-Level Console Input Functions Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. There are five low-level functions for accessing a console's input buffer: ReadConsoleInput PeekConsoleInput GetNumberOfConsoleInputEvents WriteConsoleInput FlushConsoleInputBuffer The.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias for the speci... FillConsoleOutputCharacter Writes a character to the console screen buffer a specified number of times. FlushConsoleInputBuffer Flushes the console input buffer. FreeConsole Detaches the calling.To read input records ... To discard all unread records in a console's input buffer, use the FlushConsoleInputBuffer function. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library.To discard all unread records in a console's input buffer, use the FlushConsoleInputBuffer function. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode....ements Minimum supported client Windows 7 [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header none, see remarks Library none, see remarks DLL Kernel32.dll Unicode and ANSI names ReadConsoleInputExW (Unicode) and ReadConsoleInputExA (ANSI) Se Console Functions FlushConsoleInputBuffer.CStdStubBuffer2_QueryInterface Introduced into... NdrProxyForwardingFunction10 Introduced into api-ms-win-core-com-midlproxystub-l1-1-0.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. FlushFileBuffers Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in."
418,StretchBlt,"Microsoft Build · May 19 – 22, 2025StretchBlt is a function in Microsoft products that is used to copy a bitmap from a source rectangle into a destination rectangle, while stretching or compressing the bitmap to fit the dimensions of the destination rectangle as necessary. This function is part of the Windows GDI (Graphics Device Interface) and allows for more flexible image manipulation compared to the BitBlt function, which only duplicates the source rectangle dimensions.When using StretchBlt, the application can specify the dimensions of both the source and destination rectangles. If the destination rectangle is smaller than the source rectangle, the system removes color data according to a specified stretch mode, which can be set using the SetStretchBltMode function. Conversely, if the destination rectangle is larger, the system scales or magnifies each pixel in the resultant image.The StretchBlt function is particularly useful in applications that require image scaling, such as drawing applications that offer zoom features. It supports various raster operations, allowing developers to control how colors are combined during the output process.References:StretchBlt function (wingdi.h) The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary. The system stretches or compresses the bitmap according to the stretching mode currently set in the destination device.However, unlike the BitBlt function, which duplicates the source rectangle dimensions in the destination rectangle, StretchBlt allows an application to specify the dimensions of both the source and the destination rectangles. ...e source bitmap, the system combines rows or columns of color data (or both) in the bitmap before rendering the corre.Applications scale images by calling the StretchBlt function. Like the BitBlt function, StretchBlt copies bitmap data from a bitmap in a source device context (DC) into a bitmap in a target DC. However, unlike the BitBlt function, StretchBlt scales the image based on the specified dimensions of the source and target rectangles. If the target.Support for Device StretchBlt Operations Setting the *PreAnalysisOptions parameter to 4 allows Unidrv to download DrvStretchBlt calls directly to devices that support stretchblt operations. When Unidrv generates 24 BPP color data, all stretchblt images are stretched to the resolution of the device, which results in large quantities of raster data.COLORADJUSTMENT structure (wingdi.h) The COLORADJUSTMENT structure defines the color adjustment values used by the StretchBlt and StretchDIBits functions when the stretch mode is HALFTONE. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.DXGK_RENDERKM_COMMAND structure (d3dkmddi.h) The DXGK_RENDERKM_COMMAND structure is used to construct a command buffer to control GDI hardware-accelerated rendering. Command.StretchBlt [in] A stretch bit-block transfer that is described by a DXGK_GDIARG_STRETCHBLT structure. Command.TransparentBlt [in] A transparent bit-block transfer that is.DXGK_GDIARG_STRETCHBLT structure (d3dkmddi.h) The DXGK_GDIARG_STRETCHBLT structure describes the characteristics of a GDI hardware-accelerated stretch bit-block transfer (bitblt) operation. Syntax Members [in] SrcRect A RECT structure that defines the rectangular area to be copied. This rectangle is specified in the coordinate system of the source.For more information, see the RC_BITBLT raster capability entry in the GetDeviceCaps function as well as the following functions: MaskBlt, PlgBlt, and StretchBlt. BitBlt returns an error if the source and destination device contexts represent different devices. Requirements Re... The BitBlt function performs a bit-block transfer of the color data.GetStretchBltMode function (wingdi.h) The GetStretchBltMode function retrieves the current stretching mode. The stretching mode defines how color data is added to or removed from bitmaps that are stretched or compressed when the StretchBlt function is called. Syntax Parameters [in] hdc A handle t... The stretching mode defines how color data is.Observed behavior When StretchBlt is used on a printer device context of the Microsoft PDF Printer device it produces only a black surface. ...ram and select File / Print In the print dialogue select 'Microsoft Print to PDF' as Printer Click OK The PDF produces should look like this: 102054-printbug.pdf| The recent security update from microsoft."
419,CancelIo,"Microsoft Build · May 19 – 22, 2025CancelIo function Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The function does not cancel I/O operations that other threads issue for a file handle. In Windows 8 and Windows Server 2012, this function is supported by the following technologies. Technology Supported Server.CancelIo function (ioapiset.h) Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The function does not cancel I/O operations that other threads issue for a file handle. In Windows 8 and Windows Server 2012, this function is supported by the following technologies. Technology.CancelIo Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The following functions are used with file I/O. CancelIo CancelIoEx CancelSynchronousIo CreateIoCompletionPort FlushFileBuffers GetQueuedCompletionStatus GetQueuedCompletionStatusEx LockFile LockFileEx.In Windows 8 and Windows Server 2012, this function is supported by the following technologies. ...ue Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2008 [desktop apps | UWP apps] Header IoAPI.h (include Windows.h); WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization and Overlapped Input and Output You can perform either synchronous or asynchronous (also cal... To cancel all pending asynchronous I/O operations, use the CancelIoEx function and provide an OVERLAPPED structure that.To cancel all pending asynchronous I/O operations, use either: CancelIo—this function only cancels operations issued by the calling thread for the specified file handle. CancelIoEx—this function cancels all operations issued by the threads for the specified file handle. Use CancelSynchronousIo to cancel pending synchronous I/O operations. There.To cancel all pending asynchronous I/O operations, use either: CancelIo — This function cancels only operations issued by the calling thread for the specified file handle. CancelIoEx - This function cancels all operations issued by the threads for the specified file handle. Use the CancelSynchronousIo function to cancel pending synchronous I/O.WriteFileEx function (fileapi.h) Writes data to the specified file or input/output (I/O) device. To cancel all pending asynchronous I/O operations, use either: CancelIo: This function only cancels operations issued by the calling thread for the specified file handle. CancelIoEx: This function cancels all operations issued by the threads for the.To cancel all pending asynchronous I/O operations, use either: CancelIo: This function only cancels operations issued by the calling thread for the specified file handle. CancelIoEx: This function cancels all operations issued by the threads for the specified file handle. Use CancelSynchronousIo to cancel pending synchronous I/O operations..HasOverlappedIoCompleted macro (winbase.h) Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation. To cancel all pending asynchronous I/O operations, use the CancelIo function. The CancelIo function only cancels operations issued by the calling thread for the specified file handle.."
420,WSASendTo,"Microsoft Build · May 19 – 22, 2025WSASendTo function (winsock2.h) The WSASendTo function sends data to a specific destination, using overlapped I/O where applicable. For a Winsock application, once the WSASendTo function is called, the system owns these buffers and the application may not access them. This array must remain valid for the duration of the send operation. [in].Sending and Receiving PGM Data Sending and receiving PGM data is similar to sending or receiving data on any socket. There are considerations specific to PGM, outlined in the following paragraphs. Sending PGM Data Once a PGM sender session is created, data is sent using the various Windows Sockets send functions: send, sendto, WSASend, and.WSARemoveServiceClass The WSARemoveServiceClass function permanently removes the service class schema from the registry. WSASend Sends data on a connected socket. (WSASend) WSASendDisconnect The WSASendDisconnect function initiates termination of the connection for the socket and sends disconnect data. WSASendMsg Sends data and optional control.The sendto,WSASendMsg, and WSASendTo functions implicitly bind the socket to the wildcard address if the socket is not already bound. ... WSASend func which do not perform an implicit bind and are allowed only on connected sockets, which means the socket mustThe bind function might be used before send operations using the sendto,WSASendMsg, or.Scatter/Gather I/O The WSARecv, WSARecvFrom, LPFN_WSARECVMSG (WSARecvMsg), WSASend, WSASendMsg, and WSASendTo functions all take an array of application buffers as input parameters and can be used for scatter/gather (or vectored) I/O. When receiving into multip... The WSARecv, WSARecvFrom, WSARecvMsg, WSASend, WSASendMsg, and WSASendTo functions.WSASetSocketPeerTargetName function (ws2tcpip.h) The WSASetSocketPeerTargetName function is used to specify the peer target name (SPN) that corresponds to a peer IP address. Remarks The WSASetSocketPeerTargetName function provides a method to specify the target name that corresponds to a peer security principal. For connectionless sockets, an.The following rules apply to the operations over SOCK_RAW sockets: The sendto or WSASendTo function is normally used to send data on a socket of type SOCK_RAW. The destination address can be any valid address in the socket's address family, ... To send to a broadcast address, an application must have used setsockopt with SO_BROADCAST enabled.....o functions impl bind the socket to the wildcard address if the socket is notThe bind function might be used before send operations using the sendto,WSASendMsg, or WSASendTo functions if an application wanted to select a specific local IP address on a local computer with multiple network interfaces and local IP addresses. Otherwise an implicit.WSAQuerySocketSecurity Queries information about the security applied to a connection on a socket. WSARemoveServiceClass Permanently removes the service class schema from the registry. WSASend Sends data on a connected socket. WSASendDisconnect Initiates termination of the connection for the socket and sends disconnect data. WSASendMsg Sends data.Using Socket I/O Completion Routines The functions used to initiate overlapped I/O ( WSASend, WSASendTo, WSARecv, WSARecvFrom) all take lpCompletionRoutine as an optional input parameter. Summary of Overlapped Completion Indication Mechanisms The particular overlapped I/O completion indication to be used for a given overlapped operation is."
421,CreatePen,"Microsoft Build · May 19 – 22, 2025CreatePen function (wingdi.h) The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Pen Functions (Windows GDI) The following functions are used with pens. Function Description CreatePen Creates a logical pen that has the specified style, width, and color. CreatePenIndirect Creates a logical cosmetic pen that has the style, width, and color specified in a structure. ExtCreatePen Creates a logical cosmetic or geometric pen that.CPen Class Encapsulates a Windows graphics device interface (GDI) pen. Syntax Members Public Constructors Name Description CPen::CPen Constructs a CPen object. Public Methods Name Description CPen::CreatePen Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the CPen object..ExtCreatePen function (wingdi.h) The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes. Syntax Parameters [in] iPenStyle A combination of type, style, end cap, and join attributes. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.ICM-Enabled Pen Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as ... The following pen functions are enabled for use with ICM: CreatePen ExtCreatePen. Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its.CreatePatternBrush The CreatePatte... The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. CreatePen The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw.Cosmetic pens have three attributes: width, style, and color. For more information about these attributes, see Pen Attributes. To create a cosmetic pen, use the CreatePen, CreatePenIndirect, or ExtCreatePen function. To retrieve one of the three stock cosmetic pens managed by the system, use the GetStockObject function. After you create a pen (or.A user-defined style generates lines with a customized series of dashes and dots. Use the CreatePen, CreatePenIndirect, or ExtCreatePen function to create a pen that has the system-defined styles. Use the ExtCreatePen function to create a pen that has a user-defined style. The style attribute specifies the line pattern that appears when a.The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. CreatePen The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves. CreatePenIndirect The.Pen Color The color attribute specifies the pen's color. An application can create a cosmetic pen with a unique color by using the RGB macro to store the red, green, blue triplet that specifies the desired color in a COLORREF structure and passing this structure's address to the CreatePen, CreatePenIndirect, or ExtCreatePen function. (The stock."
422,FlushFileBuffers,"Microsoft Build · May 19 – 22, 2025FlushFileBuffers is a function used in Windows programming to force the operating system to write the contents of data buffers to the disk. When an application writes to a file, the system typically buffers this data to optimize performance. However, there may be situations where an application needs to ensure that the data is actually written to the disk immediately, rather than waiting for the system to do it on a regular basis.The FlushFileBuffers function can be called by an application to flush the internal buffers associated with a file, ensuring that all buffered data is written to the disk. This is particularly important for applications that require data integrity, such as database systems or applications that handle critical information.Additionally, if an application wants to bypass the data buffer entirely and write directly to the disk, it can use the FILE_FLAG_NO_BUFFERING flag when creating or opening the file with the CreateFile function.References:FlushFileBuffers function (fileapi.h) Flushes the buffers of a specified file and causes all buffered data to be written to a file. The FlushFileBuffers function writes all the buffered information for a specified file to the device or pipe. Due to disk caching interactions within the system, the FlushFileBuffers function can be inefficient when.Read and Wr... To empty the output buffer while ensuring that the contents are transmitted, a thread can call the FlushFileBuffers function (a synchronous operation). Note, however, that FlushFileBuffers is subject to flow control but not to write time-outs, and it will not return until all pending write operations have been transmitted. Windows.Flushing System-Buffered I/O Data to Disk Windows stores the data in file read and write operations in system-maintained data buf... An application can force the operating system to write the contents of these data buffers to the disk by using the FlushFileBuffers function. Alternatively, an application can specify that write operations are to.DispatchFlushBuffers Routines ... Driver support for this I/O function code is optional, but all file system and filter drivers that maintain internal data buffers must handle it to preserve changes to file data or metadata across system shutdowns. This request is sent by the I/O manager and other operating system components, as well as other.Remarks If a thread uses PurgeComm to flush an output buffer, the deleted characters are not transmitted. To empty the output buffer while ensuring that the contents are transmitted, call the FlushFileBuffers function (a synchronous operation). Note, however, that FlushFileBuffers is subject to flow control but not to write time-outs, and it will.Remarks This method calls platform-dependent APIs such as FlushFileBuffers() on Windows and fsync() on Unix.Flushing the buffers causes data to be written to disk, which is a relatively expensive operation. ...orm multiple writes to and then call this method either when you are done writing to the file or periodically if you expect to continue.To flush the metadata to disk, use the FlushFileBuffers function. The frequency at which flushing occurs is an important consideration that balances system performance with system reliability. If the system is not flushed often enough, then the likelihood is greater that either system memory will be depleted by the cache, or a sudden system.FindNextFileNameW Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function. FlushFileBuffers Flushes the buffers of a specified file and causes all buffered data to be written to a file. GetCompressedFileSize Retrieves the actual number of bytes of disk storage used to store a.See ILog::AppendRecord. Notes to Implementers It is recommended that you flush file buffers (for example, using the FlushFileBuffers function) before returning from this method. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform.The FlushViewOfFile function does not flush the file metadata, and it does not wait to return until the changes are flushed from the underlying hardware disk cache and physically written to disk. To flush all the dirty pages plus the metadata for the file and ensure that they are physically written to disk, call FlushViewOfFile and then call the."
423,GetMapMode,"Microsoft Build · May 19 – 22, 2025GetMapMode function (wingdi.h) The GetMapMode function retrieves the current mapping mode. Syntax Parameters [in] hdc A handle to the device context. Return value If the function succeeds, the return value specifies the mapping mode. If the function fails, the return value is zero. Remarks The following are the various mapping modes. Mode.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. GetMapMode Retrieves the current mapping mode. GetViewportExtEx Retrieves the x-extent and y-... MapWindowPoints Converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to.Graphic Modes Windows supports five graphic modes that allow an application to specify how colors are mixed, where output appears, how the output is scaled, and so on. Graphics mode Function Background GetBkMode Drawing GetROP2 Mapping GetMapMode Polygon-fill GetPolyFillMode Stretching GetStretchBltMode An application can change the default modes.Mapping Modes and Translations The mapping modes are described in the following table. Mapping mode Description MM_ANISOTROPIC Each unit in page space is mapped to an application-specified unit in device space. To set a mapping mode, call the SetMapMode function. Retrieve the current mapping mode for a DC by calling the GetMapMode function. The.(ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. (Unicode) GetGraphicsMode The GetGraphicsMode function retrieves the current graphics mode for the specified device context. (Unicode) GetMapMode The GetMapMode function.GetBkMode The GetBkMode function returns the current background mix mode for a specified device context. GetBoundsRect The GetBoundsRect function obtains the current accumulated bounding rectangle for a specified device context(Unicode) GetGraphicsMode The GetGraphicsMode function retrieves the current graphics mode for the specified device.CDC::Ge... The layout can be either left to right (default) or right to left (mirrored). CDC::GetMapMode Retrieves the current mapping mode. CDC::GetMiterLimit Returns the miter limit for the device context. CDC::GetPixel Retrieves the RGB color value of the pixel at the specified point. CDC::SetLayout Changes the layout of a device context (DC)..REOBJECT structure (richole.h) Contains information about an OLE or image object in a rich edit control. Syntax Members cbStruct Type: DWORD Structure size, in bytes. cp Type: LONG Character position of the object. clsid Type: CL... The unit of measure is 0.01 millimeters, which is a HIMETRIC measurement. For more information, see function.SetMapMode function (wingdi.h) The SetMapMode function sets the mapping mode of the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.The CascadeWindows function cascades the windows on t... The TileWindows function tiles the windows on the desktop or tiles the child windows of the specified parent window. Window Layout and Mirroring The window layout defines how text and Windows Graphics Device Interface (GDI) objects are laid out in a window or device context (DC). Some."
424,KillTimer,"Microsoft Build · May 19 – 22, 2025KillTimer function (winuser.h) Destroys the specified timer. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window associated with the specified timer. This value must be the same as the hWnd value passed to the SetTimer function that created the timer. [in] uIDEvent Type: UINT_PTR The timer to be destroyed. ...eter must be the.SystemEvents.KillTimer(IntPtr) Method Definition Namespace: Microsoft.Win32 Assembly:Microsoft.Win32.SystemEvents.dll Assembly:System.dll Package:Microsoft.Win32.SystemEvents v10.0.0-preview.3.25171.5 ... Parameters timerId The ID of the timer to terminate. Exceptions InvalidOperationException System event notifications are not supported under the.Using Timers This topic shows how to create and destroy timers, and how to use a timer to trap mouse input at specified intervals. Creating a Timer Destroying a Timer Using Timer Functions to Trap Mouse Input Related topics Creating a Timer The following example uses the SetTimer function to create two timers. Destroying a Timer Applications.Timers A timer is an internal routine that repeatedly measures a specified interval, in milliseconds. In This Section Name Description About Timers Describes how to create, identify, set, and delete timers... Timer Reference Contains the API reference. Timer Functions Name Description KillTimer Destroys the specified timer. SetTimer Creates a.Timer Functions In This Section KillTimer SetCoalescableTimer SetTimer TimerProc. Timer Functions. /windows/win32/winmsg/timer-functions.SetCoalescableTimer function (winuser.h) Creates a timer with the specified time-out value and coalescing tolerance delay. An application can pass this value to the KillTimer function to destroy the timer. An application can pass the value of the nIDEvent parameter to the KillTimer function to destroy the timer. Requirements Requirement Value.Kill timer didnot work as well.| According to MSDN : If the function succeeds and the hWnd parameter is NULL, the return value is an integer identifying the new timer. An application can pass this value to the KillTimer function to destroy the timer. So you need to modify the code to:| Regarding KillTimer, parameter 2, the documentation says:.SetTimer function (winuser.h) Creates a timer with the specified time-out value. An application can pass this value to the KillTimer function to destroy the timer. An application can pass the value of the nIDEvent parameter to the KillTimer function to destroy the timer. Requirements Requirement Value Minimum supported client Windows 2000.CWindow::IsZoomed Determines whether the window is maximized. CWindow::KillTimer Destroys a timer event. CWindow::LockWindowUpdate Disables or enables drawing in the window. CWindow::MapWindowPoints Converts a set of points from the w... Remarks See IsZoomed in the Windows SDK. CWindow::KillTimer Destroys a timer event created by.About timers This topic describes how to create, identify, set, and delete timers. An application uses a timer to schedule an event for a window after a specified time has elapsed. A new timer starts timing the interval as soon as it is created. An application can change a timer's time-out value by using SetTimer and can destroy a timer by using."
425,CreateConsoleScreenBuffer,"Microsoft Build · May 19 – 22, 2025CreateConsoleScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existin... Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in.Console Handles A console process uses handles to access the input and screen buffers of its console. The CreateConsoleScreenBuffer function creates a new screen buffer and returns a handle. Console handles returned by CreateFile and CreateConsoleScreenBuffer can be used in any of the console functions that require a handle to a console's input.Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. The active screen buffer is the one that is displayed on the screen. The system creates a screen buffer whenever it creates a new console. To open a handle to a console's active screen buffer, specify the CONOUT$ value in a.Reading and Writing Blocks of Characters and Attributes Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. For more information ab... The following example uses the CreateConsoleScreenBuffer function to create a new screen buffer. After the SetConsoleActiveScreenBuffer function makes.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias for the specified executable. CreatePseudoConsole Allocates a new pseudoconsole for the calling process. CreateConsoleScreenBuffer Creates a console screen buffer. FillConsoleOutputAttribute Sets the text and.Console Buffer Security and Access Rights The Windows security model enables you to control access to console input buffers and console screen buffers. For more information about security, see Access-Control Model. Console Object Security Descriptors You can specify a security descriptor for the console input and console screen buffers when you.SetConsoleActiveScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include.CStdStubBuffer2_QueryInterface Introduced into api-ms-win-core-com-midlproxystub-l1-1-0.dll in 10.0.10240... NdrProxyForwardingFunction10 Introduced into api-ms-win-core-com-midlproxystub-l1-1-0.dll in 10.0.10240. CreateFiberEx Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-file-l1-2-1.dll API."
426,CreateFontIndirectA,"Microsoft Build · May 19 – 22, 2025CreateFontIndirectA function (wingdi.h) The CreateFontIndirect function creates a logical font that has the specified characteristics. Remarks The CreateFontIndirect function creates a logical font with the characteristics specified in the LOGFONT structure. ...get the appropriate font on different language versions of call EnumFontFamiliesEx.This dev... (Unicode) CreateFontA The CreateFont function creates a logical font with the specified characteristics. (ANSI) CreateFontIndirectA The CreateFontIndirect function creates a logical font that has the specified characteristics. (ANSI) CreateFontIndirectExA The CreateFontIndirectEx function specifies a logical font that has the.(Unicode) CreateFontA The CreateFont function creates a logical font with the specified characteristics. (ANSI) CreateFontIndirectA The CreateFontIndirect function creates a logical font that has the specified characteristics. (ANSI) CreateFontIndirectExA The CreateFontIndirectEx function specifies a logical font that has the characteristics in.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,."
427,WSARecvFrom,"Microsoft Build · May 19 – 22, 2025WSARecvFrom function (winsock2.h) The WSARecvFrom function receives a datagram and stores the source address. Syntax Parameters [in] s A descriptor identifying a socket. [in, out] lpBuffers A pointer to an array of WSABUF structures. Remarks The WSARecvFrom function provides functionality over and above the standard recvfrom function in three.Scatter/Gather I/O The WSARecv, WSARecvFrom, LPFN_WSARECVMSG (WSARecvMsg), WSASend, WSASendMsg, and WSASendTo functions all take an array of application buffers as input parameters and can be used for scatter/gather (or vectored) I/O. When receiving into multip... The WSARecv, WSARecvFrom, WSARecvMsg, WSASend, WSASendMsg, and WSASendTo functions.Sending and Receiving PGM Data Sending and recei... Receiving PGM Data Once a PGM receiver session is created, data is received using the various Windows Sockets receive functions: recv, recvfrom, WSARecv, and WSARecvFrom. The following code snippet illustrates a PGM receive operation: When using message mode (SOCK_RDM), the transport indicates.WSARecv Receives data from a connected socket. WSARecvDisconnect Terminates reception on a socket, and retrieves the disconnect data if the socket is connection oriented. WSARecvEx Receives data from a connected socket. WSARecvFrom Receives a datagram and stores the source address. LPFN_WSARECVMSG (WSARecvMsg) Receives data and optional control.WSARecv function (winsock2.h) The WSARecv function receives data from a connected socket or a bound connectionless socket. If the overlapped operation is successfully initiated and will complete later, WSA... The WSARecv function using overlapped I/O can be called from within the completion routine of a previous WSARecv, WSARecvFrom, WSASend or.Original KB number:   225004 Symptoms The Microsoft Winsock 2.0 WSARecvFrom() function does not function and may display the following error message when used in a User Datagram Protocol (UDP) socket program: WSAEMSGSIZE - Error 10040 The WSARecvFrom function does not function when a buffer counter greater than one is specified and the receiving.Event Objects (Windows Sockets 2) Introducing overlapped I/O requires a mechanism for applications to unambiguously associate send and receive requests with their subsequent completion indications. Applications use WSACreateEvent to obtain an event object handle that can then be supplied as a required parameter to the overlapped versions of send.Any datagrams received from an address other than the destination address specified will be discarded. However, sendto/ WSASendTo and recvfrom/ WSARecvFrom can still be used. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.Overlapped I/O and Event Objects Windows Sockets 2 supports overlapped I/O and all transport providers support this capability. For receiving, applications use the WSARecv or WSARecvFrom functions to supply buffers into which data is to be received. If one or more buffers are posted prior to the time when data has been received by the network,.Receiving Completion Indications Several options are available for receiving completion indications, thus providing applications with appropriate levels of flexibility. Using Socket I/O Completion Routines The functions used to initiate overlapped I/O ( WSASend, WSASendTo, WSARecv, WSARecvFrom) all take lpCompletionRoutine as an optional input."
428,PropVariantClear,"Microsoft Build · May 19 – 22, 2025PropVariantClear function (combaseapi.h) The PropVariantClear function frees all elements that can be freed in a given PROPVARIANT structure. For complex elements with known element pointers, the underlying elements are freed prior to freeing the containing element. Syntax Parameters [in] pvar A pointer to an initialized PROPVARIANT structure for.PropVariantClear function (propidl.h) Clears a PROPVARIANT structure. Syntax Parameters [in, out] pvar Type: PROPVARIANT* Pointer to the PROPVARIANT structure to clear. When this function successfully returns, the PROPVARIANT is zeroed and the type is set to VT_EMPTY. Return value Type: HRESULT If this function succeeds, it returns S_OK..FreePropVariantArray function (combaseapi.h) The FreePropVariantArray function calls PropVariantClear on each of the PROPVARIANT structures in the rgvars array to make the value zero for each of the members of the array. Syntax Parameters [in] cVariants Count of elements in the PROPVARIANT array (rgvars). [in] rgvars Pointer to an initialized.Such a PROPVARIANT structure should be cleared using the PropVariantClear function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Wi... The PropVariantInit function initializes a PROPVARIANT.propidl.h header This header is used by multiple technologies. For more information, see: Structured Storage The Windows Shell Windows Property System propidl.h contains the following programming interfaces: Interfaces IEnumSTATPROPSETSTG The IEnumSTATPROPSETST... (IPropertyStorage interface) Functions FreePropVariantArray Frees the memory and.Only the last setting of the... Notes to Callers Allocate the PROPVARIANT structure with CoTaskMemAlloc. Some PROPVARIANT structures contain pointers, which can be freed by calling the PropVariantClear function. It is up to the caller of the GetValue method to call PropVariantClear. Requirements Requirement Value Minimum supported client.PropVariantCopy function (combaseapi.h) The PropVar... Remarks Copies a PROPVARIANT structure by value so the original pvarSrc and new pvarDest parameters may be freed independently with calls to PropVariantClear. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.IWDFNamedPropertyStore::GetNamedValue method (wudfddi.h) [Warning: UMDF 2 is the latest version of UMDF and supersedes UMDF 1. The caller must then free this memory by calling the PropVariantClear function, as shown in the following snippet: If the caller does not free the memory, a memory leak may result. Target Platform Desktop Minimum UMDF.Warning C33001 VARIANT 'var' was cleared when it was uninitialized (expression 'expr') Remarks This warning is triggered when ... This warning applies to these functions: VariantClear PropVariantClear VariantCopy VariantCopyInd VariantChangeType VariantChangeTypeEx DestroyPropVariant Code analysis name: VARIANTCLEAR_UNINITIALIZED Example The.IMFMetadata::GetAllLanguages method (mfidl.h) Gets a list of the languages in which metadata is available. Syntax Parameters [out] ppvLanguages A pointer to a PROPVARIANT that receives the list of languages. Each string in the array is an RFC 1766-compliant language tag. The returned PROPVARIANT type is VT_VECTOR | VT_LPWSTR. The list might be."
429,DefFrameProcA,"Microsoft Build · May 19 – 22, 2025DefFrameProcA function (winuser.h) Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the DefFrameProc function, not the DefWindowProc function. Syntax.(Unicode) DeferWindowPos Updates the specified multiple-window � position structure for the specified window. DefFrameProcA Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. (ANSI) DefFrameProcW Provides default processing for any window messages that.(Unicode) DeferWindowPos Updates the specified multiple-window � position structure for the specified window. DefFrameProcA Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. (ANSI) DefFrameProcW Provides default processing for any window messages that."
430,ReleaseMutex,"Microsoft Build · May 19 – 22, 2025ReleaseMutex function (synchapi.h) Releases ownership of the specified mutex object. When the thread no longer needs to own the mutex object, it calls the ReleaseMutex function so that another thread can acquire ownership. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows....Threading.dll Assembly:System.Threading.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:Mutex.Windows.cs Source:Mutex.Windows.cs Source:Mutex.CoreCLR.U Releases the Mutex onceThe ReleaseMutex method is used to release the mutex when it is no longer needed. Remarks Whenever a thread acquires a mutex (for example, by calling its WaitOne.ISynchronizeMutex.ReleaseMutex Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Applies to. Learn more about the Microsoft.VisualStudio.OLE.Interop.ISynchronizeMutex.ReleaseMutex in the.Mutex Class Definition Namespace: System.Threading Assemblies:mscorlib.dll, System.Threading.dll Assemblies:netstandard.dll, System.Threading.dll Assembly:System.Thr... Because each calling thread is blocked until it acquires ownership of the mutex, it must call the ReleaseMutex method to release ownership of the mutex. The ReleaseMutex method is.If the mutex object is owned by another thread, the wait function blocks the requesting thread until the owning thread releases the mutex object using the ReleaseMutex function. To release its ownership under such circumstances, the thread must call ReleaseMutex once for each time that the mutex satisfied the conditions of a wait function. A mutex.The state of a mutex is signaled if no thread owns it. A thread releases a mutex by calling its ReleaseMutex method. Mutexes have thread affinity; that is, the mutex can be released only by the thread that owns it. If a thread releases a mutex it does not own, an ApplicationException is thrown in the thread. Access control security for system.Using Mutex Objects You can use a mutex object to protect a shared resource from simultaneous access by multip... When a thread of this process writes to the database, it first requests ownership of the mutex using the WaitForSingleObject function. If the thread obtains ownership of the mutex, it writes to the database and then releases its.ISynchronizeMutex Interface Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Supports a synchronization object using a mutex object. For general informa... Attributes GuidAttribute.The Bounce.c program shown in Sample Multithread C Program uses a mutex named ScreenMutex to coordinate screen updates. Each time one of the display threads is ready to write to the screen, it calls WaitForSingleObject with the handle to ScreenMutex and constant INFINITE to indicate that the WaitForSingleObject call should block on the mutex and.Synchronization Functions The following functions are used in synchronization. InterlockedXor64NoFence Performs an at... The operation is performed atomically, but without using memory barriers Mutex functions Mutex function Description CreateMutex Creates or opens a named or unnamed mutex object. CreateMutexEx Creates or opens a named or unnamed."
431,FindWindowW,"Microsoft Build · May 19 – 22, 2025FindWindowW function (winuser.h) Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search. To search child windows, beginning with a specified child window, use the FindWindowEx function. Syntax.I am trying to catch HWND by FindWindow or FindWindowA or FindWindowW but not successful, I wonder to have ideas how to fix them. Please help My code:| Try this fix: .| In addition to the coding correction posted by @Viorel , consider the following: Any window caption could contain the substring &quot;Mozilla Firefox&quot. You would have better.EndDeferWindowPos Simultaneously updates the position and size of one or more windows in a... (ANSI) FindWindowExW Retrieves a handle to a window whose class name and window name match the specified strings. (Unicode) FindWindowW Retrieves a handle to the top-level window whose class name and window name match the specified strings. (Unicode).Since there are no real buttons of the &quot;Button class&quot; in the calculator, then: I look through spy ++ which messages are sent to the calculator window when I click, for example, on the number 8: 000201C6 S WM_PARENTNOTIFY fwEvent:WM_LBUTTONDOWN xPos:191 yPos:493 I am sending the same message to the Calculator window: HWND.For programming guidance for this technology, see: Windows and Messages Functions AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The wind... (ANSI) FindWindowExW Retrieves a handle to a window whose class name and window name match the specified strings. (Unicode) FindWindowW."
432,LocalAlloc,"Microsoft Build · May 19 – 22, 2025LocalAlloc is a function in Windows programming that allocates a specified number of bytes from the local heap. It is primarily used for maintaining compatibility with 16-bit Windows applications. When you call LocalAlloc, it returns a handle to the allocated memory, which can be used to access the memory later.In practice, LocalAlloc is often used in scenarios where memory needs to be allocated for local use within a process. The memory allocated by LocalAlloc is private to the process and cannot be accessed by other processes. To access the memory allocated with LocalAlloc, you typically use the LocalLock function, which retrieves a pointer to the memory block.LocalAlloc is part of a family of global and local functions that were designed for compatibility with older Windows systems. However, for new applications, it is recommended to use heap functions like HeapAlloc, as they provide more features and control over memory management.References:LocalAlloc function (winbase.h) Allocates the specified number of bytes from the heap. Note  The local functions have g... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h).Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compatibility with 16-bit Windows. Memory objects allocated by GlobalAlloc and LocalAlloc are in private, committed pages with read/write access that cannot be accessed by other processes. The global and local.Comparing Memory Allocation Methods The following is a brief comparison of the various memory allocation methods: CoTaskMemAlloc GlobalAlloc HeapAlloc LocalAllo... LocalAlloc supports allocation of handles which permit the underlying memory to be moved by a reallocation without changing the handle value, a capability not available with HeapAlloc..Value Meaning CRYPT_KEYID_MACHINE_FLAG Search the list of key identifiers... For more information, see pwszComputerName. CRYPT_KEYID_ALLOC_FLAG The LocalAlloc() function is called to allocate memory for pvData. *pvData is updated with a pointer to the allocated memory. LocalFree() must be called to free the allocated memory. [in] pwszComputerName.Remarks When the LocalAlloc function allocates a local memory object with LMEM_MOVEABLE, it returns a handle to the object. The LocalLock function converts this handle into a pointer to the object's memory block, and LocalHandle converts the pointer back into a handle. Requirements Requirement Value Minimum supported client Windows XP [desktop.LocalFlags function (winbase.h) Retrieves information about the specified local memory object. Note  This function is provided only for compatibility with 16-bit versions of Windows. Syntax Parameters [in] hMem A handle to the local memory object. This handle is returned by either the LocalAlloc or LocalReAlloc function. Return value If the.The system initializes and loads each committed page into p... When the process terminates, the system releases the storage for committed pages. A process can use VirtualAlloc or VirtualAllocEx to commit physical pages from a reserved region. They can also simultaneously reserve and commit pages. The GlobalAlloc and LocalAlloc functions allocate.LocalLock function (winbase.h) Locks a local memory object and returns a pointer to the first byte of the object's memory block. Note  The local functions have greater overhead and provide fewer features than other memory management functions. Syntax Parameters [in] hMem A... This handle is returned by either the LocalAlloc or LocalReAlloc.LocalFree function (winbase.h) Frees the specified local memory object and invalidates its handle. This handle is returned by either the LocalAlloc or LocalReAlloc function. It is not safe to free memory allocated with GlobalAlloc. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.Dynamic-Link Library Data A Dynamic-Link Library (DLL) can contain global data or local data. For more information, see the documentation... Dynamic Memory Allocation When a DLL allocates memory using any of the memory allocation functions (GlobalAlloc, LocalAlloc, HeapAlloc, and VirtualAlloc), the memory is allocated in the virtual address space."
433,ToAscii,"Microsoft Build · May 19 – 22, 2025ToAscii function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the keyboard layout handle. To specify a handle to the keyboard layout to use to translate the specified code,.toascii, __toascii Converts characters to 7-bit ASCII by truncation. Return value __toascii converts the value of c to the 7-bit ASCII range and returns the result. Remarks The __toascii routine converts the given character to an ASCII character by truncating it to the low-order 7 bits. Requirements Routine Required header toascii, __toascii C: .IDN.ToASCII Method Definition Namespace: Java.Net Assembly:Mono.Android.dll Overloads ToASCII(String) Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490. ToASCII(String, IDNFlags) Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII.Routine Macro Description __toascii __toascii Converts c to ASCII character tolower tolower Converts c to lowercase if appropriate _tolower _tolower Converts c to lowercase towlower None Converts c to corresponding wide-character lowercase letter toupper toupper Converts c to uppercase if appropriate _toupper _toupper Converts c to uppercase.The input and output of ToASCII and ToUnicode operations are Unicode and are designed to be chainable, i.e., applying ToASCII or ToUnicode operations multiple times to an input string will yield the same result as applying the operation once. ToUnicode(ToUnicode(ToUnicode...(ToUnicode(string)))) == ToUnicode(string).ACE is an encoding of Unicode strings that uses only ASCII characters and can be used with software (such as the ... RFC 3490 defines two operations: ToASCII and ToUnicode. (Inherited from Object) ToArray() (Inherited from Object) ToASCII(String, IDNFlags) Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. SwapMouseButton Reverses or restores the meaning of the left and right mouse buttons. ToAscii Translates the specified virtual-key code and keyboard state to the corresponding character or characters. ToAsciiEx Translates the specified virtual-key code and keyboard state.ToAscii Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code... To specify a handle to the keyboard layout to use to translate the specified code, use the ToAsciiEx function. ToAsciiEx Translates the specified virtual-key code and keyboard state to the.IDN#toASCII(String) is used to translate the encoded argument into ASCII Compatible Encoding (ACE) hostname.It is strongly recommended that this constructor is only used to parse the encoded name value in a requested SNI extension. IDN#toASCII(String, int) is used to enforce the restrictions on ASCII characters in hostnames (see RFC 3490, RFC.IDNFlags Enum Definition Namespace: Java.Net Assembly:Mono.Android.dll Enumerates values returned by several types and taken as a parameter of the F:Java.Net.IDN.ToASCII, and F:Java.Net.IDN.ToUnicode members. Remarks Portions of this page are modifications based on work created and shared by the Android Open Source Project and use... Enumerates."
434,AbortPath,"Microsoft Build · May 19 – 22, 2025AbortPath function (wingdi.h) The AbortPath function closes and discards any paths in the specified device context. Syntax Parameters [in] hdc Handle to the device context from which a path will be discarded. Return value If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Remarks If there is an.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.Path Functions (Windows GDI) The following functions are used to create, alter, or draw paths. Function Description AbortPath Closes and discards any paths in the specified device context. BeginPath Opens a path bracket in the specified device context. CloseFigure Closes an open figure in a path. EndPath Closes a path bracket and selects the path.EMRABORTPATH structure (wingdi.h) Contains data for the AbortPath, BeginPath, EndPath, CloseFigure, FlattenPath, WidenPath, SetMetaRgn, SaveDC, and RealizePalette enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimu... Contains data for the AbortPath, BeginPath,.Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. Public Methods Name Description CDC::AbortDoc Terminates the current print job, erasing everything the application has written to the device since the last call of the StartDoc member function. CDC::AbortPath Closes and discards any paths in the device context..2.3.10 Path Bracket Record Types The Path Bracket record types are used to construct a path bracket, which defines the current path in the playback device context. Name Description EMR_ABORTPATH This record closes path bracket construction and discards the current path. Path bracket construction MUST be closed by an EMR_ABORTPATH or EMR_ENDPATH.These values are specified in the Type fields of EMF records (section 2.3). typedef  enum { EMR_HEADER = 0x00000001, EMR_POLYBEZIER = 0x00000002, EMR_POLYGON = 0x00000003, EMR_POLYLINE = 0x00000004, EMR_POLYBEZIERTO = 0x00000005, EMR_POLYLINETO = 0x00000006, EMR_POLYPOLYLINE = 0x00000007, EMR_POLYPOLYGON = 0x00000008, EMR_... EMR_BEGINPATH: This.EMR_ABORTPATH EMR_ALPHABLEND EMR_ANGLEARC EMR_ARC EMR_ARCTO EMR_BEGINPATH EMR_BITBLT EMR_CHORD EMR_CLOSEFIGURE EMR_COLORCORRECTPALETTE EMR_COLORMATCHTOTARGETW EMR_CREATEBRUSHINDIRECT EMR_CREATECOLORSPACE EMR_CREATECOLORSPACEW EMR_CREATEDIBPATTERNBRUSHPT EMR_CREATEMONOBRUSH EMR_CREATEPALETTE EMR_CREATEPEN EMR_DELETECOLORSPACE EMR_DELETEOBJECT."
435,IsValidCodePage,"Microsoft Build · May 19 – 22, 2025IsValidCodePage function (winnls.h) Determines if a specified code page is valid. Syntax Parameters [in] CodePage Code page identifier for the code page to check. Return value Returns a nonzero value if the code page is valid, or 0 if the code page is invalid. Remarks A code page is considered valid only if it is installed on the operating system..Code Page Handling (Windows Installer) The Windows Installer stores all database strings in a single shared string pool to reduce the size of the database, and to improve performance. Windows Installer uses IsValidCodePage to determine whether the code page is valid. Localizing a Windows Installer Package If you localize a Windows Installer.Code Page Handling of Parameter Strings You can add localization information to an installation database by using a database table editor such as Orca that is provided with the Windows Installer SDK, or by calling the Database Functions from an application. IsValidCodePage must return TRUE for the database code page. Because the system converts.SetConsoleCP function Sets the input code page used by the console associated with the cal... The identifiers of the code pages available on the local computer are also stored in the registry under the following key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\CodePage However, it is better to use EnumSystemCodePages to enumerate code.winnls.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications winnls.h contains the following programming interfaces: Functions CompareString The CompareString functio... For more information, see Using Unicode Normalization to Represent Strings..SetConsoleOutputCP function Sets the output code page used by the console associated with the calling process. The identifiers of the code pages available on the local computer are also stored in the registry under the following key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\CodePage However, it is bette... To determine whether a.Resource Compiler Warning RC4214 Codepage not valid : ignored The .rc file contained a codepage argument and the codepage specified is invalid. See IsValidCodePage for more information. Learn more about: Resource Compiler Warning RC4214. /cpp/error-messages/tool-errors/resource-compiler-warning-rc4214.National Language Support Functions NLS supports the functions defined in the following table. Function Description AdjustCalendarDate Deprecated. IsNLS... IsNormalizedString Verifies that a string is normalized according to Unicode 4.0 TR#15. IsValidCodePage Determines if a specified code page is valid. IsValidLanguageGroup Determines if a.Function State Replacement EnumSystemLocalesEx FindNLSStringEx FoldStringA GetACP GetCurrencyFormatEx GetGeoInfoEx GetLocaleInfoEx GetNumberFormatEx GetStringTypeA GetStringTypeExA GetThreadLocalevoid); GetUserDefaultGeoName GetUserDefaultLocaleName GetUserPreferredUILanguages NOT SUPPORTED Always returns en-US IdnToAscii IdnToUnicode.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`."
436,DosDateTimeToFileTime,"Microsoft Build · May 19 – 22, 2025DosDateTimeToFileTime function (winbase.h) Converts MS-DOS date and time values to a file time. Syntax Parameters [in] wFatDate The MS-DOS date. The date is a packed value with the following format. Bits Description 0-4 Day of the month (1–31) 5-8 Month (1 = January, 2 = February, and so on) 9-15 Year offset from 1980 (add 1980 to get actual year).MS-DOS Date and Time MS-DOS date and MS-DOS time are packed 16-bit values that specify the month, day, year, and time of day an MS-DOS file was last written to. When... If you encounter an MS-DOS date and time that has not been converted, you can convert it to a UTC-based time by using the DosDateTimeToFileTime function. MS-DOS date and MS-DOS.FileTimeToDosDateTime function (winbase.h) Converts a file time to MS-DOS date and time values. Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the file time to convert to MS-DOS date and time format. [out] lpFatDate A pointer to a variable to receive the MS-DOS date. Bits Description 0–4 Day of the month (1–31) 5–8.(ANSI) DnsHostnameToComputerNameW Converts a DNS-style host name to a NetBIOS-style computer name. (Unicode) DosDateTimeToFileTime Converts MS-DOS date and time values to a file time. EnableProcessOptionalXStateFeatures The EnableProcessOptionalXStateFeatures function enables a set of optional XState features for the current process. (Unicode).SystemTimeToFileTime Converts a system time to a file time. The following functions are used with MS-DOS date and time. Function Description DosDateTimeToFileTime Converts MS-DOS date and time values to a file time. FileTimeToDosDateTime Converts a file time to MS-DOS date and time values. The following functions are used with Windows time..FileTimeToSystemTime function (timezoneapi.h) Converts a file time to system time format. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header timezoneapi.h (include Windows.h) Library Kernel32.lib DLL.(ANSI) DnsHostnameToComputerNameW Converts a DNS-style host name to a NetBIOS-style computer name. (Unicode) DosDateTimeToFileTime Converts MS-DOS date and time values to a file time. FCACHE_CREATE_CALLBACK A callback function that is used to create items in the cache. (FCACHE_CREATE_CALL... FhServiceUnblockBackup This function unblocks backups.SystemTimeToFileTime function (timezoneapi.h) Converts a system time to file time format. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header timezoneapi.h (include Windows.h) Library."
437,RegisterClipboardFormatW,"Microsoft Build · May 19 – 22, 2025RegisterClipboardFormatW function (winuser.h) Registers a new clipboard format. This format can then be used as a valid clipboard format. Syntax Parameters [in] lpszFormat Type: LPCTSTR The name of the new format. Return value Type: UINT If the function succeeds, the return value identifies the registered clipboard format. Registered clipboard.PackDDElParam... PFNCALLBACK An application-defined callback function used with the Dynamic Data Exchange Management Library (DDEML) functions. RegisterClipboardFormatA Registers a new clipboard format. This format can then be used as a valid clipboard format. (ANSI) RegisterClipboardFormatW Registers a new clipboard format. This format can then.(ANSI) EnumPropsExW Enumerates all... GetClipboardData Retrieves data from the clipboard in a specified format. GetClipboardFormatNameA Retrieves from the clipboard the name of the specified registered format. (ANSI) GetClipboardFormatNameW Retrieves from the clipboard the name of the specified registered format. (Unicode) GetClipboardOwner."
438,GetAsyncKeyState,"Microsoft Build · May 19 – 22, 2025The GetAsyncKeyState function is used to determine whether a key is currently pressed down or up at the time the function is called. It can also indicate whether the key was pressed after the last call to GetAsyncKeyState. This function is particularly useful for applications that need to respond to key presses in real-time, as it provides the immediate status of a key without relying on the message queue.To use GetAsyncKeyState, you would typically call it with the virtual-key code of the key you want to check. The function returns a short value where the most significant bit indicates whether the key is currently down (1) or up (0).Here is a simple example of how to use GetAsyncKeyState in C++:In this example, VK_SPACE is the virtual-key code for the space bar. The condition checks if the most significant bit is set, indicating that the key is pressed.References:GetAsyncKeyState function (winuser.h) Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. Syntax Parameters [in] vKey Type: int The virtual-key code. Return value Type: SHORT If the function succeeds, the return value specifies whether the key was.CoreWindow.GetAsyncKeyState(VirtualKey) Method Definition Namespace: Windows.UI.Core Edit Asynchronously retrieves the state of a virtual key. Parameters virtualKey VirtualKey The virtual key for which state is returned. Returns CoreVirtualKeyStates The flags indicating the current state of the supplied virtual key when the input event fired..ICoreWindow.GetAsyncKeyState(VirtualKey) Method Definition Namespace: Windows.UI.Core Edit Specifies a method that returns the state of a virtual key asynchronously. Parameters virtualKey VirtualKey The virtual key for which state will be returned. Returns CoreVirtualKeyStates The state of the supplied virtual key when the input event was raised..GetActiveWindow Retrieves the window handle to the active window attached to the calling thread's message queue. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetFocus Retrieves the handle to the window that has the keyboard.(Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetAutoRotationState Retrieves an AR_STATE value containing the state of screen auto-rotation for.GET_XBUTTON_... GetActiveWindow Retrieves the window handle to the active window attached to the calling thread's message queue. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetCapture Retrieves a handle to the window (if any).Remarks When input is blocked, real physical input from the mouse or keyboard will not affect the input queue's synchronous key state (reported by GetKeyState and GetKeyboardState), nor will it affect the asynchronous key state (reported by GetAsyncKeyState). ... supported client Windows 2000 Professional [desktop apps only] Minimum supported.ICoreWindow Interface Definition Namespace: Windows.UI.Core Edit Specifies an interface for a window object and its input events as well as basic user interface behaviors. Derived Windows.UI.Core.CoreWindow Attributes ContractVersionAttribute GuidAttribute Windows requirements Device family Windows 10 (introduced in 10.0.10240.0) API contract.CoreVirtualKeyStates Enum Definition Namespace: Windows.UI.Core Edit Specifies flags for indicating the possible states of a virtual key. ...gsAttribute ContractVersionAttribute Windows requirements Device family Windows 10 (introduced in 10.0.10240.0) API contract Windows.Foundation.UniversalApiContract (introduced in v1.0) Fields Name Value.Is this SO answer still the best for this?| Hi, Welcome to Mic... CoreWindow.GetAsyncKeyState() works only when the Windows is focused. You can refer to the method mentioned in the answer to register F key as hotkey, but it is difficult to listen to lots of hot keys. Note: Please follow the steps in our documentation to enable e-mail notifications."
439,IsBadWritePtr,"Microsoft Build · May 19 – 22, 2025IsBadWritePtr function (winbase.h) Verifies that the calling process has write access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.IsBadReadPtr function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.AtlThunk_FreeData Frees memory associated with an A... AtlThunk_InitData Initializes an ATL thunk. Obsolete Functions These functions are provided only for compatibility with 16-bit versions of Windows: IsBadCodePtr IsBadReadPtr IsBadStringPtr IsBadWritePtr The function below can return incorrect information, and should not be used. Instead, use.winbase.h header This header is used by multiple technologies. IsBadReadPtr Verifies that the calling process has read access to the specified range of memory... (IsBadReadPtr) IsBadStringPtrA Verifies that the calling process has read access to the specified range of memory. (IsBadStringPtrA) IsBadStringPtrW Verifies that the calling process has.Warning C28720 Banned API Usage: '*function-name' is insecure and has been marked deprecated. Remarks Using one of these APIs indicates that you are testing to see if mem... There are no 1:1 replacement APIs for this rule. Code analysis name: ISBADXXXPTR_API_USAGE Banned Functions Banned API IsBadCodePtr IsBadHugeReadPtr IsBadHugeWritePtr.IsBadCodePtr function (winbase.h) Determines whether the calling process has read access to the memory at the specified address. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library.No __try and __catch blocks. IsBadReadPtr and IsBadWritePtr didn't make an appearance until Windows 3.1 in 1992. I'll let you decide which is harder to conc... Matt Pietrek. does advanced research for the NuMega Labs of Compuware Corporation, and is the author of several books. His Web site, at https://www.wheaty.net/, has a FAQ page and.IsBadStringPtrA function (winbase.h) Verifies that the calling process has read access to the specified range of memory. ...hould notRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).IsBadStringPtrW function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it d... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop.To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h."
440,CreateSolidBrush,"Microsoft Build · May 19 – 22, 2025To use the CreateSolidBrush function, you typically follow these steps:Here's a basic example in C++:In this example, CreateSolidBrush is used to create a red brush, which can then be used to fill shapes. Remember to delete the brush with DeleteObject when it's no longer needed.References:CreateSolidBrush function (wingdi.h) The CreateSolidBrush function creates a logical brush that has the specified solid color. Syntax Parameters [in] color The color of the brush. To create a COLORREF color value, use the RGB macro. ... the DeleteObject function to dA solid brush is a bitmap that the system uses to paint the interiors of filled.Solid Brush A solid brush is a logical brush that contains 64 pixels of the same color. An application can create a solid logical brush by calling the CreateSolidBrush function, specifying the color of the brush required. After creating the solid brush, the application can select it into its device context and use it to paint filled shapes. A.ICM-Enabled Brush Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following brush functions are enabled for use with ICM:.CreateScalableFontResourceA The Creat... (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font. (Unicode) CreateSolidBrush The CreateSolidBrush function creates a logical brush that has the specified solid color. DeleteDC The DeleteDC function deletes the specified device.CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font. (Unicode) CreateSolidBrush The CreateSolidBrush function creates a logical brush that has the specified.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.FillRect function (winuser.h) The FillRect function fills a rectangle by using the specified brush. If specifying a handle to a logical brush, call one of the following functions to obtain the handle: CreateHatchBrush, CreatePatternBrush, or CreateSolidBrush. Requirements Requirement Value Minimum supported client Windows 2000 Professional.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,.FrameRect function (winuser.h) The FrameRect function draws a border around the specified rectangle by using the specified brush. Remarks The brush identified by the hbr parameter must have been created by using the CreateHatchBrush, CreatePatternBrush, or CreateSolidBrush function, or retrieved by using the GetStockObject function. Requirements."
441,GetVolumeInformationW,"Microsoft Build · May 19 – 22, 2025GetVolumeInformationW function (fileapi.h) Retrieves information about the file system and volume associated with the specified root directory. To specify a handle when retrieving this information, use the GetVolumeInformationByHandleW function. To retrieve the current compression state of a file or directory, use FSCTL_GET_COMPRESSION. Syntax.(ANSI) GetVolumeInformationByHandleW Retrieves information about the file system and volume associated with the specified file. GetVolumeInformationW Retrieves information about the file system and volume associated with the specified root directory. (GetVolumeNameForVolumeMountPointW) GetVolumePathNamesForVolumeNameW Retrieves a list of drive.Use GetVolumeInformationW in a UWP app (broadFileSystemAccess is already enabled), always get ERROR_ACCESS_DENIED, what should I do?| broadFileSystemAc... There seems to have a doc issue that the GetVolumeInformationW should not be marked as usable in UWP and the GetVolumeInformationByHandleW should be marked as usable in UWP. The access error you.J... The page https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getvolumeinformationw Says: But the correct value is: Let's see if this message reaches an appropriate MS member| Hello, Welcome to Microsoft Q&amp;A. The page https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getvolumeinformationw Says: But.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). CoTaskMemAlloc Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
442,GetModuleFileNameW,"Microsoft Build · May 19 – 22, 2025The GetModuleFileNameW function retrieves the full path and file name of the module associated with a specified window handle. It is the Unicode version of the function, allowing it to handle wide character strings.References:GetModuleFileNameW function (libloaderapi.h) Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process. To locate the file for a module that was loaded by another process, use the GetModuleFileNameEx function. Requirements Requirement Value Minimum supported client.GetFinalPathNameByHandleW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.... GetFileInformationByHandleEx Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. MoveFileExW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. ReplaceFileW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. GetModuleFileNameA.I am trying to implement this: Into UNICODE compatible code: What's wrong with this code. How can I the szPath. What data type is ... Note : I used this inside and -ed C++ code| The UNICODE specific version of the code is passing an uninitialized pointer to the GetModuleFileNameW functon. Try this -. I am trying to implement this: Into UNICODE.If the kernel mode driver is a KMDF driver, it can use WdfDriverWdmGetDriverObject to retrieve the WDM driver object to pass... User mode binaries can use GetModuleHandleExW and GetModuleFileNameW to determine where the binary was loaded from. For example, a UMDF driver binary may do something like the following: Find and load files in any driver....nt_exception_context __intrinsic_setjmp __intrinsic_setjmpex _local_unwind __processing_throw _purecall __report_gsfailure __RTDynamicCast _SetWinRTOutOfMemoryExceptionCallback __std_exception_copy __std_exception_destroy __std_terminate __std_type_info_compare __std_type_info_destroy_list __std_type_info_hash __std_type_info_name....hen this exception is thrown: _wgetenv() GetCurrentThread() GetCurrentProcess() RtlCaptureContext( &amp;ctxt ) StackWalk64( IMAGE_FILE_MACHINE_I386, process, thread, &amp;frame, &amp;ctxt, NULL, SymFunctionTableAccess64, SymGetModuleBase64, NULL ) SymSetOptions( SYMOPT_CASE_INSENSITIVE | SYMOPT_LOAD_LINES ) GetModuleFileNameA() SymInitialize().libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Serv... GetModuleFileNameA Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process. (ANSI)....nst *,wchar_t *,unsigned __int64)&quot; (?GetPdbDllPathFromFilePath@@YAHPEB_WPEA_W_K@Z) 1&gt;MSVCRTD.lib(pdblkup.obj) : error LNK2019: unresolved external symbol wcscpy_s referenced in function &quot;int __cdecl GetPdbDllPathFromFilePath(wchar_t const *,wchar_t *,unsigned __int64)&quot; (?GetPdbDllPathFromFilePath@@YAHPEB_WPEA_W_K@Z).GetModuleFileNameA function (libloaderapi.h) Retrieves the fully qualified path for the file that contains the specified module. The m... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header libloaderapi.h.IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned."
443,SetBitmapDimensionEx,"Microsoft Build · May 19 – 22, 2025SetBitmapDimensionEx function (wingdi.h) The SetBitmapDimensionEx function assigns preferred dimensions to a bitmap. These dimensions can be used by applications; however, they are not used by the system. Syntax Parameters [in] hbm A handle to the bitmap. The bitmap cannot be a DIB-section bitmap. [in] w The width, in 0.1-millimeter units, of the.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. GetBitmapDimensionEx The.GetBitmapDimensionEx function (wingdi.h) The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been set by the SetBitmapDimensionEx function. Requirements Requirement Value Minimum supported client Windows 2000 Profes... The GetBitmapDimensionEx function retrieves the dimensions of a.GetBitmapBits The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been set by the SetBitmapDimensionEx function. GetBkColor The GetBkColor function returns.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. ExtFloodFill Fills an area of the display surface with the curr... GetBitmapDimensionEx Gets the dimensions of a bitmap. GetDIBColorTable Retrieves RGB color values from a DIB."
444,SetViewportOrgEx,"Microsoft Build · May 19 – 22, 2025SetViewportOrgEx function (wingdi.h) The SetViewportOrgEx function specifies which device point maps to the window origin (0,0). Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in device units, of the new viewport origin. [in] y The y-coordinate, in device units, of the new viewport origin. [out] lppt A pointer.Redrawing in the Update Region You can limit the amount of drawing your application carries out when processing the WM_PAINT message by determining the size and location of the update region. Because the system uses the update region when creating the clipping region for the window's display device context, you can indirectly determine the update.Mapping Modes and Translations The mapping modes are described in the following table. This is done by calling SetMapMode to set the appropriate mode and then calling the SetWindowExtEx and SetViewportExtEx functions to specify the extents. Set the window and viewport origins by using the SetWindowOrgEx and SetViewportOrgEx functions. The origins....TVIEWPOR Example This section provides an example of the EMF EMR_SETVIEWPORTORGEX record ([MS-EMF] section 2.3.11.29). 00064C40:0C 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000C) Size (0x00000010) Origin (0x00000000) ... (0x00000000) Type (4 bytes): 0x0000000C.SetWindowOrgEx function (wingdi.h) The SetWindowOrgEx function specifies which window point maps to the viewport origin (0,0). This is related to the SetViewportOrgEx function. ...l [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. SetViewportExtEx Sets the horizontal and vertical extents of the viewport for a device context by using the specified values. SetViewportOrgEx Specifies which device point maps to the window origin (0,0). SetWorldTransform.3.2.2.14 EMR_SETVIEWPORTORGEX Example This section provides an example of the EMF EMR_SETVIEWPORTORGEX record ([MS-EMF] section 2.3.11.29). 00000170:                        0C 00 00 00 10 00 00 00 00000180:00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000C) Size (0x00000010) Origin.2.3.11.29 EMR_SETVIEWPORTORGEX Record The EMR_SETVIEWPORTORGEX record defines the viewport origin. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Origin. Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETVIEWPORTORGEX. Origin (8 bytes): A PointL obj... The EMR_SETVIEWPORTORGEX record.EMRSETVIEWPORTORGEX structure (wingdi.h) The EMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, and EMRSETBRUSHORGEX structures contain members for the SetViewportOrgEx, SetWindowOrgEx, and SetBrushOrgEx enhanced metafile records. Requirements Requirement Value Minimum supporte... The EMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX, and EMRSETBRUSHORGEX structures....n retrieves the x-coordinates and y-coordinates of the window origin for the specified device cRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL."
445,DispatchMessageW,"Microsoft Build · May 19 – 22, 2025DispatchMessageW function (winuser.h) Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. Syntax Parameters [in] lpMsg Type: const MSG* A pointer to a structure that contains the message. Note The winuser.h header defines DispatchMessage as an alias that automatically selects.(Unicode) DialogBoxW Creates a modal dialog box from a dialog box template resource. DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. (DispatchMessageA).DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. (DispatchMessageA) DispatchMessageW....f102c WindowsBase_ni+0xdcf62 0093d1b8 249a7273 01040057 00000000 00000202 WindowsBase_ni+0xde4b4 0093d1ec 75e3d9cb 00140df6 00000202 00000000 0x249a7273 0093d218 75e346ea 0621715e 00140df6 00000202 user32!_InternalCallWinProc+0x2b 0093d2fc 75e32a1a 06 00000000 00000202 user32!UserCallWinProcCheckWow+0x33a 0093d370 75e327e0 0093d3c8 0093d3b8.The .NET Profiling API and the DNProfiler Tool Matt Pietrek Download the code for this article:Hood0112.exe (140KB) Browse the code for this article at Code Center:DNProfiler T he Microsoft® .NET Common Language Runtime (CLR) does many things under the hood to create an easy to use, object-oriented platform. In managed code, the....-- 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_TranslateMessage referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_TranslateMessage 1&gt;glfw3.lib(win32_init.obj) : error LN unresolved external symbol __imp_DispatchMessageW referenced.Rust for Windows, and the windows crate Introducing Rust for Windows In the Overview of developing on Windows with Rust topic, we demonstrated a simple app that outputs a Hello, world! message. Rust for ... Whether it's timeless functions such as CreateEventW and WaitForSingleObject, powerful graphics engines such as Direct3D, traditional.....dll|base::win::WrappedWindowProc_&amp;base::win::MessageWindow::WindowProc_|0x000000000000000F|| |39|user32.dll|UserCallWinProcCheckWow|0x00000000000002D1|| |40|user32.dll|DispatchMessageWorker|0x00000000000001F1|| |41|Windows.UI.dll|Windows::UI::Core::CDispatcher::ProcessMessage|0x000000000000018B||....e ByRef) 위치: System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef) 위치: System.Windows.Forms.AxHost.WndProc(System.Windows.Forms.Message ByRef) 위치: System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef) 위치:....&amp; m, MouseButtons button, Int32 clicks) at System.Windows.Forms.Control.WndProc(Message&amp; m) at Microsoft.SqlServer.Management.UI.Grid.GridControl.WndProc(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m) at."
446,GetNamedPipeInfo,"Microsoft Build · May 19 – 22, 2025GetNamedPipeInfo function (namedpipeapi.h) Retrieves information about the specified named pipe. Syntax Parameters [in] hNamedPipe A handle to the named pipe instance. The handle must have GENERIC_READ access to the named pipe for a read-only or read/write pipe, or it must have GENERIC_WRITE and FILE_READ_ATTRIBUTES access for a write-only pipe..Pipe Functions The following function is used with anonymous pipes. GetNamedPipeHandleState Retrieves information about a specified named pipe. GetNamedPipeInfo Retrieves information about the specified named pipe. GetNamedPipeServerProcessId Retrieves the server process identifier for the specified named pipe. WaitNamedPipe Waits until either a.namedpipeapi.h header This header is used by multiple technologies. For more information, see: Security and Identity System Services namedpipeapi.h contains the following programming interfaces: Functions CallNamedPipeW Conn... GetNamedPipeHandleStateW The GetNamedPipeHandleStateW (Unicode) function (winbase.h) retrieves information about a.A process can retrieve information about a named pipe by calling the GetNamedPipeInfo function, which returns the type of the pipe, the size of the input and output buffers, and the maximum number of pipe instances that can be created. The Ge... Yes No Provide product feedback | Get help at Microsoft Q&A. Pipe operations, including pipe clients.For more information, see [MSDN-SetNmdPipeHndState]. Windows NT servers use the FilePipeInformation Information Class to implement this named pipe transaction subcommand. For more information, see [MS-FSCC] section 2.4.36. Section 2.2.5.2: Windows NT Server does not support this transaction subcommand. It retur... For more information, see.Named Pipe Reject Remote Clients This automated test verifies that the GetNamedPipeInfo function returns the correct option when the named pipe is created with the PIPE_REJECT_REMOTE_CLIENTS option. Test details Specifications....ble Transport Protocol (NWLink)"", January 2005, http://technet.microsoft.com/en-us/library/cc782167(WS.10).aspx [MSFT-SecurityWatch] Microsoft Corporation, ""Security Watch"", http://technet.microsoft.com/en-us/magazine/2006.08.securitywatch.aspx [MSFT-XEXTNP] Microsoft Corporation, ""OpenNET/Microsoft Networks FILE SHARING PROTOCOL EXTENSIONS"",.CreateNamedPipeW function (namedpipeapi.h) Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new inst... If the client must read pipe settings by.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Service... CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA).CreateNamedPipeA function (winbase.h) Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance ... If the client must read pipe settings by."
447,GetUserDefaultLCID,"Microsoft Build · May 19 – 22, 2025GetUserDefaultLCID function (winnls.h) Returns the locale identifier for the user default locale. Caution  If the user default locale is a custom locale, an application cannot accurately tag data with the value or exchange it. In this case, the application should use GetUserDefaultLocaleName in preference to GetUserDefaultLCID. Syntax Return.GetUserDefaultLCID Returns the locale identifier for the user default locale.Caution  If the user default locale is a custom locale, an application cannot accurately tag data with the value or exchange it. GetUserDefaultLocaleName Retrieves the user default locale name.Note  The application should call this function in preference to.The locale identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed operating system-defined locales. Alternatively it ... LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Retrieval of Locale Identifiers An application can retrieve the current locale.ConvertDefaultLocale function (winnls.h) Converts a default locale value to an actual locale identifier. Remarks A call to ConvertDefaultLocale specifying LOCALE_SYSTEM_DEFAULT is equivalent to a call to GetSystemDefaultLCID. A call to ConvertDefaultLocale specifying LOCALE_USER_DEFAULT is equivalent to a call to GetUserDefaultLCID. Requirements.GetThreadLocale function (winnls.h) Returns the locale identifier of the current locale for the calling thread.N... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h).This value is returned by GetUserDefaultLCID. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetSystemDefaultLCID.Language of localized operating system. Function EnumSystemLanguageGroups GetSystemDefaultLangID GetUserDefaultLCID, GetUserDefaultLocaleName Thread locale Input language System default UI language Purpose Determines the settings that are used for formatting dates, times, currency, and large numbers for a thread. Also determines the sort order for.ICatInformation::EnumCategories method (comcat.h) Retrieves an enumerator for the component categori... Typically, the caller specifies the value returned from the GetUserDefaultLCID function. [out] ppenumCategoryInfo A pointer to a pointer to an IEnumCATEGORYINFO interface. Requirements Requirement Value Minimum supported client Windows 2000.GetSystemDefaultLCID Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function. GetUserDefaultLCID Returns the locale identifier for the user default locale.Caution  If the user default locale is a custom locale, an.GetUserDefaultLocaleName function (winnls.h) Retrieves the user default locale name.Note  The application should call this function in preference to GetUserDefaultLCID if designed to run only on Windows Vista and later. Requirements Requirement Value Minimum supporte... Retrieves the user default locale name.Note  The application should call this."
448,WriteClassStm,"Microsoft Build · May 19 – 22, 2025WriteClassStm function (coml2api.h) The WriteClassStm function stores the specified CLSID in the stream. Syntax Parameters [in] pStm IStream pointer to the stream into which the CLSID is to be written. [in] rclsid Specifies the CLSID to write to the stream. Remarks The WriteClassStm function writes a CLSID to the specified stream object so it can.ReadClassStm function (coml2api.h) The ReadClassStm function reads the CLSID previously written to a stream object with the WriteClassStm function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform.coml2api.h header This header is used by Structured Storage. For more information, see: Structured Storage coml2api.h contains the following... WriteClassStg The WriteClassStg function stores the specified class identifier (CLSID) in a storage object. WriteClassStm The WriteClassStm function stores the specified CLSID in the stream. Structures.Write Writes a specified number of bytes into the stream object s... WriteAt The WriteAt method writes the specified number of bytes starting at a specified offset from the beginning of the byte array. WriteClassStg The WriteClassStg function stores the specified class identifier (CLSID) in a storage object. WriteClassStm The WriteClassStm.OleSaveToStream function (ole2.h) Saves an object with the IPersistStream interface on it to the specified stream. This function can also return any of the error values returned by the WriteClassStm function or the IPersistStream::Save method. The OleSaveToStream function does the following: Calls the IPersist::GetClassID method to get the.IPersistStream::Save method (objidl.h) Saves an object to the specified stream. Syntax Parameters [in] pStm An IStream pointer to the stream ... The position of the seek pointer is undefined if an error returns. Notes to Callers Rather than calling IPersistStream::Save directly, you typically call the OleSaveToStream helper function which does the.OleSaveToStream function (ole.h) Saves an object with the IPersistStream interface on it to the specified stream. This function can also return any of the error values returned by the WriteClassStm function or the IPersistStream::Save method. Remarks This function simplifies saving an object that implements the IPersistStream... The....rtPropertyToVariant SetConvertStg StgConvertVariantToProperty StgCreateDocfile StgCreateDocfileOnILockBytes StgCreatePropSetStg StgCreatePropStg StgCreateStorageEx StgDeserializePropVariant StgGetIFillLockBytesOnFile StgGetIFillLockBytesOnILockBytes StgIsStorageFile StgIsStorageILockBytes StgOpenAsyncDocfileOnIFillLockBytes StgOpenLayoutDocfile.... StgSetTimes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. WriteClassStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. WriteClassStm Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-com-midlproxystub-l1-1-0.dll API Requirements CStdAsyncStubBuffer_AddRef Introduced into."
449,RaiseException,"Microsoft Build · May 19 – 22, 2025RaiseException Function Supports the WRL infrastructure and is not intended to be used directly from your code. Syntax Parameters hr The exception code of the exception being raised; that is, the HRESULT of a failed operation. dwExceptionFlags A flag that indicates a continuable exception (the flag value is zero), or noncontinuable exception (flag.RaiseException function (errhandlingapi.h) Raises an exception in the calling thread. Syntax Parameters [in] dwExceptionCode An application-defined exception code of the exception being raised. Remarks The RaiseException function enables a process to use structured exception handling to handle private, software-generated, application-defined....ement.Server Assembly:Microsoft.Web.Manageme Throws a WebManagementServiceExceptionOverloads RaiseException(Exception) RaiseException(String) Throws a WebManagementServiceException based on the specified resource name. RaiseException(String, String) Throws a WebManagementServiceException based on the specified resource name and error message..Raising software exceptions Some of the most common sources of program errors are not flagged as exceptions by the system. For example, if you... However, you can treat any condition as an exception by detecting that condition in your code and then reporting it by calling the RaiseException function. By flagging errors this way, you can bring the.Structured Exception Handling Functions The following functions are used in structured exception handling. GetExceptionInformation Retrieves a machine-independent description of an exception, and information about the machine state that existed f... RaiseException Raises an exception in the calling thread. RemoveVectoredContinueHandler Unregisters.Exception Handling (Error Handling) Exceptions can be initiated by hardware or software, and can occur in kernel-mode as well as user-mode code. Structured exception handling provides a single mechanism for the handling of kernel-mode and use... When this happens, a thread can initiate an exception explicitly by calling the RaiseException.EXCEPTION_RECORD structure (winnt.h) Describes an exception. This is the code generated by a hardware exception, or the code specified in the RaiseException function for a software-generated exception. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop.MINIDUMP_EXCEPTION structure (minidumpapiset.h) Contains exception information. Syntax Members ExceptionCode The reason the exception occurred. This is the code generated by a hardware exception, or the code specified in the RaiseException function for a software-generated exception. Following are the exception codes likely to occur due to common.EXCEPTION_RECORD64 structure (winnt.h) Describes an exception. This is the code generated by a hardware exception, or the code specified in the RaiseException function for a software-generated exception. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003.errhandlingapi.h header This header is used by System Services. For more information, see: System Services errhandlingapi.h contains the following programming interfaces: Functions AddVectoredContinueHandler Registers a vectored continue handler. GetThreadErrorMode Retrieves the error mode for the calling thread. RaiseException Raises an exception."
450,SetWindowWord,"Microsoft Build · May 19 – 22, 2025CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Pub... CWindow::SetWindowPos Sets the size, position, and Z order. CWindow::SetWindowRgn Sets the window region of a window. CWindow::SetWindowWord Sets a 16-bit value at a specified offset into the."
451,GetWindowRgn,"Microsoft Build · May 19 – 22, 2025GetWindowRgn function (winuser.h) The GetWindowRgn function obtains a copy of the window region of a window. The window region of a window is set by calling the SetWindowRgn function. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. GetWindowRgn The.Painting and Drawing Functions The following functions are used with painting and drawing. GetWindowDC Gets the device context for a window, including title bar, menus, and scroll bars. GetWindowRgn Gets a copy of the window region of a window. GetWindowRgnBox Gets the dimensions of the tightest bounding rectangle for the window region of a.GetWindowRgnBox function (winuser.h) The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Hello, I am the maintainer of Greenshot, a free &amp; open source Windows screenshot application. (Found here: https://getgreenshot.org ) With Windows 11 there are now windows with rounded edges, similar t... I was hoping to that I can use GetWindowRgn, like with Windows 7, which would return a Region specifying this, as described here:.CWnd::GetWindowPlacement Retrieves the show state and the normal (restored), minimized, and maximized positions of a window. CWnd::GetWindowRect Gets the screen coordinates of CWnd. CWnd::GetWindowRgn Retrieves a copy of the window region of a window. CWnd::GetWindowText Returns the window text or caption title (if it has one)..... SetWindowRgn function sets the window region of a windowRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized child windows. CWindow::Attach Attaches a window to the CWindow object. CWindow::BeginPaint Prepares the window.EndDeferWindowPos Simultaneously updates the position and size of one or mo... Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors. ExcludeUpdateRgn The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region. (Unicode) FindWindowW."
452,SwitchDesktop,"Microsoft Build · May 19 – 22, 2025SwitchDesktop function (winuser.h) Makes the specified desktop visible and activates it. ...P access to the desktop for the SwitchDesktop function toHowever, SwitchDesktop only sets the last error for the following cases: When the desktop belongs to an invisible window station When hDesktop is an invalid handle, refers to a destroyed desktop, or.Desktop Security and Access Rights Security enables you to control access to desktop objects. DESKTOP_READOBJECTS (0x0001L) Required to read objects on the desktop. DESKTOP_SWITCHDESKTOP (0x0100L) Required to activate the desktop using the SwitchDesktop function. DESKTOP_WRITEOBJECTS (0x0080L) Required to write objects on the desktop. Security.OpenInputDe... SetThreadDesktop Assigns the specified desktop to the calling thread. SetUserObjectInformation Sets information about a window station or desktop object. SetUserObjectSecurity Sets security information for a window station or desktop object. SwitchDesktop Makes a desktop visible and activates it. This enables the desktop to receive.3.3.4 Higher-Layer Triggered Events The following table lists the events that the server uses. For more information, please see [MSDN-DWM-COMP]. SwitchDesktop A change of desktop focus has occurred. LogicalSurface-Create A logical surface is created. SwitchSurfObj A drawing order targets a different redirection surface than the current one. The.An application can use the SwitchDesktop function to change the input desktop. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.JOBOBJECT_BASIC_UI_RESTRICTIONS structure (winnt.h) Contains basic user-interface restrictions for a job object. Syntax Members UIRestrictionsClass The restriction class for... Value Meaning JOB_OBJECT_UILIMIT_DESKTOP 0x00000040 Prevents processes associated with the job from creating desktops and switching desktops using the CreateDesktop and.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Desktops A desktop has a logical display surface and contains user interface objects... Applications that have the required access can use the SwitchDesktop function to specify a different input desktop. A desktop has a logical display.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not assoc... (ANSI) SetUserObjectInformationW Sets information about the specified window station or desktop object. (Unicode) SwitchDesktop Makes the specified desktop visible and activates it. This enables the.... only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowstation-l1-1-0 (introduced in Windows 8) See also CloseDesktop CreateDesktopEx Desktops SECURITY_ATTRIBUTES SetProcessWindowS SwitchDesktop Window.Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2008 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also CloseDesktop Desktops SECURITY_ATTRIBUTES SetProcessWindowStation SwitchDesktop Window."
453,CallNamedPipeW,"Microsoft Build · May 19 – 22, 2025CallNamedPipeW function (namedpipeapi.h) Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. Syntax Parameters [in] lpNamedPipeName The pipe name. [in] lpInBuffer The data to be written to the pipe. [in] nInBufferSize The size of the write buffer, in.namedpipeapi.h header This header is used by multiple technol... For more information, see: Security and Identity System Services namedpipeapi.h contains the following programming interfaces: Functions CallNamedPipeW Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then.(Unicode) BuildCommDCBW... (Unicode) CallEnclave Calls a function within an enclave. CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA) CallNamedPipeW Connects to a message-type pipe (and waits if an instance of the.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
454,GetAtomNameW,"Microsoft Build · May 19 – 22, 2025GetAtomNameW function (winbase.h) Retrieves a copy of the character string associated with the specified local atom. Syntax Parameters [in] nAtom Type: ATOM The local atom that identifies the character string to be retrieved. [out] lpBuffer Type: LPTSTR The character string. [in] nSize Type: int The size, in characters, of the buffer. ...e.h.(FormatMessageA) FormatMessageW The FormatMessageW (Unicode) function (winbase.h) formats a message string. GetAtomNameA Retrieves a copy of the character string associated with the specified local atom. (ANSI) GetAtomNameW Retrieves a copy of the character string associated with the specified local atom. (ANSI) GetBinaryTypeW Determines whether a.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. GetAtomNameA Retrieves a."
455,MoveFileA,"Microsoft Build · May 19 – 22, 2025MoveFileA function (winbase.h) Moves an existing file or a directory, including its children. To specify how to move the file, use the MoveFileEx or MoveFileWithProgress function. To perform this operation as a transacted operation, use the MoveFileTransacted function. Syntax Parameters [in] lpExistingFileName The current name of the file or.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.Win32-based applications should use the CreateFile function. _lread The _lread function reads data from the specified file. Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (AccessCheckByTypeResultListAndAuditAlarmA) AccessCheckByTypeResultListAndAuditAlarmByHandleA The."
456,GetExitCodeThread,"Microsoft Build · May 19 – 22, 2025GetExitCodeThread function (processthreadsapi.h) Retrieves the termination status of the specified thread. Syntax Parameters [in] hThread A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and.The GetExitCodeThread function returns the termination status of a thread. While a thread is executing, its termination status is STILL_ACTIVE. When a thread terminates, its termination status changes from STILL_ACTIVE to the exit code of the thread. The exit code for a thread is either the value specified in the call to ExitThread, ExitProcess,.Multithreading: Terminating Threads in MFC Two normal situations cause a thread to terminate: the controlling function exits or the thread is not allowed to run to completion. This topic explains both how to implement each situation and how to get the exit code of a thread after it terminates. If you... Retrieving the Exit Code of a Thread To get.TerminateJobObject function (jobapi2.h) Terminates all processes currently associated with the job. If the job is nested, this function terminates all processes currently associated with the job and all of its child jobs in the hierarchy. For more information, see Process Security and Acc... Use the GetExitCodeProcess function to retrieve each.DkmTransportConnection.TerminateRunningProcess(Int32, Int64, Int32) Method Definition Namespace: Microsoft.VisualStudio.Debugger.DefaultPort Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Terminates a process running on target computer which is not being debugged. Use the.Use the GetExitCodeThread function to retrieve a thread's exit value. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows.DkmProcess.Terminate(Int32) Method Definition Namespace: Microsoft.VisualStudio.Debugger Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 This method is called to tell the monitor to terminate the target process. This will trigger a ProcessExit event to be sent on the event thread..TerminateProcess function (processthreadsapi.h) Terminates the specified process and all of its threads. Use the GetExitCodeProcess function to retrieve a process's exit value. Use the GetExitCodeThread function to retrieve a thread's exit value. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.IDkmRunningProcessInfoProvider.TerminateRunningProcess Method Definition Namespace: Microsoft.VisualStudio.Debugger.ComponentInterfaces Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Terminates a process running on target computer which is not being debugged. Use the.IDkmStopDebuggingOperations.Terminate(DkmProcess, Int32) Method Definition Namespace: Microsoft.VisualStudio.Debugger.ComponentInterfaces Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 This method is called to tell the monitor to terminate the target process. A DkmProcess can."
457,GetProfileIntW,"Microsoft Build · May 19 – 22, 2025GetProfileIntW function (winbase.h) Retrieves an integer from a key in the specified section of the Win.ini file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. This value is in the form of a string; the GetProfileInt function converts the string into an integer and returns the integer. [in] nDefault.GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA) GetPrivateProfileIntW The GetPrivateProfileIntW (Unicode) function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileSection The.GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA) GetPrivateProfileIntW The GetPrivateProfileIntW (Unicode) function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileSection The."
458,GetEnhMetaFileW,"Microsoft Build · May 19 – 22, 2025GetEnhMetaFileW function (wingdi.h) The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file. Syntax Parameters [in] lpName A pointer to a null-terminated string that specifies the name of an enhanced metafile. Requirements Requirement Value Minimum supported... The GetEnhMetaFile.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programmi. GetEnhMetaFileW The GetEnhMetaFile function.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. (ANSI)....FontW, CreateFontIndirectA, CreateFontIndirectW metafile CreateMeta CreateMetaFileW, CreateEnhMetaFileA, CreateEnhMetaFileW, GetEnhMetaFileA, GetEnhMetaFileW,Figure 7 Functions that Free GDI Objects Object Type API Functions to Free Handles Display context DeleteDC Metafile DeleteMetaFile CloseMetaFile Enhanced Metafile DeleteEnhMetaFile."
459,DeleteMenu,"Microsoft Build · May 19 – 22, 2025DeleteMenu function (winuser.h) Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu to be changed. [in] uPosition Type: UINT The menu item to be.RemoveMenu function (winuser.h) Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu..You can insert or append menu items by using the InsertMenuItem function. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items. DeleteMenu Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. Public M... CMenu::CreatePopupMenu Creates an empty pop-up menu and attaches it to a CMenu object. CMenu::DeleteMenu Deletes a specified item from the menu. CMenu::DeleteTempMap Deletes any temporary CMenu.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar,.DefWindowProcA Calls the defaul... (ANSI) DefWindowProcW Calls the default window procedure to provide default processing for any window messages that an application does not process. (Unicode) DeleteMenu Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.DestroyMenu function (winuser.h) Destroys the specified menu and frees any memory that the menu occupies. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also Conceptual DeleteMenu InsertMenuItem Menus Reference RemoveMenu.AppendMenuA function (winuser.h) Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. Note The winuser.h header defines AppendMenu as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Requirements Requirement."
460,IsDBCSLeadByteEx,"Microsoft Build · May 19 – 22, 2025IsDBCSLeadByteEx function (winnls.h) Determines if a specified character is potentially a lead byte. A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. Syntax Parameters [in] CodePage Identifier of the code page used to check lead byte ranges. This parameter can be one of the code page.GetTextCharsetInfo Retrieves information about the character set of the font that is currently selected into... IsDBCSLeadByte Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). IsDBCSLeadByteEx Determines if a specified character is potentially a lead byte. IsTextUnicode Determines if a.IsDBCSLeadByte function (winnls.h) Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. Note  To use a different code page, your application should use the IsDBCSLeadByteEx function..winnls.h header This header is used by Internationalization for Windows Applications. IsDBCSLeadByte Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page. IsDBCSLeadByteEx Determines if.This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK) is an umbrella library named WindowsApp.lib. That umbrella library provides the exports for the set of Win32 APIs in question. To access.SYSGEOTYPE Defines the type of geographical location information requested in the GetGeoInfo or GetGeoInfoEx function. (CompareStringA) CompareStringEx Compares two Unicode (wide character) strings, for a locale specified by name.Caution  Using CompareStringEx incorrectly can compromise the security of your application. ComprehensiveCheck."
461,EnumResourceTypesA,"Microsoft Build · May 19 – 22, 2025EnumResourceTypesA function (winbase.h) Enumerates resource types within a binary module. Starting with Windows Vista, this is typically a language-neutral Portable Executable (LN file), and the enumeration also includes resources from one of the corresponding language-specific resource files (.mui files)—if one exists—that contain localizable.(Unicode) EnterUmsSchedulingMode Converts the calling thread into a user-mode schedulin... EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumResourceLanguagesW Enumerates language-specific resources, of the specified type and name, associated with a binary.(Unicode) EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (AN... (Unicode) EnumResourceNamesA Enumerates resources of a specified type within a binary module. (Unicode) EnumResourceNamesW Enumerates resources of a specified type within a binary module. (Unicode)."
462,MkParseDisplayName,"Microsoft Build · May 19 – 22, 2025MkParseDisplayName function (objbase.h) Converts a string into a moniker that identifies the object named by the string. ... which allows an end user to specify the source of a linked object by typing in a stringMkParseDisplayName attempts the following strategies to parse the beginning of the display name, using the first one that succeeds: The.IParseDisplayName::ParseDisplayName method (oleidl.h) Parses the specified display name and creates a corresponding moniker. Typically, this method is called by MkParseDisplayName or MkParseDisplayNameEx. In the initial step of the parsing operation, these functions can retriev... The main loops of MkParseDisplayName and MkParseDisplayNameEx find.How Asynchronous Binding and Storage Work Asynchronous storage enhances the COM structured storage specification to support downloading of storage obje... Document object embedded in a Web page When a user clicks a link representing a document embedded in a Web page, the following events occur: The browser calls the MkParseDisplayName function,.The ADSI s... It then creates a bind context to optimize further references to this object, and calls the standard COM function MkParseDisplayName to create a COM moniker that can be used to find and bind to the object that represents the user ""Shelly"". As in other COM server implementations, MkParseDisplayName examines the ProgID, and looks up.Using the System Device Enumerator [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer... Get the friendly name from the property bag instead, as described previously. The IMoniker::ParseDisplayName method or the MkParseDisplayName function can be used to create a default device moniker.MkParseDisplayName Introduced into ole32.dll in 10.0.10240. RpcMgmtInqServerPrincName Introduced into rpcrt4.dll in 10.0.16299. RpcStringBindingParse Introduced into rpcrt4.dll in 10.0.16299. APIs from api-ms-win-crt-filesystem-l1-1-0.dll API Requirements _access Introduced into api-ms-win-crt-filesystem-l1-1-0.dll in 10.0.10240. _access_s.IOleLink::SetSourceDisplayName method (oleidl.h) Sets the display name for the link source. Values from MkParseDisplayName may also be returned here. Remarks Notes to Call... Your implementation of these methods can call IOleLink::SetSourceDisplayName. If your container application is immediately going to bind to a newly specified link source, you.For OLE links, call IOleLink::GetSourceDisplayName. [out] pchEaten Pointer to the number of characters successfully parsed in lpszDisplayName. [in] fValidateSource TRUE if the moniker should be validated; for OLE links, MkParseDisplayName should be called. If this call to IOleUILinkContainer::SetLinkSource returns an error (e.g.,.For OLE links, call IOleLink::GetSourceDisplayName. [out] pchEaten Pointer to the number of characters successfully parsed in lpszDisplayName. [in] fValidateSource TRUE if the moniker should be validated; for OLE links, MkParseDisplayName should be called. If this call to IOleUILinkContainer::SetLinkSource returns an error (e.g.,.The client can pass the display name to MkParseDisplayName, which creates an OBJREF moniker based on the display name. A client-side Visual Basic script, for instance, could store the display name in a variable called strMyName and include this line: objMyInstance = GetObject(strMyName) The script engine internally makes the calls to."
463,CreateCompatibleDC,"Microsoft Build · May 19 – 22, 2025The CreateCompatibleDC function is used to create a memory device context (DC) that is compatible with a specified device. This function is essential for applications that need to perform drawing operations in memory rather than directly on a display device. Here’s how to use it:This approach allows for off-screen drawing, which can improve performance and reduce flickering during rendering.References:CreateCompatibleDC function (wingdi.h) The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. Syntax Parameters [in] hdc A handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen. Return value If the function succeeds,.Using GDI Functions With WCS There are various functions in the graphics device interface (GDI) tha... The following GDI functions are relevant to ICM: Device Context Functions with WCS Pen And Brush Functions with WCS Text Output Functions with WCS Bitmap Functions with WCS Device Context Functions with WCS Function Description CreateCompatibleDC.SetICMMode function (wingdi.h) The SetICMMode function causes Image Color Management to be enabled, disabled, or queried on a given device cont... If the CreateCompatibleDC function is used to create a bitmap in a DC, it is possible for the bitmap to be color matched twice, once when it is created and once when a blit is performed. When a.Memory Device Contexts To enable applications to place output in memory rather than sending it to an actual device, use a special device context for bitmap operations called a memory device context. A memory DC enables the system to treat ... Because the bitmap is compatible with the device, a memory DC is also sometimes referred to as a.ICM-Enabled Device Context Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following device context functions are enabled for use with.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::CloseFigure Closes an open figure in a path. CDC::CreateCompatibleDC Creates a memory-device context that is compatible with another device context. CDC::CreateDC Creates a device context for a specific.CreateBrushI... CreateCompatibleBitmap The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context. CreateCompatibleDC The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. CreateDCA The CreateDC function creates a device.Device Context Functions The following functions are used with device contexts. Function Description CancelDC Cancels any pending ope... ChangeDisplaySettingsEx Changes the settings of the specified display device to the specified graphics mode. CreateCompatibleDC Creates a memory device context compatible with the specified device. CreateDC.December 2009 Volume 24 Number 12 Windows with C++ - Layered Windows with Direct2D By Kenny Kerr | December 2009 In my third installment on Direct2D, I’m going to show off some of its unmatched power when it comes to interoperability. Although you could pass the bitmap data directly to GDI+, let... To create the DC, call the aptly named.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn."
464,LoadModule,"Microsoft Build · May 19 – 22, 2025The following methods allow you to register and load your own modules for use by the map control. To register a custom module, use the registerModule method before calling the loadModule method. moduleLoaded(moduleKey: string) Signals that the specified module has been loaded and if specified, calls the callback function in loadModule. Describes.LoadModule function (winbase.h) Loads and executes an application or creates a new instance of an existing application. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the CreateProcess function. Syntax Parameters [in] lpModuleName The file name of the application to be run. When....dard.dll, System.Runtime.dll Assembly:System.Runtime.dll Assembly:mscorlib.dll Assembly:netstanda Loads the module internal to this assemblyOverloads LoadModule(String, Byte[]) Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. LoadModule(String,.Azure Maps is Microsoft's next-generation maps and geospatial services for developers. Implementing modules is fairly easy and consists of the following two steps: Register the module if it isn’t already registered. Here is the basic way of loading a module: Microsoft.Maps.loadModule('MyModule'); With some modules you may want to run code after.ITargetInfo::LoadModule method (wcmconfig.h) Loads the module from the offline installation location. ... the [out] ModuleHandle The module handleRequirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2008 [desktop apps only] Target Platform Windows Header wcmconfig.h DLL._Assembly.LoadModule Method Definition Namespace: System.Runtime.InteropServices Assembly:mscorlib.dll Provides COM objects with version-independent access to the LoadModule members. Overloads LoadModule(String, Byte[], Byte[]) Provides COM objects with version-independent access to the LoadModule(String, Byte[], Byte[]) method. LoadModule(String,.July 2009 Volume 24 Number 07 Silverlight - Composite Web Apps With Prism By Shawn Wildermuth | July 2009 This article discusses: Silverlight 2 Application composition Dependency injection This article uses the following technologies: Silverlight 2, Prism Contents Why Prism. Most often, you request this in the const... Then you use IModuleManager.July 2009 Volume 24 Number 07 Silverlight - Composite Web Apps With Prism By Shawn Wildermuth | July 2009 This article discusses: Silverlight 2 Application composition Dependency injection This article uses the following technologies: Silverlight 2, Prism Contents Why Prism. Most often, you request this in the const... Then you use IModuleManager.The Bing Maps Modular framework allows you to create reusable blocks of code that tie into Bing Maps. For example: Microsoft.Maps.registerModule('MyModule', 'http://example.com/MyModule.js'); Load your module by calling the loadModule method in Bing Maps and passing in a callback method that will be fired when the module has been loaded. For.ICorDebugManagedCallback::LoadModule Method Notifies the debugger that a common language runtime (CLR) module has been successfully loaded. Syntax Parameters pAppDomain [in] A pointer to an ICorDebugAppDomain object that represents the application domain into which the module has been loaded. pModule [in] A pointer to an ICorDebugModule object."
465,FrameRect,"Microsoft Build · May 19 – 22, 2025FrameRect function (winuser.h) The FrameRect function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit. Syntax Parameters [in] hDC A handle to the device context in which the border is drawn. [in] lprc A pointer to a RECT structure that contains the logical.NSGraphics.FrameRect Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Overloads FrameRect(CGRect) FrameRect(CGRect, nfloat) FrameRect(CGRect, nfloat, NSCompositingOperation) FrameRect(CGRect) Parameters rect CGRect Applies to FrameRect(CGRect, nfloat) Parameters rect CGRect frameWidth nfloat Applies to FrameRect(CGRect, nfloat,.Filled Shape Functions The following functions are used with filled shapes. Function Description Chord Draws an area bounded by an ellipse and a line segment. FillRect Fills a rectangle using a brush. FrameRect Draws a border around a rectangle using a brush. InvertRect Inverts the color values of the pixels in a rectangle. Pie Draws a pie-shaped.NSWindow.SetFrame Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Overloads SetFrame(CGRect, Boolean, Boolean) SetFrame(CGRect, Boolean) SetFrame(CGRect, Boolean, Boolean) Parameters frameRect CGRect display Boolean animate Boolean Attributes ExportAttribute Applies to SetFrame(CGRect, Boolean) Parameters frameRect CGRect display.NSWindow.ConstrainFrameRect(CGRect, NSScreen) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters frameRect CGRect screen NSScreen Returns CGRect Attributes ExportAttribute Applies to. Learn more about the AppKit.NSWindow.ConstrainFrameRect in the AppKit namespace.. /dotnet/api/appkit.nswindow.constrainframerect.NSWindow.ContentRectFor Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Overloads ContentRectFor(CGRect) ContentRectFor(CGRect, NSWindowStyle) ContentRectFor(CGRect) Parameters frameRect CGRect Returns CGRect Attributes ExportAttribute Applies to ContentRectFor(CGRect, NSWindowStyle) Parameters forFrameRect CGRect styleMask....n) BitsPerPixelFromDepth(NSWindowDepth) BitsPerSampleFromDepth(NSWindowDepth) ColorSpaceFromDepth(NSWindowDepth) DisableScreenUpdates() DrawDarkBezel(CGRect, CGRect) DrawGrayBezel(CGRect, CGRect) DrawGroove(CGRect, CGRect) DrawLightBezel(CGRect, CGRect) DrawTiledRects(CGRect, CGRect, NSRectEdge[], nfloat[]) DrawWhiteBezel(CGRect, CGRect).NSColorWell Constructors Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Overloads NSColorWell() NSColorWell(CGRect) NSColorWell(NSCoder) NSColorWell(NSObjectFlag) NSColorWell(IntPtr) NSColorWell() Attributes ExportAttribute Applies to NSColorWell(CGRect) Parameters frameRect CGRect Attributes ExportAttribute Applies to NSColorWell(NSCoder).NSTextField Constructors Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Overloads NSTextField() NSTextField(CGRect) NSTextField(NSCoder) NSTextField(NSObjectFlag) NSTextField(IntPtr) NSTextField() Attributes ExportAttribute Applies to NSTextField(CGRect) Parameters frameRect CGRect Attributes ExportAttribute Applies to NSTextField(NSCoder).NSTextTable.DrawBackground Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters block NSTextTableBlock frameRect CGRect controlView NSView charRange NSRange layoutManager NSLayoutManager Attributes ExportAttribute Applies to. Learn more about the AppKit.NSTextTable.DrawBackground in the AppKit namespace..."
466,CreateFileMappingW,"Microsoft Build · May 19 – 22, 2025CreateFileMappingW function (memoryapi.h) Creates or opens a named or unnamed file mapping object for a specified file. ...handle to the file from which to create a file mappinIn this scenario, CreateFileMapping creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system..memoryapi.h header This header is used by System Services. CreateFileMappingFromApp Creates or opens a named or unnamed file mapping object for a specified file from a Windows Store app. CreateFileMappingNumaW Creates or opens a named or unnamed file mapping object for a specified ... (CreateFileMappingNumaW) CreateFileMappingW Creates or opens a.Describes the usage of writeable memory mapped files in the Microsoft Game Development Kit (GDK).File mapp... Function Description CreateFileMappingA Creates or opens a named or unnamed file-mapping object for a specified file. CreateFileMappingW Creates or opens a named or unnamed file-mapping object for a specified file. CreateFileMappingFromApp Creates or opens a named or unnamed file-mapping object for a specified file from a Windows.Hi, I have a publisher and subscriber kind of a project. I am using CreateFileMappingW API to create a shared memory. But after 30 to 40 Iterations, when Publisher is trying to map to the existing Shared memory using CreateFileMappingW API, the API is creating a new Shared memory. Below is the code for both Publisher and Subscriber applications.... mitigation are: LoadLibraryA LoadLibraryW LoadLibraryExA LoadLibraryExW LdrLoadDll VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory VirtualProtect VirtualProtectEx NtProtectVirtualMemory HeapCreate RtlCreateHeap CreatePr CreateProcessW CreateProcessInternalA CreateProcessInternalW NtCreateUserProcess NtCreateProcess NtCreateProcessEx.IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned."
467,lstrcmpA,"Microsoft Build · May 19 – 22, 2025lstrcmpA function (winbase.h) Compares two character strings. The comparison is case-sensitive. To perform a comparison that is not case-sensitive, use the lstrcmpi function. Syntax Parameters [in] lpString1 Type: LPCTSTR The first null-terminated string to be compared. [in] lpString2 Type: LPCTSTR The second null-terminated string to be compared..(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA.(LookupIconIdFromDirectory) LookupIconIdFromDirectoryEx Searches through icon or cursor data for the icon or cursor that best f... (LookupIconIdFromDirectoryEx) lstrcatA Appends one string to another.Warning  Do not use. (ANSI) lstrcatW Appends one string to another.Warning  Do not use. (Unicode) lstrcmpA Compares two character strings. The."
468,SetPropW,"Microsoft Build · May 19 – 22, 2025SetPropW function (winuser.h) Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list receives the new entry. [in].ITaskbarList2::MarkFullscreenWindow... Since Windows 7, call SetProp(hwnd, L”NonRudeHWND”, reinterpret_cast(TRUE)) before showing a window to indicate to the Shell that the window should not be treated as full-screen. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003.AllowSetForegroundWindow Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. GetWind... LockSetForegroundWindow The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device.Hello, I have been creating a project using OpenGL, namely glfw3.lib. Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.exe&quot; /MANIFEST /NXCOMPAT /PDB:&quot;D:\Users\Alex."
469,CreateDirectoryA,"Microsoft Build · May 19 – 22, 2025CreateDirectoryA function (fileapi.h) Creates a new directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. To specify a template directory, use the CreateDirectoryEx function. To perform this operation as a transacted operation, use the.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technol... (Unicode).Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. For mor... (ANSI) CreateDirectory2W Creates a new directory. (Unicode) CreateDirectoryA Creates a new directory. (CreateDirectoryA) CreateDirectoryW Creates a new directory..CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-... Moved into."
470,VirtualFreeEx,"Microsoft Build · May 19 – 22, 2025VirtualFreeEx function (memoryapi.h) Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process. The function frees memory within the virtual address space of the process. Windows 10, version 1507, Windows 10, version 1511, Windows 10, version 1607 and Windows 10, version 1703: To.VirtualFree function (memoryapi.h) Releases, decommits, or releases and decommits a region of pages within the virtual address space of the calling process. To free memory allocated in another process by the VirtualAllocEx function, use the VirtualFreeEx function. Windows 10, version 1507, Windows 10, version 1511, Windows 10, version 1607 and.Attempting to read from or write to a free page res... A process can use the VirtualFree or VirtualFreeEx function to release reserved or committed pages of its address space, returning them to the free state. Reserved The page has been reserved for future use. A process can use the VirtualAlloc or VirtualAllocEx function to reserve pages of its.If this option is used, the debugger calls VirtualFreeEx with the dwFreeType parameter equal to MEM_DECOMMIT. Environment Item Description Modes user mode only Targets live debugging only Platforms all Remarks The .dvfree... This command can be used to free an allocation made by .dvalloc (Allocate Memory). It can also be used to free any block of.This results in the failure of this call This warning indicates that an invalid parameter is being passed to VirtualFree or VirtualFreeEx. Code analysis name: VirtualFreeInvalidParam2 Example The following code generates warning C6332 because an invalid parameter is passed to the VirtualFree function: To correct this warning, modify the call to.You cannot delete a VBS enclave by calling the VirtualFree or VirtualFreeEx function. You can still delete an SGX enclave by calling VirtualFree or VirtualFreeEx. Windows 10, version 1507, Windows 10, version 1511, Windows 10, version 1607 and Windows 10, version 1703: To delete the enclave when you finish using it, call the VirtualFree or.This results in the failure of this call This message indicates that an invalid parameter is passed to VirtualFree or VirtualFreeEx. VirtualFree and VirtualFreeEx both reject the flags (MEM_RELEASE | MEM_DECOMMIT) in combination. Code analysis name: VirtualFreeInvalidParam1 Example The following sample code generates warning C6331: To correct this.This results in the failure of this call Remarks Both VirtualFree and VirtualFreeEx reject a dwFreeType of MEM_RELEASE with a non-zero value of dwSize. Code analysis name: VIRTUALFREEINVALIDPARAM3 Example The following code sample generates this warning: To correct this warning, ensure that the value of dwSize is 0 in the call to VirtualFree: You.PSECURE_MEMORY_CACHE_CALLBACK callback function (winnt.h) An application-defined function previously registered with the AddSecureMemoryCacheCallback function that is called when a secured memory range is freed or its protections are changed. The application secures and unsecures a memory range by sending requests to a device d... Examples of.You cannot delete a VBS enclave by calling the VirtualFree or VirtualFreeEx function. You can still delete an SGX enclave by calling VirtualFree or VirtualFreeEx. Windows 10, version 1507, Windows 10, version 1511, Windows 10, version 1607 and Windows 10, version 1703: To delete the enclave when you finish using it, call the VirtualFree or."
471,CharPrevA,"Microsoft Build · May 19 – 22, 2025CharPrevA function (winuser.h) Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters. ...meters [in] lpszStart Type: LPCTSTR The beginning of the string. [in] lpszCurrent Type: LPCTSTR A character in a null-terminateReturn value Type: LPTSTR The return.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and... This function can handle strings consisting of either single- or multi-byte characters..This function c... CharNextW Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. (Unicode) CharPrevA Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters. (ANSI)."
472,FileTimeToSystemTime,"Microsoft Build · May 19 – 22, 2025FileTimeToSystemTime function (timezoneapi.h) Converts a file time to system time format. System time is based on Coordinated Universal Time (UTC). Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the file time to be converted to system (UTC) date and time format. Requirements Requirement Value Minimum ... Converts a.SystemTimeToFileTime function (timezoneapi.h) Converts a system time to file time format. System time is based on Coordinated Universal Time (UTC). Syntax Parameters [in] lpSystemTime A pointer to a SYSTEMTIME structure that contains the system time to be converted from UTC to file time format. Requirements Requirement Value Minimum supported.Converting a time_t value to a FILETIME The time functions included in the C run-time use the time_t type to represent the number of seconds elapsed since midnight, January 1, 1970. After you've obtained a FILETIME, you can convert the value to system time using the FileTimeToSystemTime function. Legacy code example ... The following example.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal... To make a file time easy to display to a user, use the.timezoneapi.h header This header is used by System Services. For more information, see: System Services timezoneapi.h contains the following programming interfaces: Functions EnumDynamicTimeZoneInformation Enumerates DYNAMIC_TIME_ZONE_INFORMATION entries stored in the registry. FileTimeToSystemTime Converts a file time to system time format..Looking at the documentation for the EVENT_HEADER structure , the TimeStamp member's documentation is as follows: Contains the time that the event occurred. According to the Doc: TimeStamp TimeStamp data type is the same as that of ... To convert a FILETIME structure into a time that is easy to display to a user, use the FileTimeToSystemTime.DosDateTimeToFileTime function (winbase.h) Converts MS-DOS date and time values to a file time. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL.FILETIME structure (minwinbase.h) Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC). Syntax Members dwLowDateTime The low-order part of the file time. dwHighDateTime The high-order part of the file time. Remarks To convert a FILETIME structure into a time that is easy to display to a user, use.FileTimeToLocalFileTime Converts a UTC file time to a local file time. FileTimeToSystemTime Converts a file time to system time format. GetFileTime Retrieves the date and time that the specified file or directory was created, last accessed, and last modified. LocalFileTimeToFileTime Converts a local file time to a file time based on UTC..Retrieving the Last-Write Time The following example uses the GetFileTime function to retrieve the last-write time for a file. It converts the time to local time based on the current time-zone settings, and creates a date and time string that can be shown to the user. The following example uses the GetFile... It converts the time to local time."
473,EnumCalendarInfoW,"Microsoft Build · May 19 – 22, 2025EnumCalendarInfoW function (winnls.h) Enumerates calendar information for a specified locale. Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function. Another reason for preferring this function is that Microsoft is migrating toward the use of locale names instead of.EnumCalendarInfoExW Enumerates calendar information for a locale specified by identifier.Note  Any application that runs only on Windows Vista and later sho... (Unicode) EnumCalendarInfoW Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the.EnumCalendarInfoA Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function. (Unicode) EnumCalendarInfoW Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to."
474,SetDIBColorTable,"Microsoft Build · May 19 – 22, 2025SetDIBColorTable function (wingdi.h) The SetDIBColorTable function sets RGB (red, green, blue) color values in a range of entries in the color table of the DIB that is currently selected into a specified device context. A DIB must be selected into this device context. [in] iStart A zero-based color table index that specifies the first color table.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-block transfer. PlgBlt Performs a bit-block transfer. SetBitmapDimensionEx Sets the preferred dimensions to a bitmap. SetDIBColorTable Sets RGB values in a.CDrawImage class [The feature associated with this page, DirectShow, is a legacy feature. The CDrawImage class is a helper class that manages drawing for a video renderer filter. If the sample's version number lags behind the CDrawImage version number, the FastRender method calls CDrawImage::UpdateColourTable. The UpdateColourTable method sets the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BITMAPINFO Bitmap Functions Bitmaps Overview CreateFileMapping DIBSECTION.Using GDI Functions With WCS There are various functions in the graphics device interface (GDI) that use or operate on color data. If the specified BITMAPINFO structure is version 4 or version 5, the color space profile associated with the ... SetDIBColorTable No color management is performed. StretchBlt No color management is performed when blits.GetDeviceCaps The GetDeviceCaps function retrieves device-specific information for the specified device. GetDIBColorTable The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context. GetDIBits The.GetDIBColorTable function (wingdi.h) The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context. Req... The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries.GetDeviceGammaRamp The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support... GetDIBColorTable The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device."
475,DefineDosDeviceW,"Microsoft Build · May 19 – 22, 2025DefineDosDeviceW function (fileapi.h) Defines, redefines, or deletes MS-DOS device names. Syntax Parameters [in] dwFlags The controllable aspects of the DefineDosDevice function. This parameter can be one or more of the following values. Value Meaning DDD_EXACT_MATCH_ON_REMOVE 0x00000004 If this value is specified along with DDD_REMOVE_DEFINITION,.(CreateDirectoryW) CreateFile2 Creates or opens a fi... (ANSI) CreateFileW Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mails. (Unicode) DefineDosDeviceW Defines, redefines, or deletes MS-DOS device.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
476,CreateIconIndirect,"Microsoft Build · May 19 – 22, 2025CreateIconIndirect function (winuser.h) Creates an icon or cursor from an ICONINFO structure. Syntax Parameters [in] piconinfo Type: PICONINFO A pointer to an ICONINFO structure the function uses to create the icon or cursor. Return value Type: HICON If the function succeeds, the return value is a handle to the icon or cursor that is created. To.About Icons The system uses icons throughout the user interface ... An application can also create a custom icon at run-time by using the CreateIconIndirect function, which creates an icon based on the contents of an ICONINFO structure. Icon Destruction When an application no longer needs an icon it created by using the CreateIconIndirect.CreateIcon function (winuser.h) Creates an icon that has the specified size, colors, and bit patterns. To create a colored icon at run time you can use the CreateIconIndirect function, which creates a icon based on the content of an ICONINFO structure. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the instance of the.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. The term icon can refer to either of the following: A single icon image. CreateIconFromResourceEx Creates an icon or cursor from resource bits describing the icon. CreateIconIndirect Creates an.To create the icon, CreateIcon applies the following truth table to the AND and XOR bitmasks. AND bitmask XOR bitmask Display 0 0 Black 0 1 White 1 0 Screen 1 1 Reverse screen To create a colored icon at run time you must use the CreateIconIndirect function, which creates a icon based on the content of an ICONINFO structure. Before closing, your.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..DestroyIcon function (winuser.h) Destroys an icon and frees any memory the icon occupied. Syntax Parameters [in] hIcon Type: HICON A handle to the icon to be destroyed. To get extended error information, call GetLastError. Remarks It is only necessary to call DestroyIcon for icons and cursors created with the following functions:.CreateIconFromResource function (winuser.h) Creates an icon or cursor from resource bits describing the icon. Remarks The CreateIconFromResource, CreateIconFromResourceEx, CreateIconIndirect, GetIconInfo, LookupIconIdFromDirectory, and LookupIconIdFromDirectoryEx functions allow shell applications and icon browsers to examine and use resources.GetIconInfoExW function (winuser.h) Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure. ...Minimum supported server Windows Server 2008 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also.(Unico... CreateIconFromResource Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResource) CreateIconFromResourceEx Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResourceEx) CreateIconIndirect Creates an icon or cursor from an ICONINFO structure. CreateMDIWindowA Creates a."
477,SetSystemPowerState,"Microsoft Build · May 19 – 22, 2025SetSystemPowerState function (winbase.h) [SetSystemPowerState is available for use in the operating systems specified in the Requirements section. Applications written for Windows Vista and later should use SetSuspendState instead.]. Suspends the system by shutting power down. Depending on the ForceFlag parameter, the function either suspends.The process is the trusted Windows process.| Hello @Czeko I searched for EventID: 187, the description is :User-mode process attempted to change the system state by calling SetSuspendState or SetSystemPowerState APIs SetSuspendState indicates Suspends the system by shutting power down. Depending on the Hibernate parameter, the system either enters.PBT_APMSUSPEND event Notifies applications that the computer is about to enter a suspended state. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header WinUser.h (include Windows.h) See also System sleep criteria System wake-up events Power.Power Management Functions The following functions are used with power management. Power Management Functions: Windows Server 2003 and Earlier The following functions are supported in Windows Server 2008, Windows Vista, and later versions of Windows for compatibility with earlier versions of Windows. PowerSetActiveScheme SetSystemPowerState.Examples Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also Power Management Functions SetSuspendState SetSystemPowerState.I referred to the Windows Logs and the information said that “A user-mode process attempts to change the system state by calling the SetSuspendState or SetSystemPowerState APIs.” and it is called by \Device\HarddiskVolume3\Windows\System32\Runtim... I referred to the Windows Logs and the information said that “A user-mode process attempts to.Based on XML of the contents of the log, Description: The user mode process attempted to change the system state by invoking the SetSuspendState or SetSystemPowerState API. &lt;Data Name = &quot;ApiCallerNAME&quot;&gt; C:/Windows/System32/RuntimeBroker.exe Judging from the appearance of , it is determined that the symptoms of the disorder may also.Based on XML of the contents of the log, Description: The user mode process attempted to change the system state by invoking the SetSuspendState or SetSystemPowerState API. &lt;Data Name=&quot;ApiCallerName&quot;&gt;\Device\HarddiskVolume4\Windows\explorer.exe&lt;/Data&gt; Judging from the appearance of , it is determined that the symptoms of the.SetSuspendState function (powrprof.h) Suspends the system by shutting power down. Depending on the Hibernate parameter, the system either enters a suspend (sleep) state or hibe... For more information, see Changing Privileges in a Token. An application may use SetSuspendState to transition the system from the working state to the standby (sleep),.IVssCreateWriterMetadataEx The IVssCreateWriterMetadataEx interface is a C++ (not COM) interface that defines a method to report any file sets that will be explicitly excluded when a shadow copy is created. SYSTEM_POWER_CONDITION Used by the GUID_ACDC_POWER_SOURCE power event to indicate the current power source. SYSTEM_POWER_STATE Defines values."
478,PostQuitMessage,"Microsoft Build · May 19 – 22, 2025The PostQuitMessage function is used in programming to indicate to the system that a thread has made a request to terminate (quit). It is typically called in response to the WM_DESTROY message, signaling that the message loop should end. When PostQuitMessage is called, it posts a WM_QUIT message to the currently executing thread, which causes the thread's message loop to terminate and return control to the system.References:PostQuitMessage function (winuser.h) Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message. This value is used as the wParam parameter of the WM_QUIT message. Return value None Remarks The PostQuitMessage function posts a WM_QUIT message to the thread's message queue.Using Messages and Message Queues The following code examples demonstrate how to perform the following tasks associated with Windows messages and message queues. Posting a Message You can post a message to a message queue by using the PostMessage function. You... Use the PostQuitMessage function to exit a message loop. PostQuitMessage posts the.PostMessageA Places (posts) a message in the message queue associate... (ANSI) PostMessageW Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. (Unicode) PostQuitMessage Indicates to the system that a thread has made a request.Window Messages (Get Started with Win32 and C++) A GUI application must respond to events from the user and from the operating system. When you want to exit the application and break out of the message loop, call the PostQuitMessage function. The PostQuitMessage function puts a WM_QUIT message on the message queue. WM_QUIT is a special message: It.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. Usin... To post a message in the message queue associated with a thread, use the PostThreadMessage.Sending Messages in Windows, Adding Hot Keys to your Application Paul DiLascia Download the code for this article:CQA1200.exe (57KB) Browse the code for this article at Code Center: HotKey Demo Q I'm somewhat confused about the difference between PostMessage and Sen... Better to post WM_QUIT, so your app can process all the bye-bye messages like.This message ... In your main application window, you will typically respond to WM_DESTROY by calling PostQuitMessage. We saw in the Window Messages section that PostQuitMessage puts a WM_QUIT message on the message queue, causing the message loop to end. Here is a flow chart showing the typical way to process WM_CLOSE and WM_DESTROY messages:.Multithreading: Terminating Threads in MFC Two normal situations cause a thread to terminate: the controlling function exits or the thread is not allowed to run to completion. This topic explains both how to implement each situation and how to get the exit code of a thread after it term... For a user-interface thread, the process is just as.WM_QUIT message Indicates a request to terminate an application, and is generated when the application calls the PostQuitMessage function. Parameters wParam The exit code given in the PostQuitMessage function. lParam This parameter is not used. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].DispatcherQueue Class Definition Namespace: Microsoft.UI.Dispatching Edit Manages a prioritized queue on which tasks execute in a serial fashion on a thread. RunEventLoop() Runs a message loop until either EnqueueEventLoopExit or PostQuitMessage is called. RunEventLoop(DispatcherRunOptions, DispatcherExitDeferral) Runs a message loop until either."
479,CreatePopupMenu,"Microsoft Build · May 19 – 22, 2025CreatePopupMenu function (winuser.h) Creates a drop-down menu, submenu, or shortcut menu. The menu is initially empty. You can insert or append menu items by using the InsertMenuItem function. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items. Requirements Requirement Value Minimum.CMFCToolBarMenuButton Class A toolbar button that contains a pop-up menu. CMFCToolBarMenuButton::CreateFromMenu Initializes the to... CMFCToolBarMenuButton::CreateMenu Creates a Windows menu that consists of the commands in the toolbar menu. CMFCToolBarMenuButton::CreatePopupMenu Creates a pop-up menu object ( CMFCPopupMenu Class) to display the.CheckMenuRadioItem Checks a specified... At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items. CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions..CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. Public Methods Name Description CMenu::AppendMenu Appends a new item to the end of this menu. CMenu::CreateMenu Creates an empty menu and attaches it to a CMenu object. CMenu::CreatePopupMenu Creates an.Menus and Other Resources Overview of the Menus and Other Resources technology. To d... The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. CreateResourceIndexer Creates a new resource indexer for.What you need to know Technologies Windows Controls Prerequisites C/C++ Windows User Interface Programming Instructions Step 1: Wait for the BCN_DROPDOWN notification. Step 3: Create a menu and add items. Use the CreatePopupMenu function to create a menu. Use the AppendMenu function to add items to the menu. Yes... This topic describes one.To create popup menu dynamically we are using CreatePopupMenu and then adding items using AppendMenu and then using TrackPopupMenu.PFB code snippet: m_popupMenu.CreatePopupMenu(); LPTSTR data1 = (LPTSTR)malloc(20); DWORD data = PALETTERGB(255, 255, 255); _ultot(data, data1, 10); m_popupMenu.AppendMenu(MF_ENABLED | MF_OWNERDRAW |.CreateMenu function (winuser.h) Creates a menu. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-2.TrackPopupMenuEx function (winuser.h) Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. This handle can be obtained by calling the CreatePopupMenu function to create a new shortcut menu or by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-0 (introduced in Windows 8) See also Conceptual."
480,GetWindowPlacement,"Microsoft Build · May 19 – 22, 2025GetWindowPlacement function (winuser.h) Retrieves the show state and the restored, minimized, and maximized positions of the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [in, out] lpwndpl Type: WINDOWPLACEMENT* A pointer to the WINDOWPLACEMENT structure that receives the show state and position information..IsWindowArranged function (winuser.h) Important Some information relates to a prerelease product which may be substantially modified before it's commercially released. When calling GetWindowPlacement, keep in mind that the showCmd member on the returned WINDOWPLACEMENT can have a value of SW_SHOWNORMAL even if the window is arranged. Example.IsWindowArranged function (winuser.h) Note Some information relates to pre-released product, which may be substantially modified before it's commercially released. When calling GetWindowPlacement, keep in mind that the showCmd member on the returned WINDOWPLACEMENT can have a value of SW_SHOWNORMAL even if the window is arranged. Example.CWnd::GetWindowDC Retrieves ... CWnd::GetWindowInfo Returns information about the window. CWnd::GetWindowlessChildCount Returns the number of associated windowless child windows. CWnd::GetWindowPlacement Retrieves the show state and the normal (restored), minimized, and maximized positions of a window. CWnd::GetWindowRect Gets the screen.However, a full-screen window covers the taskbar--for example, in Microsoft PowerPoint slide shows and games. To save, and later restore, the position of a window when an application exits, use the GetWindowPlacement and SetWindowPlacement functions. However, check that the position is still valid before using it because the monitor could have.WINDOWPLACEMENT structure (winuser.h) Contains information about the placement of a window on the screen. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT). GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly. flags Type: UINT The flags that control the.The GetWindowPlacement function retrieves the minimized, maximized, and restored positions for the window, and also determines the window's show state. To override these defaults, an application can either call the SetWindowPlacement function or process the WM_GETMINMAXINFO message that is received by a window when the system is about to maximize.(ANSI) GetWindowModuleFileNameW Retrieves the full path and file name of the module associated with the ... (Unicode) GetWindowPlacement Retrieves the show state and the restored, minimized, and maximized positions of the specified window. GetWindowRect Retrieves the dimensions of the bounding rectangle of the specified window. SetForegroundWindow.In code (in python) I just print the placement of the current selected window with: print( win32gui.GetWindowPlacement( win32gui.GetForegroundWindow() ) ) When I go through them, the printed coordinates change for each one... why is that? they are places in the exact same location, same width/height, even the same application. ...l windows.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized child windows. CWindow::HiliteMenuItem Highlights or removes the highlight. CWindow::SetWindowPlacement Sets the."
481,CoFileTimeNow,"Microsoft Build · May 19 – 22, 2025CoFileTimeNow function (combaseapi.h) Returns the current time as a FILETIME structure. Syntax Parameters [out] lpFileTime A pointer to the FILETIME structure that receives the current time. Return value This function returns S_OK to indicate success. ...dows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.CoFileTimeNow function (objbase.h) Returns the current time as a FILETIME structure. Syntax Parameters [out] lpFileTime A pointer to the FILETIME structure that receives the current time. Return value This function returns S_OK to indicate success. ...nt Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.CoDosDateTimeToFileTime Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. CoEnableCallCancellation Enables cancellation of synchronous calls on the calling thread. CoFileTimeNow Returns the current time as a FILETIME structure. CoFileTimeToDosDateTime Converts a FILETIME into MS-DOS date and time.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference combaseapi.h contains the following programming interfaces: Functions CLSIDFromProgID Looks up a CLSID in the.objbase.h header This header is used by multiple technologies. For more information, see: Component Object Model (COM) Developer Notes Structured Storage objbase.h contains the following programming interfaces: Functions BindMoniker Locates an object by means of its moniker, activates the object if it is inactive, and retrieves a pointer to the.CoDosDateTimeToFileTime Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows. CoFileTimeNow The CoFileTimeNow function (objbase.h) returns the current time as a FILETIME structure. CoFileTimeNow The CoFileTimeNow function (combaseapi.h) returns the current time as a FILETIME structure..CoDosDateTimeToFileTime function (objbase.h) Converts the MS-DOS representation of the time and date to a FILETIME structure used by W... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h.CoFileTimeToDosDateTime function (objbase.h) Converts a FILETIME into MS-DOS date and time values. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h Library Ole32.lib DLL Ole32.dll API set."
482,SaveDC,"Microsoft Build · May 19 – 22, 2025SaveDC function (wingdi.h) The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack. ...on saves the current state of the specified device context (DC) by.Saving, Restoring, and Resetting a Device Context The following functions enable an application to save, restore, and reset a device context: SaveDC, RestoreDC, and ResetDC. The SaveDC function records on a special GDI stack the current DC's graphic objects and their attributes, and graphic modes. ResetDC is provided to reset printer DC data. The.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::GetKerningPairs Retrieves the character kerning pairs for the ... CDC::GetLayout Retrieves the layout of a device context. CDC::RestoreDC Restores the device context to a previous state saved with SaveDC..SetMetaRgn function (wingdi.h) The SetMetaRgn function intersects the current clipping region for the specified device context with the current metaregion and saves the combined region as the new metaregion for the specified device context. The SetMetaRgn function should only be called after an application's original device context was saved by.RestoreDC function (wingdi.h) The RestoreDC function restores a device context (DC) to the s... The SaveDC function pushes the current state of the DC onto its stack of saved states. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only].Device Context Functions The following functions are used with device contexts. ResetDC Updates the specified printer or plotter devi... RestoreDC Restores a device context to the specified state. SaveDC Saves the current state of the specified device context by copying data describing selected objects and graphic modes to a context stack..3.2.3 EMR_SAVEDC Example 1 This section provides an example of the EMF EMR_SAVEDC record ([MS-EMF] section 2.3.11). 00000090:                         21 00 00 00 08 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000021) Size (0x00000008) Type (4 bytes): 0x00000021 identifies the record type as EMR_SAVEDC..SetICMMode function (wingdi.h) The SetICMMode function causes Image Color Management to be enabled, disabled, or queried on a given device context (DC). The StartPage function calls the RestoreDC and SaveDC functions, which result in WCS being turned off for the printer's DC. Requirements Requirement Value Minimum supported client Windows 2000.EMRABORTPATH structure (wingdi.h) Contains data for the AbortPath, BeginPath, EndPath, CloseFigure, FlattenPath, WidenPath, SetMetaRgn, SaveDC, and RealizePalette enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimu... Contains data for the AbortPath, BeginPath,.2.3.5.11 META_SAVEDC Record The META_SAVEDC Record saves the playback device context for later retrieval. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures, defined in [MS-DTYP] section 2.2.61, in the WMF record.."
483,SetLocaleInfoA,"Microsoft Build · May 19 – 22, 2025SetLocaleInfoA function (winnls.h) Sets an item of information in the user override portion of the current locale. This function does not set the system defaults. Caution  Because this function modifies values for all applications, it should only be called by the regional and language options functionality of Control Panel, or a similar utility..GetUserDefaultLo... ResolveLocaleName Finds a possible locale name match for the supplied name. SetCalendarInfoA Sets an item of locale information for a calendar. (ANSI) SetCalendarInfoW Sets an item of locale information for a calendar. (Unicode) SetLocaleInfoA Sets an item of information in the user override portion of the current locale..SYSGEOTYPE Defines the type of geographical location information requested in the GetGeoInfo or GetGeoInfoEx function. Close Terminates the IFELanguage object. CompareStringA Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application.."
484,SetMailslotInfo,"Microsoft Build · May 19 – 22, 2025SetMailslotInfo function (winbase.h) Sets the time-out value used by the specified mailslot for a read operation. Syntax Parameters [in] hMailslot A handle to a mailslot. The CreateMailslot function must create this handle. [in] lReadTimeout The time a read operation can wait for a message to be written to the mailslot before a time-out occurs, in.Mailslot Functions The following functions can be used with mailslots. Function Description CreateMailslot Creates a mailslot with the specified name. GetMailslotInfo Retrieves information about the specified mailslot. SetMailslotInfo Sets the time-out value used by the specified mailslot for a read operation. The following functions can be used.Creating a Mailslot Mailslots are supported by three specialized functions: CreateMailslot, GetMailslotInfo, and SetMailslotInfo. These functions are used by the mailslot server. To create a mailslot that can be inherited by child processes, an application should change the SECURITY_ATTRIBUTES structure ... Mailslots are supported by three.Mailslot Operations When working with mailslots, clients and servers should use only the functions discussed in the following tables. Do not use other functions, even ... GetMailslotInfo Retrieves the maximum message size, the mailslot size, the size of the next message in the mailslot, the number of messages in the mailslot, and the amount of.4 Protocol Examples Mailslots are supported by three higher-level specialized functions, CreateMailslot, GetMailslotInfo, and SetMailslotInfo. GetMailslotInfo and SetMailslotInfo are server-specific configurations about how long the server will block a read request while waiting for the message to arrive before failing back to the application, and.(CreateFiber) CreateFiberEx Allocates a fiber object, assigns it a stack, and sets up exec... (CreateJobObjectA) CreateMailslotA Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. (ANSI) CreateMailslotW Creates a mailslot with the specified name and returns a handle.GetMailslotInfo function (winbase.h) Retrieves infor... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CreateMailslot.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CloseHandle CreateFile GetMailslotInfo Mailslot Functions Mailslots.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CloseHandle CreateFile GetMailslotInfo Mailslot Functions Mailslots.To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h."
485,CreateDIBPatternBrush,"Microsoft Build · May 19 – 22, 2025CreateDIBPatternBrush function (wingdi.h) The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). The brush can subsequently be selected into any device context that is associated with a device that supports raster operations. Applications should use the.CreatePatternBrush function (wingdi.h) The CreatePatternBrush function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. ...Remarks A pattern brush is a bitmap that the system uses to paint the interiors of.CreateDIBPatternBrushPt function (wingdi.h) The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB). ...Syntax Parameters [in] lpPackedDIB A pointer to a packed DIB consisting of a BITMAPINFO structure immediately followed by an of bytes defining the pixels of the.ICM-Enabled Brush Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following brush functions are enabled for use with ICM:.CreateDIBPatternBrush The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). CreateDIBPatternBrushPt The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB). CreatePatternBrush The.(Unicode) CreateDIBitmap The CreateDIBitmap function creates a compatible bit... CreateDIBPatternBrush The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). CreateDIBPatternBrushPt The CreateDIBPatternBrushPt function creates a logical brush that has the pattern.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color.GDI object Creator function Destroyer function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDIBitmap, CreateDIBSection, CreateDiscardableBitmap DeleteObject Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush DeleteObject DC CreateDC DeleteDC,.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,."
486,TrackPopupMenu,"Microsoft Build · May 19 – 22, 2025TrackPopupMenu is a function in Microsoft development that displays a shortcut menu at a specified location on the screen and tracks the selection of items on that menu. It is typically used in response to user actions, such as mouse clicks. The function requires parameters such as the handle to the menu, the position where the menu should appear, and flags that determine how the menu behaves.The older version of this function, TrackPopupMenuEx, is recommended for new applications as it provides additional features, such as the ability to specify a portion of the screen that the menu should not obscure.References:TrackPopupMenu function (winuser.h) Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen. Syntax Parameters [in] hMenu Type: HMENU A handle to the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create a new.TrackPopupMenuEx function (winuser.h) Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen. Syntax Parameters [in] hMenu Type: HMENU A handle to the shortcut menu to be displayed. This is essential for creating an optimal user experience,.CMenu Class An encapsulation of the Windows HMENU. CMenu::TrackPopupMenu Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu. CMenu::TrackPopupMenuEx Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu. Example.CContextMenuManager Class The CContextMenuManager object manages shortcut menus, also known as context menus. CContextMenuManager::TrackPopupMenu Displays the specified shortcut menu. If you want to show the menu without first receiving user input, call ShowPopupMenu. TrackPopupMenu is used when you want to create a menu and wait for user input..Step 4: Display the menu. The TrackPopupMenu function displays a shortcut menu at the specified location and tracks the selection of items on the menu. Complete example Related topics BCN_DROPDOWN Notification Code About Buttons Button Control Reference Using Buttons Button Feedback Was this page helpful. Yes No... This topic describes one.Resource Leaks: Detecting, Locating, and Repairing Your Leaky GDI Code C... The last item is easily implemented using the TrackPopupMenu function, which takes the following parameters: Handle of the menu to display. The menu handle that the TrackPopupMenu function displays is supposed to be a submenu. Figure 15Strange TrackPopupMenu Behavior As.SMIF_DROPCASC... SMIF_HIDDEN Do not display the item. SMIF_DISABLED Make the item unselectable. It will be displayed in gray and will not respond to user actions. SMIF_TRACKPOPUP Use TrackPopupMenu to create the pop-up menu. SMIF_DEMOTED Display the item in a ""demoted"""" state. SMIF_ALTSTATE Display the item in an ""altered"" state. SMIF_DRAGNDROP.WM_CONTEXTMENU message Notifies a wi... Remarks A window can process this message by displaying a shortcut menu using the TrackPopupMenu or TrackPopupMenuEx functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.AccessibleEvents Enum Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:AccessibleEvents.cs Source:AccessibleEvents.cs Source:AccessibleEvents.cs Specifi... For a call to TrackPopupMenu(), a client will see EVENT_SYSTEM_MENUSTART followed almost immediately by EVENT_SYSTEM_MENUPOPUPSTART for the popup being shown..Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item. SetMenuItemInfo Changes information about a menu item. TrackPopupMenu Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen. TrackPopupMenuEx."
487,lstrlenW,"Microsoft Build · May 19 – 22, 2025lstrlenW function (winbase.h) Determines the length of the specified string (not including the terminating null character). Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be checked. Return value Type: int The function returns the length of the string, in characters. Remarks Note The winbase.h header defines lstrlen as.MNLS_lstrlenW Applies to: Outlook 2013 | Outlook 2016 Determines the length of the specified Unicode string, excluding the terminating null character. Parameters lpsz [in] The null-terminated Unicode string to be checked. Return value The function returns an integer with the length of the string. It is a count of characters in the string,.Warning C28750 Banned usage of lstrlen and its variants: '*function-name' is a banned API for improved error handling purposes. This warning indicates that a function is being used that has been banned and has a more robust or secure replacement. Code analysis name: BANNED_API_USAGE_LSTRLEN Example The following code generates this warning: This.(Unicode) lstrcpyW Copies a string to a buffer. (Unicode) lstrlenA Determines the length of the specified string (not including the terminating null character). (ANSI) lstrlenW Determines the length of the specified string (not including the terminating null character). (ANSI) MAKEINTRESOURCEW Converts an integer value to a resource type....adAdviseSink LAUNCHWIZARDENTRY IsBadBoundedStringPtr LPropCompareProp LPFNBUTTON MAPIAdminProfiles LpValFindProp MAPIAllocateMore MAPIAllocateBuffer MAPIDeInitIdle MAPICrashRecovery MAPIGetDefaultMalloc MAPIFreeBuffer MAPIInitIdle MAPIInitialize MAPIOFFLINE_AGGREGATEINFO MAPILogonEx MAPIOpenFormMgr MAPIOFFLINE_CREATEINFO MAPIReallocateBuffer....ompletion+0x14 KERNELBASE.dll!GetQueuedCompletionStatus+0x4f msedge.dll+0x222651 msedge.dll+0x22195e msedge.dll!RelaunchChromeBrowserWithNewCommandLineIfNeeded+0x5dc251 msedge.dll!IsSandboxedProcess+0x1b51e98 msedge.dll!IsSandboxedProcess+0x18d2a35 msedge.dll!RelaunchChromeBrowserWithNewCommandLineIfNeeded+0x67c694.(... (ANSI) LookupAccountSidLocalW Retrieves the name of the account for the specified SID on the local machine. (Unicode) LookupAccountSidW Accepts a security identifier (SID) as input. (ANSI) LookupPrivilegeDisplayNameW Retrieves the display name that represents a specified privilege. (ANSI) LookupPrivilegeNameW Retrie. (Unicode) lstrcatA."
488,CreateIconFromResourceEx,"Microsoft Build · May 19 – 22, 2025CreateIconFromResourceEx function (winuser.h) Creates an icon or cursor from resource bits describing the icon. Syntax Parameters [in] presbits Type: PBYTE The DWORD-aligned buffer pointer containing the icon (RT_ICON) or cursor (RT_CURSOR) resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectoryEx and LoadResource.CreateIconFromResource function (winuser.h) Creates an icon or cursor from resource bits describing the icon. To specify a desired height or width, use the CreateIconFromResourceEx function. Syntax Parameters [in] presbits Type: PBYTE The DWORD-aligned buffer pointer containing the icon or cursor resource bits. Requirements Requirement Value.About Icons The system uses icons throughout the user interface to represent objects such as files, folders, shortcuts, applications, and documents. The icon functions enable applications to crea... The CreateIcon, CreateIconFromResourceEx, CreateIconIndirect, and SHGetFileInfo functions can be used to work with icons in sizes other than system.Remarks It is only necessary to call DestroyIcon for icons and cursors created with the following functions: CreateIconFromResourceEx (if called without the LR_SHARED flag), CreateIconIndirect, and CopyIcon. ...nly] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. The term icon can ... CreateIcon Creates an icon that has the specified size, colors, and bit patterns. CreateIconFromResource Creates an icon or cursor from resource bits describing the icon..(Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. CreateIcon Creates an icon that has the speci... CreateIconFromResource Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResource) CreateIconFromResourceEx.Using Icons The following topics describe how to perform certain tasks related to icons: Creating an Icon Geting the Icon size Displaying an I... Sharing Icon Resources The following code uses the functions CreateIconFromResourceEx, DrawIcon, and LookupIconIdFromDirectoryEx, and several of the resource functions, to create an icon handle based on.Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..(Unicode) CreateDialogW Creates a... (Unicode) CreateIcon Creates an icon that has the specified size, colors, and bit patterns. CreateIconFromResource Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResource) CreateIconFromResourceEx Creates an icon or cursor from resource bits describing the icon..About Cursors Windows provides a set of standard cursors that can be used by applications. An application can use the GetIconInfo function to retrieve the current image for a cursor and can draw the cursor by using the DrawIconEx function. Using cursor resources avoids device... The CreateIconFromResourceEx function enables an application to."
489,DialogBoxParamA,"Microsoft Build · May 19 – 22, 2025DialogBoxParamA function (winuser.h) Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls. Syntax.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Ref... DialogBoxIndirect does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function. (Unicode).Dialog Boxes Overview of the Dialog Boxes technology. To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for this technology, see: Dialog Boxes Functions AddRef The IPrintDialogCallback::AddRef method (commdlg.h) is IUnknown's AddRef method, which decrements the reference count for an interface on a COM object.."
490,EnumSystemCodePagesW,"Microsoft Build · May 19 – 22, 2025EnumSystemCodePagesW function (winnls.h) Enumerates the code pages that are either installed on or supported by an operating system. Syntax Parameters [in] lpCodePageEnumProc Pointer to an application-defined callback function. The EnumSystemCodePages function enumerates code pages by making repeated calls to this callback function. For more.EnumSystemCodePagesW returns random values, inconsistently. It's supposed to enumerate all the system code pages, but the results it gives are completely random edit: it works if run outside of visual studio| I cannot reproduce. EnumSystemCodePagesW returns random values, inconsistently. It's supposed to enumerate all the system code pages, but.(Unicode) EnumSystemCodePagesA Enumerates the code pages that are either installed on or supported by an operating system. (ANSI) EnumSystemCodePagesW Enumerates the code pages that are either installed on or supported by an operating system. (Unicode) EnumSy... EnumSystemGeoNames Enumerates the two-letter International Organization for.(ANSI) EnumLanguageGroupLocalesW Enumerates the locales in a specified language group. (Unicode) EnumSystemCodePagesA Enumerates the code pages that are either installed on or supported by an operating system. (ANSI) EnumSystemCodePagesW Enumerates the code pages that are either installed on or supported by an operating system. (Unicode).APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. CompareObjectHandles Introduced into api-ms-win-core-handle-l1-1-0.dll in."
491,SetStretchBltMode,"Microsoft Build · May 19 – 22, 2025SetStretchBltMode function (wingdi.h) The SetStretchBltMode function sets the bitmap stretching mode in the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] mode The stretching mode. This parameter can be one of the following values. Requirements Requirement Value Minimum supported client Windows 2000.2.3.11.24 EMR_SETSTRETCHBLTMODE Record The EMR_SETSTRETCHBLTMODE record specifies bitmap stretch mode. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size StretchMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETSTRETCHBLTMODE. ...ies the stretch mode and MAY be in the StretchMode enuThe....section 2.3.11.24). 00000150: 15 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000015) Size (0x000 StretchMode (0x00000001) Type (4 bytes): 0x00000015 identifies the record type as EMR_SETSTRETCHBLTMODESize (4 bytes): 0x0000000C specifies the size of this record in bytes.....00 00 0C 00 00 00 00000720: 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000015) Size (0x000 StretchMode (0x00000001) Type (4 bytes): 0x00000015 identifies the record type as EMR_SETSTRETCHBLTMODESize (4 bytes): 0x0000000C specifies the size of this record in bytes. StretchMode (4 bytes): 0x00000001.COLORADJUSTMENT structure (wingdi.h) The COLORADJUSTMENT structure defines the color adjustment values used by the StretchBlt and StretchDIBits functions when the stretch mode is HALFTONE. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.2.3.5.23 META_SETSTRETCHBLTMODE Record The META_SETSTRETCHBLTMODE Record defines the bitmap stretching mode in the playback device context. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction StretchMode Reserved (optional) RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD.GdiTransparentBlt function (wingdi.h) The GdiTransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. When the SetStretchBltMode function is used, the iStretchMode modes of BLACKONWHITE and WHITEONBLACK are converted to.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll ... The StretchBlt function copies a bitmap from a source rectangle into a destination.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Color Functions Colors Overview DeleteObject RealizePalette SelectPalette.EMRSELECTCLIPPATH structure (wingdi.h) Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records. Syntax Members emr The base structure for all reco... Contains parameters for the SelectClipPath, SetBkMode, SetMapMode,."
492,SetThreadPriority,"Microsoft Build · May 19 – 22, 2025The SetThreadPriority function is used in programming to adjust the priority of a thread in a Windows application. By default, threads are created with a priority level of THREAD_PRIORITY_NORMAL. You can use SetThreadPriority to change this priority to one of the defined levels, such as THREAD_PRIORITY_ABOVE_NORMAL or THREAD_PRIORITY_HIGHEST, to ensure that certain threads are more responsive to user input or critical tasks.To use SetThreadPriority, you typically follow these steps:It's important to manage thread priorities carefully to avoid issues such as starvation of lower-priority threads or deadlocks.References:SetThreadPriority function (processthreadsapi.h) Sets the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base priority level. Syntax Parameters [in] hThread A handle to the thread whose priority value is to be set. The SetThreadPriority function enables setting.CMsgThread.SetThreadPriority method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Those features have been optimized ... Uses the Microsoft Win32 SetThreadPriority function to set the priority of the thread to a new value..Process.SetThreadPriority Method Definition Namespace: Android.OS Assembly:Mono.Android.dll Overloads SetThreadPriority(Int32, ThreadPriority) Set the priority of a thread, based on Linux priorities. SetThreadPriority(ThreadPriority) Set the priority of the calling thread, based on Linux priorities. SetThreadPriority(Int32, ThreadPriority) Set the.Processes and threads Provides information about a newly created process and its primary thread. You need these headers: processthreadsapi.h Enumerations MACHINE_ATTRIBUTES Specifies the ways in which an architecture of code can run on a host operating system. SetThreadInformation Sets information for the specified thread. SetThreadPriority Sets.CWinThread Class Represents a thread of execution within an application. Syntax Members Public Constructors Name Description CWinThread::CWinThread Constructs a CWinThread object. CWinThread::Run Controlling function for threads with a message pump. CWinThread::SetThreadPriority Sets the priority of the current thread. CWinThread::SuspendThread.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Serve... Retrieves the priority class for the specified process. This value, together with the priority.Substitute calls to SetThreadPriority with the newer CeSetThreadPriority for Windows CE 3.0. This will allow you access to the broader range of Windows CE 3.0 priorities. The scheduler allows threads with a higher priority to run before threads with a lower priority, which you assign by calling SetThreadPriority (you can access the wider range of.SetThreadIdealProce... SetThreadIdealProcessorEx Sets the ideal processor for the specified thread and optionally retrieves the previous ideal processor. SetThreadInformation Sets information for the specified thread. SetThreadPriority Sets the priority value for the specified thread. SetThreadPriorityBoost Disables the ability of the system to.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. The new process runs in the security.IHostTask::SetPriority Method Requests that the host adjust the thread priority level for the task represented by the current IHostTask instance. Syntax Parameters newPriority [in] An integer that represents the requested thread priority value for the task represented by the current IHostTask instance. SetPriority allows the CLR to set that thread."
493,ReadConsoleInputA,"Microsoft Build · May 19 – 22, 2025If the desire is to remove all ambiguity, then ReadConsoleInput is the only option. This function deals with INPUT_RECORD structures, meaning that it will give key states. If the codepage is UTF-8, ReadConsoleInputA will read two key down events for the a press. Using only works in part, as some keyboards combine simultaneously-pressed characters.ReadConsoleInput function Reads data from a console input buffer and removes it from the buffer. Syntax Parameters hConsoleInput [in] A handle to the console input buffer. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via.C... Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. APIs from api-ms-win-core-com-l2-1-1.dll API Requirements CreateILockBytesOnHGlobal Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. FmtIdToPropStgName Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
494,ArcTo,"Microsoft Build · May 19 – 22, 2025ArcTo function (wingdi.h) The ArcTo function draws an elliptical arc. Syntax Parameters [in] hdc A handle to the device context where drawing takes place. [in] left The x-coordinate, in logical units, of the upper-left corner of the bounding rectangle. [in] top The y-coordinate, in logical units, of the upper-left corner of the bounding rectangle..2.4.2.1 ArcTo The ArcTo structure is a Row_Type element that specifies a circular arc in a geometric path. Cell_Type element Meaning X Specifies the x-coordinate of the ending vertex of the arc. Y Specifies the y-coordinate of the ending vertex of the arc. A Specifies the distance from the arc’s midpoint to the midpoint of its chord. The ArcTo.SKPath.ArcTo Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads ArcTo(SKPoint, SKPoint, Single) Appends a line and arc to the current path. ArcTo(SKRect, Single, Single, Boolean) Appends the specified arc to the path. ArcTo(SKPoint, Single, SKPathArcSize, SKPathDirection, SKPoint) Appends an elliptical arc from the current.StreamGeometryContext.ArcTo Method Definition Namespace: System.Windows.Media Assembly:PresentationCore.dll Draws an arc to the specified point. Parameters point Point The destination point for the end of the arc. size Size The radii (half the width and half the height) of an oval whose perimeter is used to draw the angle. The curvature of the arc.ArcTo Class Definition Namespace: DocumentFormat.OpenX... This class is available in Office 2007 and above. When the object is serialized out as xml, it's qualified name is a:arcTo. Inheritance Object OpenXmlElement OpenXmlLeafElement ArcTo Inheritance Object OpenXmlElement OpenXmlLeafElement TypedOpenXmlLeafElement ArcTo Attributes.ArcTo Row (Geometry Section) Contains the x - and y -coordinates and bow of a circular arc. ... By default, drawn arcs are represented by an EllipticalArcTo row in a ShapeSheet window. To show an ArcTo row in a ShapeSheet window, you must draw an arc, and then change the EllipticalArcTo row type to an ArcTo row type; in effect you are changing....ntFormat.OpenXml v2.19.0 Package:DocumentFormat.OpenXml v2.20.0 Package:DocumentFormat.OpenXml v2.7.1 Package:DocumentFormat.OpenXml v2.7.2 Package:DocumentFormat.OpenXml v2.8.0 Package:DocumentFormat.OpenXml v2.8.1 Package:DocumentFormat.OpenXml v2.9.0 Package:DocumentFormat.OpenXml v2.9.1 Package:DocumentFormat.OpenXml v3.0.0.Path.ArcTo Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Overloads ArcTo(RectF, Single, Single) Append the specified arc to the path as a new contour. However, if the path is empty, then we call moveTo() with the first point of the arc.Java documentation for android.graphics.Path.arcTo(android.graphics.RectF, float,.A.arcTo Field Definition Namespace: DocumentFormat.OpenXml.Linq Assembly:DocumentFormat.OpenXml.Linq.dll Package:DocumentFormat.OpenXml.Linq v2.15.0 Package:DocumentFormat.OpenXml.Linq v2.16.0 Package:DocumentFormat.OpenXml.Linq v2.17.1 Package:DocumentFormat.OpenXml.Linq v2.18.0 Package:DocumentFormat.OpenXml.Linq v2.19.0.SetArcDirection function (wingdi.h) The SetAr... The SetArcDirection function specifies the direction in which the following functions draw: Arc ArcTo Chord Ellipse Pie Rectangle RoundRect Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps."
495,PtVisible,"Microsoft Build · May 19 – 22, 2025PtVisible function (wingdi.h) The PtVisible function determines whether the specified point is within the clipping region of a device context. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical units, of the point. [in] y The y-coordinate, in logical units, of the point. ...context, the return value.OffsetClipRgn Moves the clipping region of a device context by the specified offsets. PtVisible Determines whether the specified point is within the clipping region of a device context. RectVisible Determines whether any part of the specified rectangle lies within the clipping region of a device context. SetMetaRgn Intersects the current clipping.The pol... CDC::PolyPolyline Draws multiple series of connected line segments. The current position isn't used or updated by this function. CDC::PtVisible Specifies whether the given point is within the clipping region. CDC::RealizePalette Maps palette entries in the current logical palette to the system palette. CDC::Rectangle Draws a rectangle.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). For example, an application can perform the following operations directly on a device context's clipping region. Determine whether graphics output appears within the region's borders by passing coordinates of the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Clipping Functions Clipping Overview CreateRectRgn PtVisible RECT SelectClipRgn..DrawEscape The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI). (ANSI) EnumDisplayDevicesW The EnumD... (Unicode) EnumDisplayMonitors The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors.wingdi.h header This header is used by multiple technologies."
496,ResizePalette,"Microsoft Build · May 19 – 22, 2025ResizePalette function (wingdi.h) The ResizePalette function increases or decreases the size of a logical palette based on the specified value. Syntax Parameters [in] hpal A handle to the palette to be changed. [in] n The number of entries in the palette after it has been resized. ...ing the GetDeviceCaps function and specifying the RASTERCAPS.CPalette::ResizePalette Changes the size of the logical palette specified by the CPalette object to the specified number of entries. CPalette::ResizePalette Changes the size of the logical palette attached to the CPalette object to the number of entries specified by nNumEntries. Remarks If an application calls ResizePalette to reduce the size of.EMRRESIZEPALETTE structure (wingdi.h) The EMRRESIZEPALETTE structure contains members for the ResizePalette enhanced metafile record. Syntax Members emr The base structure for all record types. ihPal Index of the palette in the handle table. cEntries Number of entries in palette after resizing. Requirements Requirement Value Minimum supported.Color Functions The following functions are used with color. RealizePalette Maps palette entries from the current logical palette to the system palette. ResizePalette Increases or decreases the size of a logical palette based on the specified value. SelectPalette Selects the specified logical palette into a device context. UpdateColors Updates the.2.3.8.4 EMR_RESIZEPALETTE Record The EMR_RESIZEPALETTE record increases or decreases the size of an existing LogPalette object (section 2.2.17). 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size ihPal NumberOfEntries Type (4 bytes): An unsigned integer that identifies this record type as EMR_RESIZEPALETTE. Size (4.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt.Logical Palette A logical palette is a color palette that an application creates and associates with a given device context. Logical palettes let applications define and use colors that meet their specific needs. An application can change the number of entries in a logical palette by using the ResizePalette function. If the application reduces the.2.3.5.9 META_RESIZEPALETTE Record The META_RESIZEPALETTE Record redefines the size of the logical palette that is defined in the playback device context. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction NumberOfEntries RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD.2.3.5 State Record Types This section defines the State Record Types, which define and manage the graphics properties specified in the Playback Device Context (section 3.1.5). META_REALIZEPALETTE 2.3.5.8 Maps entries from the logical palette that is defined in the playback device context to the system palette. META_RESIZEPALETTE 2.3.5.9 Redefines.2.3.8 Object Manipulation Record Types The Object Manipulation record types manage and modify graphics objects. EMR_RESIZEPALETTE 2.3.8.4 Increases or decreases the size of an existing LogPalette object. EMR_SELECTOBJECT 2.3.8.5 Specifies an existing object based on its index in the EMF object table and selects it into the playback device context."
497,CharNextA,"Microsoft Build · May 19 – 22, 2025CharNextA function (winuser.h) Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. Syntax Parameters [in] lpsz Type: LPCTSTR A character in a null-terminated string. Return value Type: LPTSTR The return value is a pointer to the next character in the string,.If the operand is a character string, the function converts the characters in place. (Unicode) CharNextA Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. (ANSI) CharNextExA Retrieves the pointer to the next character in a string. This function can handle.(Unicode) CharLowerW Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place. (Unicode) CharNextA Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters. (ANSI)."
498,CharUpperBuffW,"Microsoft Build · May 19 – 22, 2025CharUpperBuffW function (winuser.h) Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A buffer containing one or more characters to be processed. [in] cchLength Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The....fWrapW function [CharUpperBuffWrapW is available for use in WindConverts lowercase characters in a buffer to uppercase characters. The function converts the characters in place. Syntax Parameters pch [in] Type: LPWSTR A pointer to a buffer that contains one or more Unicode characters to process. cchLength [in] Type: DWORD Specifies the size, in.(ANSI) CharToOemBuffW Translates a specified number of characters in a strin... (Unicode) CharToOemW Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase.] [This function is available in Windows 2000 and through Windows XP Service Pack 2 (SP2). It is no longer available as of Windows Vista.] [This function is available through Windows XP with SP2 and Windows Server 2003. You should use CharLowerW in its place.] [CharUpperBuffWrapW is available for use in Windows XP. You should use CharUpperBuffW in.(ANSI) CharToOemBuffW Translates a specified number of characters in a strin... (Unicode) CharToOemW Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase."
499,SwitchToThread,"Microsoft Build · May 19 – 22, 2025SwitchToThread function (processthreadsapi.h) Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the next thread to be executed. Syntax Return value If calling the SwitchToThread function caused the operating system to switch execution to another thread, the.This function is primarily designed for use by debuggers. A ... During the sleep interval, the thread is not scheduled for time on the processor. The SwitchToThread function is similar to Sleep and SleepEx, except that you cannot specify the interval. SwitchToThread allows the thread to give up its time slice. A thread can suspend and resume the.Processes and threads Provides information about a newly created process and its primary thread. (SetThreadSelectedCpuSets) SetThreadStackGuarantee Sets the minimum size of the stack associated with the calling thread or fiber that will be available during any stack overflo... SuspendThread Suspends the specified thread. SwitchToThread Causes the.SuspendThread Suspends the specified thread. SwitchToThread Causes the calling thread to yield execution to another thread that is ready to run on the current processor. TerminateThread Terminates a thread. Wow64SuspendThread Sus... Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess NtQueryInformationThread WinExec.The call to SwitchToThread causes the operating system to context-switch to another runnable thread. Note that the Win32® SwitchToThread API is not wrapped with a managed equivalent and, therefore, I must interop out to the unmanaged API. SwitchToThread is ideal because it allows another thread t... Jeffrey is also a contributing editor to MSDN.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new ... SuspendThread Suspends the specified thread. SwitchToThread Causes the.IThreadProxy::SwitchTo Performs a cooperative context switch from the currently executing context to a different one. Remarks When called by a thread proxy backed by a regular Windows thread, YieldToSystem behaves exactly like the Windows function SwitchToThread. However, when called from user-mode schedulable (UMS) threads, the SwitchToThread.Background threads, particularly those that are processor intensive, can be set to THREAD_PRIORITY_BELOW_NORMAL or THREAD_PRIORITY_LOWEST, to ensure that they can be preempted when necessary. However, if you have a thread w... To do this, use a wait function, critical section, or the Sleep function, SleepEx, or SwitchToThread function. This is.This makes it very easy to determine if too much time is spent spinning. Because the title is spinning and not performing a context switch, sampled data must be used. If the title is spinning by rapidly switching between threads by using SwitchToThread, follow the steps that are provided in the topic High context switch rate. Start with the.Describes the steps that are used for identifying threads that are spinning for extended periods of time."
500,GetSysColor,"Microsoft Build · May 19 – 22, 2025The GetSysColor function retrieves the current color value for a specified display element in the system. This function is useful for applications that need to adapt to the user's color settings, as it allows them to obtain the default color values for various elements such as button faces, text, and window backgrounds.References:GetSysColor function (winuser.h) Retrieves the current color of the specified display element. Syntax Parameters [in] nIndex Type: int The display element whose color is to be retrieved. Because zero is also a valid RGB value, you cannot use GetSysColor to determine whether a system c... To paint with a system color brush, an application should.ITextHost::TxGetSysColor method (textserv.h) Retrieves the text host's color for a specified display element. Return value Type: COLORREF The value that identifies the red, green, and blue (RGB) color value of the specified element. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server.High contrast parameter The high contrast parameter indicates whether the user wants a high contrast between the colors used for foreground and background visuals. Use the GetSysColor function to determine the appropriate foreground and background colors, using either a combination of COLOR_WINDOWTEXT and COLOR_WINDOW or a combination of.1.2.2 Informative References [MS-OGRAPH] Microsoft Corporation, ""Office Graph Binary File Format"". [MSDN-GetSysColor] Microsoft Corporation, ""GetSysColor Function"", http://msdn.microsoft.com/en-us/library/ms724371(VS.85).aspx [MSDN-WebComp] Microsoft Corporation, ""Web Components"", http://msdn.microsoft.com/en-us/library/aa235992(office.10).aspx..IVsFontAndColorUtilities.GetEncodedSysColor(UInt32, Int32) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Obtain a System Color service index corresponding to a supplied COLORREF..Document.HeaderFooterColor property (Visio) Specifies the color of the header and footer text. &H800000 xx , where xx is a valid GetSysColor index. For details about the GetSysColor function, search for "" GetSysColor "" in the Microsoft Platform SDK on MSDN, the Microsoft Developer Network. The OLE_COLOR data type is used for properties that return.GetSysColorBrush function (winuser.h) The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index. An application can retrieve the current system colors by calling the GetSysColor function. To paint with a system color brush, an application should use GetSysColorBrush (nIndex) instead.IVsFontAndColorUtilities.EncodeSysColor(Int32, UInt32) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsof... Remarks Valid system component must be valid inputs to GetSysColor. Managed code can obtain functionality equivalent to GetSysColor with SystemColors and.IVsFontAndColorUtilities.EncodeVSColor(Int32, UInt32) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17... Managed code can obtain functionality equivalent to GetSysColor with SystemColors and.The GetSystemMetrics function retrieves the specified system metric. Applications can also retrieve and set the color of window elements such as menus, scroll bars, and buttons by using the GetSysColor and SetSysColors functions, respectively. The SystemParametersInfo function retrieves or sets various system attributes, such as double-click t...."
501,GetConsoleCP,"Microsoft Build · May 19 – 22, 2025GetConsoleCP function Retrieves the input code page used by the console associated with the calling process. A console uses its input code page to translate keyboard input into the corresponding character value. Syntax Parameters This function has no parameters. Return value The return value is a code that identifies the code page. Requirements.Console Code Pages A code page is a mapping of 256 character codes to individual characters. An application can use the SetConsoleCP and GetConsoleCP functions to set and retrieve a console's input code pages and the SetConsoleOutputCP and GetConsoleOutputCP functions to set and retrieve its output code pages. The identifiers of the code pages.Console Functions The following functions are used to access a console. GetConsoleCP Retrieves the input code page used by the console associated with the calling process. GetConsoleOriginalTitl... GetConsoleOutputCP Retrieves the output code page used by the console associated with the calling process. GetConsoleProcessList Retrieves a list of.GetConsoleOutputCP function Retrieves the output code page used by the console associated with the calling process. To set and query a console's input code page, use the SetConsoleCP and GetConsoleCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.System.Console class This article provides supplementary remarks to the reference documentation for this API. The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the ... NET Core notes.To determine a console's current output code page, use the GetConsoleOutputCP function. To set and retrieve a console's input code page, use the SetConsoleCP and GetConsoleCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.To determine a console's current input code page, use the GetConsoleCP function. To set and retrieve a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.According to https://learn.microsoft.com/en-us/windows/console/getconsolecp 0 means an error, but calling GetLastError return 0 - which is described as ERROR_SUCCESS in https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499- Is it a valid state for the actice code page to be 0. ...but GetLastError return 0 - which is.Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetObjectContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into."
502,OpenMutexA,"Microsoft Build · May 19 – 22, 2025OpenMutexW function (synchapi.h) Opens an existing named mutex object. In this situation, it is better to use C... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library.CreateMutexA function (synchapi.h) Creates or opens a named or unnamed mutex object. ...ted client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows.GetFinalPathNameByHandleW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. APIs from api-ms-win-core-io-l1-1-1.dll API Requirements CancelIoEx Introduced into api-ms-win-core-io-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-io-l1-1-0.dll in 10.0.16299. GetOverlappedResultEx Introduced into api-ms-win-core-io-l1-1-1.dll in."
503,getservbyname,"Microsoft Build · May 19 – 22, 2025getservbyname function (winsock.h) The getservbyname function retrieves service information corresponding to a service name and protocol. Syntax Parameters [in] name A pointer to a null-terminated service name. [in] proto A pointer to a null-terminated protocol name. If this pointer is NULL, the getservbyname function returns the first service.getservbyname function (winsock2.h) The getservbyname function retrieves service information corresponding to a service name and protocol. Syntax Parameters [in] name A pointer to a null-terminated service name. [in] proto A pointer to a null-terminated protocol name. If this pointer is NULL, the getservbyname function returns the first service....tobynumber function (winsock.h) retrieves protocol information corresponding to a protocol n getservbyname The getservbyname function (winsock2.h) retrieves service information corresponding to a service name and protocol. getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and.SERVENT structure (winsock2.h) The servent structure is used to store or return the name and service number f... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winsock2.h (include Winsock2.h) See also getservbyname. The.SERVENT structure (winsock.h) The servent structure is used to store or return the name and service number for a ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winsock.h (include Winsock2.h) See also getservbyname. The....tpeername function (winsock2.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock2.h) retrieves the protocol information corresponding to a protocol name. getprotobynumber The getprotobynumber function (winsock2.h) retrieves protocol information corresponding to a protocol n.getservbyname and getservbyport Functions in the API The getservbyname and getservbyport functions use the WSALookupServiceBegin function to query SVCID_INET_SERVICEBYNAME as the service class GUID. The lpszServiceInstanceName member in the WSAQUERYSET structure passed to the ... The getservbyname and getservbyport functions use the.WSAAsyncGetServByName function (winsock2.h) The WSAAsyncGetServByName function asynchronously retrieves service information that corresponds to a service name and port. Remarks The WSAAsyncGetServByName function is an asynchronous version of getservbyname and is used to retrieve service information corresponding to a service name. Requirements....e getpeername function (winsock.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock.h) retrieves the protocol information corresponding to a protocol name. getprotobynumber The getprotobynumber function (winsock.h) retrieves protocol information corresponding to a protocol n.getservbyname and getservbyport Functions in the SPI The WSALookupServiceBegin query uses SVCID_INET_SERVICEBYNAME as the service class GUID. The lpszServiceInstanceName parameter references a string that indicates the service name or service port, and (optionally) the service protocol. The Ws2_32.dll will specify LUP_RETURN_BLOB an... The."
504,FreeEnvironmentStringsW,"Microsoft Build · May 19 – 22, 2025FreeEnvironmentStringsW function (processenv.h) Frees a block of environment strings. Syntax Parameters penv A pointer to a block of environment strings. The pointer to the block must be obtained by calling the GetEnvironmentStringsW function. To get extended error information, call GetLastError. Note The processenv.h header defines.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (ANSI).APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
505,CreateWindowStationA,"Microsoft Build · May 19 – 22, 2025CreateWindowStationA function (winuser.h) Creates a window station object, associates it with the calling process, and assigns it to the current session. Syntax Parameters [in, optional] lpwinsta The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Creates a window.Window Stations and Desktops Overview of the Window Stations and Desktops technology. (Unicode) Cr... (Unicode) CreateWindowStationA Creates a window station object, associates it with the calling process, and assigns it to the current session. (ANSI) CreateWindowStationW Creates a window station object, associates it with the calling process, and.(ANSI) CreateWindowExW Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. (Unicode) CreateWindowStationA Creates a window station object, associates it with the calling process, and assigns it to the current session. (ANSI) CreateWindowStationW Creates a."
506,LoadMenuW,"Microsoft Build · May 19 – 22, 2025LoadMenuW function (winuser.h) Loads the specified menu resource from the executable (.exe) file associated with an application instance. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. ... (ANSI) LoadMenuIndirectW Loads the.(ANSI) CreateMDIWindowW Creates a multiple-document interface (MDI) child window. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. (ANSI) CreateWindowExW."
507,SetLocalTime,"Microsoft Build · May 19 – 22, 2025SetLocalTime function (sysinfoapi.h) Sets the current local time and date. Syntax Parameters [in] lpSystemTime A pointer to a SYSTEMTIME structure that contains the new local date and time. The SetLocalTime function enables the SE_SYSTEMTIME_NAME privilege before changing the local time and disables the privilege before returning. Therefore, when.GetLocalTime converts the system time to a local time based on the current time-zone settings and copies the result to a SYSTEMTIME structure. You can set the system time by using the SetLocalTime function. SetLocalTime assumes you have specified a local time and converts to UTC before setting the system time. When you call SetLocalTime, the.RtlLocalTimeToSystemTime Converts the specified local time to system time. SetDynamicTimeZoneInformation Sets the current time zone and dynamic daylight saving time settings. SetLocalTime Sets the current local time and date. SetTimeZoneInformation Sets the current time zone settings. SystemTimeToTzSpecificLocalTime Converts a UTC time to a.Is here way how can i change it with &quot;... Thanks for answare. include &lt;windows.h&gt; include &lt;stdio.h&gt; void main() { SYSTEMTIME st, lt; GetLocalTime(&amp;lt); lt.wHour--; SetLocalTime(&amp;lt); }| You must enable the SE_SYSTEMTIME_NAME privilege, as said in the doc. Hello Everybody. Thanks for answare. include &lt;windows.h&gt;.sysinfoapi.h header This header is used by multiple technologies. For more information, see: System Services Windows Sidebar sysinfoapi.h contains the following programming interfaces: Functions EnumSystemFirmwa... The name is stored in the registry and the name change takes effect the next time the user restarts the computer. (Unicode).GetLocalTime function (sysinfoapi.h) Retrieves the cu... Return value None Remarks To set the current local date and time, use the SetLocalTime function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform.I have the Local Security Policies: Change the system time Everyone, Local Service, Administrators, Users Change the time zone Everyone, Local Service, Administrators, Users Replace a process level token Everyone, Local Service, Network Service Yet when I run as a regular User and my application calls SetLocalTime, it fails with:.I found something here: https://stackoverflow.com/questions/26900950/how-to-change-system-date-and-time-with-vb-net-on-windows-7 That mentioned SetLocalTime function, but seems not in vb/c#, anyone knows if it can be used to do the task in the non-admin mode. There is a lengthy discussion of this issue at.Deprecated as obsolete in Visual Studio 2015 Obsolete function Alternative is_wctype iswctype _loaddll LoadLibrary, LoadLibraryEx, or LoadPackagedLibrary _unloaddll FreeLibrary _getdllprocaddr GetProcAddress _seterrormode SetErrorMode _beep Beep _sleep Sleep _getsystime GetLocalTime _setsystime SetLocalTime Removed from the CRT in Visual Studio.SYSTEMTIME structure (minwinbase.h) Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. ...sktop apps | UWP apps] Header minwinbase.h (include Windows.h) See also FILETIME FileTimeToSystemTime GetL GetSystemTime SetLocalTime SetSystemTime SystemTimeToFileTimeThe time is."
508,GlobalAddAtomW,"Microsoft Build · May 19 – 22, 2025GlobalAddAtomW function (winbase.h) Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Requirements Requirement Value Minimum sup... Adds a character.Win32-based applications should use the ReadFile function. _lwrite Writ... (GlobalAddAtomA) GlobalAddAtomExA Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. (GlobalAddAtomExA) GlobalAddAtomExW Adds a character string to the global atom table and returns a unique value (an atom).Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Ad... (GlobalAddAtomExA) GlobalAddAtomExW Adds a character string to the global atom table and returns a unique value (an atom)."
509,GetBkMode,"Microsoft Build · May 19 – 22, 2025GetBkMode function (wingdi.h) The GetBkMode function returns the current background mix mode for a specified device context. The background mix mode of a device context affects text, hatched brushes, and pen styles that are not solid lines. Syntax Parameters [in] hdc Handle to the device context whose background mode is to be returned. Return.GetBitmapDimensionEx The GetBitmapDimensionEx function retri... GetBkColor The GetBkColor function returns the current background color for the specified device context. GetBkMode The GetBkMode function returns the current background mix mode for a specified device context. GetBoundsRect The GetBoundsRect function obtains the current accumulated.GetBitmapDimensionEx The GetBitmapDimensionEx function retri... GetBkColor The GetBkColor function returns the current background color for the specified device context. GetBkMode The GetBkMode function returns the current background mix mode for a specified device context. GetBoundsRect The GetBoundsRect function obtains the current accumulated.Painting and Drawing Functions The following functions are used with painting and drawing. GetBkColor Returns the background color for a device context. GetBkMode Returns the background mix mode for a device context. GetBoundsRect Gets the accumulated bounding rectangle for a device context. SetBkMode Sets the background mix mode of a device.CDC::GetArcDirection Retur... CDC::GetAspectRatioFilter Retrieves the setting for the current aspect-ratio filter. CDC::GetBkColor Retrieves the current background color. CDC::GetBkMode Retrieves the background mode. CDC::GetBoundsRect Returns the current accumulated bounding rectangle for the specified device context. CDC::GetBrushOrg Retrieves.Graphic Modes Windows supports five graphic modes that allow an application to specify how colors are mixed, where output appears, how the output is scaled, and so on. Graphics mode Function Background GetBkMode Drawing GetROP2 Mapping GetMapMode Polygon-fill GetPolyFillMode Stretching GetStretchBltMode An application can change the default modes.An application can use the SetBkColor function to set the color that appears behind each character and the SetBkMode function to specify how the system should blend the selected background color with the current color or colors on the video display. An application can retrieve the current background color for a device context by calling the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also COLORREF CreatePen ExtCreatePen GetBKColor GetBkMode Painting and Drawing.... cRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also COLORREF GetBkMode Painting and Drawing Functions Painting and Drawing.SetBkMode function (wingdi.h) The SetBkMode function sets the background mix mode of the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library."
510,SetConsoleCP,"Microsoft Build · May 19 – 22, 2025SetConsoleCP function Sets the input code page used by the console associated with the calling process. A console uses its input code page to translate keyboard input into the corresponding character value. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.To set a console's input code page, use the SetConsoleCP function. To set and query a console's output code page, use the SetConsoleOutputCP and GetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via.Console Code Pages A code page is a mapping of 256 character codes to individual characters. An application can use the SetConsoleCP and GetConsoleCP functions to set and retrieve a console's input code pages and the SetConsoleOutputCP and GetConsoleOutputCP functions to set and retrieve its output code pages. UTF-16 form... UTF-8 formatted text.To ... To set a console's output code page, use the SetConsoleOutputCP function. To set and query a console's input code page, use the SetConsoleCP and GetConsoleCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via.Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. UTF-8 support in the console can be utilized via the A variant of Console APIs against con... Declaration of code page or UTF-8 support is conducted with SetConsoleOutputCP and SetConsoleCP.ScrollConsoleScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Console Application Issues The 8-bit console functions use the OEM code page. The console will accept UTF-16 encoding on the W variant of the APIs or UTF-8 encoding on the A variant of the APIs after using SetConsoleCP and SetConsoleOutputCP to 65001 (CP_UTF8 constant) for the UTF-8 code page. Bar... Review console application issues, such as.To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI.To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and ANSI.SetConsoleTitle function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. To change the console's code page, use the SetConsoleCP or SetConsoleOutputCP functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server."
511,GetTextAlign,"Microsoft Build · May 19 – 22, 2025GetTextAlign function (wingdi.h) The GetTextAlign function retrieves the text-alignment setting for the specified device context. Syntax Parameters [in] hdc A handle to the device context. Return value If the function succeeds, the return value is the status of the text-alignment flags. For more information about the return value, see the Remarks.Setting the Text Alignment You can query and set the text alignment for a device context by using the GetTextAlign and SetTextAlign functions. The text-alignment settings determine how text is positioned relative to a specified location. Text can be al... If you must use this flag, you can unset and reset it as necessary to avoid the problem. You.Win32 Text API Comparison For those developers that are migrating their Win32 application code, the following table lists the Win32 Text APIs and the approximate equivalent in DirectWrite. GDI Text ... GetTabbedTextExtent Computes the width and height of a character string, including tabs. IDWriteTextLayout::GetMetrics GetTextAlign Gets the.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. GetRasterizerCaps Tells whet... GetTabbedTextExtent Computes the width and height of a character string, including tabs. GetTextAlign Gets the text-alignment setting.GetOutlineTextMetricsA The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. (ANSI) GetOutlineTextMetricsW The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. GetTextAlign The GetTextAlign function retrieves the text-alignment setting for the specified device context. GetTextCharacterExtra The.GetTabbedTextExtentA The GetTabbedTextExtent function computes the width and height of a character string. (ANSI) GetTabbedTextExtentW The GetTabbedTextExtent function computes the width and height of a character string. (Unicode) GetTextAlign The GetTextAlign function retrieves the text-alignment setting for the specified device context..Paint.TextAlign Property Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Return the paint's Align value for drawing text. -or- Set the paint's text alignment. Attributes RegisterAttribute Remarks Property getter documentation:Java documentation for android.graphics.Paint.getTextAlign().Property setter documentation:Java.CMFCRibbonStatusBarPane Class The CMFCRibbonStatusBarPane class implements a ribbon element that you can add to a ribbon status bar. Public Methods Name Description CMFCRibbonStatusBarPane::GetAlmostLargeText Returns the string that defines the longest text string that can be displayed in the ... CMFCRibbonStatusBarPane::GetTextAlign Returns the.TextOutW function (wingdi.h) The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color. Syntax Parameters [in] hdc A handle t... Remarks The interpretation of the reference point depends on the current text-alignment mode. An application can retrieve this mode by.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::GetTabbedTextExtent Computes the width and height of a character string on the attribute device context. CDC::GetTextAlign Retrieves the text-alignment flags. CDC::GetTextCharacterExtra Retrieves the."
512,WSALookupServiceNextA,"Microsoft Build · May 19 – 22, 2025WSALookupServiceNextA function (winsock2.h) The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. The provider will pass back a WSAQUERYSET structure in the lpqsResults buffer. The client should continue to call this function until.(Unicode) WSALookupServiceEnd The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext. WSALookupServiceNextA The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service.(Unicode) WSALookupServiceEnd The WSALookupServiceEnd function is called to free the handle after previous calls... WSALookupServiceNextA The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information. (ANSI) WSALookupServiceNextW The.Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFileAttributesA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299.."
513,GetWindowContextHelpId,"Microsoft Build · May 19 – 22, 2025...with the specified Syntax Parameters unnamedParam1 Type: HWND A handle to the window for which the Help context identifier is to be retrieved. Return value Type: DWORD Returns the Help context identifier if the window has one, or zero otherwise. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum.CWnd::GetO... CWnd::GetTopWindow Returns the first child window that belongs to the CWnd. CWnd::GetWindow Returns the window with the specified relationship to this window. CWnd::GetWindowContextHelpId Retrieves the help context identifier. CWnd::GetWindowDC Retrieves the display context for the whole window, including the caption bar, menus, and.The paren... You use the SetWindowContextHelpId function to assign a context identifier to a window or control and the SetMenuContextHelpId function to assign a context identifier to a menu. You can retrieve the context identifier for a window or menu by using the GetWindowContextHelpId or GetMenuContextHelpId function. In an application, you can.GetUserProfileDirectory Retrieves the path to the root director... GetWindowContextHelpId Retrieves the Help context identifier, if any, associated with the specified window. GetWindowSubclass Retrieves the reference data for the specified window subclass callback. SetMenuContextHelpId Associates a Help context identifier with a menu..SetWindowContextHelpId function (winuser.h) Associates a Help context identifier with the specified window. ... identifierRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h Library User32.lib DLL User32.dll.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindow::GetWindow Retrieves the specified window. CWindow::GetWindowContextHelpId Retrieves the window's help context identifier. CWindow::GetWindowDC Retrieves a device context for the entire..ShellFolderViewOptions Specifies the view options returned by the ViewOptions property. ShellSpecialFolderConstants Specifies unique, system-independent values that identify special folders. ShellWindowFindWindowOptions Specifies options for finding window in the Shell windows collection. ShellWindowTypeConstants Specifies types of Shell windows..AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx Calculates the required size of the window rectangle, based on the desired size of the."
514,SystemTimeToFileTime,"Microsoft Build · May 19 – 22, 2025SystemTimeToFileTime function (timezoneapi.h) Converts a system time to file time format. System time is based on Coordinated Universal Time (UTC). Syntax Parameters [in] lpSystemTime A pointer to a SYSTEMTIME structure that contains the system time to be converted from UTC to file time format. Requirements Requirement Value Minimum supported.FileTimeToSystemTime function (timezoneapi.h) Converts a file time to system time format. System time is based on Coordinated Universal Time (UTC). Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the file time to be converted to system (UTC) date and time format. Requirements Requirement Value Minimum ... Converts a.To create time value, use the following steps. Allocate a SYSTEMTIME structure and initialize the fields with the desired time value. Call SystemTimeToFileTime to convert the SYSTEMTIME structure time value to a FILETIME structure time. Cast the FILETIME structure as a LONGLONG variable, keeping in mind the structure member padding conventions of.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal... To make a file time easy to display to a user, use the.GetSystemTimeAsFileTime function (sysinfoapi.h) Retrieves the current system date and time. Syntax Parameters [out] lpSystemTimeAsFileTime A pointer to a FILETIME structure to receive the current system date and time in UTC format. ...pps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows.RtlTimeToSecondsSince1970 function (winternl.h) [RtlTimeToSecondsSince1970 is available for use in Windows 2000 and Windows XP. Converts the specified 64-bit system time to the number of seconds since the beginning of January 1, 1970. To perform this task using public functions, use the following steps: Call SystemTimeToFileTime to copy the.SetSystemTi... SystemTimeToFileTime Converts a system time to a file time. SystemTimeToTzSpecificLocalTime Converts a UTC time to a specified time zone's corresponding local time. SetFileTime Sets the date and time that the specified file or directory was created, last accessed, or last modified. SystemTimeToFileTime Converts a system time to a.timezoneapi.h header This header is used by System Services. For more information, see: System Services timezoneapi.h contains the following programming interfaces: Functions EnumDynamicTimeZoneInformation Enumerates DYNAMIC_TIME_ZONE_INFORMATION entries stored in the registry. FileTimeToSystemTime Converts a file time to system time format. These....UNCTION_RETURN_IGNORED Example The following code tries to get current system time, advance the month field by one month, and get the file time that corresponds to the updated system ti SystemTimeToFileTimeHowever, SystemTimeToFileTime might fail, as the updated system time may become invalid: To fix the problem, always check the return value.DosDateTimeToFileTime function (winbase.h) Converts MS-DOS date and time values to a file time. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL."
515,SetFilePointer,"Microsoft Build · May 19 – 22, 2025The SetFilePointer function in Windows is used to set the file pointer to a specified offset within a file. When an application opens a file using CreateFile, the file pointer is initially set to the beginning of the file. As you read from or write to the file, the file pointer advances accordingly.To use SetFilePointer, you need to call it with the following parameters:For example, to move the file pointer to a specific position, you might call it like this:If you want to query the current position of the file pointer, you can specify FILE_CURRENT and a distance of zero.References:Positioning a File Pointer When an application calls CreateFile to open a file for the first time, Windows places the file pointer at the beginning of the file. An application can position the file pointer to a specified offset by calling SetFilePointer. The SetFilePointer function can also be used to query the current file pointer position by.This file pointer is a 64-bit offset value that specifies the next byte to be read or the location to receive the next byte written. Each time a file is opened, the system places the file pointer at the beginning of the file, which is offset zero. ... 5 bytes is re the file pointer will be located at offset 5 immediately after the read.SetFilePointer function (fileapi.h) Moves the file pointer of the specified file. This function stores the file pointer in two LONG values. To work with file pointers that are larger than a single LONG value, it is easier to use the SetFilePointerEx function. Syntax Parameters [in] hFile A handle to the file. For more information, see File.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. For more information, see: Data Access and Storage S... SetFilePointer Moves the file pointer of the specified file. (SetFilePointer) SetFilePointerEx Moves the file pointer.SetEndOfFile Sets the physical file size for the specified file to the cu... SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the current process. SetFileApisToOEM Causes the file I/O functions for the process to use the OEM character set code page. SetFileIoOverlappedRange Associates a virtual address._llseek function (winbase.h) [This function is provided for compatibility with 16-bit versions of Windows. New applications should use the SetFilePointer func... Repositions the file pointer for the specified file. This handle is created by _lcreat. lOffset The number of bytes that the file pointer is to be moved. iOrigin The starting point and.SetFileAt... SetFileAttributesW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileInformationByHandle Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFilePointerEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240..Change description In previous .NET versions, FileStream synchronizes the file offset with the Windows operating system (OS) when it reads or writes to a file. It synchronizes the offset by calling SetFilePointer, which is an expensive system call. Version introduced .NET 6 Reason for change This change was introduced to improve the performance of.Appending One File to Another File The code example in this topic shows you how to open and close files, read and write to files, and lock and unlock files. However, before writing to the second file, the application uses SetFilePointer to set the pointer of the second file to the end of that file, and uses LockFile to lock the area to be written..CAtlFile Class This class provides a thin wrapper around the Windows file-handling API. Return Value Returns S_OK on success, or an error HRESULT on failure. Remarks Calls SetFilePointer to get the current file pointer position. CAtlFile::GetSize Call this method to get the size in bytes of the file. CAtlFile::Seek Call this method to move the."
516,WaitForMultipleObjectsEx,"Microsoft Build · May 19 – 22, 2025WaitForMultipleObjectsEx function (synchapi.h) Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. Syntax Parameters [in] nCount The number of object handles to wait for in the array pointed to by.WaitForMultipleObjects function (synchapi.h) Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. To enter an alertable wait state, use the WaitForMultipleObjectsEx function. Syntax Parameters [in] nCount The number of object handles in the array pointed to by lpHandles. The maximum number of.Multiple-object Wait Functions The WaitForMultipleObjects, WaitForMultipleObjectsEx, MsgWaitForMultipleObjects, and MsgWaitForMultipleObjectsEx functions enable the calling thread to specify an array containing one or more synchronization object handles. Alertable Wait Functions The MsgWaitForMultipleObjectsEx, Sign... Feedback Was this page.WaitForSingleObjectEx function (synchapi.h) Waits until the specified object is in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. To wait for multiple objects, use the WaitForMultipleObjectsEx. Syntax Parameters [in] hHandle A handle to the object. For a.LPOVERLAPPED_COMPLETION_ROUTINE callback function (minwinbase.h) An application-defined callback function used with the ReadFileEx and WriteFileEx functions. It is called when the asynchronous input and output (I/O) operation is completed or canceled and the calling thread is in an alertable state (by using the SleepEx,.Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only when they are in an alertable state. A thread can only do this by calling one of the following functions with the appropriate flags: SleepEx WaitForSingleObjectEx WaitForMultipleObjectsEx SignalObjectAndWait MsgWaitForMultipleObjectsEx.Wait functions Wait function Description MsgWaitForMultipleObjects Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. ...leObjects Wai one or all of the specified objects are in the signaled state or the time-out interval elapsesWaitForMultipleObjectsEx Waits until one or all of the.QueueUserAPC function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. After the thread is in an alertable state, the t... A thread enters an alertable state by using SleepEx function, SignalObjectAndWait function, WaitForSingleObjectEx function, WaitForMultipleObjectsEx.A thread goes into an alertable wait state by calling either SleepEx, MsgWaitForMultipleObjectsEx, WaitForSingleObjectEx, or WaitForMultipleObjectsEx, with the function's bAlertable parameter set to TRUE. Be careful when using SleepEx in the following scenarios: Code that directly or indirectly creates windows (for example, DDE and COM.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Asynchronous Procedure Calls An asynchronous proce... A thread enters an alertable state when it calls the SleepEx, SignalObjectAndWait, MsgWaitForMultipleObjectsEx, WaitForMultipleObjectsEx, or WaitForSingleObjectEx function. An."
517,GetProfileIntA,"Microsoft Build · May 19 – 22, 2025GetProfileIntA function (winbase.h) Retrieves an integer from a key in the specified section of the Win.ini file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. This value is in the form of a string; the GetProfileInt function converts the string into an integer and returns the integer. [in] nDefault.GetOsProductContentId Retrie... GetPrivateProfileInt The GetPrivateProfileInt function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA).(. GetPrivateProfileInt The GetPrivateProfileInt function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA) GetPrivateProfileIntW The."
518,GetProcessHeaps,"Microsoft Build · May 19 – 22, 2025Getting Process Heaps This example illustrates the use of the GetProcessHeaps function to retrieve handles to the default process heap and any private heaps that are active for the current process. The example calls GetProcessHeaps twice, first to calculate the size of the buffer needed and again to retrieve handles into the buffer. The buffer is.GetProcessHeaps function (heapapi.h) Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process. Remarks The GetProcessHeaps function obtains a handle to the default heap of the calling process, plus handles to any additional private heaps created by calling the HeapCreate function on any thread in.heapapi.h header This header is used by System Services. For more information, see: System Services heapapi.h contains the following programming interfaces: Functions GetProcessHeap Retrieves a handle to the default heap of the calling process. GetProcessHeaps Returns the number of active heaps and retrieves handles to all of the active heaps for.GetProcessHeap function (heapapi.h) Retrieves a handle to the default heap of the calling process. Syntax Return value If the function succeeds, the return value is a handle to the calling process's heap. Remarks The GetProcessHeap function obtains a handle to the default heap for the calling process. Windows Server 2003 and Windows XP: To enable.Vertdll APIs available in VBS enclaves Applies to: ✅ Windows 11 Build 26100.2314 or later ✅ Windows Server 2025 or later Enclaves are used to create trusted execution environments. These Vertdll APIs are available to deve... GetProcessHeap heapapi.h Retrieves a handle to the default heap of the calling process. GetProcessHeaps heapapi.h Returns.MapUser... MapUserPhysicalPagesScatter Maps previously allocated physical memory pages at the specified address within an AWE region. Heap functions These are the heap functions. Function Description GetProcessHeap Obtains a handle to the heap of the calling process. GetProcessHeaps Obtains handles to all of the heaps that are valid for the.To obtain a handle to the default heap for a process, use the GetProcessHeap function. To obtain handles to the default heap and private heaps that are active for the calling process, use the GetProcessHeaps function. Examples Enumerating a Heap Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.Low-fragmentation Heap [The information in this topic applies to Windows Server 2003 and Windows XP. Starting with Windows Vista, the system uses the low-fragmentation heap (LFH) as needed to service memory allocation requests. To enable the LFH for a heap, use the GetProcessHeap function to obtain a handle to the default heap of the calling.Examples The following example uses GetProcessHeap to obtain a handle to the default process heap and HeapQueryInformation to retrieve information about the heap. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header.HeapFree function (heapapi.h) Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function. This handle is returned by either the HeapCreate or GetProcessHeap function. [in] dwFlags The heap free options. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server."
519,WSALookupServiceBeginA,"Microsoft Build · May 19 – 22, 2025WSALookupServiceBeginA function (winsock2.h) The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. WSALookupServiceBegin only returns a handle, which should be used by subsequent calls to WSALookupServiceNext to get the actual results. Windows Phone 8: The.(ANSI) WSAInstallServiceClassW The WSAInstallServiceClass function registers a service class schema within a namespace. WSALookupServiceBeginA The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. (ANSI) WSALookupServiceBeginW The WSALookupServiceBegin function.(ANSI) WSAInstallServiceClassW The WSAInstallServiceClass function registers a service class schema within a namespace. WSALookupServiceBeginA The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure. (ANSI) WSALookupServiceBeginW The WSALookupServiceBegin function.Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFileAttributesA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299.."
520,GetNamedPipeHandleStateW,"Microsoft Build · May 19 – 22, 2025GetNamedPipeHandleStateW function (namedpipeapi.h) Retrieves information about a specified named pipe. Windows 10, version 1709:  Pipes are only supported within an app-container; ie, from one UWP process to another UWP process that's part of the same app. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.namedpipeapi.h header This header is used by multiple technologies. For more information, see: Security and Identity System Services ... GetNamedPipeClientComputerNameW The GetNamedPipeClientComputerNameW (Unicode) function (winbase.h) retrieves the client computer name for the specified named pipe. GetNamedPipeHandleStateW The....To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fiber handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h(CallNamedPipeA).For convenience, in the Microsoft Windows Software Development Kit (SDK) is an umbrella library named WindowsApp.lib. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into."
521,GetKeyboardType,"Microsoft Build · May 19 – 22, 2025GetKeyboardType function (winuser.h) Retrieves information about the current keyboard. Syntax Parameters [in] nTypeFlag Type: int The type of keyboard information to be retrieved. Value Meaning 0 Keyboard type 1 Keyboard subtype 2 The number of function keys on the keyboard Return value Type: int If the function succeeds, the return value.KeyCharacterMap.KeyboardType Property Definition Namespace: Android.Views Assembly:Mono.Android.dll Gets the keyboard type. Property Value KeyboardType The k... Refer to the documentation associated with the keyboard type constants for details.Java documentation for android.view.KeyCharacterMap.getKeyboardType().Portions of this page are.InputDevice.KeyboardType Property Definition Namespace: Android.Views Assembly:Mono.Android.dll Gets the keyboard type. Attributes RegisterAttribute Remarks Gets the keyboard type.Java documentation for android.view.InputDevice.getKeyboardType().Portions of this page are modifications based on work created and shared by the Android Open Source.The GetCurrentHwProfile function retrieves information about ... The hardware profile includes information such as the docking state, globally unique identifier (GUID), and display name for the profile. The GetKeyboardType function retrieves such information as the type of keyboard and the number of function keys on the current keyboard. The.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.Field Value Value = 257 InputSourceType Implements ContentsFileDescriptor Attributes RegisterAttribu... Use #getKeyboardType() to determine whether the keyboard has alphabetic keys and can be used to enter text.Java documentation for android.view.InputDevice.SOURCE_KEYBOARD.Portions of this page are modifications based on work created and shared.Toggled behavior is useful for small profile keyboards designed for thumb typing. This function currently returns #MODIFIER_BEHAVIOR_CHORDED when the #getKeyboardType() keyboard type is #FULL or #SPECIAL_FUNCTION and #MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED otherwise. In the future, the function may also take into account global keyboard.(ANSI) GetKeyboardLayoutNameW Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread. (Unicode) GetKeyboardState Copies the status of the 256 virtual keys to the specified buffer. GetKeyboardType Retrieves information about the current keyboard. GetKeyNameTextA Retrieves a string that....or Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops."
522,GetEnvironmentStringsW,"Microsoft Build · May 19 – 22, 2025GetEnvironmentStringsW function (processenv.h) Retrieves the environment variables for the current process. Syntax Return value If the function succeeds, the return value is a pointer to the environment block of the current process. Remarks The GetEnvironmentStrings function returns a pointer to a block of memory that contains the environment.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user..FreeEnvironmentStringsW function (processenv.h) Frees a block of environment strings. The pointer to the block must be obtained by calling the GetEnvironmentStringsW function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
523,IsProcessorFeaturePresent,"Microsoft Build · May 19 – 22, 2025IsProcessorFeaturePresent function (processthreadsapi.h) Determines whether the specified processor feature is supported by the current computer. Syntax Parameters [in] ProcessorFeature The processor feature to be tested. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] ... Determines.GetThreadInformation Retrieves information about the specified thread. InitializeProcThreadAttributeList Initializes the specified list of attributes for process and thread creation. IsProcessCritical Determines whether the specified process is considered critical. IsProcessorFeaturePresent Determines whether the specified processor feature is.System Information Functions The following functions are used to retrieve or set system information. Function Description CeipIsOptedIn Checks whether the user has opted in for SQM data collection as part of the Customer Experience Improvement Program (CEIP). IsWow64GuestMachineSupported IsProcessorFeaturePresent Determines whether a processor.XMVerifyCPUSupport function (directxmath.h) Indicates if the DirectXMath Library supports the current platform. Remarks This is a run-time check of processor support and should be called at startup of the program before any DirectXMath functions or types are used. On Windows, this function is implemented using IsProcessorFeaturePresent. Therefore,.These Vertdll APIs are available to developers in VBS enclaves. Functions exported by Vertdll.dll The following APIs exported by Vertdll.dll are available to be called in VBS enclaves. API Header Description IsProcessorFeaturePresent processthreadsapi.h Determines whether the specified processor feature is supported by the current computer..processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProc... IsProcessCritical Determines whether the specified process is considered critical..SYSTEM_INFO structure (sysinfoapi.h) Contains information about the current computer system. This includes the architecture and type of the processor, the number of processors in the system, the page size, and other such information. It should be used only for display purposes. To determine the feature set of a processor, use the.MINIDUMP_SYSTEM_INFO structure (minidumpapiset.h) Contains processor and operating system information. This str... ProcessorFeatures For a list of possible values, see the IsProcessorFeaturePresent function. Requirements Requirement Value Header minidumpapiset.h (include DbgHelp.h) Redistributable DbgHelp.dll 5.1 or later See also.The GetSystemInfo function retrieves processor and memory information, such as the page size, original equi... The IsProcessorFeaturePresent function retrieves information about the floating-point operations and instruction sets supported by the processor. The GetCurrentHwProfile function retrieves information about the hardware profile. The.AWE does not require PAE or 4GT but is often used together with PAE to allocate more than 4 GB of physical memory from a single 32-b... Related topics IsProcessorFeaturePresent PAE X86 Technical Reference Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. Physical Address Extension (PAE) is a processor."
524,GetGlyphOutlineW,"Microsoft Build · May 19 – 22, 2025GetGlyphOutlineW function (wingdi.h) The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] uChar The character for which data is to be returned. [in] ... Note The wingdi.h header defines.(Unicode) GetGlyphOutlineA The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. (ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device.(ANSI) GetGlyphIndicesW The GetGlyphIndices function translates a string into an array of glyph indices. (Unicode) GetGlyphOutlineA The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context. (ANSI) GetGlyphOutlineW The GetGlyphOutline function retrieves the."
525,BeginUpdateResourceW,"Microsoft Build · May 19 – 22, 2025The BeginUpdateResourceW function retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. This function is specifically designed for use with Unicode applications.To use BeginUpdateResourceW, you typically follow these steps:This function is essential for managing resources in applications, particularly when you need to update or localize resources without recompiling the entire application.References:BeginUpdateResourceW function (winbase.h) Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. Syntax Parameters [in] pFileName Type: LPCTSTR The binary file in which to update resources. An application must be able to obtain write-access to this file; the file referenced by.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the UpdateResource function to add,.(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the.BeginUpdateResourceA function (winbase.h) Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. Syntax Parameters [in] pFileName Type: LPCTSTR The binary file in which to update resources. An application must be able to obtain write-access to this file; the file referenced by."
526,EndDialog,"Microsoft Build · May 19 – 22, 2025EndDialog Class Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Command to end the current dialog, returning the resultProperty as the result of the dialog. Inheritance Object Dialog EndDialog Constructors.EndDialog function (winuser.h) Destroys a modal dialog box, causing the system to end any processing for the dialog box. Remarks Dialog boxes created by the DialogBox, DialogBoxParam, DialogBoxIndirect, and DialogBoxIndirectParam functions must be destroyed using the EndDialog function. A dialog box procedure can call EndDialog at any time, even.EndDialog(Object, String, Int32) Constructor Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Initializes a new instance of the EndDialog class. Parameters value Object Optional, value expression for the result to be.EndDialog.Value Property Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Gets or sets a value expression for the result to be returned to the caller. Property Value ValueExpression A value expression for the result to be.EndDialog class Package: botbuilder-dialogs-adaptive Command to end the current Dialog, returning the resultProperty as the result of the dialog. Extends Dialog Constructors EndDialog(any) Creates a new EndDialog instance. Inherited Properties EndOfTurn Gets a default end-of-turn result. id telemetryClient Methods beginDialog(DialogContext, O).EndDialog.Kind Field Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Class identifier. Field Value String Applies to. Class identifier. . /dotnet/api/microsoft.bot.builder.dialogs.adaptive.actions.enddialog.kind.EndDialog.OnComputeId Method Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Builds the compute Id for the dialog. Returns String A string representing the compute Id. Applies to. Builds the compute Id for the dialog. ..EndDialog.Disabled Property Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Gets or sets an optional expression which if is true will disable this action. Property Value BoolExpression A boolean expression. ... Applies.EndDialog.BeginDialogAsync(DialogContext, Object, CancellationToken) Method Definition Namespace: Microsoft.Bot.Builder.Dialogs.Adaptive.Actions Assembly:Microsoft.Bot.Builder.Dialogs.Adaptive.dll Package:Microsoft.Bot.Builder.Dialogs.Adaptive v4.22.7 Called when the dialog is started and pushed onto the dialog stack. ... dc DialogContext The.IDialogResult interface Package: botbuilder-calling Results returned by a child dialog to its parent via a call to session.endDialog(). Properties childId ID of the child dialog thats ending. error If an error occured the child dialog can return the error to the parent. response The users response. resumed The reason why the current dialog is."
527,IsDebuggerPresent,"Microsoft Build · May 19 – 22, 2025The IsDebuggerPresent function is a Windows API function that determines whether the calling process is being debugged by a user-mode debugger. It has the following syntax:When called, it returns a nonzero value if the current process is running in the context of a debugger, and zero if it is not. This function can be particularly useful in debugging applications, as it allows developers to modify the behavior of their applications based on whether they are being debugged. For example, an application might provide additional debugging information using the OutputDebugString function if it detects that it is being debugged.In summary, IsDebuggerPresent can help developers create more robust applications by allowing them to tailor their behavior during debugging sessions.References:IsDebuggerPresent function (debugapi.h) Determines whether the calling process is being debugged by a user-mode debugger. Syntax Return value If the current process is running in the context of a debugger, the return value is nonzero. Remarks This function allows an application to determine whether or not it is being debugged, so that it can.Debugging Functions The following functions are used with debugging. Function Description CheckRemoteDebuggerPresent Determines whether the specified proc... GetThreadSelectorEntry Retrieves a descriptor table entry for the specified selector and thread. IsDebuggerPresent Determines whether the calling process is being debugged by a user-mode.debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. Continu... This allows the calling thread to signal the debugger to handle the exception..CheckRemoteDebuggerPresent function (debugapi.h) Determines whether the speci... Use the IsDebuggerPresent function to detect whether the calling process is running under the debugger. Requirements Requirement Value Minimum supported client Windows Vista, Windows XP with SP1 [desktop apps only] Minimum supported server Windows Server 2003 [desktop.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. APIs from api-ms-win-core-dat... APIs from.Communicating with the Debugger The OutputDebugString function sends a string from the process being debugged to the debugger by generating an OUTPUT_DEBUG_STRING_EVENT debugging event. A process can detect whether it is being debugged by calling the IsDebuggerPresent function. A breakpoint is a location in a program where execution is stopped to.ZwQueryInformationProcess function [ZwQueryInformationProcess may be altered or unavailable in future versions of Windows. It is best to use the CheckRemoteDebuggerPresent or IsDebuggerPresent function. ProcessWow64Information26 Determines whether the process is running in the WOW64 environment (WOW64 is the x86 emulator that allows Win32-based.NtQueryInformationProcess function (winternl.h) [NtQueryInformationProcess may be altered or unavailable in future versions of Windows. Value Meaning ProcessBasicInformation 0 Retrieves a pointer to a PEB structure that can be used to determine whether t... Use the CheckRemoteDebuggerPresent or IsDebuggerPresent function. ProcessWow64Information.Windows Server 2003 Discover Improved System Info, New Kernel, Debugging, Security, and UI APIs Matt Pietrek Code download available at:WindowsServer2003.exe(1,024 KB) This article assumes you're familiar with Windows, ... It's similar to the IsDebuggerPresent API in that it tells you if a process is running under the control of a debugger.Obtaining Additional Process Information There are a variety of functions for obtaining information about processes. To obtain the count of handles to graphical user interface (GUI) objects in use, use the GetGuiResources function. To determine whether a process is being debugged, use the IsDebuggerPresent function. To retrieve accounting."
528,CreatePolygonRgn,"Microsoft Build · May 19 – 22, 2025CreatePolyPolygonRgn function (wingdi.h) The CreatePolyPolygonRgn function creates a region consisting of a series of polygons. The polygons can overlap. Syntax Parameters [in] pptl A pointer to an array of POINT structures that define the vertices of the polygons in logical units. Each polygon is presumed closed and each vertex is specified only.CreatePolygonRgn function (wingdi.h) The CreatePolygonRgn function creates a polygonal region. Syntax Parameters [in] pptl A pointer to an array of POINT structures that define the vertices of the polygon in logical units. The polygon is presumed closed. Each vertex can be specified only once. [in] cPoint The number of points in the array. [in].Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreateEllipticRgnIndirect Creates an elliptical region. CreatePolygonRgn Creates a polygonal region. CreatePolyPolygonRgn Creates a region consisting of a series of polygons..CRgn::CreateFromData Creates a region from the given regio... CRgn::CreateFromPath Creates a region from the path that is selected into the given device context. CRgn::CreatePolygonRgn Initializes a CRgn object with a polygonal region. The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first..For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and... CreatePolygonRgn The.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. CreatePolygonRgn The.Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region.Changes in the Programming Model The following sections describe several ways that programming with Windows GDI+ is different from programming with Windows Graphics Device Interface (GDI). Constructing Regions GDI provides several functions for creating regions: CreateRectRgn, CreateEllpticRgn, CreateRoundRectRgn, CreatePolygonRgn, and.CreateRectRgnIndirect function (wingdi.h) The CreateRectRgnIndirect function creates a rectangular region. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.ExtCreateRegion function (wingdi.h) The ExtCreateRegion function creates a region... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See."
529,getprotobynumber,"Microsoft Build · May 19 – 22, 2025getprotobynumber function (winsock2.h) The getprotobynumber function retrieves protocol information corresponding to a protocol number. Sy... Return value If no error occurs, getprotobynumber returns a pointer to the protoent structure. Windows Phone 8: This function is supported for Windows Phone Store apps on Windows Phone 8 and later. The.getprotobynumber function (winsock.h) The getprotobynumber function retrieves protocol information corresponding to a protocol number. Syntax Parameters proto TBD Return value If no error occurs, getprotobynumber returns a pointer to the protoent structure. Remarks This getprotobynumber function returns a pointer to the protoent structure as....winsock.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock2.h) retrieves the protocol information corresponding to a protocol name. getprotobyna getprotobyname function (winsock.h) retrieves the protocol information corresponding to a protocol name. getprotobynumber The.GetHostNameW The GetHostNameW function retrieves the standard host name for the local computer as a Unicode string. getpeername The getpeername function (winsock2.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock2.h) retrieves the protocol information corresponding to a.getprotobyname and getprotobynumber Functions in the API The getprotobyname and getprotobynumber functions are implemented within the Ws2_32.dll by consulting a local protocols database. Related topics Compatible Name Resolution for TCP/IP in the Windows Sockets 1.1 API Protocol-Independent Name Resolution Registration and Name Resolution. The.WSAAsyncGetProtoByNumber function (winsock2.h) The WSAAsyncGetProtoByNumber function asynchronously retrieves protocol information that corresponds to a protocol number. Remarks The WSAAsyncGetProtoByNumber function is an asynchronous version of getprotobynumber, and is used to retrieve the protocol name and number corresponding to a protocol.WSAAsyncGetProtoByNumber function (winsock.h) The WSAAsyncGetProtoByNumber function asynchronously retrieves protocol information that corresponds to a protocol number. Remarks The WSAAsyncGetProtoByNumber function is an asynchronous version of getprotobynumber, and is used to retrieve the protocol name and number corresponding to a protocol.GetNameInfoW Provides name resolution from an IPv4 or IPv6 address to a Unicode host name and from a port number to the Unicode service name. getpeername Retrieves the address of the peer to which a socket is connected. getprotobyname Retrieves the protocol information corresponding to a protocol name. getprotobynumber Retrieves protocol....stbyname function (winsock.h) retrieves host information corresponding to a host name from a host database. gethostname The gethostname function (winsock.h) retrieves the standard host name for the local computer. getpeername The getpeername function (winsock.h) retrieves the address of the peer to which a socket is connected. getprotobyname.WSAAsyncGetHostByAddr WSAAsyncGetHostByName WSAAsyncGetProtoByName WSAAsyncGetProtoByNumber WSAAsyncGetServByName ... The following list describes the topics in this section: Basic Approach for GetXbyY in the API getprotobyname and getprotobynumber Functions in the API getservbyname and getservbyport Functions in the API gethostbyname Function in."
530,GetACP,"Microsoft Build · May 19 – 22, 2025GetACP function (winnls.h) Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use GetACP to translate text to or from Unicode. For compatibility with this edition, your application should avoid calls that depend on GetACP either.UTF-8 Support in OLE DB Driver for SQL Server Applies to: SQL Server Azure SQL Database Azure SQL Managed Instance Azure Synapse Analytics Analytics Platfo... Note Microsoft OLE DB Driver for SQL Server uses the GetACP function to determine the encoding of the DBTYPE_STR input buffer. Scenarios in which GetACP returns a UTF-8 encoding (enabled.Several Unicode and character set functions allow your applications to handle code pages. An application can use the GetCPInfo and GetCPInfoEx functions to obtain information about a code page. This information includes the default char... Your applications can also call the GetACP function. This function retrieves the identifier of the current.... page idenRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetACP National Language Support National Language Support.(ISpellChecker.get_LocalizedName) get_OptionIds Gets all of the declared option identifiers recognized by the spell checker. get_OptionIds Gets all of the declared opt... GetACP Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use.When the property type is VT_LPSTR and the property is read from an ANSI property set, that is, the code page for the property set is set to something other than Unicode, the value of the property uses ... When a VT_LPSTR property is read from a Unicode property set, the value of the property uses the system's current default ANSI code page, that.FoldStringA Maps one Unicode string to another, performing the specified transformation. (FoldStringA) GetACP Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use GetACP to translate text to or from Unicode. GetCalendarInfoA.EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system. Geo_EnumNameProc An application-defined callback function that... GetACP Retrieves the current Windows.IsValidCodePage function (winn... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetACP GetCPInfo GetOEMCP.GetCPInfo function (winnls.h) Retrieves information about a... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also."
531,CoMarshalInterface,"Microsoft Build · May 19 – 22, 2025CoMarshalInterface function (combaseapi.h) Writes into a stream the data required to initialize a proxy object in some client process. Syntax Parameters [in] pStm A pointer... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP....od (objidlbase.h) Marshals an interface pRemarks This method is called indirectly, in a call to CoMarshalInterface, by whatever code in the server process is responsible for marshaling a pointer to an interface on an object. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum.CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream the data required to initialize a proxy object in some client process. CoMarshalInterThreadInterfaceInStream Marshals an interface pointer... CoUnmarshalInterface Initializes.Marshaling Your Data: Efficient Data Transfer Techniques Using COM and Windows 2000 Richard Grimes This article assumes youï¿½re familiar with COM, IDL, C++, and Visual Basic Level of Difficulty    1   2   3 Code for this article: Grimes0900.exe (108KB) SUMMARY The way you choose to transfer data is vitally important in a distributed application..Remarks This method is called indirectly, in a call to CoMarshalInterface, by whatever code in the server process is responsible for marshaling a pointer to an interface on an object. ...rface f which contains a call to this methodRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum.CoInitializeSecurity Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoMarshalInterface Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoMarshalInterThreadInterfaceInStream Introduced into.COM provides the following two functions for this purpose: CoMarshalInterThreadInterfaceInStream marshals an interface into a stream object that is returned to the caller. If one apartment (Apartment 1) in a process has an interface pointer and another apartment (Apartment 2) requires its use, Apartment 1 must call.CoMarshalInterThreadInterfaceInStream function (combaseapi.h) Marshals an interface pointer from one thread to another thread in the same process. Remarks The CoMarshalInterThreadInterfaceInStream function enables an object to easily and reliably marshal an interface pointer to another thread in the same process. The.combaseapi.h header This header is used by multiple technologies. CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream the data required to initialize a proxy object in some client process. ...iCoUnmarshalInterface Initializes....alInterThreadInterfaceIn and CoGetInterfaceAndReleaseStreamCoMarshalInterface and CoUnmarshalInterface COM clients that hold interface pointers can share them with other clients, provided they're willing to marshal them. COM offers optimizations for threads that want to marshal interface pointers to other threads in the same process (see Lesson."
532,GetNumberOfConsoleInputEvents,"Microsoft Build · May 19 – 22, 2025GetNumberOfConsoleInputEvents function Retrieves the number of unread input records in the console's input buffer. Remarks The GetNumberOfConsoleInputEvents function reports the total number of unread input records in the input buffer, including keyboard, mouse, and window-resizing input records. Requirements Minimum supported client Windows 2000.Console Functions The following functions are used to access a console. GetLargestConsoleWindowSize Retrieves the size of the largest possible console window. GetNumberOfConsoleInputEvents Retrieves the number of unread input records in the console's input buffer. GetNumberOfConsoleMouseButtons Retrieves the number of buttons on the mouse used by.Low-Level Console Input Functions Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. There are five low-level functions for accessing a console's input buffer: ReadConsoleInput PeekConsoleInput GetNumberOfConsoleInputEvents WriteConsoleInput FlushConsoleInputBuffer The.To determine the number of unread input records in a console's input buffer, use the GetNumberOfConsoleInputEvents function. ...inimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL.FlushConsoleInputBuffer function Important This document describes console platform functionality that is no longer a p... Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h) Library Kernel32.lib.Requirements Minimum supported client Windows 7 [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header none, see remarks Library none, see remarks DLL Kernel32.dll Unicode and ANSI names ReadConsoleInputExW (Unicode) and ReadConsoleInputExA (ANSI) See also Console Functions FlushConsoleInputBuffer.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
533,MapVirtualKeyA,"Microsoft Build · May 19 – 22, 2025MapVirtualKeyA function (winuser.h) Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. Syntax Parameters [in] uCode Type: UINT The virtual key code or scan code for a key. Note The winuser.h header defines MapVirtualKey as an alias that automatically selects the ANSI or.(ANSI) LoadKeyboardLayoutW Loads a new input locale ident... (Unicode) MapVirtualKeyA Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. (ANSI) MapVirtualKeyExA Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a.(Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetAutoRotationState Retrieves an AR_STATE value containing the state of screen auto-rotation for.Extension APIs for Windows 10 devices This topic lists the Win32 and COM APIs that are part of the Universal Windows Platform (UWP) and that are implemented by some Windows 10 devices, so your calls to these APIs must be guarded with conditions that first confirm the presence of the API on the device your app is running on."
534,SetWindowContextHelpId,"Microsoft Build · May 19 – 22, 2025SetWindowContextHelpId function (winuser.h) Associates a Help context identifier with the specified window. Syntax Parameters unnamedParam1 Type: HWND A handle to the window with which to associate the Help context identifier. unnamedParam2 Type: DWORD The Help context identifier. ... window does no Help context identifier, it inherits the.The parent window can then pass the context identifier to WinHelp to display the requested help topic. You use the SetWindowContextHelpId function to assign a context identifier to a window or control and the SetMenuContextHelpId function to assign a context identifier to a menu. You can retrieve the context identifier for a window or menu by.GetWindowContextHelpId function (winuser.h) Retrieves the Help context identifier, if any, associ... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h Library User32.lib DLL User32.dll See also.CWnd::SetDlgItemText Sets the caption or text of a control in the specified dialog box. CWnd::SetForegroundWindow Puts the thread that created the window into the foreground and activates the window. CWnd::SetWindowContextHelpId Sets the help context identifier. CWnd::SetWindowPlacement Sets the show state and the normal (restored), minimized, and.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindow::SetScrollInfo Sets the parameters of a scroll bar. CWindow::SetWindowContextHelpId Sets the window's help context identifier. CWindow::SetWindowLong Sets a 32-bit value at a specified.This identifier allows an application to group its associated processes and windows under a single taskbar button. SetMenuContextHelpId Associates a Help context identifier with a menu. SetWindowContextHelpId Associates a Help context identifier with the specified window. SetWindowSubclass Installs or updates a window subclass callback. WinHelp.These flags are bitmasks set in the dwMask member and passed to IPublishedApp::GetPublishedAppInfo. ShellSpecialFolderConstants Specifies unique, system-independent values that identify special folders. ShellWindowFindWindowOptions Specifies options for finding window in the Shell windows collection. ShellWindowTypeConstants Specifies types of.... Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell."
535,GetDlgCtrlID,"Microsoft Build · May 19 – 22, 2025GetDlgCtrlID function (winuser.h) Retrieves the identifier of the specified control. Syntax Parameters [in] hWnd Type: HWND A handle to the control. ...e function succeeds, the return value is the identifier of theRemarks GetDlgCtrlID accepts child window handles as well as handles of controls in dialog boxes. An application sets the identifier.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd ... CWnd::EnableScrollBarCtrl Enables or disables a sibling scroll-bar control. CWnd::GetDlgCtrlID If the CWnd is a child window, calling this function returns its ID value..CWindow::GetDlgControl Retrieves an interface on the specified control. CWindow::GetDlgCtrlID Retrieves the window's identifier (for child windows only). CWindow::GetDlgHost Retrieves a pointer to an interface to the ATL Control hosting container. Parameters nID [in] The resource ID of the control being retrieved. iid [in] The ID of the interface.COleControlSite::GetDefBtnCode Retrieves the default button code for the hosted control. COleControlSite::GetDlgCtrlID Retrieves the identifier of the control. COleControlSite::GetEventIID Retrieves the ID of an event interface for a hosted control. COleControlSite::IsDefaultButto... DLGC_UNDEFPUSHBUTTON Control is not the default button in the.For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in d... For dialog boxes that do not use the system font, the conversion from dialog template units to pixels depends on the font used by the dialog box. GetDlgCtrlID Retrieves the identifier of the specified control..Dialog box functions In this section CreateDialog CreateDialogIndirect CreateDialogIndirectParam CreateDialogParam DefDlgProc DialogBox DialogBoxIndirect DialogBoxIndirectParam DialogBoxParam DLGPROC EndDialog GetDialogBaseUnits GetDlgCtrlID GetDlgItem GetDlgItemInt GetDlgItemText GetNextDlgGroupItem GetNextDlgTabItem IsDialogMessage MapDialogRect.Before setting the input focus, the procedure checks the control identifier of the default input focus. The system passes the window handle of the default input focus in the wParam parameter. The GetDlgCtrlID function returns the identifier for the control identified by the window handle. If the identifier does not match the correct identifier,.The application specifies the identifier either in the hMenu parameter of the CreateWindowEx function or in the id m... Because the control itself does not set the control identifier, the control must retrieve the identifier before it can send notification messages. A control must use the GetDlgCtrlID function to retrieve its own control.GetCurrentPrinterName Retrieves the name of the currently selected printer, for use with PrintDlgEx. GetDialogBaseUnits Retrieves the system's dialog base units, which are the average width and height of characters in the system font. GetDlgCtrlID Retrieves the identifier of the specified control. GetDlgItem Retrieves a handle to a control in the.GetDialogDpiChangeBehavior Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior. GetDisplayAutoRotationPreferencesByProcessId Retrieves the screen auto-rotation preferences for the process indicated by the dwProcessId parameter. GetDlgCtrlID Retrieves the identifier of the specified control.."
536,CreateDCW,"Microsoft Build · May 19 – 22, 2025CreateDCW function (wingdi.h) The CreateDC function creates a device context (DC) for a device using the specified name. Syntax Parameters pwszDriver A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass NULL to lpszDriver because GDI ignores.CreateDCA The CreateDC function creates a device context (DC) for a device using the specified name. (ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device using the specified name. (Unicode) CreateDIBitmap The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits..CreateCompatibleDC The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. CreateDCA The CreateDC function creates a device context (DC) for a device using the specified name. (ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device using the specified name. (Unicode).Hi, I want to print something using printer. For that I need to get the HDC of the printer like below: This is crashing with below error: Exception thrown at 0x00007FFAE3B85B0C (KernelBase.dll) in TWTallySCPNative.exe: WinRT originate error - 0x80040155 : 'Failed to find proxy registration for IID: {79EAC9E4-BAF9-11CE-8C82-00AA004BA90B}.'..Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,.Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.exe&quot; /MANIFEST /NXCOMPAT /PDB:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.pdb&quot; /DYNAMICBASE &quot;glfw3.lib&quot;."
537,BroadcastSystemMessageW,"Microsoft Build · May 19 – 22, 2025BroadcastSystemMessageW function (winuser.h) Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components. To receive additional information if the request is defined, use the BroadcastSystemMessageEx function..BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Se... (BroadcastSystemMessageExW) BroadcastSystemMessageW The BroadcastSystemMessageW (Unicode) function sends a message to the specified recipients. (BroadcastSystemMessageW).BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients. (BroadcastSystemMessage) BroadcastSystemMessageA Sends a message to the specified recipients. (BroadcastSystemMessageExW) BroadcastSystemMessageW The BroadcastSystemMessageW (Unicode) function sends a message to the specified recipients.."
538,FillConsoleOutputAttribute,"Microsoft Build · May 19 – 22, 2025FillConsoleOutputAttribute function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing u... Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility.Low-Level Console Output Functions Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. FillConsoleOutputCharacter Writes a single Unicode or ANSI character... FillConsoleOutputAttribute Writes a text and background color attribute combination to a specified number of consecutive cells.Clearing the Screen There are three ways to clear the screen in a console application. This matches the behavior of the command prompt cmd.exe. Example 3 The third method is to write a function to programmatically clear the screen using the FillConsoleOutputCharacter and FillConsoleOutputAttribute functions. The following sample code demonstra....Console Functions The following functions are used to access a console. Function Description AddConsoleAlias De... CreateConsoleScreenBuffer Creates a console screen buffer. FillConsoleOutputAttribute Sets the text and background color attributes for a specified number of character cells. FillConsoleOutputCharacter Writes a character to the.Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header WinConTypes.h (via WinCon.h, include Windows.h) See also CONSOLE_FONT_INFO CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SELECTION_INFO FillConsoleOutputAttribute FillConsoleOutputCharacter.FillConsoleOutputCharacter function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. ...esktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and AN.The behavior of the following sequences is based on the VT100 and derived terminal emulator technologies, most specifically the xterm terminal emulator. Text Modification All commands in this section are generally equivalent to calling FillConsoleOutputCharacter, FillConsoleOutputAttribute, and ScrollConsoleScreenBuffer console APIs to modify the.FlsSetValue Introduced into api-ms-win-core-fibers... Moved into api-ms-win-core-fibers-l1-1-0.dll in 10.0.16299. IsThreadAFiber Introduced into api-ms-win-core-fibers-l1-1-1.dll in 10.0.10240. APIs from api-ms-win-core-fibers-l2-1-1.dll API Requirements CalloutOnFiberStack Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240. Removed."
539,SetConsoleActiveScreenBuffer,"Microsoft Build · May 19 – 22, 2025SetConsoleActiveScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new... Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios..Reading and Writing Blocks of Characters and Attributes Important This document describes console platform functionality that is no longer a part ... After the SetConsoleActiveScreenBuffer function makes this the active screen buffer, a block of characters and color attributes is copied from the top two rows of the STDOUT screen buffer into a.CreateConsoleScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. To make the new screen buffer the active screen buffer, use the SetConsoleActiveScreenBuffer function. The newly created screen buffer will copy some properties from the active screen buffer at the.Console Handles A console process uses handles to access the input and screen buffers of its console. A process can use the GetStdHandle, CreateFile, or CreateConsoleScreenBuffer function to op... This handle can be used in any function that accepts a handle to console output. The new screen buffer is not active (displayed) until its handle is.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias for th... ResizePseudoConsole Resizes the internal buffers for a pseudoconsole to the given size. ScrollConsoleScreenBuffer Moves a block of data in a screen buffer. SetConsoleActiveScreenBuffer Sets the specified.Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. The active screen buffer is the one that is displayed on the screen. To open a handle to a console's active screen buffer, specify the CONOUT$ value ... A process can use the CreateConsoleScreenBuffer function to create.Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic list. That umbrella library provides the exports for the set of Win32 APIs in question. This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. For delay load or LoadLibrary, use the."
540,GetEnvironmentStrings,"Microsoft Build · May 19 – 22, 2025GetEnvironmentStrings function (processenv.h) Retrieves the environment variables for the current process. Syntax Return value If the function succeeds, the return value is a pointer to the environment block of the current process. Remarks The GetEnvironmentStrings function returns a pointer to a block of memory that contains the environment.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironm... (Unicode) GetEnvironmentStrings The GetEnvironmentStrings function (processenv.h) retrieves the environment variables for the.GetEnvironmentStringsW function (processenv.h) Retrieves the environment variables for the current process. Syntax Return value If the function succeeds, the return value is a pointer to the environment block of the current process. Remarks The GetEnvironmentStrings function returns a pointer to a block of memory that contains the environment.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Environment Variables Every process has an environment block that contains a set of environment variables and their values. The GetEnvironmentStrings function returns a pointer to the environment block of the calling process. When you.FreeEnvironmentStringsA function (processenv.h) Frees a block of environment strings. The pointer to the block must be obtained by calling the GetEnvironmentStrings function. Remarks If you used the ANSI version of GetEnvironmentStrings function, be sure to use the ANSI version of FreeEnvironmentStrings. Note The processenv.h header defines.FreeEnvironmentStringsW function (processenv.h) Frees a block of environment strings. Remar... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processenv.h (include Windows.h on Windows Server 2003,.Changing Environment Variables Each process has an environment block associated with it. The environment block consists of a null-terminated block of null-terminated strings (meaning there are two null bytes at the end of the block), where each string is in the form: name=value All strings in the environment block must be sorted alphabetically by.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Process and Thread Functions This topic describes the process and thread functions. Dispatch Queue Function Process Funct... ExitProcess Ends the calling process and all its threads. FreeEnvironmentStrings Frees a block of environment.Windows XP: Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Windows XP Escape from DLL Hell with Custom Debugging and Instrumentation Tools and Utilities,Part 2 Christophe Nasarre This article assumes you're famili... These parameters are the command line (GetCommandLine), the environment strings.ExpandEnvironmentStringsW function (processenv.h) Expands environment-variable strings and replaces them with the values defined for the current user. ...mentStrings Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps]."
541,ReadClassStg,"Microsoft Build · May 19 – 22, 2025...ace on the storage object containing the CLSID to be retrieved. [out] pclsid Poin where the CLSID is writtenReturn value This function supports the standard return value E_OUTOFMEMORY, in addition to the following: This function also returns any of the error values returned by the IStorage::Stat method. Remarks ReadClassStg is a helper function.ReadAt The ReadAt method reads a specified number of bytes starting at a specified offset from the beginning of the byte array object. ReadClassStg The ReadClassStg function reads the CLSID previously written to a storage object with the WriteClassStg function. ReadClassStm Reads the CLSID previously written to a stream object with the.coml2api.h header This header is used by Structured Storage. For more information, see: Structured Storage coml2api.h contains the following programming interfaces: Functions CreateILock... PropStgNameToFmtId Converts a property set storage or stream name to its format identifier. ReadClassStg The ReadClassStg function reads the CLSID previously.Structured Storage functions are described in the following sections: CreateILockBytesOnHGlobal CreateStreamOnHGlobal FmtIdToPropStgName FreePropVariantArray GetConvertStg GetHGlobalFromILockBytes GetHGlobalFromStream OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx.Remarks The WriteClassStm function writes a CLSID to the specified stream object so it can be read by the ReadClassStm function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header coml2api.h.ReadClassStm function (coml2api.h) The ReadClassStm function reads the CLSID previously written to a stream object with the WriteClassStm function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform.Remarks The WriteClassStg function writes a CLSID to the specified storage object so that it can be read by the ReadClassStg function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header.GetConvertStg Int... GetHGlobalFromILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. PropStgNameToFmtId Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. ReadClassStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. ReadClassStm Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240..When an object is in the running state, the default handler calls an implementation of GetClassID that delegates the call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg function to read the CLSID that is saved in the object's storage. If you are writing a custom object.IPaper::Save The principal focus in this sample code is how COPaper can load and save its paper data in compound files. The WriteClassStg service function performs this storage. In this sample, the root storage is passed by StoClien, and thus the entire compound file is associated with the DllPaper component. This CLSID data can be retrieved later."
542,CoRegisterChannelHook,"Microsoft Build · May 19 – 22, 2025CoRegisterChannelHook function (objbase.h) Registers a channel hook. Syntax Parameters [in] ExtensionUuid The extension to register. [in] pChannelHook The channel hook to register. Return value If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. Requirements Requirement Value Target Platform Windows Header.CoLoadLibrary Loads a specific DLL into the caller's process. CoRegisterChannelHook Registers a channel hook. CoRegisterInitializeSpy Registers an implementation of the IInitializeSpy interface. The IInitializeSpy interface is defied to allow developers to perform initialization and cleanup on COM apartments. CoRegisterMallocSpy Registers an.CoGetIn. CoRegisterActivationFilter Registers a process-wide filter to process activation requests. CoRegisterChannelHook Registers a channel hook. CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoRegisterDeviceCatalog Enables a downloaded DLL to register its device catalog interfaces within.CoQueryClientBlanket Called by the server to find out about the client that invoked the method executing on the current thread. CoRegisterActivationFilter Registers a process-wide filter to process activation requests. CoRegisterChannelHook Registers a channel hook. CoQueryProxyBlanket Retrieves the authentication information the client uses to."
543,RemoveDirectoryA,"Microsoft Build · May 19 – 22, 2025RemoveDirectoryA function (fileapi.h) Deletes an existing empty directory. To perform this operation as a transacted operation, use the RemoveDirectoryTransacted function. Syntax Parameters [in] lpPathName The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the.Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. RemoveDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into.WIN32_FIND_STREAM_DATA Contains information about the stream found by the FindFirstStreamW or Find... Enumerations DIRECTORY_FLAGS Defines the flags that can be used with the CreateDirectory2 function to specify how the directory should be created. STREAM_INFO_LEVELS Defines values that are used with the FindFirstStreamW function to specify the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp... (Unicode)."
544,LocalLock,"Microsoft Build · May 19 – 22, 2025LocalLock function (winbase.h) Locks a local memory object and returns a pointer to the first byte of the object's memory block. Note  The local functions have greater overhead and provide fewer features than other memory management functions. Remarks The... For movable memory objects, LocalLock increments the count by one, and the LocalUnlock.LocalFree function (winbase.h) Frees the specified local memory object and invalidates its handle. The LocalLock function locks a local memory object and increments the lock count by one. The LocalUnlock function unlocks it and decrements the lock count by one. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP.LocalAlloc function (winbase.h) Allocates the specified number of bytes from the heap. Note  The local functions have g... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h).This pointer is return... The LocalLock function converts this handle into a pointer to the object's memory block, and LocalHandle converts the pointer back into a handle. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows.Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compatibility with 16-bit Windows. To get a pointer to a movable memory object, use the GlobalLock and LocalLock functions. The actual size of the memory allocated can be larger th... The global and local functions.Global and local functions Also see global and local functions. These functions are provided for compatibility with 16-bit Windows and are used with Dynamic Data Exchange (DDE), the clipboard functions, and OLE data objects. Unless documentation specifically states that a global or local function should be used, new applications should use the.LocalAlloc Allocates the s... (LocalAlloc) LocalFlags Retrieves information about the specified local memory object. LocalFree Frees the specified local memory object and invalidates its handle. LocalHandle Retrieves the handle associated with the specified pointer to a local memory object. LocalLock Locks a local memory object and returns a.Remarks If the function succeeds, the application can access the contents of the edit control by casting the return value to HLOCAL and passing it to LocalLock. LocalLock returns a pointer to a buffer that is a null-terminated array of CHARs or WCHARs, depending on whether an ANSI or Unicode function created the control. To unlock the buffer, the.LocalUnlock function (winbase.h) Decrements the lock count associated with a memory object that was allocated with LMEM_MOVEABLE. For each call that a process makes to LocalLock for an object, it must eventually call LocalUnlock. ...client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target.VirtualLock function (memoryapi.h) Locks the specified region of the process's virtual address space into physical memory, ensuring that subsequent access to the region will not incur a page fault. Syntax Parameters [in] lpAddress A pointer to the base address of the region of pages to be locked. [in] dwSize The size of the region to be locked, in."
545,CreateProcessA,"Microsoft Build · May 19 – 22, 2025CreateProcessA is a function in the Windows API that creates a new process and its primary thread. The new process runs in the security context of the calling process. It is an ANSI version of the CreateProcess function, which is used to start a new executable program.The function requires several parameters, including the application name, command line arguments, process attributes, thread attributes, and more. It returns a handle to the newly created process and its primary thread, allowing further interaction with the process if needed.This function is commonly used in applications that need to launch other processes, such as command-line utilities or other executables, from within a program.References:CreateProcessA function (processthreadsapi.h) Creates a new process and its primary thread. The new process runs in the security context of the calling process. If the calling process is impersonating another user, the new process uses the token for the calling process, not the impersonation token. To run the new process in the security context of.THREAD_INFORMATION_CLASS The THREAD_INFORMATION_CLASS enumeration (processthreadsapi.h) specifies the collection of supported thread types. Functions CreateProcessA Creates a new process and its primary thread. The new process runs in the security context of the calling process. OVERRIDE_PREFETCH_PARAMETE... It is used with the CreateProcess,.The following code demonstrates how to create a process. If CreateProcess succeeds, it returns a PROCESS_INFORMATION structure that contains handles and identifiers for the new process and its primary thread. The thread and process handles are created with full access rights, although you can restrict access if you specify security descriptors..processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. ... It is used with the CreateProcess,.GetCommandLineA function (processenv.h) Retrieves the command-line string for the current process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processenv.h (include Windows.h on Windows Server 2003,.Warning C6277 NULL application name with an unquoted path in call to 'function-name': results in a security vulnerability if the path contains spaces This warning indicates that the application name parameter is null and that there might be spaces in the executable path name. Code analysis name: CREATEPROCESS_ESCAPE Example The following sample.| Your main application can start a child process in a number of different ways. It can use functions in the standard C runtime library (see _spawn, _wspawn functions ) or use Windows API functions directly (e.g., CreateProcessA function , ShellExecuteA function ). While the above functions can start a child process the question remains how you.My code creates many copies of itself via CreateProcessA(). These do not display anything on the monitor except for a small status dialog with a progress bar, stop button, and some icons. That dialog is supposed to stay on top of everything else until that process terminates. When I transferred all files to vs2017, somehow the progressbar dialog.I have migrated from VS2010 to VS2017, and find that _spawnl is no longer supported. I can use CreateProcessA(), but that does not return a handle. I have managed to get CreateProcess() to work, so this problem is solved.| I would love to keep using _spawnl(). But here is what is now the case: Important This API cannot be used in applications that.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory."
546,LoadCursorFromFileA,"Microsoft Build · May 19 – 22, 2025LoadCursorFromFileA function (winuser.h) Creates a cursor based on data contained in a file. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_LOADFROMFILE flags set). Syntax Parameters [in] lpFileName Type: LPCTSTR The source of the file data to be used to create the cursor. ...The winuser.h header.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) LoadCursorA Loads the.The function searches the entire screen, not just the calling application's client area. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. You can use this function to specify the content,."
547,AppendMenuW,"Microsoft Build · May 19 – 22, 2025AppendMenuW function (winuser.h) Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed..To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) AppendMenuW Appends a new item to.There are four types of animation:_roll, slide, collapse or expand, and alpha-blended fade. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu..The tables in this document list wrapper functions from Shlwapi.dll that provide limited Unicode functionality to Windows 95, Windows 98, and Windows Millennium Edition (Windows Me). For example, AppendMenuWrapW calls AppendMenuA, which is the ANSI version of AppendMenu. Any strings returned by the ANSI function are converted to Unicod... For.In windows10，I create menu with CreatePopupMenu and use AppendMenuW to add item. This feature is called XAML Islands .| Hi @jason You can check this a collection of topics describing and demonstrating how to migrate your Universal Windows Platform (UWP) application to the Windows App SDK.."
548,CreateFileW,"Microsoft Build · May 19 – 22, 2025The CreateFileW function is used to create or open a file or I/O device. It is the Unicode version of the CreateFile function. To use CreateFileW, you need to specify several parameters, including the file name, desired access, sharing mode, security attributes, creation disposition, and flags.Here’s a general outline of how to use the CreateFileW function:The function returns a handle to the file if successful, or INVALID_HANDLE_VALUE if it fails. You can use the GetLastError function to retrieve more information about the error.References:CreateFileW function (fileapi.h) Creates or opens a file or I/O device. To perform this operation as a transacted operation, which results in a handle that can be used for transacted I/O, use the CreateFileTransacted function. If this parameter is zero and CreateFile succeeds, the file or devic... Remarks CreateFile was originally developed.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CreateFileA Creates or open... The most commonly used I/O devices are as follows:_file, file stream,.FSCTL_FILESYSTEM_GET_STATISTICS Retrieves the information from various file system performance counters. FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code started with Windows 10. FSCTL_FIND_FILES_BY_SID Searches a directory for a file whose creator owner.Hi Microsoft team, I am developing a UWP app, the function is connected to my driver. But I get error=5, so can you help me?| Hi @zev young , Welcome to Microsoft Q&amp;A. Error code 5 ( ERROR_ACCESS_DENIED ), it appears when the user does not have sufficient permission to access the requested file or location. UWP runs in a sandbox and cannot.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.We've got this semi-reproducable hang in CreateFileW with CREATE_ALWAYS that is clearly caused by MsSense.exe getting stuck and holding the file open. This i... CreateFileW should not get stuck for minutes at a time while MsSense.exe is holding the handle open. It's problems like these that make software support teams tell customers to turn off.Hi Euclids solution in https://social.technet.microsoft.com/Forums/ie/en-US/b8c11de8-9e42-42ad-9cb5-0e1ba232f2c3/volume-shadow-copy-service-error-unexpected-error?forum=windowsbackup solved my VSS issue when upgrading from windows7 to windows10. Is this an issue with the upgrade procedure from MS, since clean install does apparently not have this.My simple docker-compose.yml: --- version: '3.9' --- When I try to restore a backup that contains in-memory optimized tables I receive the following error: Msg 3634, Level 16, State 1, Server 20b03f9dce7e, Line 1 The operating system returned the error '(null)' while attempting 'CreateFileW' on.Currently I'm having a problem with getting input reports from a HID device. What's happening is that I'm getting the device path of the device, but CreateFileW doesn't recognize it as a valid device path. Here's my platform invokes and main function if anyone has any clue.| This works on my OS (Windows 10 22H2) with the code I posted in your.Hi, Despite the lack of any function ... I use CreatefileW() to iterate over COM ports and I store the file name in a ComboBox if the port's handle is valid. To stay in adequation with MFC, I tried to use CFile instead of CreateFileW but it's more &quot;file&quot; oriented. I use CreatefileW() to iterate over COM ports and I store the file name in."
549,UpdateResourceA,"Microsoft Build · May 19 – 22, 2025UpdateResourceA function (winbase.h) Adds, deletes, or replaces a resource in a portable executable (PE) file. There are some restrictions on resource updates in files that contain Resource Configuration (RC Config) data: language-neutral (LN) files and language-specific resource (.mui) files. Syntax Parameters [in] hUpdate Type: HANDLE A module.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions Ap... (Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary.A... BackupWrite Restore a file or directory that was backed up using BackupRead. BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace."
550,CloseMetaFile,"Microsoft Build · May 19 – 22, 2025CloseMetaFile function (wingdi.h) The CloseMetaFile function closes a metafile device context and returns a handle that identifies a Windows-format metafile. Note  This function is provided only for compatibility with Windows-format metafiles. The corresponding function for an enhanced-format metafile is CloseEnhMetaFile. Requi... The.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI. CloseFigure The CloseFigure function closes an open figur... CloseMetaFile The CloseMetaFile function closes a metafile device context and returns a.Metafile Functions The following functions are used with enhanced-format metafiles. Function Description CloseEnhMetaFile Closes an enhanced-metafile device context. CopyEnhMetaFile Copies the contents of an enhanced-format metafile to a specified file. CloseMetaFile CopyMetaFile CreateMetaFile DeleteMetaFile EnumMetaFile EnumMetaFileProc....map, CreateDIBSection, CreateDiscardableBitmap DeleteObject Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush DeleteObject DC CreateDC DeleteDC, ReleaseDC Enhanced metafile CreateEnhMetaFile DeleteEnhMetaFile Enhanced-metaf CreateEnhMetaFile CloseEnhMetaFile Font.With these t... Figure 7 Functions that Free GDI Objects Object Type API Functions to Free Handles Display context DeleteDC Metafile DeleteMetaFile CloseMetaFile Enhanced Metafile DeleteEnhMetaFile CloseEnhMetaFile Others DeleteObject The CGDIReflect class is responsible for providing the static stub methods that will be called in place of the.CreateMetaFileW function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format m... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.CreateMetaFileA function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format m... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library."
551,MapViewOfFileEx,"Microsoft Build · May 19 – 22, 2025MapViewOfFileEx function (memoryapi.h) Maps a view of a file mapping into the address space of a calling process. A caller can optionally specify a suggested base memory address for the view. To specify the NUMA node for the physical memory, see MapViewOfFileExNuma. Syntax Parameters [in] hFileMappingObject A handle to a file mapping object. The.Creating a File View To map the data from a file to the virtual memory of ... The MapViewOfFile and MapViewOfFileEx functions use the file mapping object handle returned by CreateFileMapping to create a view of the file or a portion of the file in the process's virtual address space. The MapViewOfFileEx function works exactly like the.MapViewOfFile3FromApp Maps a view of a file mapping into the address space of a calling process from a Windows Store app. MapViewOfFileEx Maps a view of a file mapping into the address space of a calling process. MapViewOfFileExNuma Maps a view of a file mapping into the address space of a calling process, and specifies the NUMA node for the.(MapViewOfFile3) MapViewOfFile3FromApp Maps a view of a file mapping into the address space of a calling Windows Store app. (MapViewOfFile3FromApp) MapViewOfFileEx Maps a view of a file mapping into the address space of a calling process. MapViewOfFileFromApp Maps a view of a file mapping into the address space of a calling Windows Store app..MapViewOfFile function (memoryapi.h) Maps a view of a file mapping into the address space of a calling process. To specify a suggested base address for the view, use the MapViewOfFileEx function. However, this practice is not recommended. Syntax Parameters [in] hFileMappingObject A handle to a file mapping object. The CreateFileMapping and.GetVolumeInformation If the volume supports file system transactions, the function returns FILE_SUPPORTS_TRANS... MapViewOfFile and MapViewOfFileEx If there is a transaction associated with the file handle used to create the file-mapping object that is being mapped, then the associated view is transacted. If the view is used to make transacted.... The views of all processes for a single file-mapping object are mapped into the same sharable pages of physical storage. However, the virtual addresses of the mapped views can vary from one process to another, unless the MapViewOfFileEx function is used to map the view at a specified address. All memory a process allocates by using the memory.For more information, see the CreateProcess, Duplicat... Creating a file mapping object does not actually map the view into a process address space. The MapViewOfFile and MapViewOfFileEx functions map a view of a file into a process address space. With one important exception, file views derived from any file mapping object that is backed by the....ryExW LdrLoadDll VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory VirtualProtect VirtualProtectEx NtProtectVirtualMemory HeapCreate RtlCreateHeap CreateProcessA CreateProcessW CreateProcessInternalA CreateProcessInternalW NtCreateUserProcess NtCreateProcess NtCreateProcessEx CreateRemoteThread CreateRemoteThreadEx NtCreateThreadEx.For more information, see the CreateProcess, Duplicat... Creating a file mapping object does not actually map the view into a process address space. The MapViewOfFile and MapViewOfFileEx functions map a view of a file into a process address space. With one important exception, file views derived from any file mapping object that is backed by the."
552,SetProcessPriorityBoost,"Microsoft Build · May 19 – 22, 2025SetProcessPriorityBoost function (processthreadsapi.h) Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.GetProcessPriorityBoost function (processthreadsapi.h) Retrieves the priority boost control state of the specified process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include.For example, when a wait operation associated with disk or keyboard I/O finishes, the thread receives a priority boost. You can disable the priority-boosting feature by calling the SetProcessPriorityBoost or SetThreadPriorityBoost function. To determine whether this feature has been disabled, call the GetProcessPriorityBoost or.SetProcessPriorityBoost Disables the ability of the system to temporarily boost the priority of the threads of the specified process. SetProcessRestrictionExemption Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows ... IsWow64Process Determines whether the specified process is running..NET Internals Examine Running Processes Using Both Managed and Unmanaged Code Christophe Nasarre This article discusses: Using the classes in the System.Diagnostics namespace Using P/Invoke when necessary Limitations of the ICorPublishxxx interfaces Efficiently utilizing the debugging ICorDebug... IntPtr MainWindowHandle Handle of the main.GetProcessPriorityBoost Retrieves the priority boost control state of the specified process. GetProcessShutdownParameters Retrieves the shutdown parameters for the currently calling p... Mitigation policies enable a process to harden itself against various types of attacks. SetProcessPriorityBoost Disables or enables the ability of the system to.processthreadsapi.h header This header is used by multiple. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. GetProcessPriorityBoost Retrieves the priority boost.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
553,GetTextCharacterExtra,"Microsoft Build · May 19 – 22, 2025GetTextCharacterExtra function (wingdi.h) The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. Syntax Parameters [in] hdc Handle to the device context. Return value If the function succeeds, the return value is the current intercharacter spacing, in logical coordinates. Remarks The.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. GetTabbedTextExtent Comp... GetTextAlign Gets the text-alignment setting for a device context. GetTextCharacterExtra Gets the current intercharacter spacing for a.GetTextAlign The GetTextAlign function retrieves the text-alignment setting for the specified device context. GetTextCharacterExtra The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. GetTextCharset Retrieves a character set identifier for the font that is currently selected into a.(Unicode) GetTextAlign The GetTextAlign function retrieves the text-alignment setting for the specified device context. GetTextCharacterExtra The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. GetTextColor The GetTextColor function retrieves the current text color for the specified.Win32 Text API Comparison For those developers that are migrating their Win32 application code, the following table lists the Win32 Text APIs and the approximate equivalent in DirectWrite. GDI Text calls Description DirectWrite ... IDWriteTextLayout::GetMetrics GetTextAlign Gets the text-alignment setting for a device context..You can use the GetTextExtentPoint function to det... The SetTextCharacterExtra function adds extra space to every character cell in the selected font, including the break character. (You can use the GetTextCharacterExtra function to determine the current amount of extra space being added to the character cells; the default setting is zero.). You.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::GetTa... CDC::GetTextAlign Retrieves the text-alignment flags. CDC::GetTextCharacterExtra Retrieves the current setting for the amount of intercharacter spacing. CDC::GetTextColor Retrieves the current.SetTextCharacterExtra function (wingdi.h) The SetTextCharacterExtra function sets the intercharacter spacing. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library.Text-Formatting Attributes An application can use six functions... Intercharacter Spacing Applications can use the SetTextCharacterExtra function to alter the intercharacter spacing for all text output operations in a specified device context. Before drawing the text the second time, the SetTextCharacterExtra function was called to increment the."
554,VkKeyScanA,"Microsoft Build · May 19 – 22, 2025VkKeyScanA function (winuser.h) [This function has been superseded by the VkKeyScan... Translates a character to the corresponding virtual-key code and shift state for the current keyboard. Syntax Parameters [in] ch Type: TCHAR The character to be translated into a virtual-key code. Return value Type: SHORT If the function succeeds, the low-order.VkKeyScanA Translates a character to the corresponding virtual-key code and shift state for the current keyboard. (ANSI) VkKeyScanExA Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and phys... (ANSI) VkKeyScanExW Translates a character to the.The list of names can include mapped drive letters. (ANSI) DlgDirListComboBoxW Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters. (Unicode) DlgDirListW Replaces the."
555,CoTaskMemFree,"Microsoft Build · May 19 – 22, 2025CoTaskMemFree function (combaseapi.h) Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function. Syntax Parameters [in, optional] pv A pointer to the memory block to be freed. Return value None Remarks The CoTaskMemFree function uses the default OLE allocator. The number of bytes freed.COM defines a pair of functions for allocating and freeing me... The CoTaskMemAlloc function allocates a block of memory. The CoTaskMemFree function frees a block of memory that was allocated with CoTaskMemAlloc. We saw an example of this pattern in the Open dialog box example: The GetDisplayName method allocates memory for a string. Internally,.NdrOleFree function (rpcndr.h) The NdrOleFree function is a wrapper for the CoTaskMemFree function. ... Return value None Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header rpcndr.h (include.FreeUiInfo function The FreeUiInfo function deallocates the memory allocated internally to a UiInfo structure. This function calls CoTaskMemFree to deallocate memory. Syntax Parameters pInfo [in] Type:... Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps.FreeHelperAttributes function The FreeHelperAttributes function deallocates the memory allocated internally to an array of HELPER_ATTRIBUTE structures. This function calls CoTaskMemFree to deallocate memory. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop.FreeRootCauseInfos function The FreeRootCauseInfos function deallocates the memory allocated internally to an array of RootCauseInfo structures. This function calls CoTaskMemFree to deallocate memory. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps.FreeRepairInfos function The FreeRepairInfos function deallocates the memory allocated internally to an array of RepairInfo structures. This function calls CoTaskMemFree to deallocate memory. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps only] Header.FreeRepairInfoExs function The FreeRepairInfoExs function deallocates the memory allocated internally to an array of RepairInfoEx structures. This function calls CoTaskMemFree to deallocate memory. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps only].The user must call CoTaskMemFree on the returned text. Remarks GetColumnText allocates the string for the result and stores its pointer at the location specified by pText. The caller must free the memory using CoTaskMemFree. Requirements Requirement Value Minimum supported client Windows Vista Minimum supported server Windows Server 2008 Target.UtilStringCopyWithAlloc function The UtilStringCopyWithAlloc function allocates and copies a source string. When no longer needed, it must be released with CoTaskMemFree. ... Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps only] Header Ndattributils.h."
556,GetUpdateRect,"Microsoft Build · May 19 – 22, 2025GetUpdateRect function (winuser.h) The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window. GetUpdateRect retrieves the rectangle in logical coordinates. ...t retrieves an empty rectang all coordinates to zero)Syntax Parameters [in] hWnd Handle to the window.Retrieving the Update Region The GetUpdateRect and GetUpdateRgn functions retrieve the current update region for the window. GetUpdateRect retrieves the smallest rectangle (in logical coordinates) that encloses the entire update region. Because BeginPaint validates the update region, any call to GetUpdateRect and GetUpdateRgn immediately after a.Painting and Drawing Functions The following functions are used with painting and drawing. GetROP2 Gets the foreground mix mode of a device contextGetUpdateRect Gets the coordinates of the smallest rectangle that encloses the update region of a window. GetUpdateRgn Gets the update region of a window. GetWindowDC Gets the device context for a.UpdateWindow function (win... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced in.CWindow::GetClientRect Retriev... CWindow::GetDC Retrieves a device context for the client area. CWindow::GetTopWindow Retrieves the top-level child window. CWindow::GetUpdateRect Retrieves the coordinates of the smallest rectangle that completely encloses the update region. CWindow::GetUpdateRgn Retrieves the update region and copies it into a.IVirtualSurfaceImageSourceNative::GetUpdateRects method (windows.ui.xaml.media.dxinterop.h) Gets the set of regions that must be updated on the shared surface. Syntax Parameters [in] updates The number of regions that must be updated. You obtain this by calling GetUpdateRectCount. [out] count Receives a list of regions that must be updated..(ANSI) GetEnhMetaFileDescriptionW The GetEnhMetaFileDescription function retrieves an o... (Unicode) GetEnhMetaFileHeader The GetEnhMetaFileHeader function retrieves the record containing the header for the specified enhanced-. GetUpdateRect The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the.An application may call the GetUpdateRect function to determine whether the window has an update region. If GetUpdateRect returns zero, the application need not call the BeginPaint and EndPaint functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also BeginPaint GetUpdateRect GetUpdateRgn Painting and Drawing Functions Painting.Call RegisterForUpdatesNeeded on the VirtualSurfaceImageSource. In your UpdatesNeeded callback, call GetUpdateRectCount and GetUpdateRects. Render the update rectangles (using BeginDraw/EndDraw just like for SurfaceImageSource). Set the SurfaceImage... In your implementation of IVirtualSurfaceImageSourceNative::UpdatesNeeded, use the."
557,DeleteAtom,"Microsoft Build · May 19 – 22, 2025DeleteAtom function (winbase.h) Decrements the reference count of a local string atom. If the atom's reference count is reduced to zero, DeleteAtom removes the string associated with the atom from the local atom table. Syntax Parameters [in] nAtom Type: ATOM The atom to be deleted. Return value Type: ATOM If the function succeeds, the return value.Win32.DeleteAtom(UInt16) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters atom UInt16 Returns UInt16 Applies to. Learn more about the Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities.Win32.DeleteAtom in the.DecryptFileA Decrypts a... (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA) DeleteAtom Decrements the reference count of a local string atom. If the atom's reference count is reduced to zero, DeleteAtom removes the string associated with the atom from the local atom table. DeleteFiber Deletes an.Atom Functions In this section AddAtom DeleteAtom FindAtom GetAtomName GlobalAddAtom GlobalDeleteAtom GlobalFindAtom GlobalGetAtomName InitAtomTable. . | Atom Functions. /windows/win32/dataxchg/atoms-functions.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifyi... DeleteAtom Decrements the reference.User Atom Table In addition to the global atom table, the user atom table is another system atom table that is also shared across all processes. If at all possible, you should use AddAtom/DeleteAtom to store strings in a local atom table, or GlobalAddAtom/GlobalDeleteAtom if the atoms are needed cross-process. If there is concern about the.FindAtomA function (winbase.h) Searches the local atom table for the specified character string and retrieves the atom associated with that string. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.InitAtomTable function (winbase.h) Initializes the local atom table and sets the number of hash buckets to the spec... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).Win32 Class Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Inheritance Object Win32 Fields IID_IOleObject WM_HOTKEY Properties IsMemoryAvailable Gets a Boolean value that specifies whether memory is available. Methods AddAtom(String) DeleteAtom(UInt16).For more information, see the GlobalDeleteAtom function. Global atoms are not deleted automatically when the application terminates. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include."
558,FormatMessageW,"Microsoft Build · May 19 – 22, 2025The FormatMessageW function is a Windows API function that formats a message string. It is primarily used to retrieve a formatted message based on a message identifier and optional arguments. This function can be particularly useful for displaying error messages or other informational messages in applications.The function takes several parameters, including the message identifier, a pointer to an array of arguments, and a buffer to receive the formatted message. It supports Unicode, allowing for a wide range of characters to be formatted and displayed.In practice, FormatMessageW is often used in conjunction with error handling to provide meaningful error messages to users based on HRESULT error codes or system error codes.References:FormatMessageW function (winbase.h) Formats a message string. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested. Syntax Parameters [in] dwFlags The formatting options, and how to interpret the lpSource parameter. The low-order byte can also specify the maximum width of a.CHString::FormatMessageW(UINT,...) method (chstring.h) [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The FormatMessageW method formats a message string. Syntax.CHString::FormatMessageW(LPCWSTR,...) method (chstring.h) [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The FormatMessageW method formats a message string. Syntax.CHString::FormatMessageW methods [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for... The overloaded FormatMessageW method formats a message string. Overload list Method Description FormatMessageW(UINT) Formats this message.(ANSI) FindFirstVolumeMountPointW Retrieves th... (ANSI) FindNextVolumeMountPointW Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. FormatMessage The FormatMessage function (winbase.h) formats a message string. FormatMessageA Formats a message string. (FormatMessageA) FormatMessageW The FormatMessageW.CHString class [The CHString class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The MI APIs should be used for all new development.]. The following table lists the CHString methods..In this section AllocSysString method CHString constructors Collate method Compare method CompareNoCase method Empty method Find methods FindOneOf method Format methods FormatMessageW methods FormatV method FreeExtra method GetAllocLength method GetAt method GetBuffer method GetBufferSetLength method GetData method GetLength method IsEmpty method.Format The CHString::Format method formats and stores a series of characters and values in a CHString. Format The CHString::Format method formats and stores a series of characters and values in a CHString string. FormatMessageW The CHString::FormatMessageW (Unicode) method formats a message string. FormatMessageW The CHString::FormatMessageW._/Users/SP/Downloads/sipsorcery-master/examples/WebRTCExamples/XamarinDataChannelTest/XamarinDataChannelTest.iOS/MTOUCH: Error MT5210: Native linking failed, undefined symbol: FormatMessageW. _/Users/SP/Downloads/sipsorcery-master/examples/WebRTCExamples/XamarinDataChannelTest/XamarinDataChannelTest.iOS/MTOUCH: Error MT5210: Native linking failed,.If the localized resource file specified by ResourceFileName exists, the power manager retrieves the resource string specified by ResourceReasonId from the file and then formats the string, replacing %1, %2, etc. placeholders with corresponding items from the ReasonStrings array. Other format specifiers used with FormatMessageW are not supported.."
559,CoIsOle1Class,"Microsoft Build · May 19 – 22, 2025CoIsOle1Class function (objbase.h) Determines whether the specified CLSID represents an OLE 1 object.Remarks The CoIsOle1Class function determines whether an object class is from OLE 1.If CoIsOle1Class returns TRUE, the container does not offer CF_LINKSOURCE as one of its clipboard formats.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h Library Ole32.lib DLL Ole32.dll See also CoIsOle1Class OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorageRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h Library Ole32.lib DLL Ole32.dll See also CoIsOle1Class OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMExRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h Library Ole32.lib DLL Ole32.dll See also CoIsOle1Class DVTARGETDEVICE OleConvertIStorageToOLESTREAMCoIsOle1Class Determines whether the specified CLSID represents an OLE 1 object.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ole2.h Library Ole32.lib DLL Ole32.dll See also CoIsOle1Class OleConvertIStorageToOLESTREAM OleConvertOLESTREAMToIStorageCoIsOle1Class Determines whether the specified CLSID represents an OLE 1 object.CoIsOle1Class Determines whether the specified CLSID represents an OLE 1 object."
560,IsClipboardFormatAvailable,"Microsoft Build · May 19 – 22, 2025IsClipboardFormatAvailable function (winuser.h) Determines whether the clipboard contains data in the specified format. Syntax Parameters [in] format Type: UINT A standard or registered clipboard format. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. IsClipboardFormatAvailable Determines whether the clipboard contains data in the specified format. OpenClipboard Opens the clipboard.... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-5-1 (introduced in Windows 10, version.Alternatively, a window can use the GetPriorityClipboardFormat function. This function identifies the best available clipboard format according to a specified priority. A window that recognizes only one clipboard format can simply determine whether that format is available by using the IsClipboardFormatAvailable function. After determining the.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology,... InitAtomTable Initializes the local atom table and sets the number of hash buckets to the specified size. IsClipboardFormatAvailable Determines whether the clipboard.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats....pboard Lib &quot;user32&quot; () As Long Private Declare PtrSafe Function OpenClipboard Lib &quot;user32&quot; (ByVal hWnd As Long) As Long Private Declare PtrSafe Function CloseClipboard Lib &quot;user32&quot; () As Long Private Declare PtrSafe Function SetClipboardData Lib &quot;user32&quot; (ByVal wFormat As Long, ByVal hMem As Long) As Long.hi I registered my window to listen clipboard by AddClipboardFormatListener and when my window recieve WM_CLIPBOARDUPDATE I tried accessing clipboard data by isclipboardformatavailable and openclipboard data for cf_unicodetext by they fails! to solve this issue I use Sleep function with delay about 100ms before accessing clipboard and when I using.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard a... AddClipboardFormatListener Places."
561,OleSetContainedObject,"Microsoft Build · May 19 – 22, 2025OleSetContainedObject function (ole2.h) Notifies an object that it is embedded in an OLE container, which ensures that reference counting is done correctly for containers that support links to embedded objects. ...nction notifies an object that it is embedded in an OLE cThe implementation of OleSetContainedObject was changed in OLE 2.01 to.IRunnableObject::SetContainedObject method (objidl.h) Notifies an object that it is embedded in an OLE container, which ensures that reference counting is done correctly for containers that support links to embedded objects. ...nedObject method enables a container to inform an object handler that it is embedded in the coWith the release of OLE.OleSetClipboard Places a pointer to a specific data object onto the clipboard. OleSetContainedObject Notifies an object that it is embedded in an OLE container, which ensures that reference counting is done correctly for containers that support links to embedded objects. (OleSetContainedObject) OleSetMenuDescriptor Installs or removes OLE....nkToFile OleCreateLinkToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFromData OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentClipboard OleIsRunning OleLoad OleLoadFromStream OleLoadPicture OleLoadPictureEx OleLockRunning OleMetafilePictFromIconAndLabel.When the embedded object becomes visible, the container must weaken its connection to the embedded object with a call to the OleSetContainedObject function, so other connections can affect the object. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.To develop Component Object Model (COM), you need these headers: accctrl.h callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h ole2.h oledlg.h oleidl.h roapi.h rpcdce.h servprov.h shobjidl.h txlogpub.h unknwn.h."
562,GetMenu,"Microsoft Build · May 19 – 22, 2025The GetMenu function in Microsoft products is used to retrieve a handle to the menu bar of a specified window. This function is particularly useful when you need to manipulate or interact with the menu associated with a window.To use the GetMenu function, you typically need to pass the handle of the window for which you want to retrieve the menu. The function returns a handle to the menu if successful, or NULL if it fails. This handle can then be used with other menu-related functions to modify or display the menu.Here’s a basic example of how to use the GetMenu function:This function is part of the Windows API and is essential for applications that need to manage menus dynamically.References:GetMenu function (winuser.h) Retrieves a handle to the menu assigned to the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose menu handle is to be retrieved. Return value Type: HMENU The return value is a handle to the menu. Floating menu bars are custom controls that mimic standard menus; they are not menus..IMenuEditorService.GetMenu Method Definition Namespace: System.Windows.Forms.Design Assembly:System.Design.dll Assemblies:System.Design.dll, System.Windows.Forms.Design.dll Gets the current menu. Returns Menu The current Menu. Applies to. Gets the current menu. . /dotnet/api/system.windows.forms.design.imenueditorservice.getmenu.FIFinderSyncProtocol_Extensions.GetMenu Method Definition Namespace: FinderSync Assembly:Xamarin.Mac.dll Parameters This IFIFinderSyncProtocol menuKind FIMenuKind Returns NSMenu Applies to. Learn more about the FinderSync.FIFinderSyncProtocol_Extensions.GetMenu in the FinderSync namespace...MetadataSupport.GetMenu(String) Method Definition Namespace: Microsoft.Dynamics.Ax.Xpp Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Parameters name String Returns Microsoft.Dynamics.AX.Metadata.MetaModel.AxMenu Applies to. Learn more about the Microsoft.Dynamics.Ax.Xpp.MetadataSupport.GetMenu in the Microsoft.Dynamics.Ax.Xpp namespace...IShellMenu::GetMenu method (shobjidl_core.h) Gets the menu information set by calling IShellMenu::SetMenu. Syntax Parameters [... Requirements Requirement Value Minimum supported client Windows XP with SP2 [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header shobjidl_core.h (include.NSTokenFieldDelegate_Extensions.GetMenu Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters This INSTokenFieldDelegate tokenField NSTokenField representedObject NSObject Returns NSMenu Applies to. Learn more about the AppKit.NSTokenFieldDelegate_Extensions.GetMenu in the AppKit namespace...NSTokenFieldCellDelegate.GetMenu(NSTokenFieldCell, NSObject) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters tokenFieldCell NSTokenFieldCell representedObject NSObject Returns NSMenu Attributes ExportAttribute Applies to. Learn more about the AppKit.NSTokenFieldCellDelegate.GetMenu in the AppKit namespace...NSTokenFieldCellDelegate_Extensions.GetMenu Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters This INSTokenFieldCellDelegate tokenFieldCell NSTokenFieldCell representedObject NSObject Returns NSMenu Applies to. Learn more about the AppKit.NSTokenFieldCellDelegate_Extensions.GetMenu in the AppKit namespace...NSTokenFieldDelegate.GetMenu(NSTokenField, NSObject) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters tokenField NSTokenField representedObject NSObject Returns NSMenu Attributes ExportAttribute Applies to. Learn more about the AppKit.NSTokenFieldDelegate.GetMenu in the AppKit namespace...FIFinderSync.GetMenu(FIMenuKind) Method Definition Namespace: FinderSync Assembly:Xamarin.Mac.dll Parameters menuKind FIMenuKind Returns NSMenu Attributes ExportAttribute IntroducedAttribute Applies to. Learn more about the FinderSync.FIFinderSync.GetMenu in the FinderSync namespace.. /dotnet/api/findersync.fifindersync.getmenu."
563,inet_ntoa,"Microsoft Build · May 19 – 22, 2025The inet_ntoa function (winsock2.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.The inet_ntoa macro function (wsipv6ok.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.The inet_ntoa function (winsock.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.programming interfaces: Functions gethostbyaddr The gethostbyaddr macro function (wsipv6ok.h) retrieves the host information corresponding to a network address. gethostbyname The gethostbyname macro function (wsipv6ok.h) retrieves host information corresponding to a host name from a host database. inetIn order to use the dwLocalAddr member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed.In order to use the dwLocalPort member, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.In order to use the dwLocalAddr member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed.In order to use the dwLocalPort member, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.Remarks The htons function takes a 16-bit number in host byte order and returns a 16-bit number in network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family).Remarks The htonl function takes a 32-bit number in host byte order and returns a 32-bit number in the network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family).In order to use the dwLocalScopeId member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed.In order to use the dwLocalPort member, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.The ANSI version of this function is inet_pton.(InetPtonA or inet_pton)"
564,GetDesktopWindow,"Microsoft Build · May 19 – 22, 2025The GetDesktopWindow function in Windows is used to retrieve a handle to the desktop window. The desktop window is a system-defined window that covers the entire screen and serves as the base for all windows displayed by applications.To use the GetDesktopWindow function, you typically call it in your application code, and it returns a handle (of type HWND) to the desktop window. This handle can be used in other Windows API functions that require a window handle.Here is a simple example of how you might use it in C++:This function does not take any parameters and returns the handle to the desktop window, which can be useful for various window management tasks.References:The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted. Syntax Return value Type: HWND The return value is a handle to the desktop window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.The desktop window is a system-defined window that paints the background of the screen and serves as the base for all windows displayed by all applications. The desktop window uses a bitmap to paint the background of the screen. ...s a handle to the desktoA system configuration application, such as a Control Panel item, changes the desktop.FindWindow Retrieves a handle to the top-level window whose class name and window name match the specified strings. GetDesktopWindow Returns a handle to the desktop window. GetForegroundWindow Returns a handle to the foreground window (the window with which the user is currently working). GetNextWindow Retrieves a handle to the next or previous.(Unicode) FindWindowW Retrieves a handle to the top-level window whose class name and window ... GetDesktopWindow Retrieves a handle to the desktop window. GetForegroundWindow Retrieves a handle to the foreground window (the window with which the user is currently working). GetShellWindow Retrieves a handle to the Shell's desktop window..CloseWindow Minimizes (but does not destroy) the specified window. (ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. (Unicode) CreateDesktopW Creates a new desktop, associates it with the current window station of the.CWnd::GetActiveWindow Retrieves the active window. CWnd::GetDescendantWindow Searches all descendant windows and returns the window with the specified ID. CWnd::GetDesktopWindow Retrieves the Windows desktop window. CWnd::GetDlgCtrlID If the CWnd is a child window, calling this function returns its ID value. CWnd::GetForegroundWindow Returns a.Remarks An application that maintains its own minimized child windows can use the ArrangeIconicWindows function to arrange icons in a parent window. To retrieve the window handle to the desktop window, use the GetDesktopWindow function. An application sends the WM_MDIICONARRANGE message to the multiple-document interface (MDI) client window to.The function returns the owner window handle to dialog boxes, and the parent window handle to child windows. Because an application can create a dialog box that has no owner, the procedure checks the returned handle and uses the GetDesktopWindow function to retrieve the desktop window handle, if necessary. After calculating the new position, the.GetShe... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-window-l1-1-0 (introduced in Windows 8) See also.New information has been added t... NET Matters Const in C#, Exception Filters, IWin32Window, and More Stephen Toub Welcome to .NET Matters. This new column will delve into the ins and outs of the Microsoft® .NET Framework, answering readers' questions on various topics related to its extensive libraries, languages, and the common language."
565,ExtCreateRegion,"Microsoft Build · May 19 – 22, 2025ExtCreateRegion function (wingdi.h) The ExtCreateRegion function creates a region from the specified region and transformation data. Syntax Parameters [in] lpx A pointer to an XFORM structure that defines the transformation to be performed on the region. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.ExcludeUpdateRgn The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a c... ExtCreatePen The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes. ExtCreateRegion The ExtCreateRegion function creates.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreateRoundRectRgn Creates a re... EqualRgn Checks the two specified regions to determine whether they are identical. ExtCreateRegion Creates a region from the specified region.ExcludeClipRect The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus t... ExtCreatePen The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes. ExtCreateRegion The ExtCreateRegion function creates a region from the.GetRegionData function (wingdi.h) The GetRegionData function fills the specified buffer with data describing a region. Remarks The GetRegionData function is used in conjunction with the ExtCreateRegion function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also CreatePolyPolygonRgn CreatePolygonRgn CreateRectRgn CreateRoundRectRgn.CreateRoundRectRgn function (wingdi.h) The CreateRoundRectRgn function c... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also....e DC CreateEnhMetaFile CloseEnhMetaFile Font CreateFont, CreateFontIndirect DeleteObject Memory DC CreateCompatibleDC DeleteDC Metafile CreateMetaFile DeleteMetaFile Metafile DC CreateMetaFile CloseMetaFile Palette CreatePalette DeleteObject Pen and extended pen CreatePen, CreatePenInd ExtCreatePen DeleteObject Region CombineRgn,....d Horizontal Proportionality Constant Vertical Proportionality Constant Not used Reflection Horizontal Reflection Component Not used Not used Vertical Reflection Component Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.CreatePolygonRgn function (wingdi.h) The CreatePolygonRgn function creates a polygonal region. ... [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also CreatePolyPolygonRgn CreateRectRgn CreateRectRgnIndirect."
566,TransactNamedPipe,"Microsoft Build · May 19 – 22, 2025TransactNamedPipe function (namedpipeapi.h) Combines the functions that write a message to and read a message from the specified named pipe into a single operation. Syntax Parameters [in] hNamedPipe A handle to the named pipe returned by the CreateNamedPipe or CreateFile function. This parameter can also be a handle to an anonymous pipe, as.Transactions on Named Pipes A named pipe transaction is a client/server communication that combines a write operation and a read operation into a single network operation. Processes can use the TransactNamedPipe and CallNamedPipe functions to perfor... The TransactNamedPipe function is most commonly used by a pipe client to write a request message.PeekNamedPipe Copies data from a named o... SetNamedPipeHandleState Sets the read mode and the blocking mode of the specified named pipe. TransactNamedPipe Combines the functions that write a message to and read a message from the specified named pipe into a single network operation. WaitNamedPipe Waits until either a time-out interval elapses or.namedpipeapi.h header This header is used by multiple technologies. If the specified handle is to the client end of a named pipe and if the named p... TransactNamedPipe Combines the functions that write a message to and read a message from the specified named pipe into a single operation. WaitNamedPipeW The WaitNamedPipeW (Unicode) function.Table of contents Exit focus mode Save Table of contents Add Edit... The TransactNamedPipe function can be used with message-type duplex pipes if the pipe handle to the calling process is set to message-read mode. Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. Pipe operations, including pipe clients.GetOverlappedResult function (ioapiset.h) Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device. For a TransactNamedPipe operation, this is the number of bytes that were read from the pipe. Examples For an example that uses GetOverlappedResult, see Testing for the End of a File Requirements.GetOverlappedResultEx function (ioapiset.h) Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device within the specified time-out interval. For a TransactNamedPipe operation, this is the number of bytes that were read from the pipe. Requirements Requirement Value Minimum supported client.Enabling Asynchronous Operation The ReadFile, WriteFile, TransactNamedPipe, and ConnectNamedPipe functions can be performed asynchronously only if you enable overlapped mode for the specified pipe handle and specify a valid pointer to an OVERLAPPED structure. ... ConnectNamedPipeThe ReadFile, WriteFile, TransactNamedPipe, and ConnectNamedPipe.HasOverlappedIoCompleted macro (winbase.h) Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization and Overlapped Input and Output You can perform either synchronous or asynchronous (also called overlapped) I/O operations on files, named pipes, and serial communications devices. The WriteFile, ReadFile,."
567,DdeGetLastError,"Microsoft Build · May 19 – 22, 2025DdeGetData func... The DdeGetLastError function can be used to get the error code, which can be one of the following values: Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include.The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks Any incomplete transactions started before calling DdeDisconnect are immediately abandoned. The XTYP_DISCONNECT transaction is sent to the Dynamic Data Exchange (DDE) callback function of the partner in t... Terminates a conversation.DdeGetLastError function (ddeml.h) Retrieves the most recent error code set by the failure of a Dynamic Data Exchange Management Library (DDEML) function and resets the error code to DMLERR_NO_ERROR. Syntax Parameters [in] idInst Type: DWORD The application instance identifier obtained b... Retrieves the most recent error code set by the failure.DdeDisconnectList function (ddeml.h) Destroys the specified conversation list and terminates all conversations associated with the list. The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks An application can use the DdeDisconnect function to terminate individual conversations in the.The DdeGetLastError function can be used to get the error code, which can be one of the following values: Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include Windows.h) Library.DdeQueryConvInfo function (ddeml.h) Retrieves information about a Dynamic Data Exchange (DDE) transaction and about the conversation in which the transaction takes place. ... The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks An application should not free a string handle referenced by.DdeEnableCallback function (ddeml.h) Enables or disables transactions for a specific conversation or for all conversations currently established by the calling application. The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks An application can disable transactions for a specific.DdeAccessData function (ddeml.h) Provides access to the data in the specified Dynamic Data Exchange (DDE) object. The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks If the hData parameter has not been passed to a Dynamic Data Exchange Management Library (DDEML) function, an application.The DdeGetLastError function can be used to get the error code, which can be one of the following values: Remarks An application must call DdeFreeDataHandle under the following circumstances: To free a DDE object that the application allocated by calling the DdeCreateDataHandle function if the object's data handle was never passed by the.DdeSetUserHandle function (ddeml.h) Associates an ... The DdeGetLastError function can be used to get the error code, which can be one of the following values: Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform."
568,OpenDesktopW,"Microsoft Build · May 19 – 22, 2025OpenDesktopW function (winuser.h) Opens the specified desktop object. Syntax Parameters [in] lpszDesktop The name of the desktop to be opened. Desktop names are case-insensitive. Note The winuser.h header defines OpenDesktop as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any headers. (Unicode) OpenDesktopA Opens the specified desktop object. (ANSI) OpenDesktopW Opens the specified desktop object. (Unicode) OpenInputDesktop Opens the desktop that receives user.CloseDesktop Closes an open handle to a desktop object. CloseWindowStation Closes an open window station handle. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling."
569,EqualRect,"Microsoft Build · May 19 – 22, 2025EqualRect function (winuser.h) The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. Syntax Parameters [in] lprc1 Pointer to a RECT structure that contains the logical coordinates of the first rectangle. [in] lprc2 Pointer to a RECT structure that.An empty rectangle is any rectangle that has zero width, zero height, or both. The IsRectEmpty function determines whether a given rectangle is empty. The EqualRect function determines whether two rectangles are identical that is, whether they have the same coordinates. The InflateRect function increases or decreases the width or height of a.Rectangle Functions The following functions are used with rectangles. Function Description CopyRect Copies the coordinates of one rectangle to another. EqualRect Determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. InflateRect Increases or decreases the width and height.EnumObjects The EnumObjects function enumerates the pens or brushes available for the specified device context (DC). EqualRect The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. EqualRgn The EqualRgn function checks the two specified regions to.winuser.h header This header is used by multiple technologies. The function passes the name of each window station, in turn,... (Unicode) EqualRect The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. EvaluateProximityToPolygon Returns the score.Pass the band and button rectangles to the IntersectRect function. This function will return a RECT structure that corresponds to the visible portion of the button. Pass the button rectangle and the rectangle for the visible portion of the button to the EqualRect function. If EqualRect returns TRUE, the entire button is visible. Repeat steps 3-5.CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::CopyRect Copies the dimensions of a source rectangle to CRect. CRect::DeflateRect Decreases the width and height of CRect. CRect::EqualRect Determines whether CRect is equal to the given rectangle..Examples For ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also EqualRect IsRectEmpty POINT RECT Rectangle Functions.IsRectEmpty function (winuser.h) The Is... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also EqualRect PtInRect RECT Rectangle."
570,TranslateMessage,"Microsoft Build · May 19 – 22, 2025The TranslateMessage function in Windows programming is used to translate virtual-key messages into character messages. When a user presses a key, the system generates virtual-key messages (like WM_KEYDOWN and WM_KEYUP), which contain the virtual-key code but not the character value. The TranslateMessage function processes these virtual-key messages and converts them into character messages (like WM_CHAR), which can then be dispatched to the appropriate window procedure.For an application to correctly handle keyboard input, the message loop must include a call to TranslateMessage before dispatching messages with DispatchMessage. This ensures that character messages are available for processing in the application.References:TranslateMessage function (winuser.h) Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function. Syntax Parameters [in] lpMsg Type: const MSG* A pointer to an MSG structure that contains message.translateMessage Omnichannel for Customer Service offers a suite of capabilities that extend the power of Dynamics 365 Customer Service Enterprise to enable organizations to instantly connect and engage with their customers across digital messaging channels. This method is called for every conversation message exchanged between the customer and.Using Messages and Message Queues The following code examples demonstrate how to perform the following tasks associated with Windows messages and message queues. Creating a Message Loop Examining a Message Que... If your application must obtain character input from the user, include the TranslateMessage function in the loop. TranslateMessage.TranslateMessageEx function Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function. Syntax Parameters lpMsg [in] A pointer to a MSG structure that contains message information retrieved from.Yield Callback Functions Applications can use yield callback functions during streaming capture. (A yield callback function typically consists of a message loop that calls PeekMessage, TranslateMessage, and DispatchMessage.). The capture window calls the yield callback function at least once for every captured video frame, but the exact rate.Symptoms An application using an IME crashes under one of these conditions: A user interface (UI) thread calls the TranslateMessage function as a part of the message loop. Cause An IME included with Windows 10 may call the PeekMessage function when the IME is called by the TranslateMessage function to process a keyboard input. More information The.Translating Character Messages Any thread that receives character input from the user must include the TranslateMessage function in its message loop. In general, a thread's message loop should use the TranslateMessage function to translate every message, not just virtual-key messages. Although TranslateMessage has no effect on other types of.Add a web resource for real-time translation You can use a web resource to implement the logic for enabling real-time translation of messages exchanged in conversations between the customer and the customer service representative (service representative or representative). To add a web resource: Download the sample web resource (webResourceV2.js).getTranslationProvider Omnichannel for Customer Service offers a suite of capabilities that extend the power of Dynamics 365 Customer Service Enterprise to enable organizations to instantly connect and engage with their customers across digital messaging channels. Syntax window.Microsoft.Omnichannel.Transla... More information:.Window Messages (Get Started with Win32 and C++) A GUI application must respond to events from the user and from the operating system. Events from the user include all the ways that someone can interact with your program... Instead, you will pass it directly to two other functions. The TranslateMessage function is related to keyboard input. It."
571,ReadFile,"Microsoft Build · May 19 – 22, 2025The ReadFile function is used to read data from a file. To use ReadFile, you need to have a handle to an open file, which should be opened for reading. The function reads a specified number of bytes from the file at the location indicated by the file pointer. Here's a basic outline of how to use it:Here's a simple example in C++:Remember to handle errors and check if the end of the file has been reached, as reading zero bytes without an error indicates that the end of the file has been reached.References:ReadFile function (fileapi.h) Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device. For a similar function designed solely for asynchronous operation, see ReadFileEx. Syntax Parameters [in] hFile A handle to the device (for example, a file, file.Win32-based applications should use the ReadFile function. Syntax Parameters hFile Identifies the specified file. lpBuffer Pointer to a buffer that contains the data read from the file. uBytes Specifies the number of bytes to be read from the file. Return value The return value indicates the number of bytes actually read from the file. This.IFileSystem.ReadFile(String) Method Definition Namespace: Microsoft.WindowsAzure.Commands.Common Assembly:Microsoft.Azure.PowerShell.Common.dll Assembly:Microsoft.WindowsAzure.Commands.Common.dll Parameters path String Returns String Applies to. Learn more about the Microsoft.WindowsAzure.Commands.Common.IFileSystem.ReadFile in the.MSBuildFileSystemBase.ReadFile(String) Method Definition Namespace: Microsoft.Build.FileSystem Assembly:Microsoft.Build.dll Package:Microsoft.Build v16.11.0 Package:Microsoft.Build v17.13.9 Source:MSBuildFileSystemBase.cs Use this for var sr = new StreamReader(path) Parameters path String Returns TextReader Applies to. Use this for var sr = new.User-mode still image minidrivers can access these kernel-mode drivers by calling CreateFi... ReadFile and WriteFile are used for block data transfers. Specifically, ReadFile is called to obtain image data, and WriteFile is used for sending commands to devices that accept commands as data streams. Before calling ReadFile, Writefile or.Testing for the End of a File The ReadFile function checks for the end-of-file condition (EOF) differently for synchronous and asynchronous read operations. When a synchronous read operation gets to the end of a file, ReadFile returns TRUE and sets the variable pointed to by the lpNumberOfBytesRead parameter to zero. Example code that shows how to.About Communications Resources The file input and output (I/O) functions ( CreateFile, CloseHandle, ReadFile, ReadFileEx, WriteFile, and WriteFileEx) provide the basic interface for opening and closing a communications resource handle and for performing read and write operations. The file input and output (I/O) functions ( CreateFile, CloseHandle,.IFileStagingClient.ReadFile Method Definition Namespace: Microsoft.Hpc.Azure.FileStaging.Client Assembly:Microsoft.Hpc.Azure.FileStaging.Client.dll Returns Stream Attributes FaultContractAttribute OperationContractAttribute Applies to. Learn more about the Microsoft.Hpc.Azure.FileStaging.Client.IFileStagingClient.ReadFile in the.Reading from a Mailslot The process that creates a mailslot can read messages from it by using the mailslot handle in a call to the ReadFile function. The following example calls the ... A mailslot exists until the CloseHandle function is called for all open server handles or until all server processes that own a mailslot handle exit. The process.IFileSystem Interface Definition Namespace: Microsoft.WindowsAzure.Commands.Common Assembly:Microsoft.Azure.PowerShell.Common.dll Assembly:Microsoft.WindowsAzure.Commands.Common.dll Methods ReadFile(String) WriteFile(String, String) Applies to. Learn more about the Microsoft.WindowsAzure.Commands.Common.IFileSystem in the."
572,RegisterClassA,"Microsoft Build · May 19 – 22, 2025RegisterClassA function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Note  The RegisterClass function has been superseded by the RegisterClassEx function. You can still use RegisterClass, however, if you do not need to set the class small icon. Syntax Parameters [in] lpWndClass.... (Unicode) RegisterClassA Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassA) RegisterClassExA Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassExA) RegisterClassExW Registers a window class for subsequent use in.Registering Window Classes A window class is supported by a window procedure. Your application can register a window class by using either RegisterClassA or RegisterClassW. If the application registers the window class using RegisterClassA, the function informs the operating system that the windows of the created class expect messages with text or.Remarks The cha... If the window class was registered with the ANSI version of RegisterClass (RegisterClassA), the character set of the window is ANSI. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.RegisterClassW function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Remarks If you register the window class by using RegisterClassA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character.The function searches the entire screen, not just the calling application's client area. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. You can use this function to specify the content,."
573,WaitForInputIdle,"Microsoft Build · May 19 – 22, 2025WaitForInputIdle function (winuser.h) Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed. If this process is a console application or does not have a message queue, WaitForInputIdle returns immediately. [in] dwMilliseconds The.Process.WaitForInputIdle Method Definition Namespace... Overloads WaitForInputIdle() Causes the Process component to wait indefinitely for the associated process to enter an idle state. WaitForInputIdle(Int32) Causes the Process component to wait the specified number of milliseconds for the associated process to enter an idle state..WindowPattern.WaitForInputIdle(Int32) Method Definition Namespace: System.Windows.Automation Assembly:UIAutomationClient.dll Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds Int32 The amount of time, in milliseconds, to wait for the.IWindowProvider.WaitForInputIdle(Int32) Method Definition Namespace: Microsoft.UI.Xaml.Automation.Provider Edit Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds The amount of time, in milliseconds, to wait for the associated process to become.IWindowProvider.WaitForInputIdle(Int32) Method Definition Namespace: Windows.UI.Xaml.Automation.Provider Edit Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds The amount of time, in milliseconds, to wait for the associated process to become idle..IWindowProvider::WaitForInputIdle method (uiautomationcore.h) Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. Syntax Parameters [in] milliseconds Type: int The amount of time, in milliseconds, to wait for the associated process to become idle. The.IUIAutomationWindowPattern::WaitForInputIdle method (uiautomationclient.h) Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. Syntax Parameters [in] milliseconds Type: int The amount of time, in milliseconds, to wait for the associated process to become idle..IWindowProvider.WaitForInputIdle(Int32) Method Definition Namespace: System.Windows.Automation.Provider Assembly:UIAutomationProvider.dll Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds Int32 The amount of time, in milliseconds, to wait.AppBarAutomationPeer.WaitForInputIdle(Int32) Method Definition Namespace: Microsoft.UI.Xaml.Automation.Peers Edit Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds The amount of time, in milliseconds, to wait for the associated process to become.AppBarAutomationPeer.WaitForInputIdle(Int32) Method Definition Namespace: Windows.UI.Xaml.Automation.Peers Edit Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. Parameters milliseconds The amount of time, in milliseconds, to wait for the associated process to become."
574,GlobalFindAtomA,"Microsoft Build · May 19 – 22, 2025GlobalFindAtomA function (winbase.h) Searches the global atom table for the specified character string and retrieves the global atom associated with that string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated character string fo... Note The winbase.h header defines GlobalFindAtom as an alias that automatically selects the ANSI.AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. GlobalAddAtomA Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. GlobalFindAtomA Searches the global atom table for the specified character string and retrieves the global.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. GlobalAddAtomA Adds a."
575,CoGetClassObject,"Microsoft Build · May 19 – 22, 2025CoGetClassObject function (combaseapi.h) Provides a pointer to an interface on a class object associated with a specified CLSID. CoGetClassObject locates, and if necessary, dynamically loads the executable code required to do this. Call CoGetClassObject directly to create multiple objects through a class object for which there is a CLSID in the.CoGetCancelObject Obtains a pointer to a call control interface, normally ICancelMethodCalls, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread. CoGetClassObject Provides a pointer to an interface on a class object associated with a specified CLSID. CoGetObject Converts a display name.... CoGetCancelObject Obtains a pointer to a call control interface, normally ICancelMethodCalls, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread. CoGetClassObject Provides a pointer to an interface on a class object associated with a specified CLSID. CoGetContextToken Returns a.IClassFactory... This enables instances to be created more quickly. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header unknwnbase.h (include Unknwn.h) See also CoCreateInstance.Locating a Remote Object With the advent of COM for distributed systems, COM uses the basic model for object creation described in COM Class Objects and CLSIDs and adds more than one way to locate an object that might reside on another system in a network, without overburdening the client application. Another important value in the.DllGetClassObject function (combaseapi.h) Retrieves the class object from a DLL object handler or object application. CLAS... Remarks If a call to the CoGetClassObject function finds the class object that is to be loaded in a DLL, CoGetClassObject uses the DLL's exported DllGetClassObject function. Notes to Callers You should not call.Registering a Class at Installati... When a class is registered as in-process, a call to CoGetClassObject to create its class object is automatically passed by COM to the DllGetClassObject function, which the class must implement to give the calling object a pointer to its class object. Classes implemented in executables can specify that COM.IClassFactory interface (unknwn.h) Enables a class of objects to be created. This enables i... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header unknwn.h (include Unknwn.h) See also.Class Factories and Factory Templates [The feature associated with this page, DirectShow, is a legacy feature. This topic describes how to implement a DLL for a DirectShow filter, using the DirectShow Base Classes. Before a client creates an instance of a COM object, it creates an instance of the object's class factory, using a call to the.IClassActivator::GetClassObject method (objidl.h) Retrieves a class object. Syntax Parameters [in] rclsid The CLSID that identifies the class whose class object... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform."
576,QueryPerformanceFrequency,"Microsoft Build · May 19 – 22, 2025QueryPerformanceFrequency is a Windows API function that retrieves the frequency of the high-resolution performance counter, which is used for measuring time intervals with high precision. The frequency returned by QueryPerformanceFrequency is determined during system initialization and remains constant while the system is running.This function is crucial for applications that require precise timing measurements, as it allows developers to calculate the time intervals based on the number of ticks returned by another function, QueryPerformanceCounter (QPC). For example, if QueryPerformanceFrequency returns a frequency of 3,125,000, it indicates that the performance counter ticks at a rate of 3,125,000 ticks per second, allowing developers to derive the tick interval and convert tick counts into time values.It's important to note that the value returned by QueryPerformanceFrequency may not always reflect the actual frequency of the hardware tick generator, especially in certain older versions of Windows or when running under a hypervisor.References:QueryPerformanceFrequency function (profileapi.h) Retrieves the frequency of the performance counter. The frequency of the performance counter is fixed at system boot and is consistent across all processors. Therefore, the frequency need only be queried upon application initialization, and the result can be cached. Syntax Parameters [out].profileapi.h header This header is used by System Services. For more information, see: System Services profileapi.h contains the following programming interfaces: Functions QueryPerformanceCounter Retrieves the current value of the performance counter, which is a high resolution (<1us) time stamp that can be used for time-interval measurements..About timers This topic describes how to create, identify, set, and delete timers. High-resolution timer A counter is a general term used in programming to refer to an incrementing variable. If a high-resolution performance counter exists on the system, you can use the QueryPerformanceFrequency function to express the frequency, in counts per.This article s... When you implement high-resolution timing, take the following steps: Use QueryPerformanceCounter and QueryPerformanceFrequency instead of RDTSC. While QueryPerformanceCounter and QueryPerformanceFrequency typically adjust for multiple processors, bugs in the BIOS or drivers may result in these routines returning different values.Hello, How can I read this in the fastest way under C++, MFC, add new column and save again. VS2017, MFC dialog application, unmanged code| a) QueryPerformanceFrequency -- It is used to calculate the elapsed time for performing a function. -- To Retrieve Current High-resolution performance counter frequency, in counts per second. -- For more.Applications that require greater precision than the interrupt-time count should use a high-resolution timer. Use the QueryPerformanceFrequency function to retrieve the frequency of the high-resolution timer and the QueryPerformanceCounter function to retrieve the counter's value. The QueryInterruptTime, QueryInterruptTimePrecise,.IHttpSysRequestTimingFeature.TryGetTimestamp Method Definition Namespace: Microsoft.AspNetCore.Server.HttpSys Assembly:Microsoft.AspNetCore.Server.HttpSys.dll Package:Mi... Remarks These timestamps were obtained using QueryPerformanceCounter https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter and the....oft.AspNetCore.App.Ref v8.0.0 Package:Microsoft.AspNetCore.App.Ref v9.0.2 Source:IHttpSysRequestTimingFeature.cs Gets all Http.Sys timing timestamps Property Value ReadOnlySpan Remarks These timestamps were obtained using QueryPerformanceCounter https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter a.NtQueryPerformanceCounter function [This function is not supported and should not be used. Use the QueryPerformanceCounter and ... Performance frequency is the frequency of the performance counter in hertz, specifically in counts per second. Requirements Requirement Value DLL Ntdll.dll See also QueryPerformanceCounter QueryPerformanceFrequency..IHttpSysRequestTimingFeature [IHttpSysRequestTimingFeature](https://source.dot.net/#Microsoft.AspNetCore.Server.HttpSys/IHttpSysRequestTimingFeature.cs,3c5dc86dc837b1f4) provides detailed timing information for requests when using the [HTTP.sys server](xref:fundamentals/servers/httpsys) and [In-process hosting with."
577,StringFromCLSID,"Microsoft Build · May 19 – 22, 2025StringFromCLSID function (combaseapi.h) Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings. Syntax Parameters [in] rclsid The CLSID to be converted. [out] lplpsz The address of a pointer variable that receives a pointer to the resulting string. The string that represents rclsid includes.CLSIDFromString function (combaseapi.h) Converts a string generated by the StringFromCLSID function back into the original CLSID. Syntax Parameters [in] lpsz The zero terminated string representation of the CLSID or the ProgID or NULL. [out] pclsid A pointer to the CLSID. Return value This function can return the standard return value.Functions (COM) The following functions are provided by COM. Function Description BindMoniker Locates an object by means of its moniker, activates the object if i... CLSIDFromProgIDEx Triggers automatic installation if the COMClassStore policy is enabled. CLSIDFromString Converts a string generated by the StringFromCLSID function back into the.Administrative Notification Handlers The Microsoft Active Directory Users and Computers MMC snap-in provides a mechanism to enable components to receive notifications when the user deletes, renames, moves, or changes the properties of an object using the snap-in. The handler is registered under the following key: is the string representation of.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference combaseapi.h contains the following programming interfaces: Functions CLSIDFromProgID Looks up a CLSID in the.Registering the Object Creation Extension When an object creation extension DLL in Active Directory Domain Services is created, it must be registered with the Windows registry and Active Directory Domain Services to make COM and the Active Directory administrative MMC snap-ins aware of the extension. Reg... The extension is registered under the.IKnownFolderManager::GetFolderIds method (shobjidl_core.h) Gets an array of all registered known folder IDs. Remarks The calle... You can use StringFromCLSID or StringFromGUID2 to convert the retrieved KNOWNFOLDERID values to strings. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server.Within the key is a string field called ... The following example code shows a function, RegisterSynth, that can be called from DllRegisterServer to register the synthesizer: CLSIDToStr is a locally defined function (not shown in the preceding code example) that converts a CLSID value to a character string. It is similar to the StringFromCLSID.StringFromGUID2 function (combaseapi.h) Converts a globall... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header combaseapi.h (include Objbase.h) Library Ole32.lib DLL Ole32.dll See also.Registering the Context Menu COM Object in a Display Specifier When you use COM to create a context menu extension DLL for an Active Directory directory service, the ex... The extension is registered under the following key. is the string representation of the CLSID as produced by the StringFromCLSID function. Under the key, there is an."
578,GetClipRgn,"Microsoft Build · May 19 – 22, 2025GetClipRgn function (wingdi.h) The GetClipRgn function retrieves a handle identifying the current application-defined clipping region for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] hrgn A handle to an existing region before the function is called. After the function returns, this parameter is a.Clipping Functions The following functions are used with clipping. GetClipBox Retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. GetClipRgn Retrieves a handle identifying the current application-defined clipping region for the specified device context. GetMetaRgn Retrieves.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. (Unicode) GetClipBox The.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windo... (Unicode) GetClipBox The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on.GetRandomRgn function (wingdi.h) The GetRandomRgn function copies the system clipping region of a specified device context to a specific region. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header."
579,ShowCaret,"Microsoft Build · May 19 – 22, 2025ShowCaret function (winuser.h) Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window that owns the caret. If this parameter is NULL, ShowCaret searches the current task for the window that owns.About Carets The system provides one caret per message ... Caret Visibility Caret Blink Time Caret Position Removing a Caret Caret Visibility After the caret is defined, use the ShowCaret function to make the caret visible. To display a solid caret, the system inverts every pixel in the rectangle; to display a gray caret, the system inverts every.Using Carets This section has code samples for the following tasks: Creating and Displaying a Caret Hiding a Caret Destroying a Caret Adjusting the Blink Time Processing Keyboard Input Creating and Displaying a Caret Upon receiving the keyboard focus, the window should create and display the caret. You can then call SetCaretPos to set the current.Carets A caret is a blinking line, block, or bitmap in the client area of a window. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping m... ShowCaret Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.(ANSI) CreateAccel... (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then.SetCaretPos function (winuser.h) Moves the car... Examples For an example, see Creating and Displaying a Caret. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.For an example, see Destroying a Caret Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-caret-l1-1-0 (int....Public Methods Name Description CWnd::accDoDefaultAction Called by the framework to perform the object's default action. CWnd::CreateCaret Creates a new shape for the system caret and gets ownership of the caret. CWnd::CreateControl Create an ActiveX control that will be rep... CWnd::SetWindowText Sets the window text or caption title (if it has.If your application calls HideCaret five times in a row, it must also call ShowCaret five times before the caret is displayed. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include."
580,GetProcessTimes,"Microsoft Build · May 19 – 22, 2025GetProcessTimes function (processthreadsapi.h) Retrieves timing information for the specified process. Syntax Parameters [in] hProcess A handle to the process whose timing information is sought. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and.This function doesn't strictly conform to ISO C, which specifies net CPU time as the return value. To obtain CPU times, use the Win32 GetProcessTimes function. To determine the elapsed time in seconds, divide the value returned by the clock function by the macro CLOCKS_PER_SEC. Given enough time, the value returned by clock can exceed the.GetProcessShutdownParameters Retrieves shutdown parameters for the currently calling process. GetProcessTimes Retrieves timing information about for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. IsWow64Process2 Determines whether the specified.ProcessInformationEvent.ProcessCreationTime Property Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Gets the creation time of the process in UTC format. This value is retrieved from GetProcessTimes. Property Value Int64 Applies to. Gets the creation time of the process in UTC format. This value.ProcessInformationEvent Class Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Describes a ProcessInformationEvent. The ProcessInformationEvent occurs once and describes details about the process be... The ProcessInformationEvent is one of the events in the ProcessChain or ProcessStreamChain..RM_UNIQUE_PROCESS structure (restartmanager.h) Uniquely identifies a process by its PID and the time the process began. ProcessStartTime The creation time of the process. The time is provided as a FILETIME structure that is returned by the lpCreationTime parameter of the GetProcessTimes function. Remarks The RM_UNIQUE_PROCESS structure can be used.About Performance Counters Windows Performance Counters provide a high-level abstraction layer with a consistent interface for collecting various kinds of system data such as processor, memory, and disk usage statistics. System administrators use performance counters to monitor for performance or behavior problems. For lower-overhead access to.processthreadsapi.h header This header is used by multiple technologies. GetProcessShutdownParameters Retrieves the shutdown parameters... GetProcessTimes Retrieves timing information for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run..GetProcessShutdownParameters Retrieves the shutdown parameters for the currently calling process. GetProcessTimes Retrieves timing information for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. GetSystemCpuSetInformation Allows an application to.In my testing environment, from the App constructor, the log is: Entering: 08.05.47.810338 The Applauncher output is: Start Time: 8:5:47.835 As we could see: the former is earlier than the latter. ===================================================================================== The code snippet for the AppLauncher(please note that line 48 is."
581,GetSystemTime,"Microsoft Build · May 19 – 22, 2025The GetSystemTime function retrieves the current system date and time in Coordinated Universal Time (UTC) format. When you call this function, it fills a SYSTEMTIME structure with individual members that represent the month, day, year, weekday, hour, minute, second, and milliseconds. This makes it easy to display the time in a user-friendly format.To use the GetSystemTime function, you typically follow these steps:Here’s a simple example in C++:This code retrieves the current UTC time and prints it in a readable format.References:GetSystemTime function (sysinfoapi.h) Retrieves the current system date and time in Coordinated Universal Time (UTC) format. To retrieve the current system date and time in local time, use the GetLocalTime function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.GetSystemTimes function (processthreadsapi.h) Retrieves system timing information. On a multiprocessor system, the values returned are the sum of the designated times across all processors. Syntax Parameters [out, optional] lpIdleTime A pointer to a FILETIME structure that receives the amount of time that the system has been idle. [out, optional].UTC-based time is loosely defined as the current date and time of day in Greenwich, England. When the system first starts, it sets the sy... To retrieve the system time, use the GetSystemTime function. GetSystemTime copies the time to a SYSTEMTIME structure that contains individual members for month, day, year, weekday, hour, minute, second, and.IXtfConsoleControlClient::GetSystemTime Retrieves the system time from the current development console. Syntax Parameters pSystemTime Type: XTFSYSTEMTIME* A pointer to an XTFSYSTEMTIME structure that receives the system time from the current development console. Remarks This function retrieves the system date and time from the current development.WBEMTime::GetSYSTEMTIME method (wbemtime.h) [The WBEMTime class is part of the WMI Provider Framework which is now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The GetSYSTEMTIME method gets the time as an MFC SYSTEMTIME structure. The.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Time Functions The... Function Description GetSystemTime Retrieves the current system date and time in UTC format. GetSystemTimeAdjustment Determines whether the system is applying periodic time adjustments to its time-of-day clock..DTM_GETSYSTEMTIME message Gets the currently selected time from a date and time picker (DTP) control and places it in a specified SYSTEMTIME structure. You can send this message explicitly or use the DateTime_GetSystemtime macro. Requirements Requirement V... Gets the currently selected time from a date and time picker (DTP) control and places it.DateTime_GetSystemtime macro (commctrl.h) Gets the currently selected time from a date and time picker (DTP) control and places it in a specified SYSTEMTIME structure. You can use this macro, or send the DTM_GETSYSTEMTIME message explicitly. ... Gets the currently selected time from a date and time picker (DTP) control and places it in a specified.XTFSYSTEMTIME Contains system time information for Xbox Tools Framework (XTF) apps. Remarks This structure represents the date and time components of the system time for a development console. The IXtfConsoleControlClient::GetSystemTime function provides a pointer to an XTFSYSTEMTIME structure for the system time of a development console. For more.I will concentrate here on why it's difficult to obtain the system time with a resolution greater than 10 milliseconds. You might think this would be easy with the GetSystemTime API, which returns a SYSTEMTIME structure containing a wMilliseconds field documented in MSDN as storing the current millisecond. But it isn't as simple as it seems. Just."
582,DrawTextExA,"Microsoft Build · May 19 – 22, 2025DrawTextExA function (winuser.h) The DrawTextEx function draws formatted text in the specified rectangle. Syntax Parameters [in] hdc A handle to the device context in which to draw. [in, out] lpchText A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated. If dwDTFormat includes.(Unicode) DrawText The DrawText function draws formatted text in the specified rectangle. (DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth). (DrawTextA) DrawTextExA The.(Unicode) DrawText The DrawText function draws formatted text in the specified rectangle. (DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth). (DrawTextA) DrawTextExA The.Specifying length of text-output string Several of the font and text-output functions have a parameter that specifies the length of the text-output string. A typical example is the cchText parameter of DrawTextEx. Each of these functions has both an ""ANSI"" version and a Unicode version (for example, DrawTextExA and DrawTextExW, respectively). For."
583,IsCharUpperW,"Microsoft Build · May 19 – 22, 2025IsCharUpperW function (winuser.h) Determines whether a character is uppercase. ...r during setup or through ContrSyntax Parameters [in] ch Type: TCHAR The character to be tested. Return value Type: BOOL If the character is uppercase, the return value is nonzero. Remarks Note The winuser.h header defines IsCharUpper as an alias that automatically.(ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase characters. (Unicode) CharUpperW Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place..winuser.h header This header is used by multiple technologies. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. If the operand is a character string, the function c... (ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. (ANSI)."
584,DrawTextA,"Microsoft Build · May 19 – 22, 2025DrawTextA function (winuser.h) The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth). To specify additional formatting options, use the DrawTextEx function. Syntax Parameters [in] hdc A handle to the device.(Unicode) DrawText The DrawText function draws formatted text in the specified rectangle. (DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth). (DrawTextA) DrawTextExA The.... (Unicode) DrawText The DrawText function draws formatted text in the specified rectangle. (DrawText function) DrawTextA The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth). (DrawTextA) DrawTextExA The.So, I am here for help because after debugging, My project looks fine until I received the major error: Exception thrown at 0x00007FFFA2D47199 (d2d1.dll) in gamecuatoi.exe: 0xC0000005: Access violation reading location 0x0000000000000000. The last function to get is &quot;DrawTextA&quot; Here are the codes I used to run my own project, you know. I."
585,GetPixel,"Microsoft Build · May 19 – 22, 2025GetPixel function (wingdi.h) The GetPixel function retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical units, of the pixel to be examined. [in] y The y-coordinate, in logical units, of the pixel to be examined..Bitmap::GetPixel method (gdiplusheaders.h) The Bitmap::GetPixel method gets the color of a specified pixel in this bitmap. Syntax Parameters [in] x Type: INT Integer that specifies the x-coordinate (column) of the pixel. [in] y Type: INT Integer that specifies the y-coordinate (row) of the pixel. [out] color Type: Color* Pointer to a Color object....t32, Method Definition Namespace: System.Drawing Assembly:System.Drawing.Common.dll Assembly:System.Drawing.dll Package:System.Drawing.Common v10.0.0-preview.3.25173.2 Source:Bitmap.cs Source:Bitmap.cs Source:Bitmap.cs Source:Bitmap.cs Source:Bitmap.cs Source:Bitmap.cs Gets the color of the specified pixel inParameters x Int32 The x-coordinate.SKPixmap.GetPixels Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads GetPixels() Returns the memory address of the pixels. GetPixels(Int32, Int32) Returns the memory address of the pixels at (x, y). ...he memory address of thReturns IntPtr Applies to GetPixels(Int32, Int32) Returns the memory address of the pixels at (x, y)..SKBitmap.GetPixels Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads GetPixels(IntPtr) Returns the address of the pixels for this bitmap. GetPixels() Returns the address of the pixels for this bitmap. GetPixels(IntPtr) Returns the address of the pixels for this bitmap. Parameters length IntPtr The length of the pixel buffer.Image.getPixel(Int32, Int32) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Retrieves the ARGB color value of the pixel at the point that is specified by the parameters. Parameters _x Int32 The vertical coordinate of the pixel. _y Int32 The vertical coordinate of the pixel. Returns Int32 An.Bitmap.GetPixel(Int32, Int32) Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Returns the Color at the specified location. Parameters x Int32 The x coordinate (0...width-1) of the pixel to return y Int32 The y coordinate (0...height-1) of the pixel to return Returns Int32 The argb Color at the specified coordinate.SKBitmap.GetPixel(Int32, Int32) Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Returns the color for the pixel at the specified location. Parameters x Int32 The x-cordinate. y Int32 The y-cordinate. Returns SKColor Alpha only color types return black with the appropriate alpha set. ...re out of bounds, if the bitmap does not have.Bitmap.GetPixels(Int32[], Int32, Int32, Int32, Int32, Int32, Int32) Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Returns in pixels[] a copy of the data in the bitmap. Parameters pixels Int32[] The array to receive the bitmap's colors offset Int32 The first index to write into pixels[] stride Int32 The number of entries.SKCodec.GetPixels Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads GetPixels(SKImageInfo, IntPtr, Int32, SKCodecOptions, IntPtr, Int32) Obsolete. Decode the bitmap into the specified memory block. GetPixels(SKImageInfo, IntPtr, Int32, SKCodecOptions, SKColorTable, Int32) Obsolete. Decode the bitmap into the specified memory."
586,SetMenu,"Microsoft Build · May 19 – 22, 2025SetMenu function (winuser.h) Assigns a new menu to the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to the window to which the menu is to be assigned. [in, optional] hMenu Type: HMENU A handle to the new menu. A menu can be assigned to any window that is not a child window. The SetMenu function replaces the previous menu, if.IMenuEditorService.SetMenu(Menu) Method Definition Namespace: System.Windows.Forms.Design Assembly:System.Design.dll Assemblies:System.Design.dll, System.Windows.Forms.Design.dll Sets the specified menu visible on the form. Parameters menu Menu The Menu to render. Remarks The menu is painted at the top of a form's window frame and can be directly.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h ve... SetMenu Assigns a new menu to the specified window. SetMenuDefaultItem Sets the default menu item for the specified menu. SetMenuInfo Sets information for a specified menu..IOleInPlaceFrame.SetMenu(IntPtr, IntPtr, IntPtr) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters hmenuShared HOLEMENU hwndActiveObject Remarks For information on the COM.IShellMenu::SetMenu method (shobjidl_core.h) Appends a static menu to the menu band. Syntax Parameters [in] hmenu Type: HMENU The handle of the static menu that is to be appended. SMSET_BOTTOM Attach the menu to the bottom of the parent menu. Requirements Requirement Value Minimum supported client Windows XP with SP2 [desktop apps only] Minimum.NSSegmentedControl.SetMenu(NSMenu, nint) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters menu NSMenu segment System.System.IntPtr Attributes ExportAttribute Applies to. Learn more about the AppKit.NSSegmentedControl.SetMenu in the AppKit namespace.. /dotnet/api/appkit.nssegmentedcontrol.setmenu.NSSegmentedCell.SetMenu(NSMenu, nint) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters menu NSMenu forSegment System.System.IntPtr Attributes ExportAttribute Applies to. Learn more about the AppKit.NSSegmentedCell.SetMenu in the AppKit namespace.. /dotnet/api/appkit.nssegmentedcell.setmenu.IOleInPlaceFrame::SetMenu method (oleidl.h) Adds a composite menu to the window frame containing the object being activated in place. Syntax Parameters [in] hmenuShared A handle to the composite menu constructed by calls to IOleInPlaceFrame::InsertMenus and the InsertMenu function. [in] holemenu A handle to the menu descript... Remarks Notes to.IMenuEditorService Interface Definition Namespace: System.Windows.Forms.Design Assembly:System.Design.dll Assemblies:System.Design.dll, System.Windows.Forms.Design.dll Provides access to the menu editing service. Remarks Most of the implementation of this service is provided by the host environment... MessageFilter(Message) Allows the editor.CMenu Class An encapsulation of the Windows HMENU. ...ns CMenu objectCMenu::SetDefaultItem Sets the default menu item for the specified menu. Next, call CWnd::SetMenu to set the menu to a window, followed immediately by a call to the CMenu object's Detach member function. The CWnd::SetMenu member function sets the window's menu to the new menu,."
587,DrawEdge,"Microsoft Build · May 19 – 22, 2025VisualStyleRenderer.DrawEdge Method Definition Namespace: S... Parameters dc IDeviceContext The IDeviceContext used to draw the edges. bounds Rectangle The Rectangle whose bounds define the edges to draw. edges Edges A bitwise combination of the Edges values. style EdgeStyle A bitwise combination of the EdgeStyle values. effects EdgeEffects A.DrawEdge function (winuser.h) The DrawEdge function draws one or more edges of rectangle. Syntax Parameters [in] hdc A handle to the device context. [in, out] qrc A pointer to a RECT structure that contains the logical coordinates of the rectangle. [in] edge The type of inner and outer edges to draw. Requirements Requirement Value Minimum.DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage. DrawEdge The DrawEdge function draws one or more edges of rectangle. DrawFrameControl The DrawFrameControl function draws a frame control of the specified type and style. DrawIcon Draws an.CDC::AddMetaFileComment Copies the comment from a buffer into a specified enhanced-format metafile. CDC::BitBlt Copies a bitmap from a specified device context. CDC::DrawDragRect Erases and. CDC::DrawEdge Draws the edges of a rectangle. CDC::DrawEscape Accesses drawing capabilities of a video display that aren't directly available through the.DrawAnimatedRects Animates the caption of a window to indicate the opening of a... DrawCaption The DrawCaption function draws a window caption. DrawEdge The DrawEdge function draws one or more edges of rectangle. DrawEscape The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window fo... DrawCaption Draws a window caption. DrawEdge Draws one or more edges of rectangle. DrawFocusRect Draws a rectangle in the style that indicates the rectangle has the focus. WindowFromDC Returns a handle.Edges Enum Definition Namespace: System.Windows.Forms.VisualStyles Assembly:System.Windows.Forms.dll Source:Edges.cs Source:Edges.cs Source:Edges.cs Specifies which edges of a visual style element to draw. This enumeration supports a bitwise combination... Diagonal 16 A diagonal border. Remarks The Edges values are used as argument values in the.Static Control Styles To create a static control using the CreateWindow or CreateWindowEx function, specify the STATIC class, appropriate window style constants, and a combination of the following static control styles. For more information, see the DrawEdge function. SS_ETCHEDHORZ Draws the top and bottom edges of the static control using the.VisualStyleRenderer Class Definition Namespace: System.Windows.Forms.VisualStyles Assembly:System.Windows.Forms.dll Source:VisualStyleRenderer. DrawBackground(IDeviceContext, Rectangle) Draws the background image of the current visual style element within the specified bounding rectangleDrawEdge(IDeviceContext, Rectangle, Edges, EdgeStyle,.EdgeStyle Enum Definition Namespace: System.Windows.Forms.VisualStyles Assembly:System.Windows.Forms.dll Source:EdgeStyle.cs Source:EdgeStyle.cs Source:EdgeStyle.cs Specifies the styles that can be applied to the edges of a visual style element. Sunken... Remarks The EdgeStyle values are used as argument values in the VisualStyleRenderer.DrawEdge."
588,FindAtomW,"Microsoft Build · May 19 – 22, 2025FindAtomW function (winbase.h) Searches the local atom table for the specified character string and retrieves the atom associated with that string. Syntax Parameters [in] lpString Type: LPCTSTR The character string for which to search. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. Searches the.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the lo... (ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an.(ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) FindActCtxSectionStringW The FindActCtxSectionString function retrieves information on a specific string i... (ANSI) FindAtomW Searches the local atom table for the specified character string and retrieves the atom."
589,StartPage,"Microsoft Build · May 19 – 22, 2025StartPage Class Definition Namespace: System.Web.WebPages Assembly:System.Web.WebPages.dll Package:Microsoft.AspNet.WebPages v3.2.6 Provides methods and properties that are used to render start pages that use the Razor view engine. Inheritance Object WebPageExecutingBase WebPageRenderingBase StartPage Derived System.Web.Mvc.ViewStartPage.StartPage StartPage specifies a tabbed browsing start page. If you set StartPages, and do not set Home_Page, then the default MSN home page will appear as the first home page. StartPageUrl Specifies the URL of a start page. Valid Configuration Passes specialize Parent Hierarchy Microsoft-Windows-IE-InternetExplorer | StartPages | StartPage Applies.WebSiteProperties.StartPage Property Definition Namespace: VsWebSite Assembly:VsWebSite.Interop.dll Package:VsWebSite.Interop v17.10.40170 Gets or sets the name of the page to use when starting the Web site. Property Value String The name of the starting page for the Web site. Attributes DispIdAttribute Applies to. Gets or sets the name of the.WizardFramework.StartPage Property Definition Namespace: Microsoft.SqlServer.Management.SqlWizardFramework Assembly:Microsoft.SqlServer.Management.SqlWizardFramework.dll Gets or sets the start page. Property Value Page A Page object that represents the start page. Attributes BrowsableAttribute Applies to. Gets or sets the start page. ..StartPage Constructor Definition Namespace: System.Web.WebPages Assembly:System.Web.WebPages.dll Package:Microsoft.AspNet.WebPages v3.2.6 Initializes a new instance of the StartPage class. Applies to. Initializes a new instance of the StartPage class. . /dotnet/api/system.web.webpages.startpage.-ctor.VisWebPageSettings.StartPage property Specifies the page number of the first page in the range when you save a range of document pages as a webpage. The StartPage property value corresponds to the value in the From box on the General tab of the Save As Web Page dialog box (BackstageButton tab > Save As > Save as type list > Web Page (*.htm;*.html).CSharpProjectConfigurationProperties5.StartPage Property Definition Namespace: VSLangProj110 Assembly:VSLangProj110.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Property Value String Attributes DispIdAttribute Applies to. Learn more about the.ToolWindowGuids80.StartPage Field Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Inter... Field Value String Remarks The GUID for this tool window is: This tool window can be displayed by selecting Start Page from the View menu. This tool window.VBProjectConfigurationProperties5.StartPage Property Definition Namespace: VSLangProj110 Assembly:VSLangProj110.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Property Value String Attributes DispIdAttribute Applies to. Learn more about the.AdditionalInfo.StartPage Property Definition Namespace: Microsoft.ReportingServices.Diagnostics.Internal Assemblies:Microsoft.ReportingServices.Diagnostics.dll, Microsoft.ReportingServices.SharePoint.UI.WebParts.dll Gets or sets the start page. Property Value String The start page. Applies to. Gets or sets the start page. .."
590,OleRegGetUserType,"Microsoft Build · May 19 – 22, 2025OleRegGetUserType function (ole2.h) Gets the user type of the specified class from the registry. Developers of custom DLL object applications use this function to emulate the behavior of the OLE default handler. The OleRegGetUserType function and its sibling functions, OleRegGetMiscStatus, OleRegEnumFormatEtc, and OleRegEnumVerbs, provide a way.OleRegEnumFormatEtc Creates an enumeratio... OleRegEnumVerbs Supplies an enumeration of the registered verbs for the specified class. OleRegGetMiscStatus Returns miscellaneous information about the presentation and behaviors supported by the specified CLSID from the registry. OleRegGetUserType Gets the user type of the specified class from the.OleGetIconOfFile Returns a handle to a metafile containing ... OleIconToCursor Converts an icon to a cursor. OleRegGetMiscStatus Returns miscellaneous information about the presentation and behaviors supported by the specified CLSID from the registry. OleRegGetUserType Gets the user type of the specified class from the registry. OleSetAutoConvert.Unknown User Types You can ease product localization by adding the following registry key: HKEY_LOCAL_MACHINES\SOFTWARE\Microsoft\OLE2\UnknownUserType = usertype This key allows functions to return a specified string rather than a default value of ""Unknown"", enabling localizers to specify a user type of a different language. The COM default.Shell Provides Windows 3.1 shell printing and File Open information. Be different from the class name of any OLE 1 application, including the OLE 1 version of the same application, if there is one. Because the ProgID should not appear in the user interface, you can obtain a displayable name by calling IOleObject::GetUserType. Also, see.You can use CLSIDFromProgID and ProgIDFromCLSID to convert between these two representations. You can use IOleObject::GetUserType or OleRegGetUserType to change the identifier to a displayable string. If a custom handler is not used, the entry should be set to OLE32.DLL, as shown in the following example: Related topics CLSIDFromProgID.USER... USERCLASSTYPE_APPNAMEValue: 3The name of the application servicing the class and is used in the result text in dialog boxes. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header oleidl.h See also IOleObject::GetUserType.OleRegEnumVerbs function (ole2.h) Supplies an enumeration of the registered verbs for the specified class. The OleRegEnumVerbs function and its sibling functions, OleRegGetUserType, OleRegGetMiscStatus, and OleRegEnumFormatEtc, provide a way for developers of custom DLL object applications to emulate the behavior of OLE's default object handler in.IOleObject::GetUserType method (oleidl.h) Retrieves the user-type name of an object for display in user-interface elements such as menus, list boxes, and dialog boxes. Remarks Containers call IOleObject::GetUserType in order t... You can call the OLE helper function OleRegGetUserType to return the appropriate user type. Retrieves the user-type.OleRegEnumFormatEtc function (ole2.h) Creates an enumeration object that can be used to enumerate data formats that an OLE object server has registered in the system registry. The OleRegEnumFormatEtc function and its sibling functions, OleRegGetUserType, OleRegGetMiscStatus, and OleRegEnumVerbs, provide a way for developers of custom DLL object."
591,GetSystemInfo,"Microsoft Build · May 19 – 22, 2025To use the GetSystemInfo function in your application, you need to include the appropriate headers and call the function to retrieve system information. The GetSystemInfo function provides details such as the OEM identifier, processor type, page size, and more. Here is a basic example of how you can implement it in your code:Make sure to link against the necessary libraries when compiling your application.References:GetSystemInfo function (sysinfoapi.h) Retrieves information about the current system. To retrieve accurate information for an application running on WOW64, call the GetNativeSystemInfo function. Syntax Parameters [out] lpSystemInfo A pointer to a SYSTEM_INFO structure that receives the information. Return value None Requirements Requirement Value.Getting Hardware Information The following example uses the GetSystemInfo function to obtain hardware information such as the OEM identifier, processor type, page size, and so on. The example displays the information in the console. The following example uses the GetSystemInfo function to obtain hardware information such as the OEM identifier,.MacNativeMethods.GetSystemInfo(MacNativeMethods+SystemInfo) Method Definition Namespace: Microsoft.VisualStudio.Utilities.Internal Assembly:Microsoft.VisualStudio.Utilities.Internal.dll Package:Microsoft.VisualStudio.Utilities.Internal v16.3.90 Parameters info MacNativeMethods.SystemInfo Applies to. Learn more about the.Hardware Configuration The hardware configuration functions retrieve information such as processor, hardware profile, and keyboard information. The GetSystemInfo function retrieves processor and memory information, such as the page size, original equipment manufacturer (OEM) identifier, number and type of processors, application address range, and.MacNativeMethods Class Definition Namespace: Microsoft.VisualStudio.Utilities.Internal Assembly:Microsoft.VisualStudio.Utilities.Internal.dll Package:Microsoft.VisualStudio.Utilities.Internal v16.3.90 Class containing all PInvoke definitions we use in the Telemetry Library that are used on macOS. Inheritance Object MacNativeMethods Methods.System Information Functions The following functions are used to retrieve or set system information. Function Description CeipIsOptedIn Checks whether the user has opted in for SQM data collection as part of the Customer Experience Improvement Program (CEIP). GetSystemInfo Retrieves information about the current system. GetSystemRegistryQuota.GetNativeSystemInfo function (sysinfoapi.h) Retrieves information about the current system to an application running under WOW64. If the function is called from a 64-bit application, it is equivalent to the GetSystemInfo function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.Therefore, if you must map a file to the same address in multiple processes, the processes should negotiate an appropriate address: The lp... To obtain the system's memory allocation granularity, use the GetSystemInfo function, which fills in the members of a SYSTEM_INFO structure. An application can create multiple file views from the same file.ZwQuerySystemInformation function [ZwQuerySystemInformation is no longer available for use as of Windows 8. Instead, use the alternate functions listed in this topic.]. Use the GetSystemInfo function instead. SystemPerformanceInfor... Remarks The ZwQuerySystemInformation function and the structures that it returns are internal to the operating.Working with Pages To determine the size of a page on the current computer, use the GetSystemInfo function. The VirtualQuery and VirtualQueryEx functions return information about a region of consecutive pages beginning at a specified address in the address space of a process. Changing the protection is useful to debuggers in accessing the memory."
592,EnumFontFamiliesW,"Microsoft Build · May 19 – 22, 2025EnumFontFamiliesW function (wingdi.h) The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the EnumFontFamiliesEx function. Syntax Parameter... The EnumFontFamilies.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the fol... EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a.EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. ...act specified by the LOGFONT structure(ANSI) EnumFontFamiliesExW The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT."
593,DefWindowProcA,"Microsoft Build · May 19 – 22, 2025DefWindowProcA function (winuser.h) Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure. Syntax Parameters [in] hWnd Type: HWND A handle.DefRawInputProc function (winuser.h) Unlike DefWindowProcA and DefWindowProcW, this function doesn't do any processing. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.DefFrameProcA Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. (Unicode) DefMDIChildProcA Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. (Unicode).CallMsgFilterA Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. A hook procedure can call this function either before or after processing the hook information. CallWindowProcA Passes message information to the specified window procedure. (ANSI) CallWindowProcW Passes."
594,LineTo,"Microsoft Build · May 19 – 22, 2025LineTo function (wingdi.h) The LineTo function draws a line from the current position up to, but not including, the specified point. Syntax Parameters [in] hdc Handle to a device context. [in] x Specifies the x-coordinate, in logical units, of the line's ending point. [in] y Specifies the y-coordinate, in logical units, of the line's ending point..2.4.2.5 LineTo The LineTo structure is a Row_Type element that specifies a line segment in a geometric path. The Cell_Type child elements of this structure MUST be a value from the following table. Cell_Type element Meaning X Specifies the x-coordinate of the ending vertex of the line segment. Y Specifies the y... The LineTo structure is a.SKPath.LineTo Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads LineTo(Single, Single) Add a line from the last point to the specified point (x, y). LineTo(SKPoint) Add a line from the last point to the specified point (x, y). LineTo(Single, Single) Add a line from the last point to the specified point (x, y). ...ngle The....able, Nullable) Add a new point in the current line figure LineTo(Double, Double) Add a new point in the current line figure LineTo(Double, Double, Nullable, Nullable) Add a new po the current line figure Parameters x Double The X value y Double The Y value z Nullable The Z value m Nullable The M value Returns GeometryFactory The current.....OpenXml v2.16.0 Package:DocumentFormat.OpenXml v2.17.1 Package:DocumentFormat.OpenXml v2.18.0 Package:DocumentFormat.OpenXml v2.19.0 Package:DocumentFormat.OpenXml v2.20.0 Package:DocumentFormat.OpenXml v2.7.1 Package:DocumentFormat.OpenXml v2.7.2 Package:DocumentFormat.OpenXml v2.8.0 Package:DocumentFormat.OpenXml v2.8.1.2.2.2.2.1.1.2.11 LineTo (LINETO_ORDER) The LineTo Primary Drawing Order encodes a single line drawing order that is restricted to solid color lines, one pixel wide. Encoding order number: 9 (0x09) Negotiation order number: 8 (0x08) Number of fields: 10 Number of field encoding bytes: 2 Maximum encoded fie... The LineTo Primary Drawing Order.PathF.LineTo Method Definition Namespace: Microsoft.Maui.Graphics Assembly:Microsoft.Maui.Graphics.dll Overloads LineTo(PointF) LineTo(Single, Single) LineTo(PointF) Source:PathF.cs Source:PathF.cs Source:PathF.cs Parameters point PointF Returns PathF Applies to LineTo(Single, Single) Source:PathF.cs Source:PathF.cs Source:PathF.cs Parameters x.StreamGeometryContext.LineTo(Point, Boolean, Boolean) Method Definition Namespace: System.Windows.Media Assembly:PresentationCore.dll Draws a straight line to the specified Point. Parameters point Point The destination point for the end of the line. isStroked Boolean true to make the segment stroked when a Pen is used to render the segment;....Package:DocumentFormat.OpenXml v2.16.0 Package:DocumentFormat.OpenXml v2.17.1 Package:DocumentFormat.OpenXml v2.18.0 Package:DocumentFormat.OpenXml v2.19.0 Package:DocumentFormat.OpenXml v2.20.0 Package:DocumentFormat.OpenXml v2.7.1 Package:DocumentFormat.OpenXml v2.7.2 Package:DocumentFormat.OpenXml v2.8.0 Package:DocumentFormat.OpenXml v2.8.1.... LineTo(Double, Double) Add a new point in the current line figure LineTo(Double, Double, Nullable, Nullable) Add a new point in the current line figure Parameters latitude Double The latitude value longitude Double The longitude value z Nullable The Z value m Nullable The M Value Returns GeographyFactory The current instance of."
595,SetBkColor,"Microsoft Build · May 19 – 22, 2025SetBkColor function (wingdi.h) The SetBkColor function sets the current background color to the specified color value, or to the nearest physical color if the device cannot represent the specified color value. Syntax Parameters [in] hdc A handle to the device context. [in] color The new background color. To make a COLORREF value, use the RGB.Pager_SetBkColor macro (commctrl.h) Sets the current background color for the pager control. You can use this macro or send the PGM_SETBKCOLOR message explicitly. Syntax Parameters hwnd Type: HWND Handle to the pager control. clr Type: COLORREF COLORREF value that contains the new background color of the pager control. ...n value Type: COLORREF.LVM_SETBKCOLOR message Sets the background color of a list-view control. You can send this message explicitly or by using the ListView_SetBkColor macro. Parameters wParam Must be zero. lParam Background color to set or the CLR_NONE value for no background color. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps.IImageList::SetBkColor method (commoncontrols.h) Sets the background color for an image list. This method only functions if you add an icon to the image list or use the IImageList::AddMasked method to add a black and white bitmap. Syntax Parameters [in] clrBk Type: COLORREF The background color to set. If this parameter is set to CLR_NONE, then.PGM_SETBKCOLOR message Sets the current background color for the pager control. You can send this message explicitly or use the Pager_SetBkColor macro. Parameters wParam Must be zero. lParam COLORREF value that contains the new background color of the pager control. Return value Returns a COLORREF value that contains the previous background color..Text-Formatting Attributes An application can use six funct... Text and Background Color Applications can use the SetTextColor function to set the color of text drawn in the client-area of their windows, as well as the color of text drawn on a color printer. An application can use the SetBkColor function to set the color that appears behind each.SB_SETBKCOLOR message Sets the background color in a status bar. Parameters wParam Must be zero. lParam COLORREF value that specifies the new background color. Specify the CLR_DEFAULT value to cause the status bar to use its default background color. Return value Returns the previous background color, or CLR_DEFAULT if the background color is the.TVM_SETBKCOLOR message Sets the background color of the control. You can send this message explicitly or by using the TreeView_SetBkColor macro. Parameters wParam Must be zero. lParam COLORREF value that contains the new background color. If this value is -1, the control will revert to using the system color for the background color. Return value.Animation Control Styles This section lists the window styles used with animation controls. Constant Description ACS_AUTOPLAY Starts playing the animation as soon as the AVI clip is opened. Note: Comctl32.dll version 6 is not redistributable. To... The control sends a WM_CTLCOLORSTATIC message to its parent. Use SetBkColor to set the background.TreeView_SetBkColor macro (commctrl.h) Sets the background color of the control. You can use this macro or send the TVM_SETBKCOLOR message explicitly. Syntax Parameters hwnd Type: HWND Handle to a tree-view control. clr Type: COLORREF COLORREF value that contains the new background color. If this argument is -1, the control will revert to using."
596,IsChild,"Microsoft Build · May 19 – 22, 2025IsChild function (winuser.h) Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if that parent window is in the chain of parent windows; the chain of parent windows leads from the original overlapped or pop-up window to the child.ICorDebugNativeFrame2::IsChild Method Determines whether the current frame is a child frame. Exceptions Remarks The IsChild method returns true if the frame object on which you call the method is a child of another frame. Header: CorDebug.idl, CorDebug.h Library: CorGuids.lib .NET Framework Versions: Available since 4 See also.GetWindowThreadProcessId Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window. IsChild Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if.Activity.IsChild Property Definition Namespace: Android.App Assembly:Mono.Android.dll Whether this is a child Activity of an ActivityGroup. ActivityGroup is deprecated.Java documentation for android.app.Activity.isChild().Portions of this page are modifications based on work created and shared by the Android Open Source Project and used according.InSendMessageEx Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process). InternalGetWindowText Copies the text of the specified window's title bar (if it has one) into a buffer. IsChild Determines whether a window is a child window or descendant window.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a CWnd object. CWnd::Invalidat... CWnd::InvokeHelper Invokes an ActiveX control method or property. CWnd::IsChild Indicates whether CWnd is a child window or other.ICorDebugNativeFrame2 Interface Provides methods that test for child and parent frame relationships. Methods Method Description IsChild Method Determines whether the current frame is a child frame. IsMatchingParentFrame Method Determines whether the specified frame is the parent of the current frame. Header: CorDebug.idl, CorDebug.h Library:.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Window Features This overview discusses features of windows such as window types, states, size, and position. In this chain of windows, each child window is called a desce... An application uses the IsChild function to discover whether a.CWindow::InvalidateRgn Invalidates the client area within the specified region. CWindow::IsChild Determines whether the specified window is a child window. CWindow::IsDialogMessage Determines whether a message is intended for the specified dialog box. Specifies a void return type, while the InvalidateRgn Win32 function always returns TRUE..(Inherited from Activity) IsChangingConfigurations Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. (Inherited from Activity) IsChild Whether this is a child Activity of an ActivityGroup. (Inherited from Activity) IsDestroyed Returns true if the final #onDestroy() call has."
597,LocalSize,"Microsoft Build · May 19 – 22, 2025LocalSize function (winbase.h) Retrieves the current size of the specified local memory object, in bytes. This handle is returned by the LocalAlloc, LocalReAlloc, or LocalHandle function. Return value If the function succeeds, the return value is the size of the specified local memory object, in bytes. Requirements Requirement Value Minimum.TransformExtensions.TransformSize(Transform, Vector3) Method Definition Namespace: Microsoft.MixedReality.Toolkit Assembly:Microsoft.MixedReality.Toolkit.dll Transforms the size from local to world. Parameters transform UnityEngine.Transform The transform. localSize UnityEngine.Vector3 The local size. Returns UnityEngine.Vector3 World size..TransformExtensions.TransformSize(Transform, Vector3) Method Definition Namespace: MixedReality.Toolkit Assembly:MixedReality.Toolkit.Core.dll Transforms the size from local to world. Parameters transform UnityEngine.Transform The transform. localSize UnityEngine.Vector3 The local size. Returns UnityEngine.Vector3 World size. Applies to..To determine the actual number of bytes allocated, use the GlobalSize or LocalSize function. If the amount allocated is greater than the amount requested, the process can use the entire amount. The GlobalReAlloc and LocalReAlloc functions change the size or the attributes of a memory object allocated by GlobalAlloc and LocalAlloc. The global and.DML_LOCAL_RESPONSE_NORMALIZATION_GRAD_OPERATOR_DESC structure (directml.h) Computes backpropagation gradients for local response normalization. LocalSize Type: UINT The maximum number of elements to sum over per dimension (the local region is clipped so that all elements are within bounds). If CrossChannel is TRUE, then this is the width and.DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC structure (directml.h) Performs a local response normalization (LRN) function on the input. CrossChannel Type: BOOL TRUE if the LRN la... LocalSize Type: UINT The number of elements to sum over per dimension: Width, Height, and optionally Channel (if CrossChannel is set). This value must be at least.HasOverlappedIoCompleted Provides a high performance test operation that can be used to po... InitAtomTable Initializes the local atom table and sets the number of hash buckets to the specified size. InitializeContext Initializes a CONTEXT structure inside a buffer with the necessary size and alignment. LocalReAlloc Changes the size or the.LocalAlloc function (winbase.h) Allocates the specified number of bytes from the heap. To determine the actual number o... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h).CLocalHeap Class This class implements IAtlMemMgr using the Win32 local heap functions. Important This class and its members cannot be used in applications that execute in the Windows Runtime. Remarks Implemented using LocalFree. CLocalHeap::GetSize Call this method to get the allocated size of a memory block allocated by this memory manager..Memory Management Functions General memory functions Data execution prevention functions File mapping functions AWE functions Heap functions Virtual memory functions Global and local functions Bad memory functions Enclave functions ATL thunk functions Obsolete functions General memory functions Function Description AddSecureMemoryCacheCallback."
598,WriteFile,"Microsoft Build · May 19 – 22, 2025The WriteFile function is used in programming to write data to a file. To use WriteFile, you need to follow these steps:The WriteFile function does not format the data; it writes it exactly as specified.References:WriteFile function (fileapi.h) Writes data to the specified file or input/output (I/O) device. For a similar function designed solely for asynchronous operation, see WriteFileEx. Syntax Parameters [in] hFile A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket,.HttpResponseWrapper.WriteFi... Overloads WriteFile(IntPtr, Int64, Int64) Writes the specified file to the HTTP response output stream. WriteFile(String, Int64, Int64) Writes the specified file to the HTTP response output stream. WriteFile(String) Writes the contents of the specified file to the HTTP response output stream as a file block.....to the HTTP response output Overloads WriteFile(IntPtr, Int64, Int64) Writes the specified file to the HTTP response output stream. WriteFile(String, Int64, Int64) Writes the specified file to the HTTP response output stream. WriteFile(String) Writes the contents of the specified file to the HTTP response output stream as a file block..HttpResponse.WriteFile Method Definition Namespace: System.Web Assembly:System.Web.dll Writes the specified file directly to an HTTP response output stream. WriteFile(String, Int64, Int64) Writes the specified file directly to an HTTP response output stream. WriteFile(String) Writes the contents of the specified file directly to an HTTP response....mmands.Common.Authentication Assembly:Microsoft.Azure.PowerShell.Authentication.Abstractions.dll Assembly:Microsoft.Azure.Commands.Common.Authentication.Abstractions.dll Ove WriteFile(String, Byte[]) WriteFile(String, String) WriteFile(String, String, Encoding) WriteFile(String, Byte[]) Parameters path String contents Byte[] Applies to.FileResult.WriteFile(HttpResponseBase) Method Definition Namespace: System.Web.Mvc Assembly:System.Web.Mvc.dll Package:Microsoft.AspNet.Mvc v5.2.6 Writes the file to the response. Parameters response HttpResponseBase The response. Applies to. Writes the file to the response. . /dotnet/api/system.web.mvc.fileresult.writefile....rosoft.Azure.Commands.Common.Authentication.dll Ove WriteFile(String, Byte[]) WriteFile(String, String) WriteFile(String, String, Encoding) WriteFile(String, Byte[]) Parameters path String contents Byte[] Implements WriteFile(String, Byte[]) Applies to WriteFile(String, String) Parameters path String contents String Implements WriteFile(String,.IFileSystem.WriteFile(String, String) Method Definition Namespace: Microsoft.WindowsAzure.Commands.Common Assembly:Microsoft.Azure.PowerShell.Common.dll Assembly:Microsoft.WindowsAzure.Commands.Common.dll Parameters path String contents String Applies to. Learn more about the Microsoft.WindowsAzure.Commands.Common.IFileSystem.WriteFile in the.FileContentResult.WriteFile(HttpResponseBase) Method Definition Namespace: System.Web.Mvc Assembly:System.Web.Mvc.dll Package:Microsoft.AspNet.Mvc v5.2.6 Writes the file content to the response. Parameters response HttpResponseBase The response. Applies to. Writes the file content to the response. .....Commands.Common.Authentication.Abstractio Overloads WriteFile(String, Byte[]) WriteFile(String, String) WriteFile(String, String, Encoding) WriteFile(String, Byte[]) Parameters path String contents Byte[] Implements WriteFile(String, Byte[]) Applies to WriteFile(String, String) Parameters path String contents String Implements WriteFile(String,."
599,VirtualQueryEx,"Microsoft Build · May 19 – 22, 2025VirtualQueryEx function (memoryapi.h) Retrieves information about a range of pages within the virtual address space of a specified process. Remarks VirtualQueryEx provides information about a region of consecutive pages beginning at a specified address that share the following attributes: The state of all pages is the same (MEM_COMMIT,.You can retrieve an extended error ... You can read the memory in a specific process into a buffer by using the Toolhelp32ReadProcessMemory function (or the VirtualQueryEx function). Note The contents of the th32ProcessID and th32ParentProcessID members of PROCESSENTRY32 are process identifiers and can be used by any functions that require a.VirtualQuery function (memoryapi.h) Retrieves information about a range of pages in the virtual address space of the calling process. To retrieve information about a range of pages in the address space of another process, use the VirtualQueryEx function. Syntax Parameters [in, optional] lpAddress A pointer to the base address of the region of.Working w... The VirtualQuery and VirtualQueryEx functions return information about a region of consecutive pages beginning at a specified address in the address space of a process. VirtualQuery returns information about memory in the calling process. VirtualQueryEx returns information about memory in a specified process and is used to support.MEMORY_BASIC_INFORMATION structure (winnt.h) Contains information about a range of pages in the virtual address space of a process. The VirtualQuery and VirtualQueryEx functions use this structure. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only].VirtualProtectFromApp Changes the protection on a region of committed pages in the virtual address space of the calling process. VirtualQuery Provides information about a range of pages in the virtual address space of the calling process. VirtualQueryEx Provides information about a range of pages in the virtual address space of the calling.QueryVirtualMemoryInformation The QueryVirtualMemoryInformation function returns information about a page or a set of pages within the virtual address space of the specified process. (VirtualProtectFromApp) VirtualQuery Retrieves information about a range of pages in the virtual address space of the calling process. VirtualQueryEx Retrieves.This collects more memory than absolutely necessary but still makes a significant saving by excluding the application itself. The MiniDump05 sample takes this approach (see Figure 13) by replacing the MiniDump04 sample’s thread stack code with a once-only VirtualQueryEx loop in the ThreadCallback callback (the new logic still causes the entire.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header memoryapi.h (include Windows.h, Memoryapi.h) Library onecore.lib DLL Kernel32.dll See also Memory Management Functions Memory Protection Constants Virtual.MapViewOfFileExNuma function (winbase.h) Maps a view of a file mapping into the address space of a calling process and specifies the NUMA node for the physical memory. Syntax Parameters [in] hFileMappingObject A handle to a file mapping object. For files that are larger tha... When the first view is complete, then you unmap it and map a new view.."
600,SetUnhandledExceptionFilter,"Microsoft Build · May 19 – 22, 2025Using SetUnhandledExceptionFilter in your application allows you to set a custom top-level exception handler for unhandled exceptions. However, it is important to note that Microsoft recommends using Windows Error Reporting (WER) instead of this function for security and convenience reasons.When you use SetUnhandledExceptionFilter, it supersedes the default exception handler provided by the system. This means that any unhandled exceptions will be directed to your custom handler instead of the default WER handler.Here is a basic outline of how to use SetUnhandledExceptionFilter:Keep in mind that while you can use this function, it is advisable to consider using WER for better security and reporting capabilities.References:SetUnhandledExceptionFilter function (errhandlingapi.h) Enables an application to supersede the top-level exception handler of each thread of a process. After calling this function, if an exception occurs in a process that is not being debugged, and the exception makes it to the unhandled exception filter, that filter will call the exception.C28725 warning C28725: Use Watson instead of this SetUnhandledExceptionFilter This warning is reported when an application uses the SetUnhandledExceptionFilter function. The function can be used to supersede the top-level exception handler of each thread of a process. By default, the system passes unhandled exceptions to Windows Error Reporting.Structured Exception Handling Functions The following functions are used in structured exception handling. RtlGrowFunctionTable Reports that a dyna... SetUnhandledExceptionFilter Enables an application to supersede the top-level exception handler of each thread and process. UnhandledExceptionFilter Passes unhandled exceptions to the debugger, if.errhandlingapi.h header This header is used by System Services. SetThreadErrorMode Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle... SetUnhandledExceptionFilter Enables an application to supersede the top-level exception handler of each thread of a process..We've a mixed application C/C++/.NET which is in the wild for about 15 years now and we use the aforementioned API syscall to install a handler from which, in case of crash, we produce a minidump (MiniDumpWriteDump). Issuing SetUnhandledExceptionFilter replaces the existing top-level exception filter for all existing and all future threads in the.We have found a the change in behaviour of the SetUnhandledExceptionFilter API call. On windows server 2016, this enables any uncaught C++ exceptions to be handled by a registered filter, including on our worker threads. Some investigation has shown this seems to be related to different versions of UCRT.dll (universal C run time) between different.We have found a the change in behaviour of the SetUnhandledExceptionFilter API call. On windows server 2016, this enables any uncaught C++ exceptions to be handled by a registered filter, including on our worker threads. There is no mention of a change in behaviour of this on certain windows versions in the windows API documentation Some.Bugslayer Unhandled Exceptions and Tracing in the .NET Framework 2.0 John Robbins Code download available at:Bugslayer0507.exe(148 KB) What Happened to My Thread. ... In native Windows® development, the SetUnhandledExceptionFilter API from KERNEL32.DLL makes it trivial for the OS to notify you when any thread in your application has an unhandled.Our Fortran Win32 system has been around a long time. In Windows 11 24H2 the handler is called repeatedly and the program can never end.| After reading comments by @Darran Rowe I have modified the program a bit. It now uses SetUnhandledExceptionFilter and returns EXCEPTION_CONTINUE_EXECUTION. The issue is the same but it has thrown some lig... In.APIs from api-ms-win-core-errorhandling-l1-1-3.dll API Requirements RaiseFailFastException Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.10240. Moved into api-ms-win-core-errorhandling-l1-1-2.dll in 10.0.16299. SetUnhandledExceptionFilter Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.10586. Moved into."
601,PatBlt,"Microsoft Build · May 19 – 22, 2025The PatBlt function in Windows programming is used to paint a specified rectangle using the currently selected brush in a device context. It combines the color data of the brush with the color data of the existing pixels in the target rectangle using a specified raster operation (ROP). The function has the following syntax:The parameters include:Common raster operation codes include:The PatBlt function is powerful and allows for complex painting operations beyond simple copying.References:Pattern Block Transfer The name of the PatBlt function (an abbreviation for pattern block transfer) implies that this function simply replicates the brush (or pattern) until it fills a specified rectangle. Before replicating the brush, it combines the color data for the pattern with the color data for the existing pixels on the video display by.PatBlt function (wingdi.h) The PatBlt function paints the specified rectangle using the brush that is currently selected into the specified device context. The brush color and the surface color or colors are combined by using the specified raster operation. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in.2.2.2.2.1.1.2.3 PatBlt (PATBLT_ORDER) The PatBlt Primary Drawing Order is used to paint a rectangle by using a specified brush and three-way raster operation. Encoding order number: 1 (0x01) Negotiation order number: 1 (0x01) Number of fields: 12 Number of field encoding bytes: 2 Maximum encoded field le... The PatBlt Primary Drawing Order is used.PALETTERGB The PALETTERGB macro accepts three values that represent the relative intensities of red, green, and blue and returns a palette-relative red, green, blue (RGB) specifier consisting of 2 in the high-order byte and an RGB value in... An application using a color palette can pass this specifier, instead of an explicit RGB value, to.3.2.5.1.1.1.3 Processing of PatBlt The structure and fields of the PatBlt Primary Drawing Order are specified in section 2.2.2.2.1.1.2.3, and the techniques described in section 3.2.5.1.1.1 demonstrate how to decode and process the order. Furthermore, if support for brush caching was not specified in th... The structure and fields of the PatBlt.2.2.2.4.10.1.21 PatBlt The PatBlt order paints the specified rectangle by using the brush that is currently selected in the specified device context. The brush pixels and the surface pixels are combined according to the specified raster operation. 0 1 2 3 4 5 6 7 8 9 10 1 2 3... Otherwise, this field is not used. The PatBlt order paints the.Bitmaps as Brushes A number of functions use the brush currently selected into a device context t... For example, the PatBlt function replicates the brush in a rectangular region within a window, and the FloodFill function replicates the brush inside an area in a window bounded by the specified color (unlike PatBlt, FloodFill does fill.CDC::MaskBlt Combines the color data for the source and destination bitmaps using the given mask and raster operation. CDC::ModifyWorldTransform Changes the world transformation for a device context using the specified mode. CDC::PaintRgn Fills a region with the selected brush. CDC::PatBlt Creates a bit pattern. CDC::Pie Draws a pie-shaped wedge.....acket OMNET_UNLOCK packet OMNET_WELCOME packet OMNET_WORKSET_CATCHUP packet OMNET_WORKSET_CLEAR packet OMNET_WORKSET_NEW packet OMNET_WSGROUP_SEND_COMPLETE packet OMNET_WSGROUP_SEND_DENY packet OMNET_WSGROUP_SEND_MIDWAY packet OMNET_WSGROUP_SEND_REQ packet OpaqueRect [Protocol] OpaqueRect packet Optional Elements in Q.931 Call SETUP PDU message.2.2.2.4.10.1.20 OrderTypes The OrderTypes enumeration defines the types of application-sharing orders and what is contained in each order. typedef  enum { OE2_DSTBLT_ORDER = 0x00, OE2_PATBLT_ORDER = 0x01, OE2_SCRBLT_ORDER = 0x02, OE2_TEXTOUT_ORDER = 0x05, OE2_EXTTEXTOUT_ORDER = 0x06, OE2_RECTANGLE_ORDER = 0x08, OE2_LINETO_ORDER = 0x09,."
602,RemovePropW,"Microsoft Build · May 19 – 22, 2025RemovePropW function (winuser.h) Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be changed. [in] lpString Type: LPCTSTR A null-terminated character string or an atom that.(RegisterClassW) RegisterShel... (ANSI) RegisterWindowMessageW Defines a new window message that is guaranteed to be unique throughout the system. (Unicode) RemovePropA Removes an entry from the property list of the specified window. (ANSI) RemovePropW Removes an entry from the property list of the specified window. (SendMessageCallbackA).(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Sends a message to the specified recipients. (BroadcastSystemMessageExW) BroadcastSystemMessageW The BroadcastSystemMessageW (Unicode) function sends a message to the specified.Hello, I have been creating a project using OpenGL, namely glfw3.lib. I can only guess that there is something wrong with the linker finding opengl code to link glfw3 to. Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex."
603,CreateRectRgnIndirect,"Microsoft Build · May 19 – 22, 2025CreateRectRgnIndirect function (wingdi.h) The CreateRectRgnIndirect function creates a rectangular region. Syntax Parameters [in] lprect Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units. ...nction succeeds, the return value is the handle.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreateElli... CreatePolyPolygonRgn Creates a region consisting of a series of polygons. CreateRectRgn Creates a rectangular region. CreateRectRgnIndirect Creates a rectangular.CreatePolyPolygonRgn The CreatePolyPolygonRgn function creates a region consisting of a series of polygons. CreateRectRgn The CreateRectRgn function creates a rectangular region. CreateRectRgnIndirect The CreateRectRgnIndirect function creates a rectangular region. CreateRoundRectRgn The CreateRoundRectRgn function creates a rectangular region.CreatePolyPolygonRgn function (wingdi.h) The CreatePolyPolygonRgn function creates a region consisting of a series of polygons. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region....ject Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font Creat CreateFontIndirect Pen CreatePen, CreatePenIndirect,.CFP_ALLOCPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to allocate memory. CFP_FREEPROC Client-p... CreatePolyPolygonRgn The CreatePolyPolygonRgn function creates a region consisting of a series of polygons. CreateRectRgn The CreateRectRgn function creates a rectangular region. CreateRectRgnIndirect The.CRgn::CreatePolyPolygonRgn Initializes a CRgn object with a region consisting of a series of closed polygons. CRgn::CreateRectRgn Initializes a CRgn object with a rectangular region. CRgn::CreateRectRgnIndirect Initializes a CRgn object with a rectangular region defined by a RECTtructure. CRgn::CreateRoundRectRgn Initializes a CRgn object with a.ExtCreateRegion function (wingdi.h) The ExtCreateRegion function creates a region from the specified region and transformation data. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,."
604,SetWindowRgn,"Microsoft Build · May 19 – 22, 2025SetWindowRgn function (winuser.h) The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region Syntax Parameters [in] hWnd A handle to the window whose window region.To set the window region of a window, call the SetWindowRgn function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.The window region of a window is set by calling the SetWindowRgn function. To set the window region of a window, call the SetWindowRgn function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. SetBoundsRect Controls ... SetROP2 Sets the foreground mix mode. SetWindowRgn Sets the window region of a window. UpdateWindow Updates the client area of a window. WindowFromDC Returns a handle.When the application retrieves a display device context using the BeginPaint, GetDC, or GetDCEx function, the system sets the clipping region for the device con... Applications can change the clipping region by using functions such as SetWindowRgn, SelectClipPath and SelectClipRgn, to further limit drawing to a particular portion of the update.Before using , the window was presented in Windows 10 ... Theming is done by DWM and DWM hooks the SetWindowRgn API and remove the theming of the window as it detects the app sets its own region, to avoid redrawing over When you use SetWindowRgn, you must draw the window yourself (you can see a (classic) sample I had posted do convert a Region to.This special function lets you create a nonrectangular window. You give SetWindowRgn a region (HRGN), which becomes the shape of your window. When you call SetWindowRgn, you rewrite the painting contract: now you're only responsible for painting inside your region. I wrote a little program, NonRect, that shows how to use SetWindowRgn (see.The window appears transparent because the bits of underlying sibling windows have already been painted. To achieve transparency without these restrictions, use the SetWindowRgn function. WS_EX_WINDOWEDGE 0x00000100L The window has a border with a raised edge. Requirements Requirement Value Minimum supported client Windows 2000 Professional.SetWindowRgn would not help as it doesn't produce good edges. I have also created a topic on StackOverflow: https://stackoverflow.com/questions/70773592/how-to-erase-the-background-of-a-window| From comments, a test with SetWindowRgn and a (very) old function to convert a HBITMAP to a Region =&gt; (remove space from S leep (editor bug...))..CWnd::SetWindowPlacement Sets the show state and the normal (restored), minimized, and maximized positions for a window. CWnd::SetWindowPos Changes the size, position, and ordering of child, pop-up, and top-level windows. CWnd::SetWindowRgn Sets the region of a window. CWnd::SetWindowText Sets the window text or caption title (if it has one) to."
605,GlobalUnlock,"Microsoft Build · May 19 – 22, 2025GlobalUnlock function (winbase.h) Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE. This function has no effect on memory objects allocated with GMEM_FIXED. For movable memory objects, the GlobalLock function increments the count by one, and GlobalUnlock decrements the count by one. Requirements.GlobalLock function (winbase.h) Locks a global memory object and returns a pointer to the first byte of the object's memory block. For movable memory objects, GlobalLock increments the count by one, and the GlobalUnlock function decrements the count by one. Each successful call that a process makes to GlobalLock for an object must be matched by a.GlobalFree function (winbase.h) Frees the specified global memory object and invalidates its handle. The GlobalLock function locks a global memory object and increments the lock count by one. The GlobalUnlock function unlocks it and decrements the lock count by one. Requirements Requirement Value Minimum supported client Windows XP [desktop apps |.WM_PAINTCLIPBOARD message Sent t... The clipboard owner must use the GlobalLock function to lock the memory that contains the PAINTSTRUCT structure. Before returning, the clipboard owner must unlock that memory by using the GlobalUnlock function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].VirtualUnlock Unlocks a specified range of pages in the virtual address space of a process. Global an... HeapReAlloc GlobalSize, LocalSize Retrieves the current size of the specified global memory object. HeapSize GlobalUnlock, LocalUnlock Decrements the lock count associated with a memory object. This function should be used only with OLE and.(Unicode) GlobalHandle Retrie... GlobalLock Locks a global memory object and returns a pointer to the first byte of the object's memory block. GlobalMemoryStatus Retrieves information about the system's current usage of both physical and virtual memory. GlobalUnlock Decrements the lock count associated with a memory object that was allocated with.Remarks When the clipboard viewer window is about to be destroyed or resiz... The clipboard owner must use the GlobalLock function to lock the memory object that contains RECT. Before returning, the clipboard owner must unlock the object by using the GlobalUnlock function. Requirements Requirement Value Minimum supported client Windows 2000.Set windows_hook_legacy_allocators to false to disable legacy allocator interception. set ASAN_OPTIONS=windows_hook_legacy_allocators=false GlobalAlloc GlobalFree GlobalHandle GlobalLock GlobalReAlloc GlobalSize GlobalUnlock LocalAlloc LocalFree LocalHandle LocalLock LocalReAlloc LocalSize LocalUnlock See also AddressSanitizer overview.CreateStreamOnHGlobal function (combaseapi.h) The CreateStreamOnHGlobal function creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the IStream interface. If possible, avoid accessing the memory block ... If the memory block must be accessed, the memory access.CreateILockBytesOnHGlobal function (coml2api.h) The CreateILockBytesOnHGlobal function creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file. This object is the OLE-provided implementation of the ILockBytes interface. If the memory block must be accessed, the memory."
606,GetSystemDefaultLangID,"Microsoft Build · May 19 – 22, 2025GetSystemDefaultLangID function (winnls.h) Returns the language identifier for the system locale. Syntax Return value Returns the language identifier for the system locale. This is the language used when displaying text in programs that do not support Unicode. It is set by the Administrator under Control Panel > Clock, Language, and Region >.SystemLanguageID property The SystemLanguageID property is the default language identifier for the system. The installer sets it by a call to GetSystemDefaultLangID. Requirements Requirement Value Version Windows Installer 5.0 on Windows Server 2012, Windows 8, Windows Server 2008 R2 or Windows 7. ...dows Installer RequirementsThe.1.2.2 Informative References [MSDN-GetSystemDefaultLangID] Microsoft Corporation, ""GetSystemDefaultLangID function"", http://msdn.microsoft.com/en-us/library/dd318120(VS.85).aspx [MSDN-OpenEvent] Microsoft Corporation, ""OpenEvent function"", http://msdn.microsoft.com/en-us/library/ms684305.aspx [MSDN-QUAL] Microsoft Corporation, ""WMI-Specific.(ISpellCheckProvider.GetOptionDescription) GetOptionDescription Retrieves the information (id, description, heading and labels) of a specific option. GetSystemDefaultLangID Returns the language identifier for the system locale. GetSystemDefaultLCID Returns the locale identifier for the system locale.Note  Any application that runs only on.(ANS... GetNumberFormatW Format. (GetStringTypeA) GetSystemDefaultLangID Returns the language identifier for the system locale. GetSystemDefaultLCID Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function..EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system. GetStringTypeW Retrieves character type information for the characters in the specified Unicode source.Function EnumSystemLanguageGroups GetSystemDefaultLangID GetUserDefaultLCID, GetUserDefaultLocaleName Thread locale Input language System default UI language Purpose Determines the settings that are used for formatting dates, times, currency, and large numbers for a thread. Also determines the sort ... The default input language is the localized.GetUserDefaultLangID function (winnls.h) Returns the language identifier of the Region Format setting for the current user. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header winnls.h.Because the amended qualifiers are not ignored while Windows creates a CIM class, when this CIM class is retrieved by using IWbemServices::GetObject or IWbemServices::GetObjectAsync (retrieved even without using the WBEM_FLAG_USE_AMENDED_QUALIFIERS flag), the returned class contains amended qualifiers. Section 3.1.4.3.6: Windows client versions."
607,GetFontData,"Microsoft Build · May 19 – 22, 2025GetFontData function (wingdi.h) The GetFontData function retrieves font metric data for a TrueType font. Syntax Parameters [in] hdc A handle to the device context. [in] dwTable The name of a font metric table from which the font data is to be retrieved. ...To retrieve the data from the beginning of the file for TrueType Collection files specify.WinAPINative.getFontData Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Overloads getFontData(Int64, Int32, Int32, Binary) getFontData(Int64, Int32, Int32) getFontData(Int64, Int32, Int32, Binary) Parameters _hDC Int64 _dwTable Int32 _dwOffset Int32 _pvBuffer Binary Returns Int32 Applies to.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. ... GetCharWidthI Gets the widths of consecutive glyph indices or an array of glyph indices from the current font. GetFontData Gets metric data for a TrueType font..CDC::GetDCPenColor Retrieves the current pen color. CDC::GetDeviceCaps Retrieves a specified kind of device-specific information about a given display device's capabilities. CDC::GetFontData Retrieves font metric information from a scalable font file. The information to retrieve is identified by specifying an offset into the font file and the.GetClipRgn The GetClipRgn function ret... (Unicode) GetFontData The GetFontData function retrieves font metric data for a TrueType font. GetFontLanguageInfo The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. GetFontUnicodeRanges The GetFontUnicodeRanges function returns.Embedded Fonts Embedding a font is the technique of bundling a document and the fonts it contains into a file for transmission to another computer. If bit 2 is set, the embedding is read-only. To embed a TrueType font, an application can use the GetFontData function to read the font file. Setting the dwTable and dwOffset parameters of GetFontData.GetDCBrushColor The GetDCBru... GetDCOrg. (Unicode) GetFontData The GetFontData function retrieves font metric data for a TrueType font. GetFontLanguageInfo The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. GetFontUnicodeRanges The GetFontUnicodeRanges function returns.I use TextOutW to display a font. I want to be able to get the LOGFONT, the HFONT, the font data OR the font filename of the font fallback. GetFontData returns the selected font in the HDC, not the one used has a fallback. Same thing for IDWriteGdiInterop::CreateFontFaceFromHdc. I want to be able to get the LOGFONT, the HFONT, the font data OR the.Win32 Text API Comparison For those developers that are migrating their Win32 application code, the following table lists the Win32 Text APIs and the approximate equivalent in DirectWrite. IDWriteFontFace::GetDesignGlyphMetrics or IDWriteTextLayout::GetMetrics Ge... IDWriteFontFace::GetDesignGlyphMetrics or IDWriteTextLayout::GetMetrics.Font-Embedding Function Error Messages The following LONG values are returned by the font-embedding functions when errors are encountered. When functions are successful, the value E_NONE is returned. E_ERRORACCESSINGFACENAME A non-DC-related error was encountered while trying to allocate an OUTLINETEXTMETRIC structure. E_ERRORACCESSINGFONTDATA An."
608,SetEnvironmentVariableA,"Microsoft Build · May 19 – 22, 2025SetEnvironmentVariableA function (processenv.h) Sets the contents of the specified environment variable for the current process. Syntax Parameters [in] lpName The name of the environment variable. The operating system creates the environment variable if it does not exist and lpValue is not NULL. [in, optional] lpValue The contents of the.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for ... (SetEnvironmentVariableA).Command prompt (Cmd. exe) command-line string limitation This article discusses the limitation to the length of the strings that you use from the command prompt in Command Prompt (Cmd.exe). Applies to:   Windows Server 2012 R2, Windows Server 2008 R2 Service Pack 1, Windows 7 Service Pack 1 Original KB number:   830473 More information The maximum.We'll refer to those versions here as ""Windows"", calling out any exceptions where... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft."
609,SetCommBreak,"Microsoft Build · May 19 – 22, 2025SetCommBreak function (winbase.h) Suspends character transmission for a specified communications device and places the transmission line in a break state until the ClearCommBreak function is called. Syntax Parameters [in] hFile A handle to the communications device. The CreateFile function returns this handle. To get extended error information,.Communications Functions The following functions are used with communications resources. SetCommBreak Suspends character transmission for a specified communications device and places the transmission line in a break state. SetCommConfig Sets the current configuration of a communications device. SetCommMask Specifies a set of events to be monitored.EscapeCommFunction function (winbase.h) Directs the specified communications device to perform an extended function. SETBREAK 8 Suspends character transmission and places the transmission line in a break state until the ClearCommBreak function is called (or EscapeCommFunction is called with the CLRBREAK extended function code). The SETBREAK.Extended Functions Some communications functions can be called for a device by using the EscapeCommFunction function. For example, an application can suspend character transmission with the SETBREAK code and resume transmission with the CLRBREAK code. These particular operations can also be started by calling the SetCommBreak and ClearCommBreak.Time-Outs A handle to a communications resource has an associated set of time-out parameters that affect the behavior of read and write operations. A process using interval time-outs can se... Time-outs for a write operation can be useful when transmission is blocked by some kind of flow control or when the SetCommBreak function has been called to.Remarks A communications device is placed in a break state by the SetCommBreak or EscapeCommFunction function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include W... Restores character.(ANSI) CheckNameLegalDOS8Dot3W Determines whether the specified name can be used to create a file on a FAT file system. (Unicode) ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlth... IVssBackupComponents The IVssBackupComponents interface is used by a requester to poll writers about file status and.Tip For important background info, see Windows API sets and Windows umbrella libraries. That umbrella library provides the exports for the set of Win32 APIs in question. This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. For delay load or LoadLibrary, use the module name (whether."
610,inet_addr,"Microsoft Build · May 19 – 22, 2025The inet_addr function is used in Windows Sockets programming to convert a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure. This function is essential for applications that need to handle IP addresses in a human-readable format and convert them into a format suitable for network operations.The function takes a string representation of an IPv4 address (for example, ""192.168.1.1"") and returns the corresponding binary address in network byte order. If the input string is not a valid IPv4 address, the function returns INADDR_NONE.References:The inet_addr function (winsock2.h) converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.The inet_addr function (winsock.h) converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.The inet_addr macro function (wsipv6ok.h) converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.The ANSI version of this function is inet_pton.(InetPtonA or inet_pton)programming interfaces: Functions gethostbyaddr The gethostbyaddr macro function (wsipv6ok.h) retrieves the host information corresponding to a network address. gethostbyname The gethostbyname macro function (wsipv6ok.h) retrieves host information corresponding to a host name from a host database. inetThe inet_ntoa function (winsock.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.The inet_ntoa function (winsock2.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.in_addr structure (winsock2.h) The in_addr structure represents an IPv4 Internet address.The IN_ADDR, PIN_ADDR, and LPIN_ADDR derived structures are defined in the Inaddr.h header file.The inet_ntoa macro function (wsipv6ok.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.Remarks The htons function takes a 16-bit number in host byte order and returns a 16-bit number in network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family)."
611,WidenPath,"Microsoft Build · May 19 – 22, 2025WidenPath function (wingdi.h) The WidenPath function redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the given device context. Syntax Parameters [in] hdc A handle to a device context that contains a closed path. The WidenPath function redefines the current path as the area.Path Functions (Windows GDI) The following functions are used to create, alter, or draw paths. Function Description AbortPath Closes and discards any paths in the specified device... StrokePath Renders the specified path by using the current pen. WidenPath Redefines the current path as the area that would be painted if the path were stroked using....irements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Path Functions Paths Ov WidenPathThe FlattenPath function transforms any curves in.EMRABORTPATH structure (wingdi.h) Contains data for the AbortPath, BeginPath, EndPath, CloseFigure, FlattenPath, WidenPath, SetMetaRgn, SaveDC, and RealizePalette enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimu... Contains data for the AbortPath, BeginPath,.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also EndPath FillPath Path Functions PathToRegion Paths Overview SelectClipPath.CDC::TabbedTextOut Writes a character string... CDC::UpdateColors Updates the client area of the device context by matching the current colors in the client area to the system palette on a pixel-by-pixel basis. CDC::WidenPath Redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also FlattenPa... The GetPath function retrieves the coordinates defining the....NT EMR_SETCOLORSPACE EMR_SETDIBITSTODEVICE EMR_SETICMMODE EMR_SETICMPROFILEA EMR_SETICMPROFILEW EMR_SETLAYOUT EMR_SETMAPMODE EMR_SETMAPPERFLAGS EMR_SETMETARGN EMR_SETMITERLIMIT EMR_SETPALETTEENTRIES EMR_SETPIXELV EMR_SETPOLYFILLMODE EMR_SETROP2 EMR_SETSTRETCHBLTMODE EMR_SETTEXTALIGN EMR_SETTEXTCOLOR EMR_SETVIEWPORTEXTEX EMR_SETVIEWPORTORGEX....TTE = 0x00000031, EMR_SETPALETTEENTRIES = 0x00000032, EMR_RESIZEPALETTE = 0x00000033, EMR_REALIZEPALETTE = 0x00000034, EMR_EXTFLOODFILL = 0x00000035, EMR_LINETO = 0x00000036, EMR_ARCTO = 0x00000037, EMR_POLYDRAW = 0x00000038, EMR_SETARCDIRECTION = 0x00000039, EMR_SETMITERLIMIT = 0x0000003A, EMR_BEGINPATH = 0x0000003B, EMR_ENDPATH = 0x0000003C,.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc."
612,GetLogicalDriveStringsA,"Microsoft Build · May 19 – 22, 2025GetLogicalDriveStringsA function (winbase.h) Fills a buffer with strings that specify valid drives in the system. Syntax Parameters [in] nBufferLength The maximum size of the buffer pointed to by lpBuffer, in TCHARs. This size does not include the terminating null character. If this parameter is zero, lpBuffer is not used. [out] lpBuffer A poin....GetFullPathNameTransactedA Retrieves the full path... (ANSI) GetFullPathNameTransactedW Retrieves the full path and file name of the specified file as a transacted operation. (Unicode) GetLogicalDriveStringsA Fills a buffer with strings that specify valid drives in the system. (GetLogicalDriveStringsA) GetLongPathNameTransactedA Converts the.FI... FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. IORING_CREATE_ADVISORY_FLAGS Specifies."
613,SetPixelV,"Microsoft Build · May 19 – 22, 2025SetPixelV function (wingdi.h) The SetPixelV function sets the pixel at the specified coordinates to the closest approximation of the specified color. The point must be in the clipping region and the visible part of the device surface. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical units, of the point.CDC::SetOutputDC Sets m_hDC, the output device context. CDC::SetPixel Sets the pixel at the specified point to the closest approximation of the specified color. CDC::SetPixelV Sets the pixel at the specified coordinates to the closest approximation of the specified color. SetPixelV is faster than SetPixel because it doesn't need to return the.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. SetDIBits Sets the pixels in a bitmap using col... SetDIBitsToDevice Sets the pixels in a rectangle using color data from a DIB. SetPixel Sets the color for a pixel. SetPixelV.SetPixel function (wingdi.h) The SetPixel function sets the pixel at the specified coordinates to the specified color. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).EMRSETPIXELV structure (wingdi.h) The EMRSETPIXELV structure contains members for the SetPixelV enhanced metafile record. When an enhanced metafile is created, calls to SetPixel are also recorded in this record. Syntax Members emr The base structure for all record types. ptlPixel Logical coordinates of pixel. crColor Color value. Requirements.2.3.5.36 EMR_SETPIXELV Record The EMR_SETPIXELV record defines the color of the pixel at the specified logical coordinates. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Pixel. Color Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETPIXELV. Pixel (... The EMR_SETPIXELV record defines the.Recently I used the SetPixelV method to draw some pictures on my screen. So, what method should be used to remove these drawn pixels in a timely manner?| You must force the background to be erased For example, this test draws a red rectangle, wait 2 seconds and erases the background : (remove the space at S leep(2000);, editor bug ). Recently I....UTW EMR_REALIZEPALETTE EMR_RECTANGLE EMR_RESIZEPALETTE EMR_RESTOREDC EMR_ROUNDRECT EMR_SAVEDC EMR_SCALEVIEWPORTEXTEX EMR_SCALEWINDOWEXTEX EMR_SELECTCLIPPATH EMR_SELECTOBJECT EMR_SELECTPALETTE EMR_SETARCDIRECTION EMR_SETBKCOLOR EMR_SETBKMODE EMR_SETBRUSHORGEX EMR_SETCOLORADJUSTMENT EMR_SETCOLORSPACE EMR_SETDIBITSTODEVICE EMR_SETICMMODE.... in the Type fields of EMF records (section 2.3). typedef  enum { EMR_HEADER = 0x00000001, EMR_POLYBEZIER = 0x00000002, EMR_POLYGON = 0x00000003, EMR_POLYLINE = 0x00000004, EMR_POLYBEZIERTO = 0x00000005, EMR_POLYLINETO = 0x00000006, EMR_POLYPOLYLINE = 0x00000007, EMR_POLYPOLYGON = 0x00000008, EMR_SETWINDOWEXTEX = 0x00000009, EMR_SETWINDOWORGEX.2.3.5 Drawing Record Types The Drawing record types perform graphics drawing and painting functions. EMR_SETPIXELV 2.3.5.36 Defines the color of the pixel at the specified logical coordinates. Name Value EMR_POLYBEZIER 0x00000002 EMR_POLYGON 0x00000003 EMR_POLYBEZIERTO 0x00000005 EMR_POLYLINETO 0x00000006 EMR_POLYPOLYLINE 0x00000007."
614,GetTempPathW,"Microsoft Build · May 19 – 22, 2025GetTempPathW function (fileapi.h) Retrieves the path of the directory designated for temporary files. Syntax Parameters [in] nBufferLength The size of the string buffer identified by lpBuffer, in TCHARs. [out] lpBuffer A pointer to a string buffer that receives the null-terminated string specifying the temporary file path. The returned string ends.(Unicode) GetShortPathNameW Retrieves the short path form of the specifi... (GetShortPathNameW) GetTempFileNameA Creates a name for a temporary file. (GetTempFileNameA) GetTempFileNameW Creates a name for a temporary file. (GetTempFileNameW) GetTempPath2A Retrieves the path of the directory designated for temporary files, based on the privileges.Moved into api-ms-win-core-file-l1-2-... Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetTempFileNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetTempPathW Introduced into.tmpnam_s, _wtmpnam_s Generate names you can use to create temporary files. Remarks Each of these functions returns the name of a file that doesn't currently exist. tmpnam_s returns a name unique in the designated Windows temporary directory returned by GetTempPathW. When a file name is prepended with a backslash and no path information, such as._tempnam, _wtempnam, tmpnam, _wtmpnam Generate names you can use to create temporary files. Remarks Each of these functions returns the name of a file that doesn't currently exist. tmpnam returns a name that's unique in the designated Windows temporary directory returned by GetTempPathW. _tempnam generates a unique name in a directory other than.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data... IOCTL_STORAGE_QUERY_PROPERTY Windows applications can use this control code to return the properties of a storage device or adapter.."
615,RemoveMenu,"Microsoft Build · May 19 – 22, 2025RemoveMenu function (winuser.h) Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu..DeleteMenu function (winuser.h) Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu to be changed. [in] uPosition Type: UINT The menu item to be.IOleInPlaceFrame::RemoveMenus method (oleidl.h) Removes a container's menu elements from the composite menu. Syntax Parameters [in] hmenuShared A handle to the in-place composite menu that was constructed by calls to IOleInPlaceFrame::InsertMenus and the InsertMenu function. Return value This method returns S_OK on success. Remarks The object.IOleInPlaceFrame.RemoveMenus(IntPtr) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters hmenuShared Remarks For information on the COM interface, see IOleInPlaceFrame::RemoveMenus.IShellBrowser::RemoveMenusSB method (shobjidl_core.h) Permits the container to remove any of its menu elements from the in-place composite menu and to free all associated resources. Syntax Parameters hmenuShared Type: HMENU A handle to the in-place composite menu that was constructed by calls to IShellBrowser::InsertMenusSB and the InsertMenu.IOleInPlaceFrame interface (oleidl.h) Controls the container's top-level frame window. This control involves allowing the container to insert its menu group int... IOleInPlaceFrame::InsertMenus Enables the container to insert menu groups into the composite menu to be used during the in-place session. IOleInPlaceFrame::RemoveMenus Removes a.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Menus (Menus and Other Resources) This section describes menus and explains how to use them. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append... DeleteMenu Deletes an item from the.Based on the answer already given ( previous question ), I wanted to customize the resulting items so that some... Thank you all.| Hi @Mansour_Dalir , To modify the context menu retrieved from , you'll need to: Remove an existing menu item : This can be done by modifying the menu handle ( ) returned by. Remove/Add a custom menu item : This can be.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.DefWindowProcA Calls the defaul... (ANSI) DefWindowProcW Calls the default window procedure to provide default processing for any window messages that an application does not process. (Unicode) DeleteMenu Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and."
616,CoFreeUnusedLibraries,"Microsoft Build · May 19 – 22, 2025CoFreeUnusedLibraries function (combaseapi.h) Unloads any DLLs that are no longer in use, probably because the DLL no longer has any instantiated COM objects outstanding. Syntax Return value None Remarks Applications can call CoFreeUnusedLibraries periodically to free resources. It is most efficient to call it either at the top of a message loop.CoFreeUnusedLibrariesEx function (combaseapi.h) Unloads any DLLs that are no longer in use and whose unload delay has expired. Syntax Parameters [in] dwUnloadDelay The delay in milliseconds between the time that the DLL has stated it can be unloaded until it becomes a candidate to unload. Requirements Requirement Value Minimum supported client.CoFreeLibrary function (objbase.h) Frees a library that, when loaded, was specified to be freed explicitly. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h Library Ole32.lib DLL Ole32.dll.This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. Moved into api-ms-win-c... CoFreeUnusedLibraries Introduced into.CoFileTimeToDosDateTime Converts a FILETIME into MS-DOS date and ti... CoFreeAllLibraries Frees all the DLLs that have been loaded with the CoLoadLibrary function (called internally by CoGetClassObject), regardless of whether they are currently in use. CoFreeLibrary Frees a library that, when loaded, was specified to be freed explicitly..Internally, a reference count is kept on the loaded DLL by using CoLoadLibrary to increment t... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h Library Ole32.lib DLL Ole32.dll API set.Surrogate processes must call the CoFreeUnusedLibraries function periodically to unload DLL servers that are no longer in use. The ... CoFreeUnusedLibraries calls the DllCanUnloadNow function on any loaded DLL servers. Because CoFreeUnusedLibraries depends on the existence and proper implementation of DllCanUnloadNow in DLL servers, it is not.CoFreeAllLibraries function (objbase.h) Frees all the DLLs that have been loaded with the CoLoadLi... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objbase.h Library Ole32.lib DLL Ole32.dll API set.Surrogate processes must call the CoFreeUnusedLibraries function periodically to unload DLL servers that are no longer in use. The ... CoFreeUnusedLibraries calls the DllCanUnloadNow function on any loaded DLL servers. Because CoFreeUnusedLibraries depends on the existence and proper implementation of DllCanUnloadNow in DLL servers, it is not.A DLL is no longer in use when it is not manag... Notes to Callers You should not have to call DllCanUnloadNow directly. OLE calls it only through a call to the CoFreeUnusedLibraries function. When it returns S_OK, CoFreeUnusedLibraries frees the DLL. Notes to Implementers You must implement DllCanUnloadNow in, and export it from, DLLs that are to."
617,EnumTimeFormatsA,"Microsoft Build · May 19 – 22, 2025EnumTimeFormatsA function (winnls.h) Enumerates the time formats that are available for a locale specified by identifier. Note  For interoperability reasons, the application should prefer the EnumTimeFormatsEx function to EnumTimeFormats because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales.....umTimeFormatsA Enumerates the time formats that are available locale specified by identifier.Note  For interoperability reasons, the application should prefer the EnumTimeFormatsExEnumTimeFormatsW Enumerates the time formats that are available for a locale specified by identifier.Note  For interoperability reasons, the application should prefer.EnumTimeFormatsW function (winnls.h) Enumerates the time formats that are available for a locale specified by identifier. TIME_NOSECONDS Windows 7 and later: Use the current user's short time format. Note  This value will not work with the ANSI version of this function, EnumTimeFormatsA. LOCAL_USE_CP_ACP Specified with the ANSI version of this.(Unicode) EnumTimeFormatsA Enumerates the time formats that are available for a locale specified by identifier.Note  For interoperability reasons, the application should prefer the EnumTimeFormatsEx function to EnumTimeFormats because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales.."
618,SetCursor,"Microsoft Build · May 19 – 22, 2025SetCursor function (winuser.h) Sets the cursor shape. Syntax Parameters [in, optional] hCursor Type: HCURSOR A handle to the cursor. The cursor must have been created by either the CreateCursor or the CreateIconIndirect function, or loaded by either the LoadCursor or the LoadImage function. If this parameter is NULL, the cursor is removed from the.Mouse.SetCursor(Cursor) Method Definition Namespace: System.Windows.Input Assembly:PresentationCore.dll Sets the mouse pointer to the specified Cursor. Parameters cursor Cursor The cursor to set the mouse pointer to. So, if after setting the cursor the mouse pointer moves over an object which sets the cursor, the cursor will be changed again. To.MouseDevice.SetCursor(Cursor) Method Definition Namespace: System.Windows.Input Assembly:PresentationCore.dll Sets the mouse pointer to the specified Cursor. Parameters cursor Cursor The cursor to set the mouse pointer to. Returns Boolean true if the mouse cursor is set; otherwise, false. Attributes SecurityCriticalAttribute Remarks Note that this....erv Sets the current application's cursor to a cursor that represents the currently selected toolReturns Boolean true if the cursor is set by the currently selected tool, false if there is no tool selected and the cursor is set to the standard windows cursor. Remarks If no tool is selected, the cursor will default to the standard Windows.ToolboxService.IToolboxService.SetCursor Method Definition Namespace: System.Drawing.Design Assembly:System.Drawing.Design.dll Sets the current application's cursor to a cursor that represents the currently selected tool. Returns Boolean true if the cursor is set by the currently selected tool; false if there is no tool selected and the cursor is.ToolboxService.SetCursor Method Definition Namespace: System.Drawing.Design Assembly:System.Drawing.Design.dll Sets the current application's cursor to a cursor that represents the currently selected tool. ...arks The toolbox service support for setting the user interface (UI) cursor to an image that represents the currently selected toolbox.IVsUIHierarchyW... Parameters hNewCursor [in] New cursor to display in the hierarchy window. phOldCursor [out, retval] Cursor replaced by the new cursor. Implements SetCursor(IntPtr, IntPtr) Remarks This method allows you to show a different cursor in the UI hierarchy window when required to indicate specific actions. Store the old cursor returned.IVsToolbox2.SetCursor Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Inte... Returns Int32 Implements SetCursor() Remarks This method is called by a designer to tell the Toolbox to set the drop cursor for.IVsToolbox.SetCursor Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Sets the drop cursor for the current, enabled Toolbox item. Returns Int32 If the method succeeds, it returns S_OK..LayoutEditor.SetCursor(Cursor) Method Definition Namespace: Microsoft.ReportDesigner Assembly:Microsoft.ReportingServices.Designer.Controls.dll Parameters cursor Cursor Implements SetCursor(Cursor) Applies to. Learn more about the Microsoft.ReportDesigner.LayoutEditor.SetCursor in the Microsoft.ReportDesigner namespace..."
619,FindWindowExA,"Microsoft Build · May 19 – 22, 2025FindWindowExA function (winuser.h) Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search. Note The winuser.h header defines FindWindowEx as an alias that.FindWindowA Retrieves ... This function does not search child windows. This function does not perform a case-sensitive search. (ANSI) FindWindowExA Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This.This function does not perform a case-sensitive search. (ANSI) FindWindowExA Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not pe... (ANSI) FindWindowExW Retrieves a handle to a window."
620,GetAtomNameA,"Microsoft Build · May 19 – 22, 2025GetAtomNameA function (winbase.h) Retrieves a copy of the character string associated with the specified local atom. Syntax Parameters [in] nAtom Type: ATOM The local atom that identifies the character string to be retrieved. [out] lpBuffer Type: LPTSTR The character string. [in] nSize Type: int The size, in characters, of the buffer. ...e.h.(ANSI) FindAtomW Searches the local atom table for the specified character string and retrieves ... (Unicode) FindFirstFileNameTransactedW Creates an enumeration of all the hard links to the specified file as a transacted operation. GetAtomNameA Retrieves a copy of the character string associated with the specified local atom. (ANSI) GetAtomNameW.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (ANSI) GetAtomNameW."
621,CharUpperBuffA,"Microsoft Build · May 19 – 22, 2025CharUpperBuffA function (winuser.h) Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A buffer containing one or more characters to be processed. [in] cchLength Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) CharUpperBuffA Converts lowercase.If the operand is a character string, the function converts the characters in place. (ANSI) CharUpperBuffA Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place. (ANSI) CharUpperBuffW Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in.To create and use a temporary file The application opens the user-provided source text file by using CreateFile. The application retrieves a temporary file path and file name by using the GetTempPath2 and GetTempFileName functions, and then uses CreateFile to create the temporary file. The application reads blocks of text data into a buffer,."
622,CoCreateInstanceEx,"Microsoft Build · May 19 – 22, 2025CoCreateInstanceEx function (combaseapi.h) Creates an instance of a specific class on a specific computer. In addition, rather than requesting a single interface and obtaining a single pointer to that interface, CoCreateInstanceEx makes it possible to specify an array of structures, each pointing to an interface identifier (IID) on input, and, on.Instance Creation Helper Functions In previous releases of COM, the primary mechanism used to create an object instance was the CoCreateInstance function. CoCreateInstanceEx extends CoCreateInstance to make it possible to create a single uninitialized object associated with the given CLSID on a specified remote machine. ...eInCreating an object.IFsrmClassificationManager interface (fsrmpipeline.h) [This interface is supported for compatibility but it's recommended to use the FSRM WMI Classes to manage FSRM. Use this interface to define properties to use in classification, add classification rules for classifying files, define classification and storage ... To get this interface, call the.CoCreateInstance function (combaseapi.h) Creates and default-initializes a single object of the class associated with a specified CLSID. Call CoCreateInstance when you want to create only one object on the local system. To create a single object on a remote system, call the CoCreateInstanceEx function. To create multiple objects based on a single.IFsrmClassificationManager2 interface (fsrmpipeline.h) [This interface is supported for compatibility but it's recommended to use the FSRM WMI Classes to manage FSRM. Use this interface to define properties to use in classification, add class... To get this interface, call the CoCreateInstanceEx function. Use CLSID_FsrmClassificationManager as the.IFsrmFileScreenManager interface (fsrmscreen.h) Used to manage file screen objects. To get this interface, call the CoCreateInstanceEx function. Use CLSID_FsrmFileScreenManager as the class identifier and __uuidof(IFsrmFileScreenManager) as the interface identifier. For an example, see Defining a File Screen. Inheritance The IFsrmFileScreenManager.IFsrmFileGroupManager interface (fsrmscreen.h) [This interface is supported for compatibility but it's recommended to use the FSRM WMI Classes to manage FSRM. Please see the MSFT_FSRMFileGroup class.]. Used to manage file group objects. To get this interface, call the CoCreateInstanceEx function. Use CLSID_FsrmFileGroupManager as the class.IFsrmPipelineModuleConnector interface (fsrmpipeline.h) Creates the communication channel between FSRM and your pipeline module implementation. Your pipeline module implementation must create this interface and To create this interface, call the CoCreateInstanceEx function. Requirements Requirement Value Minimum supported client None supported.The DllSurrogate value must be present for a DLL server to be activated in ... Activation refers to a call to CoGetClassObject, CoCreateInstanceEx, CoCreateInstanceEx, CoGetInstanceFromFile, CoGetInstanceFromIStorage, or IMoniker::BindToObject. Running DLLs in a surrogate process provides the benefits of an executable implementation, including.It is not always necessary to go through this process however. To create a single object, call the CoCreateInstanceEx function, which allows you to create an instance on a remote machine. This replaces the CoCreateInstance function, which can still be used to create an instance on a local computer. Both functions encapsulate connecting to the."
623,EnumDateFormatsA,"Microsoft Build · May 19 – 22, 2025EnumDateFormatsA function (winnls.h) Enumerates the long date, short date, or year/month formats that are available for a specified locale. Note  To receive a calendar identifier in addition to date format information, the application should use the EnumDateFormatsEx function. Another reason for preferring this function is that Microsoft is.(Unicode) EnumDateFormatsA Enumerates the long date, short date, or year/month formats that are available for a specified locale. (ANSI) EnumDateFormatsExA Enumerates the long date, short date, or year/month formats that are available for a specified locale.N... EnumSystemGeoNames Enumerates the two-letter International Organization for.(Unicode) EnumCalendarInfoW Enumerates calendar information for a specified locale.Note  To receive a calendar identifie... (Unicode) EnumDateFormatsA Enumerates the long date, short date, or year/month formats that are available for a specified locale. (ANSI) EnumDateFormatsExA Enumerates the long date, short date, or year/month formats that are.Prepare your application for the Japanese era change Note On April 1, 2019, the new era name was announced: Reiwa (令和). On April 25, Microsoft released packages for different Windows operating systems containing the updated registry key with the new era name. The following APIs will be impacted: WinRT Windows.Globalization Namespace Calendar Cla..."
624,RegisterClipboardFormatA,"Microsoft Build · May 19 – 22, 2025RegisterClipboardFormatA function (winuser.h) Registers a new clipboard format. This format can then be used as a valid clipboard format. Syntax Parameters [in] lpszFormat Type: LPCTSTR The name of the new format. Return value Type: UINT If the function succeeds, the return value identifies the registered clipboard format. Registered clipboard.PackDDElParam Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes. PFNCALLBACK An application-defined callback function used with the Dynamic Data Exchange Management Library (DDEML) functions. RegisterClipboardFormatA Registers a new clipboard format. This format can then be used.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
625,SetVolumeLabelW,"Microsoft Build · May 19 – 22, 2025SetVolumeLabelW function (winbase.h) Sets the label of a file system volume. Syntax Parameters [in, optional] lpRootPathName A pointer to a string that contains the volume's drive letter (for example, X:) or the path of a mounted folder that is associated with the volume (for example, Y:\MountX). The string must end with a trailing backslash ('')..To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.Win32-based applications should use the CloseHandle function. _lcreat Creates or opens the specified file. _llseek Repositions the file pointer for the specified file. _lopen The _lopen function opens an existing file and sets the file pointer to the beginning of the file. Win32-based applications should use the ReadFile function. _lwrite Writes.We'll refer to those versions here as ""Windows"", calling out any exceptions where... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft."
626,GetCurrencyFormatW,"Microsoft Build · May 19 – 22, 2025GetCurrencyFormatW function (winnls.h) Formats a number string as a currency string for a locale specified by identifier. Note  For interoperability reasons, the application should prefer the GetCurrencyFormatEx function to GetCurrencyFormat because Microsoft is migrating toward the use of locale names instead of locale identifiers for new.(GetCPInfoExW) GetCurrencyFormatA Formats a number string as a currency string for a locale specified by identifier. (ANSI) GetCurrencyFormatEx Formats a number string as a currency string for a locale specified by name.Note  The application should call this function in preference to GetCurrencyFormat if designed to run only on Windows Vista and.(GetCPInfoExA) GetCPInfoExW Retrieves informatio... (GetCPInfoExW) GetCurrencyFormatA Formats a number string as a currency string for a locale specified by identifier. (ANSI) GetCurrencyFormatEx Formats a number string as a currency string for a locale specified by name.Note  The application should call this function in preference to.... LCIDToLocaleName LCMapStringEx LocaleNameToLCID ResolveLocaleName SetThreadLocale CompareString DEPRECATED CompareStringEx CompareStringA DEPRECATED CompareStringEx EnumSystemLocalesA DEPRECATED EnumSystemLocalesEx EnumSystemLocalesW DEPRECATED EnumSystemLocalesEx FindNLSString DEPRECATED FindNLSStringEx GetCPInfo DEPRECATED Use Unicode.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`."
627,GlobalReAlloc,"Microsoft Build · May 19 – 22, 2025GlobalReAlloc function (winbase.h) Changes the size or attributes of a specified global memory object. The size can increase or decrease. Syntax Parameters [in] hMem A handle to the global memory object to be reallocated. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows.The GlobalReAlloc and LocalReAlloc functions change the size or the attributes of a memory object allocated by GlobalAlloc and LocalAlloc. The GlobalFree and LocalFree functions release memory allocated by GlobalAlloc, LocalAlloc, GlobalReAlloc, or LocalReAlloc. The handle can be used later by GlobalReAlloc or LocalReAlloc to allocate a new block.GlobalFlags function (winbase.h) Retrieves information about the specified global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows.GlobalLock function (winbase.h) Locks a global memory object and returns a pointer to the first byte of the object's memory block. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Locked memory will not be moved or discarded, unless the memory object is reallocated by using the GlobalReAlloc function. Requirements.GlobalSize function (winbase.h) Retrieves the current size of the specified global memory object, in bytes. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Return value If the function succeeds, the return value is the size of the specified global memory object, in bytes. Requirements Requirement Value Minimum.This handle is returned by either the GlobalAlloc or GlobalReAlloc function. Return value None Remarks Although GlobalDiscard discards the object's memory block, the handle to the object remains valid. The process can subsequently pass the handle to the GlobalReAlloc function to allocate another global memory block identified by the same handle..You can download the WSDK from the Microsoft Windows Software Development Kit (SDK) (search for Windows SDK and select the download for the latest released operating system). The samples contained in this directory are: AppMem—Provides counterparts of the GlobalAlloc, GlobalReAlloc, and GlobalFree functions that report performance information..Note If creating a stream object that is larger than the heap in your computer's memory and you are using an HGLOBAL handle to a global memory object, the stream object calls the GlobalRealloc method internally when it requires more memory. Because GlobalRealloc always copies data from the source to the destination, increasing a stream object from.This function should be used o... Not applicable. GlobalLock, LocalLock Locks a global memory object and returns a pointer to the first byte of the object's memory block. Not applicable. GlobalReAlloc, LocalReAlloc Changes the size or attributes of a specified global memory object. HeapReAlloc GlobalSize, LocalSize Retrieves the current size of.CreateStreamOnHGlobal function (combaseapi.h) The CreateStreamOnHGlobal function creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the IStream interface. The returned stream obj... The object calls the GlobalReAlloc function to grow the memory block as."
628,CreateDialogParamA,"Microsoft Build · May 19 – 22, 2025CreateDialogParamA function (winuser.h) Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. Note The winuser.h header defines CreateDialogParam as an alias that.Dialog Boxes Overview of the Dialog Boxes technology. To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for this technology, see: Dialog Boxes Functions AddRef The IPrintDialogCallback::AddRef method (commdlg.h) is IUnknown's AddRef method, which decrements the reference count for an interface on a COM object..(Unicode) CreateDesktopW Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. (Unicode) CreateDialogA Creates a modeless dialog box from a dialog box template resource. The CreateDialog macro uses the CreateDialogParam function. (ANSI) CreateDialogIndirectA Creates a."
629,CoSetProxyBlanket,"Microsoft Build · May 19 – 22, 2025CoSetProxyBlanket function (combaseapi.h) Sets the authentication information that will be used to make calls on the specified proxy. This is a helper function for IClientSecurity::SetBlanket. Syntax Parameters [in] pProxy The proxy to be set. [in] dwAuthnSvc The authentication service to be used. For a list of possible values, see Authentication.Win32Helper.CoSetProxyBlanket Method Definition Namespace: Commands.StorageSync.Interop.DataObjects Assembly:Microsoft.Azure.PowerShell.Cmdlets.StorageSync.dll Coes the set proxy blanket. Parameters pProxy The p proxy. dwAuthnSvc UInt32 The dw authn SVC. dwAuthzSvc UInt32 The dw authz SVC. pServerPrincName String Name of the p server princ..Typically, this function is called when a client needs to change the authentication information of its proxy through a call to either CoSetProxyBlanket or IClientSecurity::SetBlanket without changing this information for other clients. CoSetProxyBlanket affects all the users of an instance of a proxy, so creating a private copy of the proxy.The workaround is to impersonate, call OpenThreadToken, revert, call GetTokenInformation, and finally, call LookupAccountSid. Using CoSetProxyBlanket, the client sets the impersonation level Using CoSetProxyBlanket, the client sets the impersonation level and proxy identity that will be available when a server calls CoImpersonateClient. The.Call ... This declares how much security other applications require to access the process in which your application runs. If you need to change the security on an individual proxy, for example on another call to IWbemServices, call CoSetProxyBlanket. If you need to control remote hardware or a system object that requires more privilege, use the.Implementing Cloaking Cloaking is an extension to impersonation that allows for better control over how COM imper... Like many forms of WMI security, you set cloaking through the CoSetProxyBlanket and CoInitializeSecurity interfaces. If you use static cloaking with CoSetProxyBlanket, you set the identity of the proxy for the life of the proxy..Service Accounts and BITS You can use BITS to transfer file... Cloaking is not inherited, therefore you must call the CoSetProxyBlanket function on each interface pointer that you receive from BITS (for example, the job pointer returned from calling the IBackgroundCopyManager::CreateJob method); it is not enough to set cloaking on the manager.Setting Authentication Using ... To avoid the access-denied error, you must set the identity of the new pointer with a call to the CoSetProxyBlanket interface. To avoid the failed connection, use CoSetProxyBlanket to explicitly set the security authentication on the pointer returned from IUnknown. Using CoSetProxyBlanket, you can ensure that the.Clients using the default implementation of IClientSecurity provided by the proxy manager can call the CoQueryProxyBlanket, CoSetProxyBlanket, and CoCopyProxy helper functions instead of calling IClientSecurity methods directly. The helper functions simplify the code but are slightly less efficient than calling the corresponding IClien....You can also change the authentication level, impersonation level, or the authentication service in a call that obta... Calling CoSetProxyBlanket also allows you to change the authentication service (Kerberos, NTLM, or negotiate). Scripts and Visual Basic applications only set security on proxies indirectly through calls to SWbemServices and other."
630,SendMessageA,"Microsoft Build · May 19 – 22, 2025SendMessageA function (winuser.h) Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message. To send a message and return immediately, use the SendMessageCallback or SendNotifyMessage function. To post a.The system calls this function after the SendMessage function is called. InSendMessage Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function. InSendMessageEx Determines whether the current wind... SendMessage The....RENTNOTIFY fwEvent:WM_LBUTTONDOWN xPos:191 yPos:493 I am sending the same message to the Calculator window: HWND calculator_HWND = FindWindowW(NULL, L&quot;Calculator&quot;); //Get HWND calculator WPARAM my_wparam; LPARAM my_lparam; //Coordinate SendMessage(calculator_HWND, WM_PARENTNOTIFY, my_wparam, my_lparam); After completing the....OS, 0, 0)); /* //newPos = newPos + nmud.iDelta; //strcpy(buffer, lpnmud.iPos); //////strcpy(buffer, lpnmud-&gt;iPos); //LPNMUPDOWN, lpnmud //strcat(buffer,lpnmud-&gt;iDelta); ////newPos = lpnmud-&gt;iPos + lpnmud-&gt;iDelta; //buffer = lpnmud-&gt;iPos + lpnmud-&gt;iDelta; //newPos = newPos+2; //i = lpnmud-&gt;iPos; // +lpnmud-&gt;iDelta; //i =.Sending Messages in Windows, Adding Hot Keys to your Application Paul DiLascia Download the code for this article:CQA1200.exe ... A There are a few subtle differences in the ways you can send messages in WindowsÂ®, but the basic difference between PostMessage and SendMessage is that SendMessage sends a message to another window immediately by.Hello. As in the title when I try to get the text of selected element in ListBox window: `` char z[20]; SendMessage(hWndList, LB_GETTEXT, SelIndex, (LPARAM)z); MessageBoxA(NULL, z , z, NULL); `` all I get is the first letter. Anyone?| Try using SendMessageA. Or use wide characters ( wc... As in the title when I try to get the text of selected.Public Declare Function SHBrowseForFolder Lib &quot;shell32&quot; _ Alias &quot;SHBrowseForFolderA&quot; _ (lpBrowseInfo As BROWSEINFO) As Long Public Declare Function SHGetPathFromIDList Lib &quot;shell32&quot; _ Alias &quot;SHGetPathFromIDListA&quot; _ (ByVal pidl As Long, _ ByVal pszPath As String) As Long Public Declare Sub CoTaskMemFree Lib....ode is public ti As TOOLINFO Sub CreateToolTipInEveryWhereOfParent(Dlg As Longptr) htip=CreateWindowEx(WS_EX_TOPMOST,&quot;tooltips_class32,&quot;MyTip&quot;,WS_POPUP+TTS_ALWAYSTIP+TTS_SHOWBALLOON,0,0,0,0,0,Dlg,0,0) 'htip return non zero if htip&lt;&gt;0 Then DestroyWindow htip Else With ti .cbSize=LenB(ti) .hwnd=Dlg.If the window is a child window, the top-level parent window associated with the child window is activated. BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients. (BroadcastSystemMessage) BroadcastSystemMessageA Sends a message to the specified recipients. (BroadcastSystemMessageA)."
631,CoUnmarshalInterface,"Microsoft Build · May 19 – 22, 2025CoUnmarshalInterface function (combaseapi.h) Initializes a newly created proxy using data written into the stream by a previous call to the CoMarshalInterface function, and returns an interface pointer to that proxy. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).CoMarshalInterface function (combaseapi.h) Writes into a stream the data required to initialize a proxy object in some client process. ... to extract the data and initialize tRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP.CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterThreadInterfaceInStream Marshals an interface pointer from one thread to another thread in ... CoUnmarshalHresult Unmarshals an HRESULT type from the specified stream. CoUnmarshalInterface Initializes.Multi-Threaded Issues OLE provides support for multithreaded applications, allowing applications to make OLE calls from multiple threads. This multithreaded support is called the apartment model, it is important that all OLE components using multiple threads follow this model. The apartment model requires that interface pointers are marshaled.Interception of Cross-Context Calls When an object is activated in a given context, subsequent calls to or from it, within the context, are handled differently than calls across the context boundary. COM+ intercepts any object references that you pass as method parameters and automatically converts them to proxies so that they are ... If you share.CoMarshalInterface and CoUnmarshalInterface COM clients that hold interface pointers can share them with other clients, provided they're willing to marshal them. COM offers optimizations for threads that want to marshal interface pointers to other threads in the same process (see Lesson 2), but if the client threads belong to different processes,.CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream the data required to initialize a proxy object in some client process. CoMarshalInterThreadInterfaceInStream Marshals an interface pointer... CoUnmarshalInterface Initializes.The resulting structures, with extra data in the stream, are shown in the following illustration: Server-Side Structures with Extra Data in Stream This allows the call from COM to CoUnmarshalInterface on the client side the ability to skip over any unread data and leave the stream in the appropriate po... Client-Side Structures with Extra Data in.Property Sheet Extensions The Properties context menu item provides access to scanner or camera property sheets in either the Scanners and Cameras Control Panel folder for devices (root items) or the My Computer... The property sheet or context extension can call CoUnmarshalInterface on the IStream object stored in the STGMEDIUM structure to."
632,GetOpenClipboardWindow,"Microsoft Build · May 19 – 22, 2025GetOpenClipboardWindow function (winuser.h) Retrieves the handle to the window that currently has the clipboard open. Syntax Return value Type: HWND If the function succeeds, the return value is the handle to the window that has the clipboard open. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.Clipboard Operations A window should use the clipboard when cutting, copying, or pasting data. A window places data on the clipboard for cut and copy operations and retrieves data from the clipboard for paste operations. To place data on or retrieve data from the clipboard, a window must first open the clipboard by using the OpenClipboard.CWnd::GetNextWindow Returns the next (or previous) window in the window manager's list. CWnd::GetOpenClipboardWindow Retrieves a pointer to the window that currently has the Clipboard open. CWnd::GetTopWindow Returns the first child window that belongs to the CWnd. CWnd::MoveWindow Changes the position and dimensions of CWnd. CWnd::OpenClipboard.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.Data Exchange Overview of the Data Exchange technology. To develop Da... GetClipboardViewer Retrieves the handle to the first window in the clipboard viewer chain. GetOpenClipboardWindow Retrieves the handle to the window that currently has the clipboard open. GetPriorityClipboardFormat Retrieves the first available clipboard format in the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. GetOpenClipboardWindow Retrieves the handle to the window that currently has the clipboard open. GetPriorityClipboardFormat Retrieves.Examples For an exampl... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-2-0 (introduced in Windows.The Remarks section of the documentation for OpenClipboard states &quot; OpenClipboard fails if another window has the clipboard open.&quot; If the function fails you can call the GetOpenClipboardWindow function to identify the window holding the clipboard open or the GetClipboardOwner function if you want to identify the window/process that is.(DrawTextW function) EmptyClipboard Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open. EnableWindow Enables or disables mouse and keyboard input to the specified window or control. EndDeferWindowPos Simultaneously updates the."
633,CopyFileA,"Microsoft Build · May 19 – 22, 2025The CopyFileA function is a Windows API function that copies an existing file to a new file. It has the following syntax:This function is available starting from Windows XP and is included in the winbase.h header file.References:CopyFileA function (winbase.h) Copies an existing file to a new file. The CopyFileEx function provides two additional capabilities. CopyFileEx can call a specified callback function each time a portion of the copy operation is completed, and CopyFileEx can be canceled during the copy operation. To perform this operation as a transacted operation,.(ConvertThreadToFiberEx) CopyContext Copies a source context structure (including any XState) onto an initialized destination context structure. CopyFile The CopyFile function (winbase.h) copies an existing file to a new file. CopyFile2 Copies an existing file to a new file, notifying the application of its progress through a callback function..FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code started with Windows 10. CopyFile2 Co... (CopyFile2) CopyFileA Copies an existing file to a new file. (CopyFileA) CopyFileExA Copies an existing file to a new file, notifying the application of its progress.Hi, we are using Azure Virtual Desktop, we have a desktop application that is installed on the server and accessed via Remote Desktop Web Client The problem is related to the Remote Desktop... The Virtual Drive Downloads folder doesn't like to have files saved directly into it.| I solved this same type of problem by changing the program source.OutputDebugStringA Introduced into api-ms-win-core-debug-l1-1-1.dll in 10.0.10240. APIs from api-ms-win-core-file-ansi-l2-1-0.dll API Requirements ReplaceFileA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.10240. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll."
634,SetTimer,"Microsoft Build · May 19 – 22, 2025The SetTimer function in Microsoft technologies is used to create a timer that sends WM_TIMER messages to a specified window at specified intervals. Here’s how to use it:Using timers efficiently can help manage events and resource usage in your application.References:SetTimer function (winuser.h) Creates a timer with the specified time-out value. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in.Creating a Timer Destroying a Timer Using Timer Functions to Trap Mouse Input Related topics Creating a Timer The following example uses the SetTimer function to create two timers. The first timer is set for every 10 seconds, the second for every five m... The following example uses the SetTimer and KillTimer functions to trap mouse input..About timers This topic describes how to create, identify, set, and delete timers. An application uses a timer to schedule an event for a window after a specifie... Timer Operations High-Resolution Timer Waitable Timer Objects Related topics Timer operations Applications create timers by using the SetTimer function. A new timer starts timing the.Drawing at Timed Intervals You can draw at timed intervals by creating a timer with the SetTimer function. By using a timer to send WM_TIMER messages to the window procedure at regular intervals, an application can carry out simple animation in the client area while other applications ... The procedure starts the timer by calling SetTimer while.Timer Functions In This Section KillTimer SetCoalescableTimer SetTimer TimerProc. Timer Functions. /windows/win32/winmsg/timer-functions.KSCLOCK_DISPATCH structure (ks.h) The KSCLOCK_DISPATCH structure contains the callbacks required for a pin to implement a clock object. Syntax Members SetTimer Optionally contains a pointer to an alternate function to use in generating DPC timer callbacks based on a presentation time. If this is set, this function is used to set timers based on.About Multimedia Timers [The feature associated with this page, Multimedia Timers, is a legacy feature. For example, a MIDI sequencer requires a high-resolution ... Applications that do not use high-resolution timing should use the SetTimer function instead of multimedia timer services. The timer services provided by SetTimer post WM_TIMER.Timers A timer is an internal routine that repeatedly measures a specified interval, in milliseconds. In This Section Name Description About Timers Describes how to create, identify, set, and delete timers. Timer Functions Name Descri... SetTimer Creates a timer with the specified time-out value. TimerProc An application-defined callback function.Hi In SetTimer() page wrotes: Before using SetTimer or other timer-related functions, it is recommended to set the UOI_TIMERPROC_EXCEPTION_SUPPRESSION flag to false through the SetUserObjectInformationW function, otherwise the application could behave unpredictably and could be vulnerable to security exploits. ... the.(Unicode) SetClassWord Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which th... SetCoalescableTimer Creates a timer with the specified time-out value and coalescing tolerance delay. SetForegroundWindow Brings the thread that created the specified window into the foreground and."
635,SetStdHandle,"Microsoft Build · May 19 – 22, 2025SetStdHandle function Sets the handle for the specified standard device (standard input, standard output, or standard error). Syntax Parameters nStdHandle [in] The standard device for which the handle is to be set. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server.The parent process typically does this by redirecting the standard output handle to the child process, as shown in the following steps: Call the GetStdHandle function to get the current standard output handle; save this handle so you can restore the original standard output ha... Call the SetStdHandle function to set the standard output handle to.Note  ... CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.Note ... CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.You can replace its i/o streams wrapping the defaults, but this can not change the defaults as streams do not have file handles. as you have found, the C/C++ library use the defaults. you can create a new named pip... Still if possible because we need to be able to notify of changes somewhere.| the process StdInput and StdOutput are handles set by.Classic Console APIs versus Virtual Terminal Sequences Our recommendation is to replace the classic Windows Console API with virtual terminal sequences. Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. The Windows platform still differs from.For console handles, set the CreateFile3 parameters as follows: Parameters Value lpFileName Use the CONIN$ value to specify con... To get the standard input handle, use the GetStdHandle function.CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.Use th... CONIN$ gets a handle to the console input buffer, even if the SetStdHandle function redirects the standard input handle. To get the standard input handle, use the GetStdHandle function. CONOUT$ gets a handle to the active screen buffer, even if SetStdHandle redirects the standard output handle. To get the standard output handle, use.Console Handles A console process uses handles to access the input and screen buffers of its console. The GetStdHandle function provides a mechanism for retrieving the standard input (STDIN), standard output (STDOUT), and standard error (... Initially, STDIN is a handle to the console's input buffer, and STDOUT and STDERR are handles of the.Return value If the function succeeds, the return value is a handle to the specified device, or a redirected handle set by a previous call to SetStdHandle. The handle has GENERIC_READ and GENERIC_WRITE access rights, unless the application has used SetStdHandle to set a standard handle with lesser access. Guidance for replacing a standard handle."
636,GetWindowWord,"Microsoft Build · May 19 – 22, 2025GetWindowWord function (winuser.h) Retrieves the 16-bit (DWORD) value at the specified offset into the extra window memory. Syntax Parameters hWnd A handle to the window and, indirectly, the class to which the window belongs. nIndex The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized child windows. CWindow::Attach Attaches a window to the CWindow object. CWindow::BeginPaint Prepares the window.(Unicode) GetCl... (Unicode) GetClassLongW Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs. GetDesktopWindow.(GetClassName) GetClassNameA Retrieves the name of ... (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the."
637,LoadLibraryExA,"Microsoft Build · May 19 – 22, 2025LoadLibraryExA function (libloaderapi.h) Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded. Syntax Parameters [in] lpLibFileName A string that specifies the file name of the module to load. If the specified module is an executable module, static imports are not.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internati... LoadLibraryA Loads the specified module into the address space of the calling process. (LoadLibraryA) LoadLibraryExA Loads the specified module into the address space of the calling process. (LoadLibraryExA) LoadLibraryExW Loads the.From the March 2002 issue of MSDN Magazine Windows 2000 Loader What Goes... But if you examine a disassembly of LoadLibraryA and LoadLibraryW, you will discover that they are merely thin wrappers around the more versatile LoadLibraryExA and LoadLibraryExW APIs, respectively. With LoadLibraryA, there is a curious test for the DLL twain_32.dll, but.(You might want to ... You may be wondering why I chose to monitor the LoadLibraryExW function. There's a good reason. Because LoadLibrary takes a string parameter, there are both ANSI and Unicode versions of it. The most commonly used form of LoadLibrary is LoadLibraryA. It turns out that LoadLibraryA is just a wrapper around LoadLibraryExA. In.Hello, I have an issue loading the correct DLL. Context: I have an application using .NET Framework 4.8. PS: I added an image with documentation that would technically solve my issue ( https://learn.microsoft.com/en-us/windows/win32/api/LibLoaderAPI/nf-libloaderapi-loadlibraryexa ). PS: I added an image with documentation that would technically.Hi everyone, I am trying to intercept LoadLibrary..() calls (after DLL injection via CreateRemoteThread()) using Microsoft Detours. What API functions does ... I saw NTCreateFile on StackOverflow but not sure of the reliability of this information. Thank you.| LoadLibraryA calls LoadLibraryExA which calls LoadLibraryExW which calls.IOCTL_CHANGER_GET_ELEMENT_STATUS Retrieves the status of all elements or a specified. IOCTL_CHANGER_GET_PARAMETERS Retrieves the parameters of the specified device. IOCTL_CHANGER_GET_PRODUCT_DATA Retrieves the product data for the specified device. IOCTL_CHANGER_GET_STATUS Retrieves the current status of the specified device.."
638,FindFirstFileExW,"Microsoft Build · May 19 – 22, 2025FindFirstFileExW function (fileapi.h) Searches a directory for a file or subdirectory with a name and attributes that match those specified. For the most basic version of this function, see FindFirstFile. To perform this operation as a transacted operation, use the FindFirstFileTransacted function. Syntax Paramete... Tip  Starting in Windows 10,.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (FindFirstFileExA) FindFirstFileExW Searches a directory for a file or subdirectory with a name and.FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counte... FINDEX_INFO_LEVELS Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data. FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.CreateDirectoryW Introduced into api-ms-win... DeleteFileW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindClose Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExW Introduced into api-ms-win-core-file-l1-2-1.dll in.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.This is my code: @Rob Caplan - MSFT regarding your answer: Directory.EnumerateFiles ?| Assuming that the problem comes when calling System.IO.DirectoryInfo.Delete on a Fat32 formatted drive (I'm guessing an external USB drive or such, and that BitLocker is not relevant), for a Directory (or its contents) with a name that includes non-Latin 1....s/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell --If the reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to.This is the stack of the leaking file handle. 0x00007ffafc81fb44: ntdll!NtOpenFile+0x0000000000000014 0x00007ffaf9e19705: KERNELBASE!FindFirstFileExW+0x00000000000001d5 0x00007ffaf9e19f1c: KERNELBASE!FindFirstFileW+0x000000000000001c 0x00007ffae36cddf1: localspl!NPackageInstallLocalspl::TLinkedDriverPackage::RemovePreviousCab+0x00000000000001dd."
639,CreateFiber,"Microsoft Build · May 19 – 22, 2025CreateFiber function (winbase.h) Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This function does not schedule the fiber. To specify both a commit and reserve stack size, use the CreateFiberEx function. Syntax Parameters [in] dwStackSize The initial.Using Fibers The CreateFiber function creates a new fiber for a thread. The creating thread must specify the starting address of the code that the new fiber is to execute. Typically, the starting address is the name of a user-supplied function. Multiple fibers can execute the same function. The following example demonstrates how to create,.(ConvertThre... CreateFiber Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This function does not schedule the fiber. (CreateFiber) CreateFiberEx Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address,.The CreateFiber function is used to create a new fiber from an existing fiber; the call requires the stack size, the starting address, and the fiber data. The starting address is typically a user-supplied function, called the fiber function, that takes one parameter (the fiber data) and does not retu... You can call SwitchToFiber with the address.Remarks The CreateFiber and ConvertThreadToFiber functions return the fiber address when the fiber is created. The GetCurrentFiber macro... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winnt.h.PFIBER_START_ROUTINE callback function (winbase.h) An application-defined function used with the CreateFiber function. Syntax Parameters lpFiberParameter Return value None Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows.Win32-based applications should use the CreateFile function. _lread The _lread function reads data from the specified file. (Unicode) CreateFiber Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This funct... (CreateFiber) CreateFiberEx Allocates a fiber.Return value None Remarks You create fibers with the CreateFiber function. To do this, you must have the address returned to the other thread when it called Create... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.GetFiberData function (winnt.h) Retrieves the fiber data associated with the current fiber. Remarks The fiber data is the value passed to the CreateFiber or ConvertThreadToFiber function in the lpParameter parameter. This value is a... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Thread Stack Size Each new thread or fiber receives its own stack space consisting of both reserved and initially committed memory. To change the initially committed stack space, use the dwStackSize parameter of the CreateThread,."
640,CombineTransform,"Microsoft Build · May 19 – 22, 2025CombineTransform is a function in Microsoft products that allows the combination of two world-space to page-space transformations into a single 3-by-3 matrix. This combined transformation can then be applied to a device context (DC) by using the SetWorldTransform function, which stores the elements of the matrix in an XFORM structure. The elements of the current world transformation matrix can be retrieved using the GetWorldTransform function.References:CombineTransform function (wingdi.h) The CombineTransform function concatenates two world-space to page-space transformations. Syntax Parameters [out] lpxfOut A pointer to an XFORM structure that receives the combined transformation. [in] lpxf1 A pointer to an XFORM structure that specifies the first transformation. [in] lpxf2 A pointer to an.Combined World-to-Page Space Transformations The five world-to-page transformations can be combined into a single 3-by-3 matrix. The CombineTransform function can be used to combine two world-space to page-space transformations. The combined transformations can be used to alter output associated with a particular device context (DC) by calling the.CombineRgn The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode. CombineTransform The CombineTransform function concatenates two world-space to page-space transformations. CopyEnhMetaFileA The CopyEnhMetaFile function copies the contents of an.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Function Description ClientToScreen Converts the client-area coordinates of a specified point to screen coordinates. CombineTransform Concatenates two world-space to page-space transformations. DPtoLP Converts device.CloseMetaFile The CloseMetaFile function closes a metafile device context and returns a handle that identifies a Windows-format metafile. CombineRgn The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode. CombineTransform The CombineTransform function."
641,GetSystemMetrics,"Microsoft Build · May 19 – 22, 2025The GetSystemMetrics function is used to retrieve various system metrics or configuration settings in a Windows application. To use this function in your application, you need to include the appropriate headers and call the function with the desired metric identifier.Here is a basic example of how to use GetSystemMetrics in C:You can pass different constants to GetSystemMetrics to retrieve various metrics. For example, SM_CYHSCROLL retrieves the height of the arrow bitmap on the horizontal scroll bar, while SM_CXVSCROLL retrieves the width of the arrow bitmap on the vertical scroll bar.Make sure to check the documentation for a complete list of available metrics and their meanings.References:GetSystemMetrics function (winuser.h) Retrieves the specified system metric or system configuration setting. Note that all dimensions retrieved by GetSystemMetrics are in pixels. Syntax Parameters [in] nIndex Type: int The system metric or configuration setting to be retrieved. Note that all SM_CX* values are widths and all SM_CY* values are.Multiple Monitor System Metrics The GetSystemMetrics function returns values for the primary monitor, except for SM_CXMAXTRACK and SM_CYMAXTRACK, which refer to the entire desktop. The following metrics are the same for... GetSystemMetrics also has constants that refer only to a Multiple Monitor system. The GetSystemMetrics function returns values.Checking the State of an Accessibility Parameter The following code fragment uses the GetSystemMetrics function to check the ShowSounds parameter. If GetSystemMetrics returns TRUE, the application should present all important ... The following code fragment uses the GetSystemMetrics function to check the ShowSounds parameter. If GetSystemMetrics.The width and height of the drag rectangle are specified by the SM_CXDRAG and SM_CYDRAG values returned by the GetSystemMetrics function. Remarks The system metrics for the drag... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only].Configuration Reference The following functions can be used to control aspects of the configuration of display elements: GetSystemMetrics SystemParametersInfo. Learn more about: Configuration Reference. /windows/win32/winmsg/configuration-reference.Operating System Version The Version API Helper functions are used to determine the version of the operating system that is currently running. Operating system Version number Windows 11 10.0* Windows 10 10.0* Windows Server 2022 10.0* Windows Server 2019 10.0* Windows Server 2016 10.0* Windows 8.1 6.3* Windows Server 2... You can determine the.Tablet PC Platform Info Sample This program checks the presence and configuration of the MicrosoftTablet PC and Touch Technology core components. It determines whether Tablet PC components are enabled in the operating system, listing names... The application uses the GetSystemMetrics Windows API, passing in SM_TABLETPC, to determine whether the.Detecting the Remote Desktop Services environment To optimize performance, it is good practice for application... You should not use GetSystemMetrics(SM_REMOTESESSION) to determine if your application is running in a remote session in Windows 8 and later or Windows Server 2012 and later if the remote session may also be using the RemoteFX vGPU.SystemParameters.IsMiddleEastEnabled Property Definition Namespace: System.Windows Assembly:PresentationFramework.dll Gets a value that indicates whether the system is enabled for Hebrew and Arabic languages. Property V... Attributes SecurityCriticalAttribute Remarks Maps to SM_MIDEASTENABLED. See GetSystemMetrics. XAML attribute usage Applies.SystemParameters.IsMediaCenter Property Definition Namespace: System.Windows Assembly:PresentationFramework.dll Gets a value that indicates whether the current operating system is the Microsoft Windows XP Media Center Edition. Attributes SecurityCriticalAttribute Remarks M... See GetSystemMetrics. XAML attribute usage Applies to. Gets a value."
642,WaitForDebugEvent,"Microsoft Build · May 19 – 22, 2025WaitForDebugEvent function (debugapi.h) Waits for a debugging event to occur in a process being debugged. To force OutputDebugStringW to correctly output Unicode strings, debuggers are required to call WaitForDebugEventEx to opt into the new behavior. ...nd is specifically opting into receiving UnicodeSyntax Parameters [out] lpDebugEvent A.Debugging Functions The following functions are used with debugging. SetThreadContext Sets the context for the specified thread. WaitForDebugEvent Waits for a debugging event to occur in a process being debugged. WaitForDebugEventEx Waits for a debugging event to occur in a process being debugged, and enables support for Unicode strings from.Debugging Events A debugging event is an incident in the process being debugged that causes the sys... If a debugging event occurs while a debugger is waiting for one, the system fills the DEBUG_EVENT structure specified by WaitForDebugEvent with information describing the event. When the system notifies the debugger of a debugging event, it also.debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. (Unicode) WaitForDebugEvent Waits for a debugging event to occur in a process being debugged..DebugActiveProcess function (debugapi.h) Enables a debugger to attach to an active process and debug it. Then the debugger is expected to wait for debugging events by using the WaitForDebugEvent function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop.Writing the Debugger's Main Loop The debugger uses the WaitForDebugEvent function at the beginning of its main loop. This function blocks the debugger until a debugging event occurs. When the debugging event occurs, the system suspends all threads in the process being debugged and notifies the debugger of the event. The following example uses the.Remarks If the WaitForDebugEvent function succeeds, it fills in the members of a DEBUG_EVENT structure. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header minwinbase.h (include Windows.h) See also CREATE_PROCESS_DEBUG_INFO.Debugger Exception Handling The system's handling of user-mode exceptions provides support for sophisticated debuggers. If the debugger is using the WaitForDebugEvent function, the debug event causes that function to return with a pointer to a DEBUG_EVENT structure. This structure contains the process and thread identifiers the debugger can use to.In order to receive these events, the debugger has to call WaitForDebugEvent. ...ocks until either on events listed in Figure 1 occurs for the debuggee, or the timeout given as second parameter elapsesNote that all the debuggee threads are frozen when WaitForDebugEvent unblocks in the debugger and they are released during the ContinueDebugEvent.Process Creation Flags The following process creation flags are used by the CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW, and Creat... It can receive all related debug events using the WaitForDebugEvent function. DEBUG_PROCESS 0x00000001 The calling thread starts and debugs the new process and all child processes created by the new."
643,DefDlgProcA,"Microsoft Build · May 19 – 22, 2025DefDlgProcA function (winuser.h) Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. Remarks The DefDlgProc function is the window procedure for the predefined class of dialog box. This procedure provides internal processing for the.CommDlgExtendedError The CommDlgExtendedError function (commdlg.h) returns a common dialog box error code. (Unicode) DefDlgProcA Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. (ANSI) DefDlgProcW Calls the default dialog box window.(Unicode) DefDlgProcA Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. (ANSI) DefDlgProcW Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window."
644,CoUninitialize,"Microsoft Build · May 19 – 22, 2025CoUninitialize function (combaseapi.h) Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close. Syntax Return value None Remarks A thread must call CoUninitialize once for each successful cal... If there are open.invalidApartmentStateChange MDA Note This article is specific to .NET Framework. The invalidApartmentStateChange managed debugging assistant (MDS) is... The CoUninitialize method (or the CoInitializeEx method) with a different concurrency model is called on the thread. For the second cause, ideally, the code that calls the CoUninitialize method.4.1 General Hookup Example The following example demonstrates how to get a handle that the DCOM Class Object can use to make the rest of the calls. From this point, t... After the client has finished processing, it releases the interface pointer and call the CoUninitialize function to clear up the COM context. The following example demonstrates.In C++, you can add the following code at the beginning of your program or thread: #include &lt;mfapi.h&gt; HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE); if (FAILED(hr)) { } CoUninitialize: After you have finished using Media Foundation components, you should call CoUninitialize to release any resources.For detailed information on threading issues in in-process s... It is also important to uninitialize the library. For each call to CoInitialize or CoInitializeEx, there must be a corresponding call to CoUninitialize. For each call to OleInitialize, there must be a corresponding call to OleUninitialize. In-process servers can assume that the.The following procedure describe... To clean up and shut down a WMI application Release any open COM interfaces. The two primary interfaces you must remember to release are IWbemServices and IWbemLocator. Call CoUninitialize. As with all COM applications, you must call CoUninitialize at the end of your application. Exit your application. The.Hints and Tips The following are hints and tips to consider when writing an application for TAPI 3: COM CoInitialize indirectly creates windows; this is especially important for apartment threading. Do not manipulate COM objects after calling CoU... Some examples in which this can happen are worker threads and C++ destructors that may execute.Metadata Global Static Functions Beginning with the .NET Framework 4, the documentation for the _Cor*, CoInitialize*, CoUninitialize*, and CoEEShutDownCOM functions, which pertain to hosting, is located in Deprecated CLR Hosting Functions. There are no global static functions that pertain to metadata. Related Sections Metadata Interfaces Metadata.Resolution To resolve this problem, remove the CoInitialize calls and the CoUninitialize calls from the affected COM DLL. A COM DLL that exposes COM components and is loaded through COM calls from a client should not call the CoInitialize function or the CoUninitialize function on any thread that is used to load or to start ... However, it is a.Win32/C++ The InkEdit control is a superclass of the Rich Edit 4.5 Win32 OLE embeddable control. Instantiating a Multiline InkEdit Control Instantiating a Single-Line InkEdit Control Note Unlike with RichEdit, you must be sure to call CoInitialize() before creating the InkEdit control. Call CoUninitialize() when your application shuts down. After."
645,GetPrivateProfileSectionA,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileSectionA function (winbase.h) Retrieves all the keys and values for the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit applications written for Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of.GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file. (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function (winbase.h) retrieves the names of all sections in an initialization file. GetPrivateProfileSectionNamesA Retrieves the names of all.GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileSectionA Retrieves all the keys and values for the speci... (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function."
646,GdiGetBatchLimit,"Microsoft Build · May 19 – 22, 2025GdiGetBatchLimit function (wingdi.h) The GdiGetBatchLimit function returns the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded. Syntax Return value If the function succeeds, the return value is the batch limit. Remarks The batch.Windows GDI Overview of the Windows GDI technology. GdiFlush The GdiFlush function flushes the calling thread's current batch. GdiGetBatchLimit The GdiGetBatchLimit function returns the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is.GdiSetBatchLimit function (wingdi.h) The GdiSetBatchLimit function sets the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded. Syntax Parameters [in] dw Specifies the batch limit to be set. A value of 0 sets the default limit. In.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.The GdiGetBatchLimit function returns the batch limit. In order to completely disable batching, call GdiSetBatchLimit (1) during the initialization of each thread. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Painting and Drawing Functions The following functions are used with painting and drawing. GdiFlush Flushes the calling thread's current batch. GdiGetBatchLimit Returns the maximum number of function calls that can be accumulated in the calling thread's current batch. GdiSetBatchLimit Sets the maximum number of function calls that can be."
647,GlobalAddAtomA,"Microsoft Build · May 19 – 22, 2025GlobalAddAtomA function (winbase.h) Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Requirements Requirement Value Minimum sup... Adds a character.AddAtomA Adds a character string to the local atom table and returns a unique value (an at... GlobalAddAtomA Adds a character string to the global atom table and returns a unique value (an atom) identifying the string. (GlobalAddAtomA) GlobalAddAtomExA Adds a character string to the global atom table and returns a unique value (an atom).Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string... GlobalAddAtomA Adds a character string to the global atom table and returns a unique value (an atom)."
648,GetPrivateProfileIntW,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileIntW function (winbase.h) Retrieves an integer associated with a key in the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit Windows-bas... This value is in the form of a string; the GetPrivateProfileInt function converts the string into an integer and returns the.GetPrivateProfileIntA Retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA) GetPrivateProfileIntW The GetPrivateProfileIntW (Unicode) function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. GetPrivateProfileSection The.GetPrivateProfileInt The GetPrivateProfileInt function (winbase.h) retrieves an integer associated with a key in the specified section of an initialization file. (GetPrivateProfileIntA) GetPrivateProfileIntW The GetPrivateProfileIntW (Unicode) function (winbase.h) retrieves an integer associated with a key in the specified section of an.GetPrivateProfileInt function (winbase.h) Retrieves an integer associated with a key in the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit Windows-base... This value is in the form of a string; the GetPrivateProfileInt function converts the string into an integer and returns the."
649,IsCharAlphaA,"Microsoft Build · May 19 – 22, 2025IsCharAlphaA function (winuser.h) Determines whether a character is an alphabetical character. Syntax Parameters [in] ch Type: TCHAR The character to be tested. Return value Type: BOOL If the character is alphabetical, the return value is nonzero. Remarks Note The winuser.h header defines IsCharAlpha as an alias that automatically selects the ANSI.GetSystemMenu Enables the ... InsertMenuA Inserts a new menu item into a menu, moving other items down the menu. (Unicode) IS_INTRESOURCE Determines whether a value is an integer identifier for a resource. IsCharAlphaA Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected.winuser.h header This header is used by multiple technologies. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. There are four types of."
650,EndUpdateResourceA,"Microsoft Build · May 19 – 22, 2025EndUpdateResourceA function (winbase.h) Commits or discards changes made prior to a call to UpdateResource. Syntax Parameters [in] hUpdate Type: HANDLE A module handle returned by the BeginUpdateResource function, and used by UpdateResource, referencing the file to be updated. [in] fDiscard Type: BOOL Indicates whether to write the resource.DnsHostnameToComputerNameA Converts a DNS-style host name to a NetBIOS-style computer name. EncryptFileA Encrypts a file or directory. (Unicode) EndUpdateResourceA Commits or discards changes made prior to a call to UpdateResource. (ANSI) EndUpdateResourceW Commits or discards changes made prior to a call to UpdateResource. EnumResourceLanguagesA.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) BeginUpdateResourceA Retrieves."
651,PeekConsoleInputW,"Microsoft Build · May 19 – 22, 2025PeekConsoleInput function Reads data from the specified console input buffer without removing it from the buffer. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
652,CoCreateGuid,"Microsoft Build · May 19 – 22, 2025CoCreateGuid function (combaseapi.h) Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers. Errors returned by UuidCreate are wrapped as an HRESULT. Remarks The CoCreateGuid function calls the RPC function UuidCreate, which creates a GUID, a globally unique 128-bit integer. Use CoCreateGuid when you need an absolutely.GUID element Applies to: SharePoint 2016 | SharePoint Foundation 2013 | SharePoint Online | SharePoint Server 2013 An internal ID number used in the database. The GUID element generates a globally unique identifier (GUID) as returned by the Microsoft Component Object Model (COM) function CoCreateGuid. Elements and attributes The following sections.CoCreateFreeThreadedMarshaler Creates an aggregatable object capable of context-dependent marshaling. CoCreateGuid Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers. CoCreateInstance Creates a single uninitialized object of the class associated with a specified CLSID. CoCreateInstanceEx Creates an instance of a.For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference combaseapi.h contains the following programming interfaces: Functions CLSIDFromProgID Looks up a CLSID in the registry, given a ProgID. C... CoCreateGuid Creates a GUID, a unique.GUID Creation and Optimizations Because a CLSID, like an interface identifier (IID), is a GUID, no other class, no matter who writes it, has a duplicate CLSID. Server implementers generally obtain CLSIDs through the CoCreateGuid function. This function is guaranteed to produce unique CLSIDs, so server implementers across the world can.CoCancelCall Requests cancellation of an outbound DCOM method c... CoCopyProxy Makes a private copy of the specified proxy. CoCreateFreeThreadedMarshaler Creates an aggregatable object capable of context-dependent marshaling. CoCreateGuid Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers. CoCreateInstance Creates a.... The CLSID key contains information used by the default COM handler to return information about a class when it is in the running state. To obtain a CLSID for your application, you can use the Uuidgen.exe, or use the CoCreateGuid function. The CLSID is a 128-bit number, in hex, within a pair of curly braces. Related topics CoCreateGuid Feedback.The value is generated by an algorithm, developed by Microsoft, which assures this uniqueness. If the result is assigned to a TEXT variable or field, the value is converted t... The algorithm that generates the new GUID value uses Microsoft's CoCreateGuid method. IsNullGUID takes a GUID value as a required argument and returns True/False depending.Guid.NewGuid Method Definition Namespace: System Assemblies:mscorlib.dll, System.Runtime.dll Assemblies:netstandard.dll, System.Runtime.dll Assembly:System.Runtime.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:Guid.Unix.cs Source:Guid.Unix.cs Source:Guid.Unix.cs Initializes a new instance of the Guid structure. The method creates a.Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateGuid Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
653,DrawAnimatedRects,"Microsoft Build · May 19 – 22, 2025DrawAnimatedRects function (winuser.h) Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window. Syntax Parameters [in] hwnd A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window. [in] idAni The type of animation. With.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. DrawAnimatedRects Draws a rectangle and animates it to indicate icon or window activity. DrawCaption Draws a window caption. DrawEdge Draws one or more edges of rectangle. DrawFocusRect Draws a.(ANSI) CharUpperBuffA Converts lowerca... The function converts the characters in place. (ANSI) CharU. CopyRect The CopyRect function copies the coordinates of one rectangle to another. DrawAnimatedRects Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window. DrawEdge The DrawEdge function.CWnd::DragAcceptFiles Indicates the... CWnd::DragDetect Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. CWnd::DrawAnimatedRects Draws a wire-frame rectangle and animates it to indicate the opening of an icon or the.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. DrawAnimatedRects Animates."
654,SetWindowsHookW,"Microsoft Build · May 19 – 22, 2025We couldn't find any results matching ""SetWindowsHookW""... following code examples demonstrate how to perform the following tasks associated with hooks: Installing and Releasing Hook Procedures Monitoring System Events Installing and Releasing Hook Procedures You can install a hook procedure by calli SetWindowsHookEx functionSetWindowsHookEx passes the module handle, a pointer to the hook-procedure.Applications register functions to hook certain events using API functions like SetWindowsHookEx, which adds a filter function to a particular event's hook chain, and UnhookWindowsHookEx, which removes it. Hooks in .NET Setting up hooks in .NET-centric apps is as easy as calling the underlying API functions—that is, SetWindowsHookEx to install a.Hooks Overview A hook is a mechanism by which an. A hook chain is a list of pointers to special, application-defined callback functions called hook procedures. Hook Procedures To take advantage of a particular type of hook, the developer provides a hook procedure and uses the SetWindowsHookEx function to install it into the chain associated with.Hooks A hook is a point in the system message-handling mechanism where an application can install a subroutine to monitor the message traffic in the system and process certain types of messages before they reach the target window procedure. In This Section Name Description Hook Overview Discusses how hooks s... CallWndProc An application-defined....les% CommonProgramW6432=%CommonProgramFiles% Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: The ProgramW6432 and CommonProgramW6432 environment variables were added starting with Windows 7 and Windows Server 2008 R2. 32-bit process PROCESSOR_ARCHITECTURE=x86 PROCESSOR_ARCHITEW6432=%PROCESSOR_ARCHITECTURE%.SetWindowsHookExA function (winuser.h) Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. Note The winuser.h header defines SetWindowsHookEx as an alias that automatically selects the ANSI or Unicode version of this function based on the definition.UnhookWindowsHookEx function (winuser.h) Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include.Use the Microsoft-provided SetWindowsHookEx to set up a global chain of hooks as follows: g_hCBTHook = SetWindowsHookEx(WH_CBT, CBTFunc, g_hCBTModule, 0); It's about window activation, creation, destruction, etc. (WH_CBT) However, currently, when you open a png file using Microsoft.Photos.exe, a window is created, but DLL injection is not.CallMsgFilterA function (wi... Install this hook procedure by using the SetWindowsHookEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.JournalRecordProc function Description An application-defined or library-defined callback function used with the SetWindowsHookEx function. The function records messages the system removes from the system message queue. After the hook procedure returns con... Install the JournalRecordProc hook procedure by specifying the WH_JOURNALRECORD type and."
655,OleInitialize,"Microsoft Build · May 19 – 22, 2025Initializing OLE for MAPI Applies to: Outlook 2013 | Outlook 2016 If you also use OLE, call the OLE function OleInitialize to initialize the OLE libraries. OleInitialize initializes global data for the session and prepares the OLE libraries to accept calls. For information about calling OleInitialize, see the Windows SDK. Office developer client.OleInitialize function (ole2.h) Initializes the COM library on the current apartment, identifies the concurrency model as single-thread apartment (STA), and enables additional functionality described in the Remarks section below. Applications must initialize the COM library before they can call COM library functions other than CoGetMalloc and.OleUninitialize function (ole2.h) Closes the COM library on the apartment, releases any class factories, other COM objects, or servers held by the apartment, disables RPC on the apartment, and frees any resources the apartment maintains. ...eturn value None Call OleUninitialize on application shutdown, as the last COM library call, if the.OLE Initialization Before an application can use OLE system services, it must initialize the OLE system DLLs and verify that the DLLs are the correct version. The AfxOleInit function ini... Syntax Remarks For more information about OLE controls (now called ActiveX controls), see ActiveX Control Topics. Requirements Header: afxdisp.h AfxOleInit....dPicture OleLoadPictureEx OleLockRunning OleMetafilePictFromIconAndLabel OleNoteObjectVisible OleQueryCreateFromData OleQueryLinkFromData OleRegEnumFormatEtc OleRegEnumVerbs OleRun OleSave OleSaveToStream OleSetClipboard OleSetContainedObject OleSetMenuDescriptor OleTranslateAccelerator OleUIAddVerbMenu OleUIBusy OleUICanConvertOrActivateAs.OLE compound document applications call the OleInitialize function, which calls CoInitializeEx and also does some initialization required for compound documents. For each call to CoInitialize or CoInitializeEx, there must be a corresponding call to CoUnini... For each call to OleInitialize, there must be a corresponding call to OleUninitialize..Calling MAPI from Windows Services Applies to: Outlook 2013 | Outlook 2016 To enable MAPI client applications that are written as Windows services to operate wit... A call to the OleInitialize function is also necessary to use the OLE libraries. Both MAPIInitialize and OleInitialize make calls to the CoInitialize function to initialize the.Starting a MAPI Session Applies to: Outlook 2013 | Outlook 2016 Although there is a significant amount of work performed during session start up, the required tasks are minimal. To start a MAPI session Call MAPIInitialize to initialize the standard... If you need to use the OLE libraries, call the OLE function OleInitialize. If you need to use the.MFC ActiveX Controls: Distributing ActiveX Controls This article discusses several issues related to redistributing ActiveX controls: ANSI or Unicode Control Versions Installing ActiveX Controls and Redistributable DLLs Registering Controls Important ActiveX is a legacy technology that should not be used for new development. Note Before your setup.COM and Unicode Guidelines Because Microsoft Active Accessibility is based on Component Object Model (COM), developer... Functions: OleInitialize CoInitialize or CoInitializeEx IUnknown::AddRef and IUnknown::Release VariantInit and VariantClear MultiByteToWideChar and WideCharToMultiByte SysAllocString and SysFreeString Structures and data types:."
656,HeapUnlock,"Microsoft Build · May 19 – 22, 2025HeapUnlock function (heapapi.h) Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses the action of the HeapLock function. Syntax Parameters [in] hHeap A handle to the heap to be unlocked. To get extended error infor... Remarks The HeapLock function is primarily useful for preventing the.HeapLock function (heapapi.h) Attempts to acquire the critical section object, or lock, that is associated with a specified heap. Such threads will remain blocked until the thread that owns the heap lock calls the HeapUnlock function. The HeapLock function is primarily useful for preventing the allocation and release of heap memory by other.heapapi.h header This header is used by System Services. For more information, see: System Services heapapi.h contains the following programming interfaces: Functions GetProcessHeap Retrieves a handle to the default heap of the calling process. HeapSummary The HeapSummary function (heapapi.h) summarizes the specified heap. HeapUnlock Releases.Locking the heap d... Use the HeapLock and HeapUnlock functions to control heap locking during heap enumeration. Examples Enumerating a Heap Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header heapapi.h (include.Enumerating a Heap The following example illustrates the use of the HeapWalk function to enumerate a heap. Then it uses HeapLock to lock the heap so other threads cannot access the heap whil... After enumeration is finished, the example uses HeapUnlock to unlock the heap so that other threads can access it. The following output shows typical.HeapSize Retrieves the size of a memory block allocated from a heap. HeapUnlock Releases ownership of the lock associated with a specified heap. HeapValidate Attempts to validate a specified heap. These functions are provided for compatibility with 16-bit Windows and are used with Dynamic Data Exchange (DDE), the clipboard functions, and OLE data.This function enables you to resize a memory block and change other memory block properties. HeapSize heapapi.h Retrieves the size of a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function. HeapUnlock heapapi.h Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses.HeapCreate function (heapapi.h) Creates a private heap object that can be used by the calling process. Windows Server 2003 and Window... There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. The HeapLock and HeapUnlock functions can be used to block and permit....dumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h ntenclv.h powerbase.h powersetting.h powrprof.h processenv.h processtopologyapi.h profileapi.h pwm.h realtimeapiset.h rtworkq.h secext.h storprop.h synchapi.h sysinfoapi.h systemtopologyapi.h threadpoolapiset.h threadpoollegacyapiset.h timeprov.h timezoneapi.h utilapiset.h vds.h vdshwprv.h."
657,ChangeDisplaySettingsExA,"Microsoft Build · May 19 – 22, 2025ChangeDisplaySettingsExA function (winuser.h) The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. Note  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. Windows 8.ChangeDisplaySettingsA The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExA The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExW The.ChangeDisplaySettingsA The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExA The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExW The."
658,Chord,"Microsoft Build · May 19 – 22, 2025Chord function (wingdi.h) The Chord function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). The chord is outlined by using the current pen and filled by using the current brush. Syntax Parameters [in] hdc A handle to the device context in which the chord appears. [in] x1 The x-coordinate, in.About Chords A chord is a region bounded by the intersection of an ellipse and a line segment called a secant. When calling Chord, an application supplies the coordinates of the upper-left and lower-right corners of the ellipse's bounding rectangle, as well as the coordinates of two points defining two radials. When the system draws the curved.Using PSReadLine key handlers The PSReadLine module provides key handlers that map PSReadLine functions to keyboard chords. Keyboard chords are a sequence of one or more keystrokes that are pressed at the same time. A PSReadLine function is a predefined action that can be performed on a command line. These examples were captured on macOS Ventura.Filled Shape Functions The following functions are used with filled shapes. Function Description Chord Draws an area bounded by an ellipse and a line segment. Ellipse Draws an ellipse. FillRect Fills a rectangle using a brush. FrameRect Draws a border around a rectangle using a brush. PolyPolygon draws a series of closed polygons. Rectangle Draws.2.3.5.4 EMR_CHORD Record The EMR_CHORD record specifies a chord, which is a region bounded by the intersection of an ellipse and a line segment, called a secant. The chord is outlined by using the current pen and filled by using the current brush. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Box ... .... The.2.3.3 Drawing Record Types This section defines the Drawing Record Types, which specify records that perform graphics output. These records use graphics objects and properties specified in the Playback Device Context (section 3.1.5). The following are the Drawing Record Types. Name Section Description META_ARC 2.3.3.1 Draws an elliptical arc..2.3.3.2 META_CHORD Record The META_CHORD Record draws a chord, which is defined by a region bounded by the intersection of an ellipse with a line segment. The chord is outlined using the pen and filled using the brush that are defined  in the playback device context. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize.Set-PSReadLineKeyHandler Module: PSReadLine Binds keys to user-defined or PSReadLine key handler functions. Syntax Description The Set-PSReadLineKeyHandler cmdlet customizes the result when a key or sequenc... Type:String Position:Named Default value:None Required:False Accept pipeline input:False Accept wildcard characters:False -Chord The key or.The default image assets folder is... A Shortcut consists of one or two chords, where each chord consists of a ModifierKey and one Key. Possible values for ModifierKey are LeftAlt, Shift, Control, ControlShift, ControlShiftLeftAlt, and None, where None is only valid when used in the second chord of a shortcut. The same ModifierKey doesn't need to.BeginPath function (wingdi.h) The BeginPath function opens a path bracket in the specified device context. AngleArc Arc ArcTo Chord CloseFigure Ellipse ExtTextOut LineTo MoveToEx Pie PolyBezier PolyBezierTo PolyDraw Polygon Polyline PolylineTo PolyPolygon PolyPolyline Rectangle RoundRect TextOut Examples For an example, see Using Paths.."
659,EnumDateFormatsW,"Microsoft Build · May 19 – 22, 2025EnumDateFormatsW function (winnls.h) Enumerates the long date, short date, or year/month formats that are available for a specified locale. Note  To receive a calendar identifier in addition to date format information, the application should use the EnumDateFormatsEx function. Another reason for preferring this function is that Microsoft is.(Unicode) EnumDateFormatsA Enumerates the long date, short date, or year/month formats that are available for a specified locale. (Unicode) EnumDateFormatsW Enumerates the long date, short date, or year/month formats that are available for a specified locale. ... EnumSystemGeoNames Enumerates the two-letter International Organization for.Prepare your application for the Japanese era change Note On April 1, 2019, the new era name was announced: Reiwa (令和). On April 25, Microsoft released packages for different Windows operating systems containing the updated registry key with the new era name. The following APIs will be impacted: WinRT Windows.Globalization Namespace Calendar Cla...(Unicode) EnumDateFormatsA Enumerates the long date, short date, or year/month formats that are available for a specified locale. EnumDateFormatsExW Enumerates the long date, short date, or year/month formats that are available for a specified locale.Note  Any application that runs on... (Unicode) EnumDateFormatsW Enumerates the long date, short."
660,GetTickCount,"Microsoft Build · May 19 – 22, 2025GetTickCount is a function in Windows that retrieves the number of milliseconds that have elapsed since the system was started. It is commonly used for measuring time intervals in applications. However, it's important to note that the value returned by GetTickCount resets to zero after approximately 776 days of continuous operation on 32-bit applications running on Windows 8, Windows Server 2012, and later versions. To avoid this issue, developers are encouraged to use the GetTickCount64 function, which does not have this limitation.References:GetTickCount function (sysinfoapi.h) Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days. Syntax Return value The return value is the number of milliseconds that have elapsed since the system was started. Remarks The resolution of the GetTickCount function is limited to the resolution of the system.Environment.TickCount Property Definition Namespace: System Assemblies:mscorlib.dll, System.Runtime.Extensions.dll Assemblies:netstandard.dll, System.Runtime.dll Assembly:System.Runtime.Extensions.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:Environment.CoreCLR.cs Source:Environment.CoreCLR.cs Source:Environment.CoreCLR.cs Gets the.Symptoms The time returned by the GetTickCount function resets from 0x9FFFFFF0 to zero if the system runs continuously for approximately 776 days. Status Microsoft has confirmed this is a problem in Windows 8, Windows Server 2012, and later. Workaround Use the GetTickCount64 function instead. More information This problem isn't related to the.GetTickCount64 function (sysinfoapi.h) Retrieves the number of milliseconds that have elapsed since the system was started. Syntax Return value The number of milliseconds. Remarks The resolution of the GetTickCount64 function is limited to the resolution of the system timer, which is typically in the range of 10 milliseconds to 16 milliseconds..IClockVectorElement::GetTickCount method (winsync.h) Gets the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element. Syntax Parameters [out] pullTickCount Returns the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element. .To ensure that applications designed for 16-bit Windows continue to run successfully, the GetTickCount function returns the current Windows time. You typically use the GetTickCount or GetTickCount64 function to compare the current Windows time with the time returned by the GetMessageTime function. GetTickCount and GetTickCount64 are limited to the.The following example shows how to retrieve the interrupt-time count by calling the QueryInterruptTime, QueryInterruptTimePrecise, Query... Link to the OneCore.lib library when you build a console application that calls these functions. To retrieve elapsed time that accounts for sleep or hibernation, use the GetTickCount or GetTickCount64.IMessageFilter::MessagePending method (objidl.h) Indicates that a message has arrived while COM is waiting to respond to a remote call. The application should determine whether to process the message without interrupting the call, ... Syntax Parameters [in] htaskCallee The thread id of the called application. [in] dwTickCount The number of ticks.Is QueryPerformanceCounter() the same as the Win32 GetTickCount() or GetTickCount64() function. GetTickCount and GetTickCount64 aren't related to QPC. When... Hardware timers consist of three parts: a tick generator, a counter that counts the ticks, and a means of retrieving the counter value. The reciprocal of the frequency is called the period.IClockVectorElement interface (winsync.h) Represents a clock vector element of a knowledge structure. IClockVectorElement::GetTickCount Gets the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element. Requirements Requirement Value Minimum supported client Windows 7 [desktop apps only]."
661,GetFileSize,"Microsoft Build · May 19 – 22, 2025The GetFileSize function is used in programming to retrieve the size of a file. When using this function, it's important to consider that files on the NTFS file system can have multiple streams. Therefore, if your application does not check for these multiple streams, it may underestimate the total size of the file.To use the GetFileSize function, you typically need to:Here is a basic example in C++:This code opens a file named ""example.txt"", retrieves its size, and prints it to the console.References:GetFileSize function (fileapi.h) Retrieves the size of the specified file, in bytes. It is recommended that you use GetFileSizeEx. To determine the file type for hFile, use the GetFileType function. The GetFileSize function retrieves the uncompressed size of a file. Use the GetCompressedFileSize function to obtain the compressed size of a file. In.WebRequestMethods.Ftp.GetFileSize Field Definition Namespace: System.Net Assemblies:netstandard.dll, System.Net.Requests.dll Assembly:System.Net.Requests.dll Assembly:System.dll Assembly:netstandard.dll Represents the FTP SIZE protocol method that is used to retrieve the size of a file on an FTP server. Field Value String Applies to. Represents.Obtaining the Size of a Sparse File Use the GetCompressedFileSize function to obtain the actual size allocated on disk for a sparse file. ...s which were deallocated because they were filled wiUse the GetFileSize function to determine the total size of a file, including the size of the sparse regions that were deallocated. Get the allocated size.IXtfFileIOClient::GetFileSize Method Retrieves the size of the specified file on the development console. Syntax Parameters pszFileName Type: LPCWSTR Pointer to the filename of the file to get the size of. pullFileSize Type: PULONGLONG Pointer that receives the size of the specified file, in bytes. Return value Type: HRESULT Returns S_OK if.Determining the Size of a File The GetFileSize function retrieves the size of a file. Because the NTFS file system implementation of files allows for multiple streams within a file, any application you write that accesses files must account for the possibility that the creator of the file can include multiple streams in the file. If multiple.IRdcFileReader::GetFileSize method (msrdc.h) The GetFileSize method returns the size of a file. Syntax Parameters [out] fileSize Address of a ULONGLONG that on successful return will be filled with the size of the file, in bytes. Return value If this method succeeds, it returns S_OK. ...e, it returns an HRESULT erRequirements Requirement Value.IBitsPeerCacheRecord::GetFileSize method (bits3_0.h) Gets the size of the file. Syntax Parameters [out] pVal Size of the file, in bytes. Return val... Return code Description S_OK Success Requirements Requirement Value Minimum supported client Windows Vista Minimum supported server Windows Server 2008 Target Platform Windows Header bits3_0.h.Obtaining the Size of a Compressed File Use the GetCompressedFileSize function to obtain the compressed size of a file. If the file is compressed, its compressed size will be less than its uncompressed size. Use the GetFileSize function to determine the uncompressed size of a file. To obtain the compressed size of a file use the.IDWriteFontFileStream::GetFileSize method (dwrite.h) Obtains the total size of a file. Syntax Parameters [out] fileSize Type: UINT64* When this method returns, contains the total size of the file. Return value Type: HRESULT If this method succeeds, it returns S_OK. Requirements Requirement Value Minimum supported client Windows 7, Windows Vista.IOfflineFilesFileSysInfo::GetFileSize method (cscobj.h) Retrieves the size of an item. Syntax Parameters [in] copy An OFFLINEFILES_ITEM_COPY enumeration value identifying which copy (local or remote) to retrieve the size of. Windows Vista:  This value must be OFFLINEFILES_ITEM_COPY_LOCAL. [out] pSize Receive the size, in bytes, of the item. ."
662,GetFileAttributesExW,"Microsoft Build · May 19 – 22, 2025GetFileAttributesExW function (fileapi.h) Retrieves attributes for a specified file or directory. To perform this operation as a transacted operation, use the GetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file or directory. Note The fileapi.h header defines GetFileAttributesEx as an alias that.FindNextFileW Intro... GetDiskFreeSpaceExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExW Introduced into api-ms-win-core-file-l1-2-1.dll in.For example, ![GetFileAttributesExW][1] returned me &quot;524605&quot; But in fact, the filelength is &quot;8507&quot; This only happens on the samba server, which is established on a ramdisk This problem occurs probabilistically. GetFileAttributesExW return me a wrong result when querying a file on a samba server which is established on a.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (ANSI) GetFileAttributesExA Retrieves attributes for a specified file or directory. (ANSI).These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. NVME_LOG_PAGES Contains values that indicate....reply is helpful, please Upvote and Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, Copy CopyFileExW, CreateFileW, CreateFile2,.GetFileAttributesExW -&gt; CdpDispatchCleanup| A random user's morning: ah, what a good morning! let's make a cup of coffee, open a browser and go to, let's say, \.\globalroot\device\condrv\kernelconnect, because I'm just curious what's going to happen since I never tried this before.| Hi， It seems a known issue now. Please check the information.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,."
663,CreateDirectoryExW,"Microsoft Build · May 19 – 22, 2025CreateDirectoryExW function (winbase.h) Creates a new directory with the attributes of a specified template directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. To perform this operation as a transacted operation, use the.(Unicode) CreateBoundaryDescriptorA The CreateBoundaryDescriptorA (ANSI) func... CreateDirectory The CreateDirectory function (winbase.h) creates a new directory. CreateDirectoryExA Creates a new directory with the attributes of a specified template directory. (ANSI) CreateDirectoryExW Creates a new directory with the attributes of a specified.We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path... Here are the directory management functions that no longer.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.Functions without MAX_PATH restrictions These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CreateDirectoryW, CreateDirectoryExW GetCurrentDirectoryW RemoveDirectoryW SetCurrentDirectoryW. These are the file management functions that no longer have MAX_PATH restrictions if you.The following code compiles without errors in Visual Stu... The std::filesystem::create_directory 2-parameter version was changed to call the 1-parameter version, as the underlying CreateDirectoryExW function would use copy_symlink when the existing_p was a symlink. std::filesystem::directory_iterator no longer fails when a broken symlink is."
664,SetPolyFillMode,"Microsoft Build · May 19 – 22, 2025SetPolyFillMode function (wingdi.h) The SetPolyFillMode function sets the polygon fill mode for functions that fill polygons. Syntax Parameters [in] hdc A handle to the device context. [in] mode The new fill mode. Value Meaning ALTERNATE Selects alternate mode (fills the area between odd-numbered and even-numbered polygon sides on each scan line)..2.3.11.22 EMR_SETPOLYFILLMODE Record The EMR_SETPOLYFILLMODE record defines polygon fill mode. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size PolygonFillMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETPOLYFILLMODE. PolygonFillMode (4 bytes): An unsigned integer that specifies the.Whenever an application fills a path, the system uses the DC's current fill mode. An application can retrieve this mode by calling the GetPolyFillMode function, and it can set a new fill mode by calling the SetPolyFillMode function. For a description of the two fill modes, see Regions. The following illustration shows the cross-section of an.About Polygons A polygon is a filled shape with straight sides. The two fill modes, alternate (the default) and winding, determine whether regions within a complex polygon are filled or left unpainted. An application can select either mode by calling the SetPolyFillMode function. For more information about polygon fill modes, see Regions. In.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the resu... RectInRegion Determines whether any part of the specified rectangle is within the boundaries of a region. SetPolyFillMode Sets the polygon fill mode for functions that fill polygons. SetRectRgn.Filling Regions An application fills the interior of a region by calling the FillRgn function and supplying a handle that identifies a specific brush. When an application calls FillRgn , the system fills the region with the brush by using the current fill mode for the specified device context. The application can set the fill mode for a device.3.2.17 EMR_SETPOLYFILLMODE Example 1 This section provides an example of the EMF EMR_SETPOLYFILLMODE record ([MS-EMF] section 2.3.11.22). 00000130:                13 00 00 00 0C 00 00 00 00000140: 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000013) Size (0x0000000C) PolygonFillMode (0x00000001) Type (4.2.3.5.20 META_SETPOLYFILLMODE Record The META_SETPOLYFILLMODE Record sets polygon fill mode in the playback device context for graphics operations that fill polygons. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction PolyFillMode Reserved (optional) RecordSize (4 bytes): A 32-bit unsigned integer that.CDC::PolylineTo Draws one or more straight lines and moves the current position to the ending point of the last line. CDC::PolyPolygon Creates two or more polygons that are filled using the current polygon-filling mode. The polygons may be disjoint or they may overlap. SetPixelV is faster than SetPixel because it doesn't need to return the color.3.2.48 EMR_SETPOLYFILLMODE Example 2 This section provides an example of the EMF EMR_SETPOLYFILLMODE record ([MS-EMF] section 2.3.11.22). 00000700: 13 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000013) Size (0x0000000C) PolygonFillMode (0x00000001) Type (4 bytes): 0x00000013."
665,SetCurrentDirectoryW,"Microsoft Build · May 19 – 22, 2025We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path... Here are the directory management functions that no longer.SetCurrentDirectory function (winbase.h) Changes the current directory for the current process. Syntax Parameters [in] lpPathName The path to the new current directory. This parameter may specify a relative path or a full path. In either case, the full path of the specified directory is calculated and stored as the current directory. For more.Functions without MAX_PATH restrictions These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CreateDirectoryW, CreateDirectoryExW GetCurrentDirectoryW RemoveDirectoryW SetCurrentDirectoryW. These are the file management functions that no longer have MAX_PATH restrictions if you.We'll refer to those versions here as ""Windows"", calling out any exceptions where... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft."
666,InitAtomTable,"Microsoft Build · May 19 – 22, 2025InitAtomTable function (winbase.h) Initializes the local atom table and sets the number of hash buckets to the specified size. Syntax Parameters [in] nSize Type: DWORD The number of hash buckets to use for the atom table. If this parameter is zero, the default number of h... If the atom table has already been initialized, either explicitly by a.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string... This protects secure server data from unauthorized DDE clients. InitAtomTable Initializes the local atom.GlobalSize Retrieves the current size of the specified global memory object, in bytes. HasOverlappedIoCompleted Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation. InitAtomTable Initializes the local atom table and sets the number of hash buckets to the specified size..About Atom Tables An atom table is a system-defined table that stores strings and corresponding identifiers. An application places a string in an ... By default, a local atom table uses 37 buckets for its hash table. However, you can change the number of buckets used by calling the InitAtomTable function. If the application calls InitAtomTable,.Atom Functions In this section AddAtom DeleteAtom FindAtom GetAtomName GlobalAddAtom GlobalDeleteAtom GlobalFindAtom GlobalGetAtomName InitAtomTable. . | Atom Functions. /windows/win32/dataxchg/atoms-functions."
667,GetSystemDirectoryA,"Microsoft Build · May 19 – 22, 2025GetSystemDirectoryA function (sysinfoapi.h) Retrieves the path of the system directory. The system directory contains system files such as dynamic-link libraries and drivers. This function is provided primarily for compatibility. Applications should store code in the Program Files folder and persistent data in the Application Data folder in the.The current directory for the parent process. The 32-bit Windows system directory. Use the GetSystemDirectoryA function function to get the path of this directory. The 16-bit Windows system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is System. The Windows directory. Use.sysinfoapi.h header This header is used by multiple technologies. GetSystemDirectoryA Retrieves the path of the system directory. (ANSI) GetSyste... The retrieved information is in Coordinated Universal Time (UTC) format. GetSystemWindowsDirectoryA Retrieves the path of the shared Windows directory on a multi-user system. (ANSI).CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. CreateDirectoryW Introduced into... Moved into."
668,GetPaletteEntries,"Microsoft Build · May 19 – 22, 2025GetPaletteEntries function (wingdi.h) The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette. Syntax Parameters [in] hpal A handle to the logical palette. [in] iStart The first entry in the logical palette to be retrieved. [in] cEntries The number of entries in the logical palette to be.GetEnhMetaFilePaletteEntries The GetEnhMetaFilePaletteEntries function retrieves optional palette entries from the specified enhanced metafile. GetNearestPaletteIndex The GetNearestPalet... (Unicode) GetPaletteEntries The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette..GetNearestPaletteIndex The GetNea... (Unicode) GetPaletteEntries The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette. GetSystemPaletteEntries The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context.IDirect3DDevice9::GetPaletteEntries method (d3d9helper.h) Retrieves palette entries. Syntax Parameters [in] PaletteNumber Type: UINT An ordinal value identifying the particular palette to retrieve. [in, out] pEntries Type: PALETTEENTRY* Pointer to a PALETTEENTRY structure, representing the returned palette entries. Requirements Requirement... The.IDirect3DDevice9::GetPaletteEntries method (d3d9.h) Retrieves palette entries. Syntax Parameters [in] PaletteNumber Type: UINT An ordinal value identifying the particular palette to retrieve. [in, out] pEntries Type: PALETTEENTRY* Pointer to a PALETTEENTRY structure, representing the returned palette entries. Requirements Requirement Value Target.IDWriteFontFace2::GetPaletteEntries method (dwrite_2.h) Gets color values from the font's color palette. Syntax Parameters colorPaletteIndex Zero-based index of the color palette. Requirements Requirement Value Minimum supported client Windows 8.1 [desktop apps only] Minimum supported server Windows Server 2012 R2 [desktop apps only] Target.GetSystemPaletteEntries function (wingdi.h) The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context (DC). Syntax Parameters [in] hdc A handle to the device context. [in] iStart The first entry to be retrieved from the system palette. [in] cEntries The.Color Functions The following functions are used with color. F... GetNearestPaletteIndex Retrieves the index for the entry in the specified logical palette most closely matching a specified color value. GetPaletteEntries Retrieves a specified range of palette entries from the given logical palette. GetSystemPaletteEntries Retrieves a range of.GetDepthStencilSurface The IDirect3DDevice9::GetDepthStencilSurface method (d3d9.h) gets the depth-stencil surface owned by the D... GetDepthStencilSurface The IDirect3DDevice9::GetDepthStencilSurface method (d3d9.h) gets the depth-stencil surface owned by the Direct3DDevice object. GetDesc The IDirect3D. GetPaletteEntries The.IDWriteFontFace2::GetPaletteEntries method (dwrite_2.h) Syntax Parameters colorPaletteIndex firstEntryIndex entryCount paletteEntries Requirements Requirement Value Header dwrite_2.h. /windows/windows-app-sdk/api/win32/dwrite_2/nf-dwrite_2-idwritefontface2-getpaletteentries."
669,GetMailslotInfo,"Microsoft Build · May 19 – 22, 2025GetMailslotInfo function (winbase.h) Retrieves information about the specified mailslot. Syntax Parameters [in] hMailslot A handle to a mailslot. The CreateMailslot function must create this handle. [out, optional] lpMaxMessageSize The maximum message size, in bytes, allowed for this mailslot. Requirements Requirement Value Minimum supported.Mailslot Functions The following functions can be used with mailslots. Function Description CreateMailslot Creates a mailslot with the specified name. GetMailslotInfo Retrieves information about the specified mailslot. SetMailslotInfo Sets the time-out value used by the specified mailslot for a read operation. The following functions can be used.Reading from a Mailslot The process that creates a mailslot can read messages from it by using the mailslot handle in a call to the ReadFile function. The following example calls the GetMailslotInfo function to determine whether there are messages in the mailslot. If messages are waiting, each is displayed along with the number of messages.Mailslot Operations When working with mailslots, clients and servers should use only the functions discussed in the following tables. Do not... Function Description CreateMailslot Creates a mailslot and returns a mailslot handle. GetMailslotInfo Retrieves the maximum message size, the mailslot size, the size of the next message in the mailslot,.Creating a Mailslot Mailslots are supported by three specialized functions: CreateMailslot, GetMailslotInfo, and SetMailslotInfo. These functions are used by the mailslot server. The following code sample uses the CreateMailslot function to retrieve the handle to a mailslot named ""sample_mailslot"". To cr... Mailslots are supported by three.4 Protocol Examples Mailslots are supported by three higher-level specialized functions, CreateMailslot, GetMailslotInfo, and SetMailslotInfo. These functions are used by the mailslot server. GetMailslotInfo and SetMailslotInfo are server-specific configurations about how long the server will block a read request while waiting for the message to.(CreateJobObjectA) CreateMailslotA Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. (ANSI) CreateMailslotW Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. (Unicode).SetMailslotInfo function (winbase.h) Sets the time-out value used by the specified mailslot for a read operation. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library.CreateMailslotA function (winbase.h) Creates a mailslot with the specified name and returns a handle that... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library.CreateMailslotW function (winbase.h) Creates a mailslot with the specified name and returns a handle that... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library."
670,FileTimeToDosDateTime,"Microsoft Build · May 19 – 22, 2025FileTimeToDosDateTime function (winbase.h) Converts a file time to MS-DOS date and time values. Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the file time to convert to MS-DOS date and time format. [out] lpFatDate A pointer to a variable to receive the MS-DOS date. Bits Description 0–4 Day of the month (1–31) 5–8.MS-DOS Date and Time MS-DOS date and MS-DOS time are packed 16-bit values that specify the month, day, year, and time of day an MS-DOS file was last written to. When you use the GetFileTime function to retrieve the f... You can convert the value back to an MS-DOS date and time by using the FileTimeToDosDateTime function. MS-DOS date and MS-DOS.DosDateTimeToFileTime function (winbase.h) Converts MS-DOS date and time values to a file time. Syntax Parameters [in] wFatDate The MS-DOS date. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.The following functions are used with MS-DOS date and time. Function Description DosDateTimeToFileTime Converts MS-DOS date and time values to a file time. FileTimeToDosDateTime Converts a file time to MS-DOS date and time values. The following functions are used with Windows time. Function Description GetSystemTimes Retrieves system timing.(ANSI) DnsHostnameToComputerNameW Converts a DNS-style host name to a NetBI... (Unicode) DosDateTimeToFileTime Converts MS-DOS date and time values to a file time. EncryptFileA Encrypts a file or directory. (ANSI) FileEncryptionStatusW Retrieves the encryption status of the specified file. (Unicode) FileTimeToDosDateTime Converts a file time to.SystemTimeToFileTime function (timezoneapi.h) Converts a system time to file time format. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header timezoneapi.h (include Windows.h) Library.To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplauncher.h iwscapi.h l....Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib.FileTimeToSystemTime function (timezoneapi.h) Converts a file time to system time format. ...orted client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header timezoneapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also DosDateTimeToFileTime."
671,WriteConsoleW,"Microsoft Build · May 19 – 22, 2025WriteConsoleW is a function in the Windows API that writes Unicode characters to the console screen buffer at the current cursor position. When used, the cursor position advances as characters are written. This function is part of the high-level console I/O functions, which also include WriteConsole for ANSI characters.To use WriteConsoleW, you need to provide a handle to the console's output buffer, a pointer to the buffer containing the characters to be written, the number of characters to write, and a pointer to a variable that receives the number of characters written. It is important to note that WriteConsoleW can only be used with console handles and will fail if used with a standard handle that has been redirected.Additionally, the function allows for the use of color attributes associated with the console screen buffer, which can be modified using the SetConsoleTextAttribute function.References:WriteConsole function Writes a character string to a console screen buffer beginning at the current cursor location. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL.Hello, I am developing an command line application which shall be able to fully support Unicode. To be able to do this, the application a) runs in modern &quot;Windows Terminal&quot; b) uses ReadConsoleW / WriteConsoleW instead of the C and C++ standard library functions. Kind Regards, Florian Thake| Hi, @Florian Thake You coul... To be able to do.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
672,GetDateFormatA,"Microsoft Build · May 19 – 22, 2025GetDateFormatA function (datetimeapi.h) Formats a date as a date string for a locale specified by the locale identifier. The function formats either a specified date or the local system date. Note  For interoperability reasons, the application should prefer the GetDateFormatEx function to GetDateFormat because Microsoft is migrating toward the use.datetimeapi.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications datetimeapi.h contains the following programming interfaces: Functions GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. (ANSI).(ANSI) GetCurrencyFormatEx Formats a number string as a currency string for a locale specified by name.Note  The a... GetCurrencyFormatW Formats a number string as a currency string for a locale specified by identifier. (Unicode) GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. (ANSI) GetDateFormatEx.Prepare your application for the Japanese era change Note On April 1, 2019, the new era name was announced: Reiwa (令和). On April 25, Microsoft released packages for different Windows operating systems containing the updated registry key with the new era name. The following APIs will be impacted: WinRT Windows.Globalization Namespace Calendar Cla..."
673,LPtoDP,"Microsoft Build · May 19 – 22, 2025LPtoDP function (wingdi.h) The LPtoDP function converts logical coordinates into device coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation. Syntax Parameters [in] hdc A handle to the device context. [in, out] lppt A pointer.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. GetWorldTransform Retrieves the ... LPtoDP Converts logical coordinates into device coordinates. MapWindowPoints Converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to.CDC::DPtoHIMETRIC Converts device units into HIMETRIC units. CDC::DPtoLP Converts device units into logical units. CDC::Draw3dRect Draws a three-dimensional rectangle. CDC::HIMETRICtoLP Converts HIME... CDC::LineTo Draws a line from the current position up to, but not including, a point. CDC::LPtoDP Converts logical units into device units..For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases eve... (Unicode).The formula first offsets the point fr... This value, no longer biased by the origin, is then scaled into the destination coordinate system by the ratio of the extents. Finally, the scaled value is offset by the destination origin to its final mapping. The LPtoDP and DPtoLP functions may be used to convert from logical points to device points and.DPtoLP function (wingdi.h) The DPtoLP function converts device coordinates into logical coordinates. The conversion depends on the... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.All input... Use the LPtoDP and DPtoLP functions to convert to and from logical coordinates, if necessary. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Before you call a function that requires normalized rectangles, you can normalize non-normalized rectangles by calling the NormalizeRect function. Use caution when manipulating a CRect with the CDC::DPtoLP and CDC::LPtoDP member functions. If the mapping mode of a display context is such that the y-extent is negative, as in MM_LOENGLISH, then.DeleteEnhMetaFile The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle. After the object is deleted, the specified handle is no longer valid. DPtoLP The DPtoLP function converts device coordinates into logical coordinates. The ellipse is outlined by using the current pen and is filled by using.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a CWnd object. Public Met... CWnd::OnDrawIconicThumbnailOrLivePreview Called by the framework when it needs to obtain a bitmap to be displayed on Windows 7 tab."
674,CreateScalableFontResourceA,"Microsoft Build · May 19 – 22, 2025CreateScalableFontResourceA function (wingdi.h) [The CreateScalableFontResource function is available for use in the operating systems specified in the Requirements section. The CreateScalableFontResource function creates a font resource file for a scalable font. Syntax Parameters [in] fdwHidden Specifies... An application uses the.CreateRoundRectRgn The CreateRoundRectRgn function creates a rectangular region with rounded corners. CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font..CreateRectRgnIndirect The CreateRectRgnIndi... CreateRoundRectRgn The CreateRoundRectRgn function creates a rectangular region with rounded corners. CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates."
675,GetSystemTimeAdjustment,"Microsoft Build · May 19 – 22, 2025GetSystemTimeAdjustment function (sysinfoapi.h) Determines whether the system is applying periodic time adjustments to its time-of-day clock, and obtains the value and period of any such adjustments. Remarks The GetSystemTimeAdjustment and SetSystemTimeAdjustment functions can be used to support algorithms that want to synchronize the time-of-day.SetSystemTimeAdjustment function (sysinfoapi.h) Enables or disables periodic time adjustments to the system's time-of-day clock. When enabled, such time adjustments can be used to synchronize the time of day with some other source of time information. Remarks The GetSystemTimeAdjustment and SetSystemTimeAdjustment functions support algorithms that.UTC-based time is loosely defined as the current date and time of day in Greenwich, England. The GetSystemTimeAdjustment and SetSystemTimeAdjustment functions synchronize the time-of-day clock with another time source using a periodic time adjustment applied at each clock interrupt. Note that the system can periodically refresh the time by.Table of contents Exit... Function Description GetSystemTime Retrieves the current system date and time in UTC format. GetSystemTimeAdjustment Determines whether the system is applying periodic time adjustments to its time-of-day clock. GetTimeFormat Formats a system time as a time string for a specified locale. NtQuerySystemTime Returns the.sysinfoapi.h header This header is used by multiple technologies. ... GetSystemTimeAdjustment Determines whether the system is applying periodic time adjustments to its time-of-day clock, and obtains the value and period of any such adjustments. GetSystemTimeAdjustmentPrecise Determines whether the system is applying periodic, programmed time.ClockRes v2.1 By Mark Russinovich Published: July 4, 2016 Download ClockRes (494 KB) Introduction Ever wondered what the resolution of the system clock was, or perhaps the maximum timer resolution that your application could obtain. The answer lies in a simple function named GetSystemTimeAdjustment, and the ClockRes applet performs the function.To help software such as Network Time Protocol (NTP) clients keep the time synchronized to an external source, Windows NT exposes the SetSystemTimeAdjustment API. This API takes two parameters, the time adjustment itself in 100-nanosecond unit... When time adjustment is enabled, the system adds the value of the specified time adjustment at each.Date and time data types Date and time ... Higher-precision system date and time functions Since SQL Server 2008 (10.0.x), the Database Engine derives the date and time values through use of the GetSystemTimeAsFileTime() Windows API. Use the GetSystemTimeAdjustment() Windows API to determine the accuracy. Function Syntax Return value Return data.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header sysinfoapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetLocalTime GetSystemTimeAdjustment.SYSDATETIME (Transact-SQL) Applies to: SQL Server Azure SQL Database Azure SQL Managed Instance Azure Synapse Analytics Analytics Platform System (PDW) SQL analytics endpoint in Microsoft Fabric Warehouse in Microsoft Fabric Returns a datetime2(7) value that contains the date and time of the computer on which the instance of SQL Server is running.."
676,BitBlt,"Microsoft Build · May 19 – 22, 2025BitBlt, short for ""bit block transfer,"" is a function used in graphics programming to perform a bit-block transfer of color data. It copies data from a source bitmap into a destination bitmap. The BitBlt function requires two device context handles: one for the source and one for the destination. It effectively allows for the transfer of pixel data between different areas of memory, which is essential for rendering images and graphics in applications.To use BitBlt, an application must first create compatible device contexts and select the appropriate bitmaps into these contexts. Once set up, the BitBlt function can be called to transfer the image data from the source to the destination.References:BitBlt function (wingdi.h) The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. Syntax Parameters [in] hdc A handle to the destination device context. [in] x The x-coordinate, in logical units, of the upper-left corner.For a full-screen device, a user-mode display driver must lock a rotated resource, render to a rotated resource, and perform bit-block transfers (bitblt) from a rotated resource. ...a user-mode display driver must p bitblt that involves a rotated resource and a non-rotated resource, the Direct3D runtime specifies the Rotate bit-field flag in the.The BitBlt function captures images. This function performs a bit block transfer that is, it copies data from a source bitmap into a destination bitmap. However, the two arguments to this function are not bitmap handles. Instead, BitBlt receives handles that identify two device contexts and copies the bitmap data from a bitmap selected into the.How to: Copy Pixels for Reducing F... One way to limit this problem is to use a ""bitblt"" process on the graphic. Bitblt is the ""bit-block transfer"" of the color data from an origin rectangle of pixels to a destination rectangle of pixels. With Windows Forms, bitblt is accomplished using the CopyFromScreen method of the Graphics class. In the.IDirectDrawSurface7::Blt method (ddraw.h) Performs a bit block transfer (bitblt). This method does not support z-buffering or alpha blending during bitblt operations. Syntax Parameters [in] unnamedParam1 A pointer to a RECT structure that defines the upper-left and lower-right points of the rectangle to bitblt to on the destination surface. If.PFND3DDDI_BLT callback function (d3dumddi.h) The Blt function copies the contents of a source surface to a destination surface. Syntax Parameters hDevice A handle to the display device (graphics context). unnamedParam2 pData [in] A pointer to a D3DDDIARG_BLT structure that describes the parameters of the bit-block transfer (bitblt). Return value.DXGI_DDI_ARG_BLT_FLAGS structure (dxgiddi.h) The DXGI_DDI_ARG_BLT_FLAGS structure identifies the type of bit-block transfer (bitblt) to perform. Syntax Members Resolve A UINT value that specifies that the bitblt resolves multiple samples to one pixel. Requirements Requirement Value Minimum supported client Available in Windows Vi... The.D3DDDI_BLTFLAGS structure (d3dumddi.h) The D3DDDI_BLTFLAGS structure identifies the type of bit-block transfer (bitblt) to perform. For example: If the present operation consists of one bitblt, the bitblt is marked as follows: BeginPresentToDwm = TRUE; ContinuePresentToDwm = FALSE; EndPresentToDwm = TRUE; If the present operation consists of two....end function (wingdi.h)"", https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-alph [MSDN-BitBlt] Microsoft Corporation, ""BitBlt function"", http://msdn.microsoft.com/en-us/library/dd183370.aspx [MSDN-CW] Microsoft Corporation, ""Character Widths"", http://msdn.microsoft.com/en-us/library/dd183418.aspx [MSDN-SWH] Microsoft.PFND3DDDI_TEXBLT1 callback function (d3dumddi.h) Performs a bit-block transfer (bitblt) operation from a source texture to a destination texture, including all of the sublevels of the source texture. Remarks The Microsoft Direct3D runtime calls the user-mode display driver's TexBlt function to inform the driver to perform a bitblt operation from a."
677,CoRegisterMessageFilter,"Microsoft Build · May 19 – 22, 2025CoRegisterMessageFilter function (objbase.h) Registers with OLE the instance of an IMessageFilter interface, which is to be used for handling concurrency issues on the current thread. Syntax Parameters [in, optional] lpMessageFilter A pointer to the IMessageFilter interface on the message filter. This message filter should be registered on the.CoRegisterMallocSpy Registers an implementation of the IMallocSpy interface, thereafter requiring OLE to call its wrapper methods around every call to the corresponding... CoRegisterMessageFilter Registers with OLE the instance of an IMessageFilter interface, which is to be used for handling concurrency issues on the current thread..CoRegisterInitializeSpy Registers an implementation of the IInitializeSpy interface. CoRegisterMallocSpy Registers an implementation of the IMallocSpy interface, thereafter requiring OLE to call its wrapper methods around every call to the corresponding IMalloc method. CoRegisterMessageFilter Registers with OLE the instance of an IMessageFilter.CoHandlePriorityEventsFromMessagePump Called by message dispatchers on an ASTA thread after dispatching a windows message to provide an opportunity for short-running infrastructural COM calls and other high-priority or short-running COM work to be dis... CoRegisterActivationFilter Registers a process-wide filter to process activation requests..Microsoft 365 Excel version 2403. C# application (WPF on .Net 8) using excel COM interop (&quot;automation&quot;) which adds a menu in the Excel application and ... Anyone have some hints?| What you describe is ordinary behavior for a COM Server that is using a message filter to control concurrency. Although I don't recommend doing this you could."
678,Rectangle,"Microsoft Build · May 19 – 22, 2025The rectangle is outlined by using the current pen and filled by using the current brush. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle. [in] top The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle. [in] right.How to: Draw a Rectangle This example shows how to draw a rectangle by using the Rectangle element. To draw a rectangle, create a Rectangle element and specify its Width and Height. To paint the inside of the rectangle, set its Fill. See also Rectangle Shape Elements Sample Shapes and Basic Drawing in WPF Overview Table Overview. Learn how to draw.Drawing Rectangles A rectangle is a four-sided polygon whose opposing sides are parallel and equal in length. Although an application can draw a rectangle by calling the Polygon function, supplying the coordinates of each corner, the Rectangle function provides a simpler method. This function re... InvertRect Inverts the colors that appear within.Add a rectangle or container to a Power BI paginated report (Power BI Report Builder) APPLIES TO: Power BI Report Builder Power BI Desktop Add a rectangle to a paginated report when you want a graphical element to separate areas of the report, emphasize areas of a report, or provide a background for on... You can customize the appearance of a.Rectangle Browse the sample The .NET Multi-platform App UI (.NET MAUI) Rectangle class derives from the Shape class, and can be used to draw rectangles and squares. For information on the properties that the Rectangle class inherits from the Shape class, see .NET MAUI Shapes. Rectangle defines the following properties: RadiusX, of type double,.Rectangles Applications use rectangles to specify rectangular areas on the screen or in a window. About Rectangles Using Rectangles Rectangle Reference. Applications use rectangles to specify rectangular areas on the screen or in a window.. /windows/win32/gdi/rectangles.Rectangle Class Package:com.microsoft.azure.management.mediaservices.v2020_05_01 Maven Artifact:com... Constructor Summary Constructor Description Rectangle() Method Summary Modifier and Type Method and Description java.lang.String height() Get the height of the rectangular region in pixels. java.lang.String left() Get the number of pixels from.Rectangle Functions The following functions are used with rectangles. InflateRect Increases or decreases the width and height of the specified rectangle. IntersectRect Calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. IsRectEmpty Determines whether the.Rectangle Operations The SetRect function creates a rectangle, the CopyRect function makes a copy of a given rectangle, and the SetRectEmpty function creates an empty rectangle. An empty rectangle is any rectangle that has zero width, zero height, or both. The IsRectEmpty function determines whether a given rectangle is empty. The EqualRect.Rectangle Reference The following elements are used with rectangles: Rectangle Functions Rectangle Structures Rectangle Macros. The following elements are used with rectangles:. /windows/win32/gdi/rectangle-reference."
679,GetKeyboardLayout,"Microsoft Build · May 19 – 22, 2025GetKeyboardLayout function (winuser.h) Retrieves the active input locale identifier (formerly called the keyboard layout). Syntax Parameters [in] idThread Type: DWORD The identifier of the thread to query, or 0 for the current thread. Return value Type: HKL The return value is the input locale identifier for the thread. To get the KLID (keyboard.The ActivateKeyboardLayout function sets the input... Keyboard layout handles can be obtained from the LoadKeyboardLayout or GetKeyboardLayoutList function. The GetKeyboardLayoutName function retrieves the name of the active keyboard layout for the calling thread. If an application creates the active layout using the LoadKeyboardLayout function,.IMsTscAdvancedSettings::KeyBoardLayoutStr property Specifies the name of the active input locale identifier (formerly called the keyboard layout) to use for the connection. If this property is not set, the control uses the default layout returned by the GetKeyboardLayout function. This property is write-only. Syntax Property value The name of the.To get the name of the currently active keyboard layout, call the GetKeyboardLayoutName. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h (include Windows.h) See also Reference DefWindowProc WindowProc.Using Keyboard Input Covers tasks t... Functions Name Description ActivateKeyboardLayout Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. GetKeyboardLayout Retrieves the active input locale identifier (formerly called the keyboard layout) for the specified thread..Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.GetKeyboardLayoutList function (winuser.h) Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.InputLanguage Class Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:InputLanguage.cs Source:InputLanguage.cs Source:InputLanguage.cs Provides methods and fields to manage the input language. Remarks An input language is a culture/keyboard layout pair that determines how the physical keys on a keyboard map or.ActivateKeyboardLayout Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. GetKeyboardLayout Retrieves the active input locale identifier (formerly called the keyboard layout). GetKeyboardLayoutList Retrieves the input locale identifiers (formerly called keyboard layout.Languages Supported by Windows Search This topic describes how Windows Search supports multiple languages. Tokenization, Wordbreakers, and Language Resources Windows Search is language-independent, but the accuracy of search across languages may vary because of the way wordbreakers tokenize text. Tip If an index query is ... You can determine this."
680,Sleep,"Microsoft Build · May 19 – 22, 2025Learn how to reference the power-saving state ""sleep"" in Windows documentation.Start-Sleep Module: Microsoft.PowerShell.Utility Suspends the activity in a script or session for the specified period of time. Syntax Description The Start-Sleep cmdlet suspends the activity in a script or session for the specified period of time. You can use it for many tasks, such as waiting for an operation to complete or pausing before.Thread.Sleep Method Definition Namespace: System.Threading Assemblies:netstandard.dll, System.Threading.Thread.dll Assembly:System.Threading.Thread.dll Assembly:mscorlib.dll Assembly:netstandard.dll Suspends the current thread for the specified amount of time. Overloads Sleep(Int32) Suspends the current thread for the specified number of.The Thread.Sleep method Calling the Thread.Sleep method causes the current thread to immediately block for the number of milliseconds or the time interval you pass to the method, and yields the remainder of its time slice to another thread. Thread.Sleep is a static method that always causes the current thread to sleep. Calling Thread.Sleep with a.Entity Documentation - minecraft:behavior.sleep Allows mobs that own a bed to in a village to move to and sleep in it. Note Can only be used on the following type of entity: Villager (minecraft:villager) Sleep Behavior Properties Name Default Value Type Description Example Values can_sleep_while_riding false Boolean true/false If true, the mob.IHostTaskManager::Sleep Method Notifies the host that the current task is going to sleep. Syntax Parameters dwMilliseconds [in] The time interval, in milliseconds, that the thread will sleep. option [in] One of the WAIT_OPTION enumeration values, indicating what action the host should take if this action blocks. Header: MSCorEE.h Library: Included.Sleep settings overview Settings in this subgroup control sleep, resume, and other related functionality. Subgroup, GUID, aliases, and setting visibility Subgroup: Sleep settings GUID: 238c9fa8-0aad-41ed-83f4-97be242c8f20 Windows provisioning path: Common\Power\Policy\Settings\Sleep PowerCfg alias: SUB_SLEEP Hidden setting: Yes In this section....Sleep function (synchapi.h) Suspends the execution of the current thread until the time-out interval elapses. To enter an alertable wait state, use the SleepEx function. Syntax Parameters [in] dwMilliseconds The time interval for which execution is to be suspended, in milliseconds. A value of zero causes the thread to relinquish the remainder of.PwrTest is capable of directing the platform into one or more sleep states in an automated fashion and logging sleep state performance information such as the BIOS initialization and total r... There is only one element in a PwrTest log file. Provides overall data about the sleep transition cycles such as the state of critical and hybrid sleep.Allow sleep with open remote files Configures the network file system to prevent the computer from automatically entering sleep when remote network files are open. ...EMOTEO GUID: d4c1d4c8-d5cc-43d3-b83e-fc51215cb04d Hidden setting: Yes Values Index Name Description 0 Off Prevents automatic sleep when remote networkHowever, if the open files are."
681,WritePrivateProfileStructW,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileStructW function (winbase.h) Copies data into a key in the specified section of an initialization file. As it copies the data, the function calculates a checksum and appends it to the end of the data. The GetPrivateProfileStruct function uses the checksum to ensure the integrity of the data. Note  This function is provided only.To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icw... (GetPrivateProfileStructA).GetPrivateProfileStructA Retrieves the data associated with a key in the specified section of an initialization file. (GetPrivateProfileStructA) GetPrivateProfileStructW The GetPrivateProfileStructW (Unicode) function (winbase.h) retrieves the data associated with a key in the specified section of an initialization file. GetProfileIntA Retrieves."
682,UnrealizeObject,"Microsoft Build · May 19 – 22, 2025UnrealizeObject function (wingdi.h) The UnrealizeObject function resets the origin of a brush or resets a logical palette. If the hgdiobj parameter is a handle to a brush, UnrealizeObject directs the system to reset the origin of the brush the next time it is selected. If the hgdiobj parameter is a handle to a logical palette, UnrealizeObject.Palette Messages Changes to the system palette for the displa... When the application receives the message, it should use the SelectPalette, UnrealizeObject, and RealizePalette functions to select and realize the logical palette. An application that receives the WM_PALETTECHANGED message should use UnrealizeObject and RealizePalette to reset the.CGdiObject Class Provides a base class for various kinds of Windows graphics device interface (GDI) objects such as bitmaps, regions, brushes, pens, palettes, and fonts. CGdiObject::UnrealizeObject Resets the origin of a brush or resets a logical palette. CGdiObject::UnrealizeObject Resets the origin of a brush or resets a logical palette. Remarks.Logical Palette A logical palette is a color palette that an application creates and associates with a given device context. The application must use the UnrealizeObject and RealizePalette functions to update the colors. In some cases, the application may need to deselect, unrealize, select, and realize the logical palette to ensure that the.These color changes are esp... An application can make sure that reasonable colors are used for its currently selected logical palette by resetting the palette before each use. An application resets the palette by calling the UnrealizeObject and RealizePalette functions. Using these functions causes the system to remap the colors in the logical.SetPaletteEntries Sets RGB (red, green, blue) color values and flags in a ... SetSystemPaletteUse Allows an application to specify whether the system palette contains 2 or 20 static colors. UnrealizeObject Resets the origin of a brush or resets a logical palette. UpdateColors Updates the client area of the specified device context by remapping the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Brush Functions Brushes Overview GetBrushOr... The SetBrushOrgEx function sets.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Brush Functions Brushes Overview POINT SelectObject SetBrushOrgEx.CFP_FREEPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to free memory. CloseMetaFile The CloseMetaFile function closes a me... DeleteMetaFile The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle. DeleteObject The DeleteObject function deletes a logical pen, brush,.CDC:... CDC::GetTextMetrics Retrieves the metrics for the current font from the attribute device context. CDC::PtVisible Specifies whether the given point is within the clipping region. CDC::RealizePalette Maps palette entries in the current logical palette to the system palette. CDC::Rectangle Draws a rectangle using the current pen and fills it."
683,CoCreateInstance,"Microsoft Build · May 19 – 22, 2025To use CoCreateInstance in your application, follow these steps:References:CoCreateInstance function (combaseapi.h) Creates and default-initializes a single object of the class associated with a specified CLSID. Call CoCreateInstance when you want to create only one object on the local system. To create a single object on a remote system, call the CoCreateInstanceEx function. To create multiple objects based on a single.Win32Helper.CoCreateInstance(Guid, Object, UInt32, Guid, IntPtr) Method Definition Namespace: Commands.StorageSync.Interop.DataObjects Assembly:Microsoft.Azure.PowerShell.Cmdlets.StorageSync.dll Coes the create instance. Parameters clsid Guid The CLSID. inner Object The inner. context UInt32 The context. uuid Guid The UUID. rReturnedComObject The.Creating an Object in COM After a thread has initialized the COM library, it is safe for the thread ... CoCreateInstance: A Generic Way to Create Objects The CoCreateInstance function provides a generic mechanism for creating objects. To understand CoCreateInstance, keep in mind that two COM objects can implement the same interface, and one object.Creating an Encoder by Using CoCreateInstance For converting media files into ASF format, you can use Windows Media encoders. To use these enco... Encoders are implemented as Media Foundation transforms (MFTs) and must expose the IMFTransform interface. You can instantiate an encoder by calling the COM function CoCreateInstance and passing the.Instantiating Codec DMOs You can create a codec DMO by calling the CoCreateInstance COM function. You must pass the class identifier of the DMO, the interface identifier of IMediaObject, and a pointer to an IMediaObject pointer. The class identifiers of the codec DMOs are defined as constants in the wmcodecd... The following code example.ITypeInfo::CreateInstance method (oaidl.h) Creates a new instance of a type that describes a component object class (coclass). Normally, CreateInstance calls CoCreateInstance with the type description's GUID. For an Application object, it first calls GetActiveObject. If the application is active, GetActiveObject returns the active object;.ImageList_CoCreateInstance function (commoncontrols.h) Creates a single instance of an imagelist and returns an interface pointer to it. Syntax Parameters [in] rclsid Type: REFCLSID A reference to the CLSID—a GUID that identifies the COM object to be created. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only].About MMDevice API The Windows Multimedia Device (MMDevice) AP... To access the interfaces in the MMDevice API, a client obtains a reference to the IMMDeviceEnumerator interface of a device-enumerator object by calling the CoCreateInstance function, as shown in the following code fragment: In the preceding code fragment, CLSID_MMDeviceEnumerator.Dispatch Mapper The Dispatch Mapper is created using COM CoCreateInstance and exposes one interface, ITDispatchMapper. This interface allows an application to retrieve the dispatch pointer of another interface on an object, given the dispatch pointer of one interface and the GUID of another. If the object does not implement IObjectSafety, or if.The IID_PPV_ARGS Macro We saw that both CoCreateInstance and QueryInterface require coercing the final parameter to a void** type. For example, the following ... The only required parameter is the class identifier, as the next example shows: The CComPtr::CoCreateInstance method is provided purely as a convenience; you can still call the COM."
684,SetCaretBlinkTime,"Microsoft Build · May 19 – 22, 2025SetCaretBlinkTime function (winuser.h) Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels. Syntax Parameters [in] uMSeconds Type: UINT The new blink time, in milliseconds. The SetCaretBlinkTime function should only be used by application that.Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. HideCaret Removes... Hiding a caret does not destroy its current shape or invalidate the insertion point. SetCaretBlinkTime Sets the caret blink time to the specified number of.About Carets The system provides one caret per message queue. The user can set the blink time of the caret using the Control Panel and applications should respect the settings that the user has chosen. If you are writing an application that allows the user to adjust the blink time, such as a Control Panel applet, use the SetCaretBlinkTime function.Adjusting the Blink Time In 16-bit Windows, a Windows-based application could call the GetCaretBlinkTime function to save the current blink time, then call the SetCaretBlinkTime function to adjust the blink time during its processing of the WM_SETFOCUS message. The application would restore the saved blink time for the use of other applications by.(Unicode) OemToCharW Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.Warning  Do not use. (Unicode) RemoveMenu Deletes. SetCaretBlinkTime Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.GetCaretBlinkTime function (winuser.h) Retrieves the time required to invert the caret's pixels. Syntax Return value Type: UINT If the function succeeds, the return value is the blink time, in milliseconds. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationaliz... Only one window at a time can capture the mouse; this window receives mouse."
685,IsBadHugeWritePtr,"Microsoft Build · May 19 – 22, 2025Warning C28720 Banned API Usage: '*function-name' is insecure and has been marked deprecated. Remarks Using one of these APIs indicates that you are testing to see if mem... There are no 1:1 replacement APIs for this rule. Code analysis name: ISBADXXXPTR_API_USAGE Banned Functions Banned API IsBadCodePtr IsBadHugeReadPtr IsBadHugeWritePtr."
686,GetWindowDC,"Microsoft Build · May 19 – 22, 2025The GetWindowDC function retrieves a handle to a device context (DC) for the entire window, including the nonclient area. This function is typically used when an application needs to perform drawing operations that affect the entire window, such as custom drawing in response to window messages like WM_NCPAINT and WM_NCACTIVATE.When using GetWindowDC, it is important to release the device context after drawing by calling the ReleaseDC function to ensure proper resource management. The device context obtained through GetWindowDC allows an application to draw anywhere in the window, not just in the client area.References:GetWindowDC function (winuser.h) The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area. GetWindowDC.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description ... GetUpdateRgn Gets the update region of a window. GetWindowDC Gets the device context for a window, including title bar, menus, and scroll bars. GetWindowRgn Gets a copy of the window region of a window. WindowFromDC Returns a handle.Remarks The application must call the ReleaseDC function for each call to the GetWindowDC function and for each call to the GetDC function that retrieves a common DC. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Display Device Contexts An application obtains a display DC by calling the BeginPaint, GetDC, or GetDCEx function and identifying the window in which the corresponding output will appear. Typically, an application obtains a display DC only when it must draw in the client area. However, one may obtain a window device context by calling the.GetWindowDC The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. GetWindowRgn The GetWindowRgn function obtains a copy of the window region of a window. GetWindowRgnBox The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window.GetDC function (winuser.h) The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Tar... The GetDC.Window Display Device Contexts A window device context enables an application to draw anywhere in a window, including the nonclient area. Window device contexts are typically used by applications that process the WM_NCPAINT and WM_NCACTIVATE messages for windows with custom nonclient areas. An application can retrieve a window device context by.Any function that returns a display device conte... To obtain the DC for another monitor, use the EnumDisplayMonitors function. Or, you can use the device name from the GetMonitorInfo function to create a DC with CreateDC. However, if the function, such as GetWindowDC or BeginPaint, gets a DC for a window that spans more than one display, the DC.CPaintDC should only be used in a WM_PAINT message handler since it handles BeginPaint and EndPa... The CClientDC class does the same for GetDC and ReleaseDC in order to let you write on the client area of a window. To access the entire window, even the nonclient area, CWindowDC is the one to choose, since GetWindowDC is called in its constructor.(Unicode) GetClassLongA Retriev... (Unicode) GetClassLongW Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. GetDC The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDCEx The GetDCEx function retrieves a."
687,CoGetStdMarshalEx,"Microsoft Build · May 19 – 22, 2025CoGetStdMarshalEx function (combaseapi.h) Creates an aggregated standard marshaler for use with lightweight client-side handlers. Syntax Parameters [in] pUnkOuter A pointer to the controlling IUnknown. [in] smexflags One of two values indicating whether the aggregated standard marshaler is on the client side or the server side. Remarks The server.Next, both the server and handler implementations must call the CoGetStdMarshalEx function. This function creates ... The server calls CoGetStdMarshalEx, passing in the flag SMEXF_SERVER. The server-side structure is shown in the following illustration: Server-Side Structure The handler calls CoGetStdMarshalEx, passing in the flag SMEXF_HANDLER..CoGetPSClsid ... CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. CoGetStdMarshalEx Creates an aggregated standard marshaler for use with lightweight client-side handlers..Marshaling Your Data: Efficient Data Transfer Techniques Using COM and Windows 2000 Richard Grimes This article assumes youï¿½re familiar with COM, IDL, C++, and Visual Basic Level of Difficulty    1   2   3 Code for this article: Grimes0900.exe (108KB) SUMMARY The way you choose to transfer data is vi... Again, this requires a call to.The Lightweight Client-Side Handler Lightweight c... If you use standard marshaling, the system creates it for you when you call CoGetStandardMarshal (or CoGetStdMarshalEx, for creating an aggregated marshaler for lightweight handlers) and also implements the IClientSecurity and IMultiQI interfaces on the object. Lightweight client-side handlers.CoGetPSClsid ... CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. CoGetStdMarshalEx Creates an aggregated standard marshaler for use with lightweight client-side handlers..CoGetPSClsid Returns the CLSID of the DLL that implements the proxy and stub for the specified inte... CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. CoGetStdMarshalEx Creates an.Implementing Handler Marshaling Under Windows 2000: DeviceClient Sample App Jeff Prosise Code for this article: Wicked0800.exe (12... If passed a controlling unknown and an SMEXF_HANDLER flag, CoGetStdMarshalEx aggregates COM's proxy manager and returns an IUnknown interface pointer. The latter is accomplished by using the IUnknown pointer.The handler's UnmarshalInterface will be called for every unmarshal, regardless of whether it has unmarshaled the interface before or not. In this case, the server does not call CoGetStdMarshalEx but the handler must. The resulting client-side structure is shown in the following illustration. Related topics The Lightweight Client-Side H...."
688,lstrcpyA,"Microsoft Build · May 19 – 22, 2025lstrcpyA function (winbase.h) Copies a string to a buffer. Warning  Do not use. Consider using StringCchCopy instead. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).The comparison is not case-sensitive. (Unicode) lstrcmpW Compares two character strings. The comparison is case-sensitive. (Unicode) lstrcpyA Copies a string to a buffer. (ANSI) lstrcpynA Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (ANSI) lstrcpynW Copies a specified number of characters from a.Figure 4 Sample Banned Functions Banned API Strsafe Replacement Safe C and C++ Libraries strcpy, wcscpy, _tcscpy, _mbscpy, lstrcpy, lstrcpyA, lstrcpyW, strcpyA, strcpyW String*Copy or String*CopyEx strcpy_s strcat, wcscat String*Cat or String*CatEx strcat_s wnsprintf, wnsprintfA, wnsprintfW String*Printf or String*PrintfEx sprintf_s _snwprintf,.(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA....tringCbCatEx, StringCbCatN, StringCbCatNEx, StringCchCat, StringCchCatEx, StringCchCatN, StringCchCatNEx No bounds checking StrCatNW StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx, StringCchCat, StringCchCatEx, StringCchCatN, StringCchCatNEx No bounds checking StrCatW StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx,."
689,FindNextFileA,"Microsoft Build · May 19 – 22, 2025FindNextFileA function (fileapi.h) Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions. Syntax Parameters [in] hFindFile The search handle returned by a previous call to the FindFirstFile or FindFirstFileEx function. [out] lpFindFileData A pointer to the WIN32_FIND_DATA structure.Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. FindNextFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into.Manifest File Format The file format for the manifest files borrows as much from C++ and IDL as possible. There are a few notable additions to the format, which can be best illustrated by the following example: The function FindFirstFileA takes two parameters. The second is a pointer to a WIN32_FIND_DATAA structure that will be used to contain the.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. The FindFirstFileNameW function retu... FindNextFileW Continues a file search from a previous call to the.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lze... FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code."
690,GetTextMetricsW,"Microsoft Build · May 19 – 22, 2025GetTextMetricsW function (wingdi.h) The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font. Syntax Parameters [in] hdc A handle to the device context. [out] lptm A pointer to the TEXTMETRIC structure that receives the text metrics. Remarks To determine whether a font is a TrueType font, first select.(ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the fo... (Unicode) GetTextMetrics The GetTextMetrics function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetTextMetricsA The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font..(ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the fo... (Unicode) GetTextMetrics The GetTextMetrics function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetTextMetricsA The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font.."
691,GetMessageTime,"Microsoft Build · May 19 – 22, 2025GetMessageTime function (winuser.h) Retrieves the message time for the last message retrieved by the GetMessage function. The time is a long integer that specifies the elapsed time, in milliseconds, from the time the system was started to the time the message was created (that is, placed in the thread's message queue). Syntax Return value Type:.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. GetMessageTime Retrieves the message time for the last message retrieved by the GetMessage function..(... (GetMessageA) GetMessageExtraInfo Retrieves the extra message information for the current thread. GetMessagePos Retrieves the cursor position for the last message retrieved by the GetMessage function. GetMessageTime Retrieves the message time for the last message retrieved by the GetMessage function. GetMessageW The GetMessageW function.Windows Time Windows time is the number of milliseconds elapsed since the system was last started. You typically use the GetTickCount or GetTickCount64 function to compare the current Windows time with the time returned by the GetMessageTime function. GetMessageTime returns the Windows time when the specified message was created. Windows.A better strategy is to use GetMessageTime. Right you are, Chris. GetMessageTime is more reliable. It reports the clock time of the current Windows message—that is, MSG::time for the current MSG. For the purposes of triple-click, that’s exactly what you want: the time when the mouse event occurred. Send your questions and comments for Paul.An application can retrieve this information by calling the GetMessageTime and GetMessagePos functions while processing a message. The following sections describe how a message loop works and explain the role of a window procedure: Message Loop Window Procedure Message Loop A simple message loop consists of one function call to each of these three.Message Functions (Windows and Messages) BroadcastSystemMessage BroadcastSystemMessageEx DispatchMessage GetInputState GetMessage GetMessageExtraInfo GetMessagePos GetMessageTime GetQueueStatus InSendMessage InSendMessageEx PeekMessage PostMessage PostQuitMessage PostThreadMessage RegisterWindowMessage ReplyMessage SendAsyncProc SendMessage.KBDLLHOOKSTRUCT structure (winuser.h) Contains information about a low-level keyboard input event. The value is 0 if the key is pressed and 1 if it is being released. time Type: DWORD The time stamp for this message, equivalent to what GetMessageTime would return for this message. dwExtraInfo Type: ULONG_PTR Additional information associated with.DispatchMessage The DispatchMessage function dispa... It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. GetCapture Retrieves a handle to the window (if any) that has captured....message retrieved GetMessageRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-message-l1-1-1 (introduced in."
692,UnhookWindowsHookEx,"Microsoft Build · May 19 – 22, 2025UnhookWindowsHookEx function (winuser.h) Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. Syntax Parameters [in] hhk Type: HHOOK A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. Requirements Requirement Value Minimum supported client.Using Hooks The following code examples demonstrate how to perform the following tasks associated with hook... You can release a thread-specific hook procedure (remove its address from the hook chain) by calling the UnhookWindowsHookEx function, specifying the handle to the hook procedure to release. You can release a global hook procedure by.Hook Functions CallMsgFilter CallNextHookEx CallWndProc CallWndRetProc CBTProc DebugProc ForegroundIdleProc GetMsgProc JournalPlaybackProc JournalRecordProc KeyboardProc LowLevelKeyboardProc LowLevelMouseProc MessageProc MouseProc SetWindowsHookEx ShellProc SysMsgProc UnhookWindowsHookEx. Hook Functions. /windows/win32/winmsg/hook-functions.Applications register functions to hook certain events using API functions like SetWindowsHookEx, which adds a filter function to a particular event's hook chain, and UnhookWindowsHookEx, which removes it. For more information about the P/Invoke layer and the various options available while importing Win32 functions, take a look at David Platt's.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-window-l1-1-0 (introduced in Windows 8) See also Conceptual.Hooks A hook is a point in the system message-handling mechanism where an application can install a subroutine to monitor the message traffic in the system and process certain types of messages before they reach the target window procedure. The function can monitor messages for any dialog box, message box, menu, or scroll bar in the system..User object Creator function Destroyer function Accelerator table CreateAcceleratorTable DestroyAcceleratorTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect,.(Unicode) TileWindows Tiles the specified child windows of the... The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function. UnhookWindowsHookEx Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. UnregisterClassA.Before terminating, an application must call the UnhookWindowsHookEx function function to free system resources associated with the hook. ... Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.Before terminating, an application must call the UnhookWindowsHookEx function function to free system resources associated with the hook. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h."
693,PostQueuedCompletionStatus,"Microsoft Build · May 19 – 22, 2025PostQueuedCompletionStatus function (ioapiset.h) Posts an I/O completion packet to an I/O completion port. Syntax Parameters [in] CompletionPort A handle to an I/O completion port to which the I/O completion packet is to be posted. [in] dwNumberOfBytesTransferred The value to be returned through the lpNumberOfBytesTransferred parameter of the.PostQueuedCompletionStatus function Posts an I/O completion packet to an I/O completion port. Syntax Parameters CompletionPort [in] A handle to an I/O completion port to which the I/O completion packet is to be posted. dwNumberOfBytesTransferred [in] The value to be returned through the lpNumberOfBytesTransferred parameter of the.Threads can use the PostQueuedCompletionStatus function to place completion packets in an I/O completion port's queue. The PostQueuedCompletionStatus function allows an application to queue its own special-purpose completion packets to the I/O completion port without starting an asynchronous I/O operation. Yes No Provide product feedback | Get.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. GetQueuedCompletionStatus Introduced into api-ms-win-....!icpleak The !icpleak extension examines all I/O completion ... DLL Kdexts.dll Additional Information For information about I/O completion ports, see Microsoft Windows Internals by Mark Russinovich and David Solomon. I/O completion pool leaks can occur when a process is allocating I/O completion packets by calling PostQueuedCompletionStatus, but.ioapiset.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services ioapiset.h contains the following programming interfaces: Functions CancelIo Cancels all pending input and output (I/O) operations that are issued ... GetQueuedCompletionStatus Attempts to dequeue an I/O completion.PostQueuedCompletionStatus Posts an I/O completion packet to an I/O completion port. The following functions are used with file I/O. CancelIo CancelIoEx CancelSynchronousIo CreateIoCompletionPort FlushFileBuffers GetQueuedCompletionStatus GetQueuedCompletionStatusEx LockFile LockFileEx PostQueuedCompletionStatus ReadFile ReadFileEx ReadFileScatter.When the verb completes, the APPC Library calls the PostQueuedCompletionStatus function with the remaining fields in the structure as inputs, and these fields are simply passed through to the GetQueuedCompletionStatus function issued by the application. When the APPC verb completes, the APPC Library calls the PostQueuedCompletionStatus function.JOBOBJECT_ASSOCIATE_COMPLETION_PORT structure (winnt.h) Contains information used to associate a completion port with a job. Syntax Members CompletionKey The value to use in the dwCompletionKey parameter of PostQueuedCompletionStatus when messages are sent on behalf of the job. CompletionPort The completion port to use in the CompletionPort.invalidOverl... Module Function HttpApi.dll HttpReceiveHttpRequest IpHlpApi.dll NotifyAddrChange kernel32.dll ReadFile kernel32.dll ReadFileEx kernel32.dll WriteFile kernel32.dll WriteFileEx kernel32.dll ReadDirectoryChangesW kernel32.dll PostQueuedCompletionStatus MSWSock.dll ConnectEx WS2_32.dll WSASend WS2_32.dll WSASendTo WS2_32.dll WSARecv."
694,SetEndOfFile,"Microsoft Build · May 19 – 22, 2025SetEndOfFile function (fileapi.h) Sets the physical file size for the specified file to the current position of the file pointer. The physical file size is also referred to as the end of the file. The SetEndOfFile function can be used to truncate or extend a file. To set the logical end of a file, use the SetFileValidData function. Syntax.Truncating or Extending Files An application can truncate or extend a file by calling SetEndOfFile. This function sets the end-of-file marker to the current position of the file pointer. Note that when a file is extended, the contents between the old and new end-of-file locations are not defined. An application can truncate or extend a file by.When the file pointer reaches the end of ... Therefore, reading zero bytes without an error means the application has reached the end of the file. Writing zero bytes does nothing. An application can truncate or extend a file by using the SetEndOfFile function. This function sets the end of file to the current position of the file pointer. A file.SearchPath Searches for a specified file in a specified path. SetEndOfFile Sets the physical file size for the specified file to the current position of the file pointer. SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the current process. GetExpandedName LZClose LZCopy LZInit LZOpenFile LZRead LZSeek.(Unicode) RemoveDirectoryA Deletes an existing empty directory. (ANSI) RemoveDirectoryW Deletes an existing empty directory. (Unicode) SetEndOfFile Sets the physical file size for the specified file to the current position of the file pointer. SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the current.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. Moved into.Access FILESTREAM Data with OpenSqlFilestream Applies to: SQL Server The OpenSqlFilestream API obtains a Win32 compatible file handle for a FILESTREAM binary large object (BLOB) stored in the file system. The handle can be passed to any of the following Win32 APIs: ReadFile, WriteFile, TransmitFile, SetFilePointer, SetEndOfFile, or.DispatchSetInformation Routines A driver's DispatchSetInformation routine handles IRPs for the IRP_MJ_SET_INFORMATION I/O function code. Driver support for... This request is sent by the I/O manager and other operating system components, as well as other kernel-mode drivers. For example, it is sent when a user-mode application calls SetEndOfFile,.CAtlFile Class This class provides a thin wrapper around the Windows file-handling API. Important This class and its members cannot be used in applications that execute in the Windows Runtime. Parameters nNewLen The new len... Return Value Returns S_OK on success, or an error HRESULT on failure. Remarks Calls SetFilePointer and SetEndOfFile to set.A transacted read handle is ... SetEndOfFile If there is a transaction bound to the handle, then the change in the end-of-file position is transacted. SetFileInformationByHandle If there is a transaction bound to the handle, then the changes made will be transacted for the information classes FileBasicInfo, FileRenameInfo, FileAllocationInfo,."
695,SetFileApisToOEM,"Microsoft Build · May 19 – 22, 2025SetFileApisToOEM function (fileapi.h) Causes the file I/O functions for the process to use the OEM character set code page. This function is useful for 8-bit console input and output operations. Syntax Return value None Remarks The file I/O funct... SetFileApisToOEM sets the code page per process, rather than per thread or per computer. The.ReadFileScatter Reads data from a f... (Unicode) SetEndOfFile Sets the physical file size for the specified file to the current position of the file pointer. SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the current process. SetFileApisToOEM Causes the file I/O functions for the process to use the OEM.ReadFile Reads data from the specified file or input/output (I/O) device. ReadFileEx Reads data from the specified file or input/output (I/O) device. SetFileApisToANSI Causes the file I/O functions to use the ANSI character set code page for the current process. SetFileApisToOEM Causes the file I/O functions for the process to use the OEM.The SetFileApisToOEM function causes the functions to use the OEM code page. By defa... Functions exported by Kernel32.dll that accept or return file names are affected by the file code page setting. Both SetFileApisToANSI and SetFileApisToOEM set the code page per process, rather than per thread or per computer. The AreFileApisANSI function.AreFileApisANSI function (fileapi.h) Determines whether the file I/O functions are using the ANSI or OEM character set code page. Remarks The SetFileApisToOEM function causes a set of file I/O functions to use the OEM code page. For a discus... The functions SetFileApisToOEM and SetFileApisToANSI set the code page for a process, so AreFileApisANSI.If the file I/O functions are in OEM mode, the strings will be converted to and from the wrong character set. An application can set the file I/O functions to OEM mode explicitly by calling the SetFileApisToOEM function. (d) If the string being drawn requires a character set that is not available in the font that is selected into the device.Console Application Issues The 8-bit console functions use the OEM code page. ... Barring that solution, a console application should use the SetFileApisToOEM function. That function changes relevant file functions so that they produce OEM character set strings rather than ANSI character set strings. Review console application issues, such as.SetFileApisToANSI function (fileapi.h) Causes the file I/O functions to use the ANSI character set code page for the current process. This function... The SetFileApisToANSI function complements the SetFileApisToOEM function, which causes the same set of file I/O functions to use the OEM character set code page. Barring that solution, a console.We have a module that uses CreateProcess() to invoke CMD.EXE and that can pass a MBCS command line to CMD.EXE that can contain 8-bit characters. Before Windows 11, it appears that a CMD.EXE created in this way used the SetFileApisToANSI() and SetFileApisToOEM() setting to determine whether the command line should be treated as containing OEM or.Remarks The fop... By default, a narrow filename string is interpreted using the ANSI codepage (CP_ACP). In Windows Desktop applications, it can be changed to the OEM codepage (CP_OEMCP) by using the SetFileApisToOEM function. You can use the AreFileApisANSI function to determine whether filename is interpreted using the ANSI or the system default."
696,ToUnicodeEx,"Microsoft Build · May 19 – 22, 2025ToUnicodeEx function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. Syntax Parameters [in] wVirtKey Type: UINT The virtual-key code to be translated. See Virtual-Key Codes. [in] wScanCode Type: UINT The hardware scan code of the key to be translated. If bit 1 is set,.The function translates the code using the inpu... ToUnicode Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. To specify a handle to the keyboard layout to use to translate the specified code, use the ToUnicodeEx function. ToUnicodeEx Translates the specified virtual-key code and.ToAsciiEx Translates the specified virtual-key code and keyboard state to the corresponding character or charactersThe function translates the code using the input language and physical keyboard layout identified by the input locale identifier. ToUnicode Translates the specified virtual-key code and keyboard state to the corresponding Unicode.In this case, use the ToUnicode or ToUnicodeEx methods to get the character for the corresponding key press. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.In this case, use the ToUnicode or ToUnicodeEx methods to get the character for the corresponding key press. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.ToAscii function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding character or characters. To specify a handle to the keyboard layout to use to translate the specified code, use the ToAsciiEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].ToUnicode function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. ... use the ToUnicodeEx Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target.I use the MapVirtualKeyEx api to extract characters from the virtual keys on the keyboard. Here is the code in VB. Example: Virtual key: 0xBB, currently gives me the character '=', I would like to retrieve the character '+' when the shift key is pressed. Is it possible to use the API with the value of the virtual code and the meaning of the shift.ToAsciiEx function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding character or characters. It is highly recommended to use the ToUnicode or ToUnicodeEx methods that handles such cases properly. ...pps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows."
697,SetArcDirection,"Microsoft Build · May 19 – 22, 2025SetArcDirection function (wingdi.h) The SetArcDirection sets the drawing direction to be used for arc and rectangle functions. The SetArcDirection function specifies the direction in which the following functions draw: Arc ArcTo Chord Ellipse Pie Rectangle RoundRect Requirements Requirement Value Minimum supported client Windows 2000 Professional.EMRSETARCDIRECTION structure (wingdi.h) The EMRSETARCDIRECTION structure contains members for the SetArcDirection enhanced metafile record. Syntax Members emr The base structure for all record types. iArcDirection Arc direction. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.The preceding illustration shows the rectangle and radials with dashed lines while the actual arc was drawn using a solid line. When drawing the arc of another object, the application can call the SetArcDirection and GetArcDirection functions to control the direction (clockwise or counterclockwise) in which the object is drawn. The default.2.3.11.9 EMR_SETARCDIRECTION Record The EMR_SETARCDIRECTION record specifies the drawing direction to be used for arc and rectangle output. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size ArcDirection Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETARCDIRECTION. The EMR_SETARCDIRECTION.About Chords A chord is a region bounded by the intersection of an ellipse and a line segment called a secant. The following illustration shows a chord dra... The default arc direction is counterclockwise. You can have your application reset the arc direction by calling the SetArcDirection function. A chord is a region bounded by the intersection.PolyBezier Draw... PolyBezierTo Draws one or more Bézier curves. PolyDraw Draws a set of line segments and Bézier curves. Polyline Draws a series of line segments by connecting the points in the specified array. PolylineTo Draws one or more straight lines. PolyPolyline Draws multiple series of connected line segments. SetArcDirection Sets the.Arc function (wingdi.h) The Arc function draws an elliptical arc. Use the GetArcDirection and SetArcDirection functions to get and set the current drawing direction for a device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps....00000029, EMR_ELLIPSE = 0x0000002A, EMR_RECTANGLE = 0x0000002B, EMR_ROUNDRECT = 0x0000002C, EMR_ARC = 0x0000002D, EMR_CHORD = 0x0000002E, EMR_PIE = 0x0000002F, EMR_SELECTPALETTE = 0x00000030, EMR_CREATEPALETTE = 0x00000031, EMR_SETPALETTEENTRIES = 0x00000032, EMR_RESIZEPALETTE = 0x00000033, EMR_REALIZEPALETTE = 0x00000034, EMR_EXTFLOODFILL =.About Pies A pie is a region bounded by the intersection of an ellipse curve and two radials. The following illustration shows a pie drawn by using the Pie function. When the system draws... The default arc direction is counterclockwise. An application can reset the arc direction by calling the SetArcDirection function. A pie is a region bounded.GetArcDirection function (wingdi.h) The GetArcDirection function retrieves the current arc direction for the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h."
698,GetMessageW,"Microsoft Build · May 19 – 22, 2025The GetMessageW function is a Windows API function that retrieves a message from the calling thread's message queue. It is specifically the Unicode version of the GetMessage function. This function is used to dispatch incoming sent messages until a posted message is available for retrieval.The typical usage of GetMessageW involves calling it in a message loop to process messages sent to a window. When a message is retrieved, it can then be dispatched to the appropriate window procedure for handling.References:GetMessageW function (winuser.h) Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval. Unlike GetMessage, the PeekMessage function does not wait for a message to be posted before returning. Syntax Parameters [out] lpMsg Type: LPMSG A pointer to.ITfMessagePump::GetMessageW method (msctf.h) Obtains a message from the message queue and does not return until a message is obtained. Syntax Parameters [out] pMsg Pointer to a MSG structure that receives message data. [in] hwnd Handle to the window whose messages are obtained. If this value is NULL, this method obtains messages for any window.DispatchMessage The DispatchMessage function dispatches a me... It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. GetMessageTime Retrieves the message time for the last message retrieved by the GetMessage function. GetMessageW The GetMessageW function.PSM_ISDIALOGMESSAGE message Passes a message to a property shee... Remarks Your message loop should use the PSM_ISDIALOGMESSAGE message with modeless property sheets to pass messages to the property sheet dialog box. On systems that support Unicode, use the Unicode versions of the GetMessage and PeekMessage functions (GetMessageW and PeekMessageW).ITfMessagePump interface (msctf.h) The ITfMessagePump interface is implemented by the TSF manager and is used by an application to obtain messages from th... ITfMessagePump::GetMessageA ITfMessagePump::GetMessageA method ITfMessagePump::GetMessageW ITfMessagePump::GetMessageW method ITfMessagePump::PeekMessageA ITfMessagePump::PeekMessageA method.PropSheet_IsDialogMessage macro (prsht.h) Passes a message to a property sheet dialog box and indicates whether the dialog box processed the message. Remarks Your message loop should use the PropSheet_IsDialogMessage macro with modeless property sheets to pass messages to the property sheet dialog box. On systems that support Unicode, use the.GetGUIDDescription ITfCategoryMgr::GetGUIDDescription method GetGUIDDWORD ITfCategoryMgr::GetGUIDDWORD method GetIcon ITfLangBarItemButton::GetIcon method GetIconMode I... GetMessageA ITfMessagePump::GetMessageA method GetMessageW ITfMessagePump::GetMessageW method GetOwnerClsid ITfCompositionView::GetOwnerClsid method GetPageIndex The.(Unicode) DialogBoxW Creates a modal dialog box from a dialog box templat... DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a....e!KeSynchronizeExecution+0x5bf6 ntoskrnl.exe!KeWaitForMultipleObjects+0x109d ntoskrnl.exe!KeWaitForMultipleObjects+0xb3f ntoskrnl.exe!KeWaitForSingleObject+0x377 ntoskrnl.exe!KeUnstackDetachProcess+0x2631 ntoskrnl.exe!ObDereferenceObjectDeferDelete+0x28a ntoskrnl.exe!KeWaitForMultipleObjects+0x1284 ntoskrnl.exe!KeWaitForMultipleObjects+0xb3f....voke()+68 [[InlinedCallFrame] (.wWinMainCRTStartup)] .wWinMainCRTStartup() [[GCFrame]] Full Call Stack clr!COMToCLRWorker+a4 clr!GenericComCallStub+57 [[ComMethodFrame]] myapp+3bcac1 myapp+11fe20 myapp+dacf9 mfc140u!CWnd::OnWndMsg+bdd mfc140u!CWnd::WindowProc+3f mfc140u!AfxCallWndProc+135 mfc140u!AfxWndProc+54 mfc140u!AfxWndProcBase+51."
699,EnumPropsExW,"Microsoft Build · May 19 – 22, 2025EnumPropsExW function (winuser.h) Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be.(ANSI) EnumPropsExA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE. (ANSI) EnumPropsExW Enumerates all entries in the property list of a window by passing them, one by one, to the.(Unicode) EnumPropsA Enumerates... EnumProps continues until the last entry is enumerated or the callback function returns FALSE. (ANSI) EnumPropsExA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback."
700,QueueUserAPC,"Microsoft Build · May 19 – 22, 2025QueueUserAPC function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. Syntax Parameters [in] pfnAPC A pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation. Windows Server 2003 and Windows XP: There are.QueueUserAPC2 function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. Syntax Parameters ApcRoutine A pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation. Requirements Requirement Value Minimum.Types of APCs An asynchronous procedure call (APC) is a function that executes asynchronously. For additional information on special user-mode APCs, see QueueUserAPC2. Regular user-mode APCs run strictly in user mode and only when the target thread is in an alertable wait state. The operating system uses regular user APCs to implement mechanisms.QueryProcessAffinityUpdateMode Retr... QueryProtectedPolicy Queries the value associated with a protected policy. QueueUserAPC Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. (QueueUserAPC) QueueUserAPC2 Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified.QueryProcessAffinityUpdateMode Retr... QueryProtectedPolicy Queries the value associated with a protected policy. QueueUserAPC Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. (QueueUserAPC) QueueUserAPC2 Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified.Synchronization Functions The following functions are used in synchronization. Asynchronous functions Condition variable and SRW lock functions Critical section functions Event functions One-time initialization functions Interlocked Functions Mutex functions Private namespace functions Semaphore functions Singly-linked list functions.SleepEx function (synchapi.h) Suspends the current thread until the specified condition is met. Execution resumes when one of the following occurs: An I/O completion callback function is called. If an I/O completion callback occurs, the I/O completion function is called. If an APC is queued to the thread (QueueUserAPC), the function returns when.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Asynchronous Procedure Calls An asynchronous procedure call (APC) is a function that executes asynchronously in the context of a particular thread. An application queues an APC to a thread by calling the QueueUserAPC function. The.COWAIT_FLAGS enumeration (combaseapi.h) Specifies the behavior of the CoWaitForMultipleHandles function. COWAIT_ALERTABLEValue: 2If set, the call to CoWaitForMultipleHandles will return S_OK if an asynchronous procedure call (APC) has been queued to the calling thread with a call to the QueueUserAPC function, even if no handle has been signaled..Remarks Depending on which flags are set in the dwFlags parameter... In the case of mutex objects, this condition is also satisfied by a mutex being abandoned. An asynchronous procedure call (APC) has been queued to the calling thread with a call to the QueueUserAPC function. The timeout period expires. If the caller resides in a single-thread."
701,CoTaskMemRealloc,"Microsoft Build · May 19 – 22, 2025CoTaskMemRealloc function (combaseapi.h) Changes the size of a previously allocated block of task memory. Syntax Parameters [in, optional] pv A pointer to the memory block to be reallocated. If pv is NULL, CoTaskMemRealloc allocates a new memory block in the same way as the CoTaskMemAlloc function. Requirements Requirement Value Minimum supported.Marshal.ReAllocCoTaskMem(IntPtr, Int32) Method Definition Namespace: System.Runtime.InteropServices Assemblies:mscorlib.dll, System.Runtime.InteropServices.dll Assemblies:netstandard.dll, System.Runtime.InteropServices.dll Ass... Returns An integer representing the address of the reallocated block of memory. Remarks ReAllocCoTaskMem is one of two.Whenever ownership of an allocated chun... A call to the API function CoGetMalloc provides a pointer to the OLE allocator, which is an implementation of the IMalloc interface. However, it is more efficient to call the helper functions CoTaskMemAlloc, CoTaskMemRealloc, and CoTaskMemFree, which wrap getting a pointer to the task memory allocator,.Applications should always check the r... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header combaseapi.h (include Objbase.h) Library Ole32.lib DLL Ole32.dll See also CoTaskMemFree.CoRevokeDeviceCatalo... CoSwitchCallContext Switches the call context object used by CoGetCallContext. CoTaskMemAlloc Allocates a block of task memory in the same way that IMalloc::Alloc does. CoTaskMemFree Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function. CoTaskMemRealloc Changes.CoRevokeMallocSpy Re... CoSwitchCallContext Switches the call context object used by CoGetCallContext. CoTaskMemAlloc Allocates a block of task memory in the same way that IMalloc::Alloc does. CoTaskMemFree Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function. CoTaskMemRealloc Changes.CComHeap Wraps the COM Task Allocator APIs: CoTaskMemAlloc, CoTaskMemFree, and CoTaskMemRealloc For the purpose of string memory management, the most useful class is CWin32Heap because it allows you to create multiple independent heaps. For example, if you wanted to use a separate heap just for strings, you could do the following: To use this.CoRegisterMallocSpy Registers an implementation of the IMallocSpy interface... CoTaskMemAlloc Allocates a block of task memory in the same way that IMalloc::Alloc does. CoTaskMemFree Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function. CoTaskMemRealloc Changes the size of a previously.CComHeap Class This class implements IAtlMemMgr using the COM memory allocation functions. Important This class and its members cannot be used in applications that execute in the Windows Runtime. CComHeap::Reallocate Call this ... Remarks CComHeap implements memory allocation functions using the COM allocation functions, including CoTaskMemAlloc,.Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoTaskMemAlloc Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoTaskMemFree Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoTaskMemRealloc."
702,FreeEnvironmentStringsA,"Microsoft Build · May 19 – 22, 2025FreeEnvironmentStringsA function (processenv.h) Frees a block of environment strings. Syntax Parameters penv A pointer to a block of environment strings. The pointer to the block must be obtained by calling the GetEnvironmentStrings function. ...lue is zero To get extended error information, call GetLNote The processenv.h header defines.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (ANSI).Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. APIs from api-ms-win-core-com-l1-1-1.dll API."
703,OutputDebugStringA,"Microsoft Build · May 19 – 22, 2025OutputDebugStringA function (debugapi.h) Sends a string to the debugger for display. Syntax Parameters [in, optional] lpOutputString The null-terminated string to be displayed. If the application d... OutputDebugStringW converts the specified string based on the current system locale information and passes it to OutputDebugStringA to be displayed..debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. ContinueDebugEve... IsDebuggerPresent Determines whether the calling process is being.debugPrintf Applies to: Excel 2013 | Office 2013 | Visual Studio Framework library function that writes a null-terminated byte-string to the active debugger via the Windows SDK function OutputDebugStringA. If the application has no debugger, the system debugger displays the string. If the application has no debugger and the system deb....Moved into api-ms-win-core-debug-l1-1-1.dll ... Moved into api-ms-win-core-debug-l1-1-0.dll in 10.0.16299. OutputDebugStringA Introduced into api-ms-win-core-debug-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-debug-l1-1-2.dll in 10.0.10586. Moved into api-ms-win-core-debug-l1-1-1.dll in 10.0.14393. Moved into.I'm debugging a C++ function in Visual Studio 2019 and there are multiple return statements in it. I want to know which return statement exited the ... So code such as: will display the source line number of the return statement. If you don't want to clutter up the stdout display with these line numbers, or if you don't have a console attached to.OutputDebugStringW function (debugapi.h) Sends a string to the debugger for display. If the application does not have a debugger and the system debugger is not active, OutputDebugString does nothing. OutputDebugStringW converts the specified string based on the current system locale information and passes it to OutputDebugStringA to be displayed..WinUnit Simplified Unit Testing for Native C++ Applications Maria Blees This article discusses: Unit testing philosophy Setting up WinUnit Building test fixtures Implementation and customization This article uses the following technologies: C++, Visual Studio Code download available at:WinUnit2008_02.exe(1438 KB) Contents Start Testing Today.While it's a... If you create a DirectML device with DML_CREATE_DEVICE_FLAG_DEBUG while the Direct3D 12 debug layer hasn't been enabled, error messages are instead printed using OutputDebugStringA: As the warning message suggests, it's best to enable the Direct3D 12 debug layer when also using the DirectML debug layer. Some types of validation are.I have a Win32 GUI app where a thread starts upon pressing a button like so: and here is the DLL code: This code works but it never print... If I replace OutputDebugStringA with an output to a file, the target program (like Notepad where I open menus or type text) and explorer.exe often crash or the target program freezes. If I replace.... -----; ProcessInput; ++ 9756,1DBC 08:26:09.23408 CKernel32ExportDetours::OutputDebugStringA @ -----; ProcessInput; -- 9756,1DBC 08:26:09.23410 CKernel32ExportDetours::OutputDebugStringA @ -----; GetOutputStreamInfo; ++ 9756,1DBC 08:26:09.23411 CKernel32ExportDetours::OutputDebugStringA @ -----; GetOutputStreamInfo; -- 9756,1DBC 08:26:09.23412."
704,SearchPathA,"Microsoft Build · May 19 – 22, 2025SearchPathA function (processenv.h) Searches for a specified file in a specified path. Syntax Parameters [in, optional] lpPath The path to be searched for the file. If this parameter is NULL, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section. [in] lpFileName The.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with th... NeedCurrentDirectoryForExePathA Determines whether the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
705,GetCurrentThreadId,"Microsoft Build · May 19 – 22, 2025To use the GetCurrentThreadId function in your application, you simply need to call it to retrieve the thread identifier of the calling thread. This function does not take any parameters and returns a unique identifier for the thread, which can be useful for debugging or thread management purposes.Here is a basic example of how you might use it in your code:In this example, the thread ID is obtained and printed to the console.References:GetCurrentThreadId function (processthreadsapi.h) Retrieves the thread identifier of the calling thread. Syntax Return value The return value is the thread identifier of the calling thread. Remarks Until the thread terminates, the thread identifier uniquely identifies the thread throughout the system. Requirements Requirement Value Minimum.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print IDebugSystemObjects::GetCurrentThreadId method (dbgeng.h) The GetCurrentThreadId method returns the engine... Syntax Parameters [out] Id Receives the engine thread ID. The GetCurrentThreadId method returns the engine thread ID for the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com Lin... Syntax Parameters [out] Id Receives the engine thread ID. Requirements Requirement Value Target Platform Desktop Header dbgeng.h (include Dbgeng.h) Feedback Was this page helpful. The GetCurrentThreadId method returns the engine thread ID for the.ICLRDataTarget::GetCurrentThreadID Method Gets the operating system identifier for the current thread. Syntax Parameters threadID [out] A pointer to the operating system identifier of the current thread for the target process. Remarks If there is no current thread for the target process, the GetCurrentThreadID method may fail. Header: ClrData.idl,.Syntax Parameters [out] Id Receives the engine thread ID. Return value This method may also... Requirements Requirement Value Target Platform Desktop Header dbgeng.h (include Dbgeng.h) Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. The GetCurrentThreadId method returns the engine thread ID for the.Syntax Parameters [out] Id Receives the engine thread ID. Return value This method may also... Requirements Requirement Value Target Platform Desktop Header dbgeng.h (include Dbgeng.h) Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. The GetCurrentThreadId method returns the engine thread ID for the.ICorProfilerInfo::GetCurrentThreadID Method Gets the ID of the current thread, if it is a managed thread. Remarks If the current thread is an internal runtime thread or other unmanaged thread, GetCurrentThreadID returns CORPROF_E_NOT_MANAGED_THREAD as the HRESULT, and the returned value of the pThreadId parameter will be null. Header: CorProf.idl,.To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread instead. Caution AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property.GetThreadId function (processthreadsapi.h) Retrieves the thread identifier of the specified thread. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on.Because thread IDs can be reused without notice as threads are created and destroyed, this value is more reliable than the value returned by the GetCurrentThreadId function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target."
706,GetUserDefaultLangID,"Microsoft Build · May 19 – 22, 2025GetUserDefaultLangID function (winnls.h) Returns the language identifier of the Region Format setting for the current user. Syntax Return value Returns the language identifier for the current user as set under Control Panel > Clock, Language, and Region > Change date, time, or number formats > Formats tab > Format dropdown. Requirements.UserLanguageID property The UserLanguageID property is the default language identifier for the current user. The installer sets this property by calling GetUserDefaultLangID. Requirements Requirement Value Version Windows Installer 5.0 on Windows Server 2012, Windows 8, Windows Server 2008 R2 or Windows 7. Windows In... The UserLanguageID property.EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system. GetUserDefaultGeoName Retrieves the two-letter ISO 3166-1 code or numeric UN M.49 code for the defa....GetUILanguageInfo Retrieves a variety of information about an installed UI language GetUserDefaultGeoName Retrieves the two-letter International Organization for Standardization (ISO) 3166-1 code... GetUserDefaultLangID Returns the language identifier of the Region Format setting for the current user. GetUserDefaultLCID Returns the locale.GetUILanguageInfo Retrieves a variety of information about an installed UI language GetUserDefaultGeoName Retrieves the two-letter International Organization for Standardization (ISO) 3166-1 code... GetUserDefaultLangID Returns the language identifier of the Region Format setting for the current user. GetUserDefaultLCID Returns the locale.GetGeoInfoW function (winnls.h) [GetGeoInfo is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. The application can set this parameter to 0, with GEO_RFC1766 or GEO_LCID specified for GeoType. This setting causes the function to retrieve the language.GetGeoInfoA function (winnls.h) [GetGeoInfo is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. The application can set this parameter to 0, with GEO_RFC1766 or GEO_LCID specified for GeoType. This setting causes the function to retrieve the language.GetSystemDefaultLangID function (winnls.h) Returns the language identifier for the system locale. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL.CoCreateGuid Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetCurrentLogicalThreadId Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into."
707,GetExitCodeProcess,"Microsoft Build · May 19 – 22, 2025The GetExitCodeProcess function is used in programming to retrieve the termination status of a specified process. When a process is executing, its termination status is reported as STILL_ACTIVE. Once the process terminates, the status changes to the exit code of the process.To use GetExitCodeProcess, you need to follow these steps:Here is a basic example of how it might look in code:Make sure to handle the process handle correctly, ensuring it is valid and properly closed after use.References:GetExitCodeProcess function (processthreadsapi.h) Retrieves the termination status of the specified process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on.Terminating a Process Terminating a process has the following results: Any remaining threads in the process are marked for termination. Any resources allocated by the process are freed. Therefore, an object will remain valid after a process that is using it terminates if another process has an open handle to it. The GetExitCodeProcess function.ExitProcess function (processthreadsapi.h) Ends the calling process and all its threads. Return value None Remarks Use the GetExitCodeProcess function to retrieve the process's exit value. Use the GetExitCodeThread function to retrieve a thread's exit value. Exiting a process causes the following: All of the threads in the process, except the.Additionally, you should read nf-processthreadsapi-getexitcodeprocess It says, &quot;Important The GetExitCodeProcess function returns a valid error code defined by the application only after the thread terminates. If a thread returns STILL_ACTIVE (... To ensure that the target process has actually terminated you should call WaitForSingleObject.TerminateJobObject function (jobapi2.h) Terminates all processes currently associated with the job. If the job is nested, this function ter... For more information, see Process Security and Access Rights. [in] uExitCode The exit code to be used by all processes and threads in the job object. Use the GetExitCodeProcess function to retrieve each.DkmProcess.Terminate(Int32) Method Definition Namespace: Microsoft.VisualStudio.Debugger Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 This method is called to tell the monitor to terminate the target process. Parameters ExitCode Int32 [In] The exit code to be used by the process.IDkmRunningProcessInfoProvider.TerminateRunningProcess Method Definition Namespace: Microsoft.VisualStudio.Debugger.ComponentInterfaces Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Terminates a process running on target computer which is not being debugged. Use the.DkmTransportConnection.TerminateRunningProcess(Int32, Int64, Int32) Method Definition Namespace: Microsoft.VisualStudio.Debugger.DefaultPort Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Terminates a process running on target computer which is not being debugged. Use the.GetEnvironmentStrings Retrieves the environment block for the current process. GetEnvironmentVariable Retrieves the value of the specified variable from the environment block of the calling process. GetExitCodeProcess Retrieves the termination status of the specified process. GetGuiResources Retrieves the count of handles to graphical user.TerminateProcess function (processthreadsapi.h) Terminates the specified process and all of its threads. Use the GetExitCodeProcess function to retrieve a process's exit value. Use the GetExitCodeThread function to retrieve a thread's exit value. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum."
708,TerminateThread,"Microsoft Build · May 19 – 22, 2025TerminateThread function (processthreadsapi.h) Terminates a thread. Syntax Parameters [in, out] hThread A handle to the thread to be terminated. The handle must have the THREAD_TERMINATE access right. TerminateThread is a dangerous function that should only be used in the most extreme cases. You should call TerminateThread only if you know exactly.Warning C6258 Using TerminateThread does not allow proper thread clean up. This warning indicates that a call to TerminateThread has been detected. Remarks TerminateThread is a dangerous function that should only be used in the most extreme cases. Each thread monitors the event state by calling the WaitForSingleObject function. Each thread ends.Terminating a Thread Terminating a thread has the following results: Any resources owned by the thread, such as windows and hooks, are freed. The threa... Any thread calls the TerminateThread function with a handle to the thread. The exit code for a thread is either the value specified in the call to ExitThread, ExitProcess, TerminateThread, or.Processes and threads Provides information about a newly created process and its primary thread. You need these headers: processthreadsapi.h Enumerations MACHINE_ATTRIBUTES Specifies the ways in which an architecture of code can... (Unicode) CreateRemoteThread Creates a thread that runs in the virtual address space of another process. The.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Thread Security and Access Rig... THREAD_TERMINATE (0x0001) Required to terminate a thread using TerminateThread. You can request the ACCESS_SYSTEM_SECURITY access right to a thread object if you want to read or write the object's SACL..TerminateProcess Terminates the specified process and all of its threads. Function Description AttachThreadInput Attaches the input processing mechanism of one thread to that of another thread. CreateRemoteThread Creates a thread that runs in ... Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess NtQueryInformationThread.Application Verifier - Stop Codes - Miscellaneous The following stop codes are contained in this set of tests. Dangerous call to TerminateThread. Probable causeThis stop is generated if a thread (thread ID is parameter1) is terminated explicitly using TerminateThread.This function is very dangerous because it introduces data corruption and.Using Mutex Objects You can use a mutex object to protect a shared resource from simultaneous access by multiple threads or processes. This example uses structured exception handling to ensure that the thread properly releases the mutex object. The __finally block of code is executed no matter how the __try block terminates (unless the __try block.GetExitCodeThread function (processthreadsapi.h) Retrieves the termination status of the specified thread. If the specified thread has not termina... If the thread has terminated and the function succeeds, the status returned is one of the following values: The exit value specified in the ExitThread or TerminateThread function. The return value.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Dynamic-Link Library Entry-Point Function A DLL can optionally specify an entry-point function. If the process terminates as a result of the TerminateProcess or TerminateThread function, the system does not call the DLL entry-point."
709,StringFromGUID2,"Microsoft Build · May 19 – 22, 2025StringFromGUID2 function (combaseapi.h) Converts a globally unique identifier (GUID) into a string of printable characters.""Pack Change"": ""Pack Unknown""); StringFromGUID2( pNotificationArray[i].Pack.packId, buffer, 50 ); wprintf( L""       Object Id: %s\n"", buffer ); break; case VDS_NTT_VOLUME: ulEvent = pNotificationArray[i].Volume.ulEvent; printf( ""       Event: %s\n"", ulEvent==VDS_NF_VOLUME_ARRIVE?You can use StringFromCLSID or StringFromGUID2 to convert the retrieved KNOWNFOLDERID values to strings.The GUID string can also take the form ""XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"", which is the same form as the string produced by the StringFromGUID2 function, without the surrounding braces ""{}"".The GUID must be specified as a string of the form produced by the StringFromGUID2 function in the COM library.ObjectType This value must be the StringFromGUID2 format of the rightsGUID attribute of the control access right.The GUIDs are stored as strings of the form produced by the StringFromGUID2 function in the COM library but without the starting and terminating braces ({ }).The GUID is stored as a string of the form produced by the StringFromGUID2 function, but without the starting and terminating braces.Remarks StringFromCLSID calls the StringFromGUID2 function to convert a globally unique identifier (GUID) into a string of printable characters.The GUID string is specified in the ""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"" form and is not the same form as the GUID string produced by the StringFromGUID2 function, which takes the form ""{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"".The string format of the GUID is the same string format as the StringFromGUID2 COM Library function."
710,LoadAcceleratorsW,"Microsoft Build · May 19 – 22, 2025LoadAcceleratorsW function (winuser.h) Loads the specified accelerator table. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module whose executable file contains the accelerator table to be loaded. [in] lpTableName Type: LPCTSTR The name of the accelerator table to be loaded. ...tifier of an accelerator-table resource.(ANSI) IsCharUpperW Determines whether a character is uppercase. LoadAcceleratorsA Loads the specified accelerator table. (ANSI) LoadAcceleratorsW Loads the specified accelerator table. (Unicode) LoadCursorA Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. (ANSI) LoadCursorFr....(ANSI) CopyAcceleratorTableW Copies the specified accel... CreateAcceleratorTableA Creates an accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling."
711,CreateBrushIndirect,"Microsoft Build · May 19 – 22, 2025CreateBrushIndirect function (wingdi.h) The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern. Syntax Parameters [in] plbrush A pointer to a LOGBRUSH structure that contains information about the brush. Remarks A brush is a bitmap that the system uses to paint the interiors of filled shapes..CreateBitmapIndirect The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBrushIndirect The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern. CreateCompatibleBitmap The CreateCompatibleBitmap function.(Unicode) CreateBitmap The CreateBitmap function create... CreateBitmapIndirect The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBrushIndirect The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern..Logical Brush Types There are four types of logical brushes: solid, stock, hatch, and pattern. These brushes are shown in the following illustration. The stock and hatch types each have several predefined brushes. The CreateBrushIndirect function creates a logical brush with a specified style, color, and pattern. There are four types of logical.ICM-Enabled Brush Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic, or text object is rendered as close as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following brush functions are enabled for use with ICM:.EMRCREATEBRUSHINDIRECT structure (wingdi.h) The EMRCREATEBRUSHINDIRECT structure contains members for the CreateBrushIndirect enhanced metafile record. Syntax Members emr The base structure for all record types. ihBrush Index of brush in handle table. lb A LOGBRUSH32 structure containing information about the brush. Note, that if your code is used.Function Description CreateBrushIndirect Creates a brush with a specified style, color, and pattern CreateDIBPatternBrushPt Creates a brush with the pattern from a DIB CreateHatchBrush Creates a brush with a hatch pattern and color CreatePatternBrush Creates a brush with a bitmap pattern CreateSolidBrush Creates a brush with a solid color.2.3.4 Object Record Types This section defines the Object Record Types, which create and manage the graphics objects specified in the Playback Device Context (section 3.1.5). The following are the Object Record Types. Name Section Description META_CREATEBRUSHINDIRECT 2.3.4.1 Creates a Brush Object (section 2.2.1.11) from a LogBrush Object (section.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,."
712,FrameRgn,"Microsoft Build · May 19 – 22, 2025FrameRgn function (wingdi.h) The FrameRgn function draws a border around the specified region by using the specified brush. Syntax Parameters [in] hdc Handle to the device context. [in] hrgn Handle to the region to be enclosed in a border. The region's coordinates are presumed to be in logical units. [in] hbr Handle to the brush to be used to draw.Framing Regions An application draws a border around a region by calling the FrameRgn function and specifying the border width and brush pattern that the system uses when drawing the frame. An application draws a border around a region by calling the FrameRgn function and specifying the border width and brush pattern that the system uses when.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. FillRgn Fills a region by using the specified brush. FrameRgn Draws a border around the specified region by using the specified brush. GetPolyFillMode Retrieves the current.EMRFRAMERGN structure (wingdi.h) The EMRFRAMERGN structure contains members for the FrameRgn enhanced metafile record. Syntax Members emr The base structure for all record types. rclBounds Bounding rectangle, in device units. cbRgnData Size of region data, in bytes. ihBrush Index of brush, in handle table. szlStroke Width and height of region.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For progr... DrawFrameControl The DrawFrameControl function draws a frame control of the specified type and style. FrameRect The FrameRect function draws a border.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt.CDC::DrawEscape Accesses drawing capabilities of a video display that aren't directly available through the graphics device interface (GDI). CDC::DrawFocusRect Draws a rectangle in the style used to indicate focus. CDC::FloodFill Fills an area with the current brush. CDC::FrameRect Draws a border around a rectangle. CDC::FrameRgn Draws a border....00036, EMR_ARCTO = 0x00000037, EMR_POLYDRAW = 0x00000038, EMR_SETARCDIRECTION = 0x00000039, EMR_SETMITERLIMIT = 0x0000003A, EMR_BEGINPATH = 0x0000003B, EMR_ENDPATH = 0x0000003C, EMR_CLOSEFIGURE = 0x0000003D, EMR_FILLPATH = 0x0000003E, EMR_STROKEANDFILLPATH = 0x0000003F, EMR_STROKEPATH = 0x00000040, EMR_FLATTENPATH = 0x00000041, EMR_WIDENPATH =....GRADIENTFILL packet EMR_GRADIENTFILL record EMR_HEADER example EMR_HEADER packet EMR_HEADER Record Types EMR_INTERSECTCLIPRECT packet EMR_INTERSECTCLIPRECT EMR_INVERTRGN packet EMR_INVERTRGN Record EMR_LINETO packet EMR_LINETO Record EMR_MASKBLT packet EMR_MASKBLT Record EMR_MODIFYWORLDTRANSFORM packet EMR_MODIFYWORLDTRANSFORM Record."
713,GetCursorPos,"Microsoft Build · May 19 – 22, 2025The GetCursorPos function is a Windows API function that retrieves the current position of the mouse cursor in screen coordinates. It provides the coordinates in a POINT structure, which contains the x and y coordinates of the cursor's position.To use the GetCursorPos function, you typically need to follow these steps:Here is a simple example in C++:In this example, if the function call is successful, it prints the current cursor position to the console.References:GetCursorPos function (winuser.h) Retrieves the position of the mouse cursor, in screen coordinates. Syntax Parameters [out] lpPoint Type: LPPOINT A pointer to a POINT structure that receives the screen coordinates of the cursor. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.FormGuidControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormGuidControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formguidcontrol.getcursorpos.FormStringControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormStringControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formstringcontrol.getcursorpos.FormInt64Control.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormInt64Control.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formint64control.getcursorpos.FormRichTextControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormRichTextControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formrichtextcontrol.getcursorpos.FormDateControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormDateControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formdatecontrol.getcursorpos.FormRealControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormRealControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formrealcontrol.getcursorpos.FormTimeControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormTimeControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formtimecontrol.getcursorpos.FormIntControl.getCursorPos Method Definition Namespace: Dynamics.AX.Application Assembly: Returns Object[] Applies to. Learn more about the Dynamics.AX.Application.FormIntControl.getCursorPos in the Dynamics.AX.Application namespace.. /dotnet/api/dynamics.ax.application.formintcontrol.getcursorpos.Understanding Screen Scaling Issues Windows Vista and later versions of the operating system enable users to change the dots per inch (dpi) setting so that most UI elements on the screen appear larger. This top... For example, typically, the GetCursorPos function returns the logical coordinates. Windows Vista and later versions of the operating."
714,UpdateColors,"Microsoft Build · May 19 – 22, 2025UpdateColors function (wingdi.h) The UpdateColors function updates the client area of the specified device context by remapping the current colors in the client area to the currently realized logical palette. ...hanged, each call to this function results in the loss of some color The UpdateColors function updates the client area of the specified.ColorPickerSlider.UpdateColors Method Definition Namespace: Microsoft.Toolkit.Uwp.UI.Controls.Primitives Assembly:Microsoft.Toolkit.Uwp.UI.Controls.Input.dll Package:Microsoft.Toolkit.Uwp.UI.Controls.Input v7.0.2 Package:Microsoft.Toolkit.Uwp.UI.Controls.Input v7.1.2 Update the slider's Foreground and Background brushes based on the current slider.ColorPickerSlider.UpdateColors Method Definition Namespace: CommunityToolkit.WinUI.UI.Controls.Primitives Assembly:CommunityToolkit.WinUI.UI.Controls.Input.dll Package:CommunityToolkit.WinUI.UI.Controls.Input v7.0.3 Update the slider's Foreground and Background brushes based on the current slider state and color. Remarks Manually refreshes the.Palette Messages Changes to th... An application that receives the WM_PALETTECHANGED message should use UnrealizeObject and RealizePalette to reset the logical palettes associated with all inactive windows and then update the colors in the client area for each inactive window by using the UpdateColors function. However, because UpdateColors.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::SetColorAdjustment Sets the color adjustment values for the d... CDC::SetDCBrushColor Sets the current brush color. CDC::SetDCPenColor Sets the current pen color. CDC::SetTextColor Sets the text color..(ANSI) CreateMetaFileW The CreateMetaFile function creates a device context for a Windows-format ... GetBkColor The GetBkColor function returns the current background color for the specified device context. GetSysColorBrush The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index..CMFCRibbonColorButton Class The CMFCRibbonColorButton class implements a color button that you can add to a ribbon bar. CMFCRibbonColorButton::SetPalette CMFCRibbonColorButton::UpdateColor Remarks The ribbon color button displays a color bar when a user presses it. By default, this col... Remarks CMFCRibbonColorButton::UpdateColor Called by the.For example, %ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\atlmfc\src\mfc. Supports an edi... CMFCPropertyGridCtrl::SetCustomColors Specifies custom colors for various elements of the property grid control. The default value is TRUE. bRedraw [in] TRUE to update the property grid control immediately; FALSE to.Color Functions The following functions are used with color. Function Description AnimatePalette Replaces entries in the specified logical palette. SetSystemPaletteUse Allows an applicat... UnrealizeObject Resets the origin of a brush or resets a logical palette. UpdateColors Updates the client area of the specified device context by remapping the.ColorPickerSlider Class Definition Namespace: Microsoft.Toolkit.Uwp.UI.Controls.Primitives Assembly:Microsoft.Toolkit.Uwp.UI.Controls.Input.dll Package:Microsoft.Toolkit.Uwp.UI.Controls.Input v7.0.2 Package:Microsoft.Toolkit.Uwp.UI.Controls.Input v7.1.2 A slider that represents a single color channel for use in the ColorPicker. UpdateColors()."
715,GetTextFaceA,"Microsoft Build · May 19 – 22, 2025GetTextFaceA function (wingdi.h) The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] c The length of the buffer pointed to by lpFaceName. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD.GetTextExtentPointW The GetTextExtentPoint function computes the width and height of the specified string of text. (Unicode) GetTextFaceA The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. (ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the font that is.GetTextExtentPointW The GetTextExtentPoint function computes the width and height of the specified string of text. (Unicode) GetTextFaceA The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. (ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the font that is."
716,MaskBlt,"Microsoft Build · May 19 – 22, 2025MaskBlt function (wingdi.h) The MaskBlt function combines the color data for the source and destination bitmaps using the specified mask and raster operation. Syntax Parameters [in] hdcDest A handle to the destination device context. [in] xDest The x-coordinate, in logical units, of the upper-left corner of the destination rectangle. [in] yDest.MAKEPOINTS The MAKEPOINTS macro converts a value that contains the x- and y-coordinates of a point into a POINTS structure. MAKEROP4 The MAKEROP4 macro creates a quaternary raster operation code for use with the MaskBlt function. MaskBlt The MaskBlt function combines the color data for the source and destination bitmaps using the specified mask.CDC::GetStretchBltM... CDC::GetTabbedTextExtent Computes the width and height of a character string on the attribute device context. CDC::LPtoHIMETRIC Converts logical units into HIMETRIC units. CDC::MaskBlt Combines the color data for the source and destination bitmaps using the given mask and raster operation. CDC::ModifyWorldTransform Changes.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.MAKEROP4 macro (wingdi.h) The MAKEROP4 macro creates a quaternary raster operation code for use with the MaskBlt function. Return value None Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h.2.3.1.3 EMR_MASKBLT Record The EMR_MASKBLT record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination with a brush pattern and with the application of a color mask bitmap, according to specified foreground and background raster operations. Type (4 bytes): An unsigned integer that.2.3.1 Bitmap Record Types The Bitmap record types perform block transfers of bitmap images. EMR_MASKBLT 2.3.1.3 Specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination with a brush pattern and with the application of a color mask bitmap, according to specified foreground and background raster.CImage::Create Creates a DIB section bitmap and attaches it to the previously constructed CImage object. CImage::LoadFromResource Loads an image from the specified resource. CImage::MaskBlt Combines the color data for the source and destination bitmaps using the specified mask and raster operation. CImage::PlgBlt Performs a bit-block transfer from.To map mouse input that is sent in absolute coordinates to the entire virtual sc... The BitBlt function works well for multiple monitor systems. However, the MaskBlt, PlgBlt, StretchBlt, and TransparentBlt functions will fail if the source and destination device contexts are different. To have your multiple monitoraware application work both on.GetPixel Gets the RGB color value of the pixel at a given... GetStretchBltMode Gets the current stretching mode. GradientFill Fills rectangle and triangle structures. LoadBitmap Loads a bitmap from a module's executable file. MaskBlt Combines the color data in the source and destination bitmaps. PlgBlt Performs a bit-block transfer.."
717,ConnectNamedPipe,"Microsoft Build · May 19 – 22, 2025The ConnectNamedPipe function is used by a named pipe server process to wait for a client process to connect to an instance of a named pipe. This function enables the server to establish a connection with a client, allowing for communication through the named pipe.When you call ConnectNamedPipe, it will block until a client connects to the named pipe. If a client is already connected, the function returns immediately. The function's parameters allow you to specify the named pipe handle and can also include an optional overlapped structure for asynchronous operations.For more detailed usage and examples, you can refer to the documentation.References:ConnectNamedPipe function (namedpipeapi.h) Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. A client process connects by calling either the CreateFile or CallNamedPipe function. Syntax Parameters [in] hNamedPipe A handle to the server end of a named pipe instance. This handle is returned.Pipe Functions The following function is used with anonymous pipes. Function Description CallNamedPipe Connects to a message-type pipe, writes to and reads from the pipe, and then closes... ConnectNamedPipe Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. CreateNamedPipe Creates an.namedpipeapi.h header This header is used by multiple technologies. For more information, see: Security and Identity System Services namedpipeapi.h contains the following programming interfaces: Functions ... (CallNamedPipeW) ConnectNamedPipe Enables a named pipe server process to wait for a client process to connect to an instance of a named.GetOverlappedResult function (ioapiset.h) Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device. Examples For an example that uses GetOverlappedResult, see Testing for the End of a File Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.The server-side function for instantiating a named pipe is CreateNamedPipe. The server-side function for accepting a connection is ConnectNamedPipe. A client process connects to a named pipe by using the CreateFile or CallNamedPipe function. Named pipes can be used to provide communication between processes on the same computer or between.A pipe server can determine when a pipe client is connected to a pipe instance by calling the ConnectNamedPipe function. If the pipe handle is in blocking-wait mode, ConnectNamedPipe does not return until a client is connected. Pipe clients and servers can call one of several functions — in addition to CallNamedPipe — to read from and write to a.Named Pipe Server Using Overlapped I/O The following is an example of a single-threaded pipe server that uses overlapped operations to service simultaneous connections to multiple pipe clients. The OVERLAPPED structure is specified as a parameter in each ReadFile, WriteFile, and ConnectNamedPipe operation on the pipe instance. It does not report....rformed asynchroWhen ReadFile, WriteFile, TransactNamedPipe, and ConnectNamedPipe operations are performed asynchronously, one of the following occurs: If the operation is complete when the function returns, the return value indicates the success or failure of the operation. The ReadFile, WriteFile, TransactNamedPipe, and ConnectNamedPipe.HasOverlappedIoCompleted macro (winbase.h) Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header.This is the same handle that was specified when the overlapped operation was started by a call to the ReadFile, WriteFile, ConnectNamedPipe, TransactNamedPipe, DeviceIoControl, or WaitCommEvent function. [in] lpOverlapped A pointer to an OVERLAPPED structure that was specified when the overlapped operation was started. [out]."
718,IsMenu,"Microsoft Build · May 19 – 22, 2025IsMenu function (winuser.h) Determines whether a handle is a menu handle. Syntax Parameters [in] hMenu Type: HMENU A handle to be tested. Return value Type: BOOL If the handle is a menu handle, the return value is nonzero. If the handle is not a menu handle, the return value is zero. Requirements Requirement Value Minimum supported client.The last item is easily implemented using the TrackPopupMenu function, which takes the following parameters: Handle of the menu to display. The menu handle that the TrackPopupMenu function displays is supposed to be a submenu. ... to generate text output is executed at the same TrackPopupMenuThis means that each of its submenus (File, Edit,.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchang... This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI... The size of the destination.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Menus (Menus and Other Resources) This section describes menus and explains how to use them. In This Section Name Description About Menus Discusses menus. Using Menus Provides code examples of tasks related to menus. Menu Reference."
719,SetThreadContext,"Microsoft Build · May 19 – 22, 2025SetThreadContext function (processthreadsapi.h) Sets the context for the specified thread. A 64-bit application can set the context of a WOW64 thread using the Wow64SetThreadContext function. Syntax Parameters [in] hThread A handle to the thread whose context is to be set. The handle must have the THREAD_SET_CONTEXT access right to the thread. For.Table of contents Exit focus mode Save Table of conten... Syntax Parameters [in] Context Specifies the thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. Yes No Provide product feedback | Get help at Microsoft Q&A. The (IDebugAdvanced3) SetThreadContext method sets the current thread.Table of contents Exit focus mode Save Table of contents... Syntax Parameters [in] Context Specifies the thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. Yes No Provide product feedback | Get help at Microsoft Q&A. The (IDebugAdvanced) SetThreadContext method sets the current thread.Syntax Parameters [in] Context Specifies the thread context. The type of the thread context is the CONTEXT structure for the target's effective processor. ...The buffer Context must be large enough to hold this structure. [in] ContextSize Specifies the size of the buffer CThe (IDebugAdvanced2) SetThreadContext method sets the current thread.ICLRDataTarget::SetThreadContext Method Sets the current context of the specified thread in the target process. Syntax Parameters threadID [in] The operating system identifier of a thread in the target process. contextSize [in] The size of the context. context [in] Pointer to a buffer containing the context. The data in the context buffer will be.ICorDebugMutableDataTarget::SetThreadContext Method Sets the context (register values) for a thread. Syntax Parameters dwThreadID [in] The operating system-defined thread identifier. contextSize [in] The size of the pContext buffer to be written. pContext [in] A pointer to the bytes to be written. Remarks The SetThreadContext method updates the.Debugging Functions The following functions are used with debugging. SetThreadContext Sets the context for the specified thread. WaitForDebugEvent Waits for a ... Wow64GetThreadSelectorEntry Retrieves a descriptor table entry for the specified selector and WOW64 thread. Wow64SetThreadContext Sets the context of the specified WOW64 thread..IDeb... IDebugAdvanced2::SetThreadContext The (IDebugAdvanced2) SetThreadContext method sets the current thread context represented by the CONTEXT structure for the target's effective processor. Requirements Requirement Value Target Platform Windows Header dbgeng.h (include Dbgeng.h) See also IDebugAdvanced IDebugAdvanced3 Feedback Was this page.SetProcessDynamicEnforcedCetCompatibleRanges Sets dynamic enforced CETCOMPAT ranges for the specified process. This function sets a shutdown order for a process relative to the other processes in the system. SetProtectedPolicy Sets a protected policy. SetThreadContext Sets the context for the specified thread. SetThreadDescription Assigns a.This is similar to the register context, except that there is some k... This extra state is available as registers during kernel-mode debugging. The thread context is represented by the CONTEXT structure defined in ntddk.h. This structure is platform-dependent and its interpretation depends on the effective processor type. The methods."
720,GetTextFaceW,"Microsoft Build · May 19 – 22, 2025GetTextFaceW function (wingdi.h) The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] c The length of the buffer pointed to by lpFaceName. For the ANSI function it is a BYTE count and for the Unicode... The GetTextFace.GetTextExtentPointW The GetTextExtentPoint function computes the width and height of th... (Unicode) GetTextFaceA The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. (ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the font that is selected into the.GetTextExtentPointW The GetTextExtentPoint function computes the width and height of th... (Unicode) GetTextFaceA The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context. (ANSI) GetTextFaceW The GetTextFace function retrieves the typeface name of the font that is selected into the."
721,OemToCharA,"Microsoft Build · May 19 – 22, 2025OemToCharA function (winuser.h) Translates a string from the OEM-defined character set into either an ANSI or a wide-character string. Syntax Parameters [in] pSrc Type: LPCSTR A null-terminated string of characters from the OEM-defined character set. [out] pDst Type: LPTSTR The destination buffer, which receives the translated string. ...ser.h.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) OemToCharA Translates a string.Warning C28726 Banned API Usage: '*function-name' is insecure and has been marked deprecated. ...s _mbsnbcpy _mbsnbcpy_s _mbsnbcat _mbsnbcat_s _mbsncat _mbsncat_s _mbsncpy _mbsncpy_s _mbstok _mbstok_s _snscanf _snscanf_s _snwscanf _snwscanf_s _ui64toa ui64toa_s _ui64tow _ui64tow_s _ultoa _ultoa_s Ch CharToOemBuffA CharToOemBuffW CharToOemW.This function can handle strings consisting of either single- or multi-byte characters... (Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharToOemBuffA Translates a specified number of characters in a string into the OEM-defined character set. (ANSI) CharToOemBuffW Translates a specified."
722,GetClipBox,"Microsoft Build · May 19 – 22, 2025GetClipBox function (wingdi.h) The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. The visible area is defined by the current clipping region or clip path, as well as any overlapping windows. Syntax Parameters [in] hdc A handle to the device context..GetCharWidthW The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. (Unicode) GetClipBox The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. GetClipRgn The.CDC::GetCharWidth Retrieves the fractional widths of consecutive characters in a give... CDC::GetCharWidthI Retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range from the current font. CDC::GetClipBox Retrieves the dimensions of the tightest bounding rectangle around the current clipping boundary..Clipping Functions The following functions are used with clipping. ExtSelectClipRgn Combines the specified region with the current clipping region using the ... GetClipBox Retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. GetClipRgn Retrieves a handle identifying the.GetCharWidthW The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font. (Unicode) GetClipBox The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. GetClipRgn The.Private Display Device Contexts A private device context enables an application to avoid retrieving and initializing a display device context each time the application must draw in a window. To avoid undesirable effects, the system uses logical coordinates when erasing the background; for example, it uses the GetClipBox function to retrieve the.GetRandomRgn function (wingdi.h) The GetRandomRgn function copies the system clipping region of a specified device c... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).GetWindowRgnBox function (winuser.h) The GetWindowRgnBox function ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set."
723,IsValidLocale,"Microsoft Build · May 19 – 22, 2025IsValidLocale function (winnls.h) [IsValidLocale is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use IsValidLocaleName to determine the validity of a supplemental locale.]. Determines if the specified locale is installed or supported on the.winnls.h header This header is used by Internationalization for Windows Applications. For more information, see Local... IsValidLocaleName Determines if the specified locale name is valid for a locale that is installed or supported on the operating system.Note  An application running only on Windows Vista and later should call this function in.National Language Support Functions NLS supports the functions defined in the following table. IsValidCodePage Determines if a specified code page is valid. IsValidLanguageGroup Determines if a language group is installed or supported on the operating system. IsValidLocale Determines if the specified locale is installed or supported on the.IsValidLocaleName function (winnls.h) Determines if the specified locale name is valid for a locale that is installed or supported on the operating system.Note  An application running only on Windows Vista and later should call this function in preference to IsValidLocale to determine the validity of a supplemental locale. Syntax Parameters [in]....ts, EnumDateFormatsEx EnumSystemLocalesEx EnumSystemLocales EnumTimeFormatsEx EnumTimeFormats FindNLSStringEx FindNLSString GetCalendarInfoEx GetCalendarInfo GetCurrencyFormatEx GetCurrencyFormat GetDateFormatEx GetDateFormat GetDurationFormatEx GetDurationFormat GetLocaleInfoEx GetLocaleInfo GetNLSVersionEx GetNLSVersion GetNumberFormatEx.CompareStringW The CompareStringW (Unicode) function (stringapiset.h) compar... ComprehensiveCheck Spell-check the provider text in a more thorough manner than ISpellCheckProvider::Check. ComprehensiveCheck Checks the spelling of the supplied text in a more thorough manner than ISpellChecker::Check, and returns a collection of spelling errors.."
724,GetDC,"Microsoft Build · May 19 – 22, 2025The GetDC function is a Windows API function used to obtain a handle to a device context (DC) for a specific window or the entire screen. It is primarily utilized for drawing operations that need to occur immediately, rather than waiting for a WM_PAINT message to be processed. This is particularly useful in scenarios where instant feedback is required, such as user interactions like mouse movements or selections.When using GetDC, an application can perform drawing operations directly in response to user actions without forcing the user to wait. The function can also be used to create a private display device context for applications that perform numerous drawing operations in their window's client area. To create this type of DC, the application must specify the CS_OWNDC constant when registering the window class.In summary, GetDC is essential for applications that require real-time drawing capabilities, allowing developers to manage graphics output effectively.References:GetDC function (winuser.h) The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI. The GetDCEx function is.Using the GetDC Function You use the GetDC function to carry out drawing that must occur instantly rather than when a WM_PAINT message is processing. Such drawing is usually in response to an action by the user, such as making a selection or drawing with the mouse. ...ld receive instant feedback and must not be forced to stop selecting or drawing.IDXGISurface1::GetDC method (dxgi.h) Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI). DXGI 1.1 support is required, which is available on Windows 7, Windows Server 2008 R2, a... After you use the GetDC method to retrieve a DC, you.ID3DX10Font::GetDC method Return a handle to a display device context (DC) that has the font set onto it. Syntax Parameters This method has no parameters. Return value Type: HDC Handle to a display DC. Requirements Requirement Value Header D3DX10.h Library D3DX10.lib See also ID3DX10Font D3DX Interfaces. Return a handle to a display device context.ID3DXFont::GetDC method Returns a handle to a display device context (DC) that has the font set. Syntax Parameters This method has no parameters. Return value Type: HDC Handle to a display DC. Requirements Requirement Value Header D3dx9core.h Library D3dx9.lib See also ID3DXFont. Returns a handle to a display device context (DC) that has the font.Bitmaps, Device Contexts, and Drawing Surfaces A device context (DC) is a data structure defining the graphics objects, their associated attributes, and the graphics modes affecting output on a device. To create a DC, call the CreateDC function; to retrieve a DC, call the GetDC function. A device context (DC) is a data structure defining the.Obtaining a Private Display Device Context An application performing numerous drawing operations in the client area of its window must use a private display DC. To create this type of DC, th... After registering the window class, the application obtains a handle identifying a private display DC by calling the GetDC function. An application.IOleInPlaceSiteWindowless.GetDC(RECT[], UInt32, IntPtr) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Provides an object with a handle to a device context for a screen or compatible.This topic applies to the following test jobs: Get DC Get DC (WoW64) Test details Specifications Device.Graphics.AdapterRender.MinimumDirectXLevel Platforms Windows 10, client editions (x86)Windows 10, client editions (x64)Windows Server 2016 (x64)Windows 10, client editions (Arm64) Supported Releases Windows 10Windows 10, version 1511Windows 10,.IDirectDrawSurface7::GetDC method (ddraw.h) Creates a GDI-compatible handle of a device context for this surface. ...e method can return one of the following error values: DDERR_DCALREADYCREATED DDERR_GENERIC DDERR_INVALIDOBJECT DDERR_INVALIDPARAMS DDERR_INVALIDSURFACETYPE DDERR_SURFACELOST DDERR_UNSUPPORTED DDERR_WASSTILLDRAWING GetDC uses an."
725,GetThreadPriorityBoost,"Microsoft Build · May 19 – 22, 2025GetThreadPriorityBoost function (processthreadsapi.h) Retrieves the priority boost control state of the specified thread. Syntax Parameters [in] hThread A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. Requirements Requirement Value Minimum supported client Windows XP.GetThreadPriority Retrieves the priority value for the specified thread. GetThreadPriorityBoost Retrieves the priority boost control state of the specified thread. GetThreadTimes Retrieves timing information for the specified thread. Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess NtQueryInformationThread WinExec.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Priority Boosts Each thread has a dynamic priority. This is the priority the scheduler uses to determine which thread to execute. To determine whether this feature has been disabled, call the GetProcessPriorityBoost or.GetProcessPriorityBoost Retrieves the priority boost control state of the specified process. GetProcessShutdownPara... This value, together with the priority class of the thread's process, determines the thread's base-priority level. GetThreadPriorityBoost Retrieves the priority boost control state of the specified thread..processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. GetProcessPriorityBoost Retrieves the....t the priority of a Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows.CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240... Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetCurrentLogicalThreadId Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in."
726,GetDeviceCaps,"Microsoft Build · May 19 – 22, 2025The GetDeviceCaps function is a Windows API function that retrieves various capabilities and characteristics of a specified device, using a device context. It can be used with different types of devices, including raster displays, printers, and cameras. The function requires a handle to the device context and an index that specifies the type of data to retrieve.The data returned by GetDeviceCaps includes information such as device resolution, color format, number of graphic objects, and capabilities related to drawing graphics and text. For example, it can be used to determine the raster capabilities of a device or the minimum number of fonts supported by a printer.Here is a brief example of how it can be used to check if a printer supports bit-block transfers:References:GetDeviceCaps function (wingdi.h) The GetDeviceCaps function retrieves device-specific information for the specified device. Syntax Parameters [in] hdc A handle to the DC. [in] index The item to be returned. To determine whether it is an enhanced metafile DC, use the GetObjectType function. HORZSIZE Width, in millimeters, of the physical screen..Checking the Text Capabilities of a Device You can us... You can also use the GetDeviceCaps function to retrieve information about the text capabilities of a device. By calling the GetDeviceCaps function with the NUMFONTS index, you can determine the minimum number of fonts supported by a printer. You can use the EnumFonts and EnumFontFamilies.WinAPINative.getDeviceCaps(Int64, Int32) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Parameters _hDC Int64 _index Int32 Returns Int32 Applies to. Learn more about the Dynamics.AX.Application.WinAPINative.getDeviceCaps in the Dynamics.AX.Application namespace...IDirect3D9::GetDeviceCaps method (d3d9.h) Retrieves device-specific information about a device. Sy... Remarks The application should not assume the persistence of vertex processing capabilities across Direct3D device objects. Requirements Requirement Value Target Platform Windows Header d3d9.h (include D3D9.h) Library D3D9.lib See also IDirect3D9..IDirect3DDevice9::GetDeviceCaps method (d3d9.h) Retrieves the capabilities of the rendering device. Syntax Parameters [out] pCaps Type: D3DCAPS9* Pointer to a D3DCAPS9 structure, describing the returned device. Remarks IDirect3DDevice9::GetDeviceCaps retrieves the software vertex pipeline capabilities when the device is being used in software.IDirect3D9::GetDeviceCaps method (d3d9helper.h) Retrieves device-specific information about a device. Remarks The application should not assume ... For more information see the description of D3DCAPS9. Requirements Requirement Value Target Platform Windows Header d3d9helper.h (include D3D9.h) Library D3D9.lib See also IDirect3D9. The.IDirect3DDevice9::GetDeviceCaps method (d3d9helper.h) Retrieves the capabilities of the rendering device. Syntax Parameters [out] pCaps Type: D3DCAPS9* Pointer to a D3DCAPS9 structure, describing the returned device. Remarks IDirect3DDevice9::GetDeviceCaps retrieves the software vertex pipeline capabilities when the device is being used in.Enumerating Colors You can determine how many colors a device supports and what those colors are by retrieving the count of colors for the device and enumerating the colors of the solid pens. To retrieve the number of colors, use the GetDeviceCaps function with the NUMCOLORS value. To enumerate solid pens, use the EnumObjects function and a.GetDeviceCaps retrieves general device data for the following devices: Raster displays Dot-matrix printers Ink-jet printers Laser printers Vector plotters Raster cameras The data includes the supported capabilities of the device, including device resolution (for video displays), color format (for video displays and color printers), number of.For example, because of hardware limitations, most vector plotte... An application can determine whether a device supports a particular graphics function by calling the GetDeviceCaps function, specifying the appropriate index, and examining the return value. The following example shows how an application tests a printer to determine whether it."
727,LoadBitmapA,"Microsoft Build · May 19 – 22, 2025LoadBitmapA function (winuser.h) [LoadBitmap is available for use in the operating systems specified in the Requirements section. Instead, use LoadImage and DrawFrameControl.]. The LoadBitmap function loads the specified bitmap resource from a module's executable file. Syntax Parameters [in] hInstance A handle to the instance of the module whose.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,.CopyIcon Copies the specified icon from another module to the. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image. (Unicode) CreateCaret Creates a new shape for the system caret and assigns.(Unicode) AlphaBlend The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels. CreatePatternBrush The CreatePatternBrush function creates a logical brush with the specified ... The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. Arc and."
728,GetQueuedCompletionStatus,"Microsoft Build · May 19 – 22, 2025GetQueuedCompletionStatus is a function used in the context of I/O completion ports in Windows programming. It attempts to dequeue an I/O completion packet from a specified I/O completion port. This function is essential for managing asynchronous I/O operations, allowing threads to wait for completion notifications without blocking the entire process.When a thread calls GetQueuedCompletionStatus, it waits for a completion packet to be queued to the I/O completion port. If a packet is available, the function retrieves it and provides the status of the completed I/O operation. If no packets are available, the thread will block until one is queued or a timeout occurs.This mechanism is particularly useful for efficiently handling multiple I/O operations and synchronizing their completion across different threads.References:GetQueuedCompletionStatus function (ioapiset.h) Attempts to dequeue an I/O completion packet from the specified I/O completion port. If there is no completion packet queued, the function waits for a pending I/O operation associated with the completion port to complete. To dequeue multiple I/O completion packets at once, use the.ioapiset.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services ioapiset.h contains the following programming interfaces: Functions CancelIo Cancels all pending input and output (I/O) operations that are issued ... GetQueuedCompletionStatus Attempts to dequeue an I/O completion....ad or the main thread itself) us GetQueuedCompletionStatus function to wait for a completion packet to be queued to the I/O completion port,Although any number of threads can call GetQueuedCompletionStatus for a specified I/O completion port, when a specified thread calls GetQueuedCompletionStatus the first time, it becomes associated with the.HTTP Completion Routines Applications have several options for receiving completion indications and providing some flexibility for developers. If the completion port is used (the hFile parameter is associated with an I/O completion port), the application calls the GetQueuedCompletionStatus function to determine the number of bytes read. Calling.IOCTL_SFFDISK_DEVICE_COMMAND IOCTL (sffdisk.h) User-mode applications use this IOCTL to send Secure Digital (SD) card commands to an SD card. ... If hDevice is associated with an I/O completion port, you can get the number of bytes returned by calling the GetQueuedCompletionStatus function. For a description of the GetOverlappedResult and.If your client program uses an I/O completion port to receive completion notification, it must call the GetQueuedCompletionStatus function. When it does, it can either wait indefinitely for a response or continue to do other processing. If it does other processing while it waits for a reply, it must poll the completion port with the.HasOverlappedIoCompleted macro (winbase.h) Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation. To get more details about a completed I/O operation, call the GetOverlappedResult or GetQueuedCompletionStatus function. Requirements Requirement Value Minimum supported client.IOCTL_SFFDISK_QUERY_DEVICE_PROTOCOL IOCTL (sffdisk.h) User-mode applications use this IOCTL to retrieve a protocol value that identifies the card as either an SD card or an MMC card. If hDevice is associated with an I/O completion port, you can get the number of bytes returned by calling the GetQueuedCompletionStatus function. For a description of.And here's the question: for the GetQueuedCompletionStatus function - the second parameter is: from MSDN: lpNumberOfBytesTransferred A pointer to a variable that receives the number of bytes transferred in a completed I/O operation. and the 4th parameter, as I already wrote above, is the WSAOVERLAPPED structure: from MSDN: A pointer to a variable.When the notification is delivered to the completion port, this value is filled in the location pointed to by the lpNumberOfBytesTransferred parameter of the GetQueuedCompletionStatus function. When the notification is delivered to the completion port, this value is filled in the location pointed to by the lpCompletionKey parameter of the."
729,listen,"Microsoft Build · May 19 – 22, 2025The Listen method is part of the Microsoft Agent API, which is used to control the listening mode for speech recognition input. Here’s how to use it:This method is deprecated as of Windows 7 and may not be available in later versions of Windows.References:listen function (winsock2.h) The listen function places a socket in a state in which it is listening for an incoming connection. Syntax Parameters [in] s A descriptor identifying a bound, unconnected socket. [in] backlog The maximum length of the queue of pending connections. If set to SOMAXCONN, the underlying service provider responsible for.EventHubsAccessRight.Listen Property Definition Namespace: Azure.ResourceManager.EventHubs.Models Assembly:Azure.ResourceManager.EventHubs.dll Package:Azure.ResourceManager.EventHubs v1.1.0 Package:Azure.ResourceManager.EventHubs v1.2.0-beta.1 Source:EventHubsAccessRight.cs Source:EventHubsAccessRight.cs Listen. Property Value EventHubsAccessRight.RelayAccessRight.Listen Property Definition Namespace: Azure.ResourceManager.Relay.Models Assembly:Azure.ResourceManager.Relay.dll Package:Azure.ResourceManager.Relay v1.2.1 Package:Azure.ResourceManager.Relay v1.2.0-beta.1 Source:RelayAccessRight.cs Source:RelayAccessRight.cs Listen. Property Value RelayAccessRight Applies to. Listen. ..AuthorizationRuleAccessRightExt.Listen Property Definition Namespace: Azure.ResourceManager.NotificationHubs.Models Assembly:Azure.ResourceManager.NotificationHubs.dll Package:Azure.ResourceManager.NotificationHubs v1.1.1 Package:Azure.ResourceManager.NotificationHubs v1.2.0-beta.2 Source:AuthorizationRuleAccessRightExt.cs.Socket.Listen Method Definition Namespace: System.Net.Sockets Assemblies:netstandard.dll, System.Net.Sockets.dll Assemblies:System.dll, System.Net.Sockets.dll Assembly:System.Net.Sockets.dll Assembly:System.dll Assembly:netstandard.dll Overloads Listen() Places a Socket in a listening state. Examples The following code example uses Socket to....rel.Core v2.0.0 Package:Microsoft.AspNetCore.Server.Kestrel.Core v2.1.0 Package:Microsoft.AspNetCore.Server.Kestrel.Core v2.2.0 Package:Microsoft.AspNetCore.App.Ref v3.0.1 Package:Microsoft.AspNetCore.App.Ref v3.1.10 Package:Microsoft.AspNetCore.App.Ref v5.0.0 Package:Microsoft.AspNetCore.App.Ref v6.0.6 Package:Microsoft.AspNetCore.App.Ref.netstat Displays active TCP connections, ports on which the computer is listening, Ethernet statistics, the IP routing table, IPv4 statistics (for the IP, ICMP, TCP, and UDP protocols), and IPv6 statistics (for the IPv6, ICMPv6, TCP over IPv6, and UDP over IPv6 protocols). Syntax Parameters Parameter Description -a Displays all active TCP.Create a Socket server To create the server socket, the endPoint object can listen for incoming connections on any IP address but the port number must be specified. The listener calls the Socket.Bind method with the endPoint instance as an argument to associate the socket with the network address. The Socket.Listen() method is called to listen for.IAgentCharacterEx::Listen [Microsoft Agent is deprecated as of Windows 7, and may be unavailable in subsequent versions of Windows.]. Turns Listening mode (speech recognition input) o... If this parameter is True, the Listening mode is turned on; if False, Listening mode is turned off. Setting this method to True enables the Listening mode (turns.PFN_WSK_LISTEN callback function (wsk.h) The WskListen function enables a stream socket to listen for incoming connections at the socket's bound address. Syntax Parameters [in] Socket A pointer to a WSK_SOCKET structure that specifies the socket object for the stream socket that is listening for an incoming connection. Requirements Requirement."
730,DefMDIChildProcW,"Microsoft Build · May 19 – 22, 2025DefMDIChildProcW function (winuser.h) Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the DefMDIChildProc function, not to the DefWindowProc function. Syntax Parameters [in].(ANSI) D... (Unicode) DefMDIChildProcA Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. (ANSI) DefMDIChildProcW Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not.(ANSI) DefFrameProcW Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not ... (Unicode) DefMDIChildProcA Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. (ANSI)."
731,CopyRect,"Microsoft Build · May 19 – 22, 2025CopyRect function (winuser.h) The CopyRect function copies the coordinates of one rectangle to another. Syntax Parameters [out] lprcDst Pointer to the RECT structure that receives the logical coordinates of the source rectangle. [in] lprcSrc Pointer to the RECT structure whose coordinates are to be copied in logical units. ...eturn value If the.Rectangle Functions The following functions are used with rectangles. Function Description CopyRect Copies the coordinates of one rectangle to another. EqualRect Determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. InflateRect Increases or decreases the width and height.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Sourc... If necessary, the function stretches the bits to fit the desired size of the new image. CopyRect The.Rectangle Operations The SetRect function creates a rectangle, the CopyRect function makes a copy of a given rectangle, and the SetRectEmpty function creates an empty rectangle. An empty rectangle is any rectangle that has zero width, zero height, or both. For information about functions that draw ellipse... The SetRect function creates a.(Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. (ANSI) CopyMetaFileW The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. (Unicode) CopyRect The CopyRect function copies the coordinates of one rectangle to another. CreateBitmap The.CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::CopyRect Copies the dimensions of a source rectangle to CRect. CRect::DeflateRect Decreases the width and height of CRect. (The name tagRECT is a less-commonly-used name for the RECT structure.)..CopyRects Functionality (WoW64) This automated test verifies the functionality that the IDirect3DDevice8::CopyRects method provides by comparing surfaces that tested operations generate with reference surfaces that the test itself generates. ... represen surfaces for each combination of format and surface type and performs a set of CopyRects.IDirect3DDevice9::UpdateSurface method (d3d9.h) Copies rectangular subsets of pixels from one surface to another. Syntax Parameters [in] pSourceSurface Type: IDirect3DSurface9* Pointer to an IDirect3DSurface9 interface, representing the source surface. Remarks This method is similar to CopyRects in DirectX 8. Requirement... The.IDirect3DDevice9::UpdateSurface method (d3d9helper.h) Copies rectangular subsets of pixels from one surface to another. Syntax Parameters [in] pSourceSurface Type: IDirect3DSurface9* Pointer to an IDirect3DSurface9 interface, representing the sou... Remarks This method is similar to CopyRects in DirectX 8. The IDirect3DDevice9::UpdateSurface....ion crea empty rectangleRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also CopyRect RECT Rectangle Functions Rectangles."
732,GetMenuItemRect,"Microsoft Build · May 19 – 22, 2025GetMenuItemRect function (winuser.h) Retrieves the bounding rectangle for the specified menu item. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window. [in] hMenu Type: HMENU A handle to a menu..GetMenuItemID Retrieves the menu item identifier of a menu item located at the specified position in a menu. GetMenuItemInfo Retrieves information about a menu item. GetMenuItemRect Retrieves the bounding rectangle for the specified menu item. GetMenuState Retrieves the menu flags associated with the specified menu item. If the menu item opens a.GetMenuItemID Retrieves ... GetMenuItemInfoA Retrieves information about a menu item. (ANSI) GetMenuItemInfoW Retrieves information about a menu item. (Unicode) GetMenuItemRect Retrieves the bounding rectangle for the specified menu item. GetMenuState Retrieves the menu flags associated with the specified menu item. GetMenuStringA Copies the text.Ha... Update In my November 2003 column, I described how to get the HWND of a popup menu by enumerating windows and looking for one with the special class name ""#32768"". Reader Jim White pointed out the following trick: if you call GetMenuItemRect with NULL as the window handle, Windows will return the HWND of the popup window—amazing. Jim reports.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag fo... CopyRect The CopyRect function copies the coordinates of one rectangle to another. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem,."
733,SetMessageQueue,"Microsoft Build · May 19 – 22, 2025We couldn't find any results matching ""SetMessageQueue""Quickstart: Send and receive messages from an Azure Service Bus queue (.NET) In this quickstart, you do the following steps: Create a Service Bus namespace, using the Azure portal. Write a .NET console application to receive those messages from the queue. This quickstart provides step-by-step instructions to implement a simple scenario of sending.Create and manage queues for unified routing Applies to: Dynamics 365 Contact Center—embedded, Dynamics 365 Contact Center—standalone, and Dynamics 365 Customer Service Queues are used to collect and distribute workload among customer service representatives (service representatives or representatives). ...erience for administrators and.Queue Storage REST API Azure Queue Storage stores messages that can be read by any client that has access to the storage account. A queue can contain an unlimited number of messages. The REST API for Queue Storage includes these operations: Operation Description Set Queue Service Properties Sets the properties of Queue Storage. In this section.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Use Service Bus Explorer to run data operations on Service Bus Azure Service Bus allows sender and receiver client applications to decouple their business logic with the use of familiar point-to-point (Queue) and publish-subscribe.Azure Queue storage output bindings for Azure Functions Azure Functions can create new Azure Queue storage messages by setting up an output binding. We highly recommend that you migra. Usage The usage of the Queue output binding depends... Extension 5.x+ Extension 2.x+ When you want the function to write a single message, the queue output binding.Quickstart: Azure Queue Storage client library for Python Get started with the Azure Queue Storage client library for Python. Azure Queue Storage is a service for storing large numbers of messages for later retrieval and processing. API reference documentation | Library source code | Package (Python Package Index) | Samples Use the Azure Queue.Service Bus queues, topics, and subscriptions Azure Service Bus supports reliable message queuing and durable publish/subscribe messaging. The messaging entities that form the core of the messaging capabilities in Service Bus are queues, topics and subscriptions. Create queues You can create queues using one of the following options: Azure portal.Tutorial: Work with Azure Queue Storage queues in .NET Azure Queue Storage implements cloud-based queues to enable communication between components of a distributed application. Each queue maintains a list of messages that can be added by a sender component and processed by a receiver component. This article shows the basic steps for working with.Quickstart: Azure Queue Storage client library for .NET Get started with the Azure Queue Storage client library for .NET. Azure Queue Storage is a service for storing large numbers of messages for later retrieval and processing. API reference documentation | Library source code | Package (NuGet) | Samples Use the Azure Queue Storage client library.Use Azure portal to create a Service Bus namespace and a queue This quickstart shows you how to create a Service Bus namespace and a queue using the Azure portal. Service Bus queues are a general-purpose technology that can be used for a wide variety of scenarios: Communication between web and worker roles in a multi-tier Azure application. To."
734,IsWindow,"Microsoft Build · May 19 – 22, 2025IsWindow function (winuser.h) Determines whether the specified window handle identifies an existing window. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the window handle identifies an existing window, the return value is nonzero. ...ndle does not identify an existing window, the.OperatingSystem.IsWindows Method Definition Namespace: System Assemblies:netstandard.dll, System.Runtime.dll Source:OperatingSystem.cs Source:OperatingSystem.cs Source:OperatingSystem.cs Indicates whether the current application is running on Windows. Returns Boolean true if the current application is running on Windows; false otherwise. Applies.NativeMethods.IsWindow(IntPtr) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd Returns Boolean Applies to. Learn more about the Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls.NativeMethods.IsWindow in the.In-Context Hook Function Precautions For performance reasons, client developers register in-context hook functions. However, because these hook functio... Clients must verify that the window associated with an event still exists before taking any other action related to the event. To ensure that a window still exists, clients use the Microsoft....abInfo GetAncestor GetClientRect GetDesktopWindow GetForegroundWindow GetGUIThreadInfo GetLastActivePopup GetLayeredWindowAttributes GetNextWindow GetParent GetProcessDefaultLayout GetShellWindow GetSysColor GetTitleBarInfo GetTopWindow GetWindow GetWindowDisplayAffinity GetWindowInfo GetWindowModuleFileName GetWindowPlacement GetWindowRect.ShellTextEditorControl.IsWindow(IntPtr) Method Definition Namespace: Microsoft.SqlServer.Management.UI.VSIntegration Assembly:SQLEditors.dll Parameters hWnd Returns Boolean Applies to. Learn more about the Microsoft.SqlServer.Management.UI.VSIntegration.ShellTextEditorControl.IsWindow in the Microsoft.SqlServer.Management.UI.VSIntegration....ited from java.lang.Object java.lang.Object.clone java.lang.Object.equals java.lang.Object.finalize java.lang.Object.getClass java.lang.Object.hashCode java.lang.Object.notify java.lang.Object.notifyAll java.lang.Object.toString java.lang.Object.wait java.lang.Object.wait java.lang.Object.wait Constructor Details OSHelper public OSHelper().Note Clients with in-context hook functions must call the IsWindow function before calling AccessibleObjectFromEvent. It is possible that servers return distinct interface pointers for the same user interface element each time the... Yes No Provide product feedback | Get help at Microsoft Q&A. Microsoft Active Accessibility client applications.LoginTypePayloadOption.IsWindows Property Definition Namespace: Microsoft.SqlServer.TransactSql.ScriptDom Assembly:Microsoft.SqlServer.TransactSql.ScriptDom.dll Package:Microsoft.SqlServer.DacFx.x64 v140.3881.1 Package:Microsoft.SqlServer.DacFx v150.5282.3 Package:Microsoft.SqlServer.DacFx v160.6161.0 Package:Microsoft.Data.Tools.Msbuild.IsHungAppWindow function (winuser.h) [This function is not intended for general use. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll."
735,ExitThread,"Microsoft Build · May 19 – 22, 2025Application.ExitThread Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:Application.cs Source:Application.cs Source:Application.cs Exits the message loop on the current thread and closes all windows on the thread. Remarks Use this method to exit the message loop of the current thread. ...all to Run for.ExitThread function (processthreadsapi.h) Ends the calling thread. Syntax Parameters [in] dwExitCode The exit code for the thread. Return value None Remarks ExitThread is the preferred method of exiting a thread in C code. However, in C++ code, the thread is exited before any destructors can be called or any other automatic cleanup can be.ApplicationContext.ExitThread Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:ApplicationContext.cs Source:ApplicationContext.cs Source:ApplicationContext.cs Terminates the message loop of the thread. This example keeps track of open forms and exits the current thread when all forms are closed. When the.How Threads are Terminated A thread executes until one of the following events occurs: The thread calls the ExitThread function. The exit code for a thread is either the value specified in the call to ExitThread, ExitProcess, TerminateThread, or TerminateProcess, or the value returned by the thread function. If a thread is terminated by.ApplicationContext.ExitThreadCore Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:ApplicationContext.cs Source:ApplicationContext.cs Source:ApplicationContext.cs Terminates the message loop of the thread. Note ExitTh... These methods raise the ThreadExit event to which the Application object listens. The.ICorDebugManagedCallback::ExitThread Method Notifies the debugger that a thread that was executing managed code has exited. Syntax Parameters pAppDomain [in] A pointer to an ICorDebugAppDomain object that represents the application domain containing the managed thread. thread [in] A pointer to an ICorDebugThread object that represents the managed.Table of contents Exit focus mode Save Table of contents Add Edit Share via... Syntax Parameters [in] ExitCode Specifies the exit code for the thread. Return value This method returns a DEBUG_STATUS_XXX value, which indicates how the execution of the target should proceed after the engine processes this event. The ExitThread callback method is.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print IDebugEventCallbacksWide interface (dbgeng.h) Inheritance The IDebugEventC... IDebugEventCallbacksWide::ExitThread The ExitThread callback method is called by the engine when an exit-threaddebugging event occurs in the target. Yes No.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print IDebugEventCallbacks interface (dbgeng.h) Inheritance The IDebugEventCallbacks interf... IDebugEventCallbacks::ExitThread The ExitThread callback method is called by the engine when an exit-thread debugging event occurs in the target..FreeLibraryAndExitThread function (libloaderapi.h) Decrements the reference count of a loaded dynamic-link library (DLL) by one, then calls ExitThread to terminate the calling thread. Return value None Remarks The FreeLibraryAndExitThread function allows threads that are executing within a DLL to safely free the DLL in which they are executing and."
736,GetFileType,"Microsoft Build · May 19 – 22, 2025GetFileType function (fileapi.h) Retrieves the file type of the specified file. Syntax Parameters [in] hFile A handle to the file. Return value The function returns one of the following values. Return code/value Description FILE_TYPE_CHAR 0x0002 The specified file is a character file, typically an LPT device or a console. FILE_TYPE_DISK 0x0001 The.Retrieving File Type Information The GetFileType function retrieves the type of a file: disk, character (such as a console), pipe, or unknown. The GetBinaryType function determines whether a file is executable, and if so, the type of executable file it is. See GetBinaryType for a list of the supported executable types. The GetFileType function.Obtaining and Setting File Information The following topics describe how to get and set file information. In this section Topic Description Retrieving File Type Information The GetFileType function retrieves the type of a file: disk, character (such as a console), pipe, or unknown. Determining the Size of a File The GetFileSize function retrieves.Handles returned by GetStdHandle can be used by the console functions if they ha... If a standard handle has been redirected to refer to a file or a pipe, however, the handle can only be used by the ReadFile and WriteFile functions. GetFileType can assist in determining what device type the handle refers to. A console handle presents as.Constructor Summary Constructor Description FileDownloadInfo() Method Summary Modifier and Type Method and Description java.lang.String getDownloadUrl() Gets file download url. java.lang.Object getEtag() Gets eTag for the file. java.lang.String getFileType() Gets type of file. java.lang.String getUniqueId() Gets unique Id for the file. void.Directory Handles Whenever a process creates or opens a directory object, it receives a handle to the object. To obtain a handle to an existing directory, call the CreateFile function with the FILE_FLAG_BACKUP_SEMANTICS flag. You c... GetFileTime Retrieves the date and time that a file or directory was created, last accessed, and last modified..Constructor Summary Constructor Description FileInfoCard() Method Summary Modifier and Type Method and Description java.lang.Object getEtag() Gets eTag for the file. java.lang.String getFileType() Gets type of file. java.lang.String getUniqueId() Gets unique Id for the file. void setEtag(Object withEtag) Sets eTag for the file. void.Constructor Summary Constructor Description FileUploadInfo() Method Summary Modifier and Type Method and Description java.lang.String getContentUrl() Gets URL to file. java.lang.String getFileType() Gets type of file. java.lang.String getName() Gets name of the file. java.lang.String getUniqueId() Gets unique Id for the file. java.lang.String.FilePosixProperties Class Package:com.azure.storage.file.share.models Maven Artifact:com.azure:azure-storage-file-share:12.26.0 java.lang.Object com.azure.storage.file.share.models.FilePosixProperties public final class FilePosixProperties NFS properties. Note that these properties only apply to files or directories in premium NFS file accounts..SetFilePointer function (fileapi.h) Moves the file pointer of the specified file. This function stores the file pointer in two LONG values. The behav... To specify the offset for overlapped operations Use the Offset and OffsetHigh members of the OVERLAPPED structure. To determine the file type for hFile Use the GetFileType function. For."
737,CreateRemoteThread,"Microsoft Build · May 19 – 22, 2025The CreateRemoteThread function is used in Windows programming to create a thread that runs in the virtual address space of another process. This function is typically utilized by debugger processes to execute code within the context of the target process being debugged.To use CreateRemoteThread, you need to follow these general steps:It's important to handle permissions and ensure that you have the necessary access rights to the target process.References:CreateRemoteThread function (processthreadsapi.h) Creates a thread that runs in the virtual address space of another process. Use the CreateRemoteThreadEx function to create a thread that runs in the virtual address space of another process and optionally specify extended attributes. Syntax Parameters [in] hProcess A handle to the process in which.Processes and threads Provides information about a newly created process and its primary thread. The new process runs in the security context of the calling process. (Unicode) CreateRemoteThread Creates a thread that runs in the virtual address space of another process. CreateRemoteThreadEx Creates a thread that runs in the virtual address space.Function Description Atta... CreateRemoteThread Creates a thread that runs in the virtual address space of another process. CreateRemoteThreadEx Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. CreateThread Creates a thread to execute within.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming in... (Unicode) CreateRemoteThread Creates a thread that runs in the virtual address space of another process..CreateThread function (processthreadsapi.h) Creates a thread to execute within the virtual address space of the calling process. To create a thread that runs in the virtual address space of another process, use the CreateRemoteThread function. Syntax Parameters [in, optional] lpThreadAttributes A pointer ... The ExitProcess, ExitThread,.The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a significant amount of logging. Event ID 8: CreateRemoteThread The CreateRemoteThread event detects when a process creates a thread in.Creating Threads The CreateThread function creates a new thread for a process. When suspended, the thread does not run until the Resume... You can also create a thread by calling the CreateRemoteThread function. This function is used by debugger processes to create a thread that runs in the address space of the process being debugged. Review how.Thread Handles and Identifiers When a new thread is created by the CreateThread or CreateRemoteThread function, a handle to the thread is returned. The CreateThread and CreateRemoteThread functions also return an identifier that uniquely identifies the thread throughout the system. To enumerate the threads of a process, use the... When a new.The ExitProcess, ExitThread, CreateThread, CreateRemoteThread functions, and a process that is starting (as the result of a CreateProcess call) are serialized between each other within a process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps |.CreateRemoteThread, Command Line, and More You have seen how the Win32 debugging API can be used to discover how and where DLLs are loaded by a process. Now let's dust off CreateRemoteThread, a function that allows you to make another process start one of your functions as a running thread in its context, as shown here: The lpStartAddress."
738,GetClientRect,"Microsoft Build · May 19 – 22, 2025The GetClientRect function retrieves the coordinates of a window's client area. The client area is the part of the window where drawing can occur, excluding the title bar, menus, and borders. The coordinates returned by GetClientRect are in logical units, which means they are relative to the upper-left corner of the client area.To use GetClientRect, you typically pass a handle to the window whose client area you want to retrieve, and a pointer to a RECT structure that will receive the coordinates of the client area. After the function call, the RECT structure will contain the dimensions of the client area, which can then be used for various drawing operations or layout calculations.References:GetClientRect function (winuser.h) Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. ...lient coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner aSyntax Parameters [in] hWnd Type: HWND A.Value Meaning tomClientCoord Retrieve the rectangle in client coordinates. If this value isn't specified, the function retrieves screen coordinates. tomIncludeInset Add left and top insets to the left and top coordinates of the client rectangle, and subtract right and bottom insets from the right and bottom coordinates. tomTransform Use a world.In This Section Name Description About Windows Describes the programming elements that applications use to create and use windows; manage relationships between windows; and size, move, and display. U... GetAncestor Retrieves the handle to the ancestor of the specified window. GetClientRect Retrieves the coordinates of a window's client area. The.COleControl::GetClassID Retrieves the OLE class ID of the control. COleControl::GetClientOffset Retrieves the difference between the upper left corner of the control's rectangular area and the upper left corner of its client area. COleControl::GetClientRect Retrieves the size of the control's client area. COleControl::GetClientSite Queries an.The following code shows these steps. The GetClientRect function gets the new size of the client area, in physical pixels (not DIPs). The ID2D1HwndRenderTarget::Resize method updates the size of the render target, also specified in pixels. The InvalidateRect function f... Next Using color in Direct2D Feedback Was this page helpful. Yes No Provide.GetWindowRect fills a RECT structure with the coordinates of the window's upper left and lower right corners. The GetClientRect function retrieves the coordinates of a window's client area. GetClientRect fills a RECT structure with the coordinates of the upper left and lower right corners of the client area, but the coordinates are relative to the.CWindow::ClientToScreen Converts client coordinates to screen coordinates. CWindow::Create Creates a window. CWindow::FlashWindow Flashes the window once. CWindow::GetClientRect Retrieves the coordinates of the client area. CWindow::GetDC Retrieves a device context for the client area. CWindow::GetTopWindow Retrieves the top-level child window..ITextDocument2 interface (tom.h) Extends the ITextDocument interface, adding methods that enable the Input Method Editor (IME) to drive the rich edit control, and methods to retrieve other interfaces such as ITextDisplays, ITextRange2, ITextFont2, ITextPara2, and so on. ITextDocument2::GetCaretType Gets the c... ITextDocument2::GetClientRect.CWnd::GetCaretPos Retrieves the client coordinates of the caret's current position. CWnd::GetCheckedRadioButton Returns the ID of the currently checked radio button in a group of buttons. CWnd::GetClientRect Gets the dimensions of the CWnd client area. CWnd::GetClipboardOwner Retrieves a pointer to the current owner of the Clipboard..SM_XVIRTUALSCREE... To get information about a single display monitor or all of the display monitors in a desktop, use EnumDisplayMonitors. The rectangle of the desktop window returned by GetWindowRect or GetClientRect is always equal to the rectangle of the primary monitor, for compatibility with existing applications. Thus, the result of will."
739,SetEnvironmentVariableW,"Microsoft Build · May 19 – 22, 2025SetEnvironmentVariableW function (processenv.h) Sets the contents of the specified environment variable for the current process. Syntax Parameters [in] lpName The name of the environment variable. The operating system creates the environment variable if it does not exist and lpValue is not NULL. [in, optional] lpValue The contents of the.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for ... (SetEnvironmentVariableA).We'll refer to those versions here as ""Windows"", calling out any exceptions where... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft."
740,DefineDosDeviceA,"Microsoft Build · May 19 – 22, 2025DefineDosDeviceA function (winbase.h) Defines, redefines, or deletes MS-DOS device names. Syntax Parameters [in] dwFlags The controllable aspects of the DefineDosDevice function. This parameter can be one or more of the following values. Value Meaning DDD_EXACT_MATCH_ON_REMOVE 0x00000004 If this value is specified along with DDD_REMOVE_DEFINITION,.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h... (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA).(ANSI) CreateHardLinkTransactedW Establishes a hard lin... (Unicode) CreateHardLinkW Establishes a hard. (Unicode) CreateJobObjectA Creates or opens a job object. (Unicode) DefineDosDeviceA Defines, redefines, or deletes MS-DOS device names. (DefineDosDeviceA) DeleteAtom Decrements the reference count of a local string atom. (Unicode)."
741,DisconnectNamedPipe,"Microsoft Build · May 19 – 22, 2025DisconnectNamedPipe function (namedpipeapi.h) Disconnects the server end of a named pipe instance from a client process. Syntax Parameters [in] hNamedPipe A handle to an instance of a named pipe. that is forced off a pipe by DisconnectNamedPipe must still use the CloseHandle function to close its end of the pipeThe server process must call.Pipe Functions The following function is used with anonymous pipes. A client process connects to a named pipe by using the CreateFile or CallNamedPipe function. DisconnectNamedPipe Disconnects the server end of a named pipe instance from a client process. GetNamedPipeClientComputerName Retrieves the client computer name for the specified named.namedpipeapi.h header This header is used by multiple technologies. For more information, see: Security and Identity System Services namedpipeapi.h contains the following programming interfaces: Functions CallNamedPipeW Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and.The error occurred when the pipe was disconnected. The client code like this: The client log: At the same time, the pipe server log... According to the Doc: DisconnectNamedPipe function If the client end of the named pipe is open, the DisconnectNamedPipe function forces that end of the named pipe closed. The client receives an error the next time.FlushFileBuffers does not return until the clie... The server then calls the DisconnectNamedPipe function to close the connection to the pipe client. This function makes the client's handle invalid, if it has not already been closed. Any unread data in the pipe is discarded. After the client is disconnected, the server calls the CloseHandle.ConnectNamedPipe function (namedpipeapi.h) Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. It can also be used with an instance that was previously connected to another client process; in this case, the server process must first call the DisconnectNamedPipe function to disconnect the.Named Pipe State This automated test validates the behavior of all named-pipe operations for each distinct state of a pipe instance. The server disconnects by using the DisconnectNamedPipe API. Test details Specifications....loseHandle, DeleteFile File mapping CreateFileMapping, OpenFileMapping CloseHandle Find file FindFirstFile FindClose Heap HeapCreate HeapDestroy I/O completion port CreateIoCompletionPort CloseHandle Job CreateJobObject CloseHandle Mailslot CreateMailslot CloseHandle Memory resource notification CreateMemoryResourceNotification CloseHandle.(Unicode) CallEnclave Calls a function within an enclave. CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA) CallNamedPipeW Connects to a message-type pipe (and waits if an instance of the pipe is not available),."
742,CloseDesktop,"Microsoft Build · May 19 – 22, 2025CloseDesktop function (winuser.h) Closes an open handle to a desktop object. Syntax Parameters [in] hDesktop A handle to the desktop to be closed. This can be a handle returned by the CreateDesktop, OpenDesktop, or OpenInputDesktop functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any... For programming guidance for this technology, see: Window Stations and Desktops Functions CloseDesktop Closes an open handle to a desktop object. CloseWindowStation Closes an open window.SetUserObjectSecurity Sets security information for the specified win... Applications can use the following functions with desktop objects. Function Description CloseDesktop Closes an open handle to a desktop object. CreateDesktop Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the.ClientToScreen The ClientToScreen function converts the client-area coo... ClipCursor Confines the cursor to a rectangular area on the screen. CloseClipboard Closes the clipboard. CloseDesktop Closes an open handle to a desktop object. CloseGestureInfoHandle Closes resources associated with a gesture information handle. CloseTouchInputHandle.When you are finished using the handle, call the CloseDesktop function to close it. If the function fails, the return value is NULL. To get extended error information, call GetLastError. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2008 [desktop apps only] Target.When you are finished using the handle, call the CloseDesktop function to close it. If the function fails, the return value is NULL. To get extended error information, call GetLastError. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2008 [desktop apps only] Target.When you are finished using the handle, call the CloseDesktop function to close it. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API.OpenInputDesktop function (winuser.h) Opens the desktop that receives user input. When you are finished using the handle, call the CloseDesktop function to close it. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.Thread Connection to a Desktop After a process connects to a window station, the system assigns a desktop to the thread making the connection. The desktop assigned during this connection process cannot be closed by calling the CloseDesktop function. When a process is connecting to a desktop, the system searches the process's handle ... After a.When you are finished using the handle, call the CloseDesktop function to close it. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API."
743,CoGetCurrentProcess,"Microsoft Build · May 19 – 22, 2025CoGetCurrentProcess function (combaseapi.h) Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems. Syntax Return value The function returns the unique identifier of the current thread. ...in uniquely identifying a thread to other threads or pCoGetCurrentProcess returns a value that.CoGetContextToken Returns a pointer to an implementation of IObjContext for the current context. CoGetCurrentLogicalThreadId Returns the logical thread id of the current physical thread. CoGetCurrentProcess Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems. CoGetInstanceFromFile.CoGetContextToken Returns a pointer to an implementation of IObjContext for the current context. CoGetCurrentLogicalThreadId Returns the logical thread identifier of the current physical thread. CoGetCurrentProcess Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems..CoGetClassObject Provides a pointer to an interface on a class object... CoGetContextToken Returns a pointer to an implementation of IObjContext for the current context. CoGetCurrentLogicalThreadId Returns the logical thread identifier of the current physical thread. CoGetCurrentProcess Returns a value that is unique to the current thread..It's the following approach assure me a unique id in every thread ? then And I have a method which is called as: the thread method is: My question is: id from CMyDoc::ExecutionThread is unique across all threads ?| According to https://www.bing.com/se... (Or use the LONG volatile type, and the InterlockedIncrement function instead of ++; however,."
744,GetWindowTextW,"Microsoft Build · May 19 – 22, 2025GetWindowTextW function (winuser.h) Copies the text of the specified window's title bar (if it has one) into a buffer. However, GetWindowText cannot retrieve the text of a control in another application. Syntax Parameters [in] hWnd Type: HWND A handle to the window or control containing the text. [out] lpString Type: LPTSTR The buffer that will.I've tried with &quot;SendMessageW(hWnd, WM_GETTEXT, length, (WPARAM)buffer)&quot; and GetWindowTextW(hWnd, buffer, length) when HCBT_ACTIVATE fired. Only works with the first one, the second one is always null. https://youtu.be/uv0wFnftWgY| Hello @Mai Co Zo Xop , My question is some windows and child windows don't have lpszName parameter when.GetWindowWord Retrieves the 16-bit (DWORD) value at the specified offset into the extra window memor HOOKPROC An application-defined or library-defined callback function used with the SetWindowsHookEx function. InternalGetWindowText Copies the text of the specified window's title bar (if it has one) into a buffer. (ANSI) RealGetWindowClassW.Hi, I'm working on the WinUI application in cpp. We are a multithreaded application, we are following a practice of not allocating any memory in the main thread. Is this even possible?| As far as I'm concerned, you couldn't make the text from the text field directly stored in my buffer... You could try to use GetWindowTextW function to copy the.DestroyWindow Destroys the specified window. (ANSI) DrawTextExW The DrawTextEx function draws formatted text in the specified rectangle. (Unicode) DrawTextW The DrawTextW (Unicode) function draws formatted text in the specified rectangle. (DrawTextW function) EmptyClipboard Empties the clipboard and frees handles to data in the clipboard.."
745,ioctlsocket,"Microsoft Build · May 19 – 22, 2025The ioctlsocket function in Windows programming is used to control the I/O mode of a socket. It can be applied to any socket regardless of its state. This function is part of the Windows Sockets API and is essential for managing socket behavior, such as enabling or disabling non-blocking mode.References:ioctlsocket function (winsock2.h) The ioctlsocket function controls the I/O mode of a socket. ...tifying a [in] cmd A command to perform on the socket s. [in, out] argp A pointer to a parameter for cmd. Return value Upon successful completion, the ioctlsocket returns zeroHere are the supported commands to use in the cmd parameter and their.ioctlsocket function (winsock.h) The ioctlsocket function controls the I/O mode of a socket. Remarks The ioctlsocket function can be used on any socket in any state. It is used to set or retrieve some operating parameters associated with the socket, independent of the ... Here are the supported commands to use in the cmd parameter and their.(... (InetPtonW) ioctlsocket The ioctlsocket function (winsock2.h) controls the I/O mode of a socket and can be used on any socket in any state. ioctlsocket The ioctlsocket function (winsock.h) controls the I/O mode of a socket. listen The listen function places a socket in a state in which it is listening for an incoming connection.....(winsock2.h) converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure. inet_ntoa The inet_ntoa function (winsock2.h) converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal f ioctlsocket The ioctlsocket function (winsock2.h) controls the I/O mode of.Renamed Functions In... Close and Closesocket Sockets are represented by standard file descriptors in Berkeley Sockets, so the close function can be used to close sockets as well as regular files. Ioctl and Ioctlsocket/WSAIoctl Various C language run-time systems use the IOCTLs for purposes unrelated to Windows Sockets. As a consequence, the....rk byte order (which is big-endian). htons The htons function (winsock.h) converts a u_short from host to TCP/IP network byte order (which is big-endian). inet_addr The inet_addr function (winsock.h) converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure. inet_ntoa The inet_ntoa function.Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h Library Ws2_32.lib DLL Ws2_32.dll See also IPPROTO_IP Socket Options IPPROTO_IPV6 Socket Options Reliable Multicast Programming.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Winsock IOCTLs This section describes Winsock Socket input/output controls (IOCTLs) for various editions of Windows operating systems. Use the WSAIoctl or WSPIoctl function to issue a Winsock IOCTL to control the mode of a socket, the.According to SIO_RCVALL Control Code, The socket handle passed to the WSAIoctl or WSPIoctl function must be one of the following: An IPv4 socket that was created with the address family set to AF_INET, the socket type set to SOCK_RAW, and the protocol set to IPPROTO_IP. ...he address family set to AF_INET6, the socket type set to SOCK_RAW, and.Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h (include Winsock2.h) Library Ws2_32.lib DLL Ws2_32.dll See also IPPROTO_IP Socket Options IPPROTO_... The setsockopt function."
746,DdeUninitialize,"Microsoft Build · May 19 – 22, 2025DdeUninitialize function (ddeml.h) Frees all Dynamic Data Exchange Management Library (DDEML) resources associated with the calling application. Syntax Parameters [in] idInst Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function. Return value Type: BOOL If the function succeeds, the return value.Basic Concepts (DDE) These concepts are key to understanding Dynamic Data Exchange (DDE) and the Dynamic Data Exchange Management Library (DDEML). DdeInitialize obtains an instance identifier for the application, registers the application's DDE callback function with the DDE, and specifies the transaction filter flags for the callback function. An.Data Exchange Overview of the Data Exchange technology. DdeInitializeA Registers an application with the Dynamic Data Exchange Management Library (DDEML). (ANSI) DdeInitializeW Registers an application with the Dynamic Data Exchange Management Library (DDEML). An application must call this function before calling any other Dynamic Data Exchange.Name Service The Dynamic Data Exchange Management Library (DDEML) makes it possible for a server application to register the service names that it supports and to prevent the DDEML from sending XTYP_CONNECT transactions for unsupported service names to the server's Dynamic Data Exchange (DDE) callback function. A server must unregister its service.DdeInitializeA Registers an application with the Dynamic Data Exchange Management Library (DDEML). (ANSI) DdeInitializeW Registers an application with the Dynamic Data Exchange Management Library (DDEML). DdeUnaccessData Unaccesses a Dynamic Data Exchange (DDE) object. An application must call this function after it has finished accessing the.Monitoring Applications The API elements of the Dynamic Data Exchange Management Library (DDEML) can ... To receive notifications from the DDEML, an application must have registered as a DDE monitor by specifying the APPCLASS_MONITOR flag in a call to the DdeInitialize function. MF_HSZ_INFO Notifies the callback function whenever a DDEML.XTYP_MONITOR transaction A Dynamic Data Exchange (DDE) debugger's DDE callback function, DdeCallback, receives the XTYP_MONITOR transaction whenever a DDE event occurs in the system. To receive this transaction, an application must specify the APPCLASS_MONITOR value when it calls the DdeInitialize function. MF_HSZ_INFO 0x01000000 A DDE application.In This Section Name Description About the DDEML Discusses dynamic data exchange. DdeInitialize Registers an application with the Dynamic Data Exchange Management Library (DDEML). An application must call this function before ... An application must call this function after it has finished accessing the object. DdeUninitialize Frees all DDEML.DdeInitializeW function (ddeml.h) Registers an application with the Dynamic Data Exchange Management Library (DDEML). An application must call this function before calling any other Dynamic Data Exchange Management Library (DDEML) function. This flag is always in effect when an application calls DdeInitialize for the first time, regardless of.MONHSZSTRUCTW structure (ddeml.h) Contains information about a Dynamic Data Exchange (DDE) string handle. A DDE monitoring application can use this structure when monitoring the activity of the string manager component of the DDE Management Library. ... Value Meaning MH_CLEANUP 4 An application is freeing its DDE resources, causing the system to."
747,FindWindowExW,"Microsoft Build · May 19 – 22, 2025FindWindowExW function (winuser.h) Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search. Note The winuser.h header defines FindWindowEx as an alias that.The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (ANSI) FindWindowExA Retrieves a handle to a window whose... (ANSI) FindWindowExW Retrieves a handle to a window whose class name and window name match the specified strings. (Unicode) FindWindowW Retrieves a handle to.The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Sends a message to the specified recipients.."
748,HideCaret,"Microsoft Build · May 19 – 22, 2025HideCaret function (winuser.h) Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window that owns the caret. If this parameter is NULL, HideCaret searches the current task for the window that owns the caret..Removing a Caret You can t... To hide the caret, use the HideCaret function. This is useful when your application must redraw the screen while processing a message, but must keep the caret out of the way. Hiding the caret does not destroy its shape or invalidate the insertion point. Hiding the caret is cumulative; that is, if the application calls.Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. The following illus... The user can set this value. GetCaretPos Copies the caret's position to the specified POINT structure. HideCaret Removes the caret from the screen. Hiding a.Using Carets This section has code samples for the following tasks: Creating and Displaying a Caret Hiding a Caret Destroying a Caret Adjusting the Blink Time Processing Keyboard Input Creating and Displaying a Caret Upon receiving the k... Hiding a Caret Whenever your application redraws a screen while processing a message other than WM_PAINT, it.CWindow::GetDescendantWindow Retrieves the specified de... CWindow::GetDlgControl Retrieves an interface on the specified control. CWindow::GotoDlgCtrl Sets the keyboard focus to a control in the dialog box. CWindow::HideCaret Hides the system caret. CWindow::HiliteMenuItem Highlights or removes the highlight from a top-level menu item..Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.... CWnd::GetMenu Retrieves a pointer to the specified menu. CWnd::GetWindowTextLength Returns the length of the window's text or caption title. CWnd::HideCaret Hides the caret by removing it from the display screen. CWnd::HiliteMenuItem Highlights or removes the highlighting from a top-level (menu-bar) menu item. Other applications will not be.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-caret-l1-1-0 (introduced in Windows 8) See also Carets.(Unicode) CopyCursor Copies the specified cursor. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. (Unicode) GetPhysicalCursorPos Retrieves the position of the cursor in physical coordinates. HideCaret Removes the caret.CreateCaret function (winuser.h) Cr... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-caret-l1-1-0."
749,GetClassInfoW,"Microsoft Build · May 19 – 22, 2025GetClassInfoW function (winuser.h) Retrieves information about a window class. Note  The GetClassInfo function has been superseded by the GetClassInfoEx function. You can still use GetClassInfo, however, if you do not need information about the class small icon. ...tional] hInstance Type: HINSTANCE A handlRemarks Note The winuser.h header defines.GetAltTabInfoA Retrieves status information for the specified window if it is the application-switching (ALT... (ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about.(Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo fu... (ANSI) GetClassInfoExW Retrieves information."
750,CreateFontIndirectW,"Microsoft Build · May 19 – 22, 2025CreateFontIndirectW function (wingdi.h) The CreateFontIndirect function creates a logical font that has the specified characteristics. Remarks The CreateFontIndirect function creates a logical font with the characteristics specified in the LOGFONT structure. ... the appropriate font on different language versions o OS, call EnumFontFamiliesEx.(ANSI) CreateFontIndirectExA The CreateFontIndirectEx function specifies a lo... (ANSI) CreateFontIndirectExW The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specified structure. (Unicode) CreateFontIndirectW The CreateFontIndirect function creates a logical font that has the specified.(ANSI) CreateFontIndirectExA The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specif... (ANSI) CreateFontIndirectExW The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specified structure. (Unicode) CreateFontIndirectW The CreateFontIndirect function creates.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,.I'm getting the same font data regardless of the style. The font face name is Cascadia Code.| The front, Cascadia Code, works for me using the document sample Drawing Text from Different Fonts on the Same Line. I'm getting the same font data regardless of the style. The font face name is Cascadia Code..."
751,SetLocaleInfoW,"Microsoft Build · May 19 – 22, 2025SetLocaleInfoW function (winnls.h) Sets an item of information in the user override portion of the current locale. This function does not set the system defaults. Caution  Because this function modifies values for all applications, it should only be called by the regional and language options functionality of Control Panel, or a similar utility..GetUserDefaultLo... ResolveLocaleName Finds a possible locale name match for the supplied name. SetCalendarInfoA Sets an item of locale information for a calendar. (ANSI) SetCalendarInfoW Sets an item of locale information for a calendar. (Unicode) SetLocaleInfoA Sets an item of information in the user override portion of the current locale..SYSGEOTYPE Defines the type of geographical location information requested in the GetGeoInfo or GetGeoInfoEx function. Close Terminates the IFELanguage object. CompareStringA Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application.."
752,CreateProcessW,"Microsoft Build · May 19 – 22, 2025The CreateProcessW function is used in Windows to create a new process and its primary thread. It runs independently of the process that created it, establishing a parent-child relationship. The function requires several parameters, including the command line to execute, process and thread attributes, and other options for the new process.Here's a basic outline of how to use CreateProcessW:For more detailed information, including syntax and parameters, you can refer to the documentation.References:CreateProcessW function (processthreadsapi.h) Creates a new process and its primary thread. The new process runs in the security context of the calling process. If the calling process is impersonating another user, the new process uses the token for t... To run the new process in the security context of the user represented by the impersonation.The new process runs in the security context of the user represented by the specified token. (Unicode) CreateProcessW Creates a new process and its primary thread. The new process runs in the security context of the calling process. OVERRIDE_PREFETCH_PARAMETER PROCESS_INFORMATION Contains information about a newly created process and its primary.CreateProcessA function (processthreadsapi.h) Creates a new process and its primary thread. The new process runs in the security context of the calling process. If lpApplicationName is NULL, the module name portion of lpCommandLine is limited to MAX_PATH characters. The Unicode version of this function, CreateProcessW, can modify the contents of.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. (Unicode) CreateProcessW Creates a new.The following code demonstrates how to create a process. If CreateProcess succeeds, it returns a PROCESS_INFORMATION structure that contains handles and identifiers for the new process and its primary thread. The thread and process handles are created with full access rights, although you can restrict access if you specify security descriptors..Im currently starting a process trough this function: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw Would like to ask for how i could initialize it without admin rights when being launched from a process with admin rights. ........dll contains a reference to a &quot;Launch Process related API System.Diagnostics.Process.Start File PayEstPractice\System.Windows.Forms.dll contains a reference to a &quot;Launch Process&quot; related API shell32.dll!ShellExecuteW File PayEstPractice\System.Windows.Forms.dll contains a reference to a &quot;Launch Process&quot; related API.As the title suggests, I am trying to create a pseu... For some reason, CreateProcessW is spawning the command line separately from the pseudo console, a whole new visible window pops up, and closing the Handles (including that of the pseudo console) does absolutely nothing to it. For some reason, CreateProcessW is spawning the command line.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.Windows 7. 下载 button is it. https://pan.ruijie.com.cn/share/17de1afc797949cf7559d516f6 It seemed that those process had created, but some of them such as notepad, cmd was blocked at nt!KiStartUserThread. And explorer called CreateProcessW to Win+r，but it was blocked at KiSwapContent. Then, when any process was created, the child would be blocked..."
753,FloodFill,"Microsoft Build · May 19 – 22, 2025FloodFill function (wingdi.h) The FloodFill function fills an area of the display surface with the current brush. The area is assumed to be bounded as specified by the color parameter. Note  The FloodFill function is included only for compatibility with 16-bit versions of Windows. Applications should use the ExtFloodFill function with.2.1.1.9 FloodFill Enumeration The FloodFill Enumeration specifies the type of fill operation to be performed. typedef  enum { FLOODFILLBORDER = 0x0000, FLOODFILLSURFACE = 0x0001 } FloodFill; FLOODFILLBORDER: The fill area is bounded by the color specified by the Color member. FLOODFILLSURFACE: The fill area is bounded by the color that is.ExtFloodFill function (wingdi.h) The ExtFloodFill function fills an area of the display surface with the current brush. Syntax Parameters [in] hdc A handle to a device context. [in] x The x-coordinate, in logical units, of the point where filling is to start. [in] y The y-coordinate, in logical units, of the point where filling is to start. [in].2.1.13 FloodFill Enumeration The FloodFill enumeration defines values that specify how to determine the area for a flood fill operation. typedef  enum { FLOODFILLBORDER = 0x00000000, FLOODFILLSURFACE = 0x00000001 } FloodFill; FLOODFILLBORDER: The fill area is bounded by a specific color. FLOODFILLSURFACE: The fill area is defined by a specific.FillRgn The FillRgn function fills a region by using the specifie... FlattenPath The FlattenPath function transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines. FloodFill The FloodFill function fills an area of the display surface with the current brush. The area is.FillRgn The FillRgn function fills a region by using the spe... FlattenPath The FlattenPath function transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines. FloodFill The FloodFill function fills an area of the display surface with the current brush. The area is assumed....ush in a rectangular region within a window, a FloodFill function replicates the brush inside an area in a window bounded by the specified color (unlike PatBlt, FloodFill does fill nonrectangular shapes)However, unlike the PatBlt function, FloodFill does not combine the color data for the brush with the color data for the pixels on the display;.CDC::ExcludeUpdateRgn Prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region. CDC::ExtFloodFill Fills an area with the current brush. Provides more flexibility than the CDC::FloodFill member function. CDC::ExtTextOut Writes a character string within a rectangular region using the.2.3.5.6 EMR_EXTFLOODFILL Record The EMR_EXTFLOODFILL record fills an area of the display surface with the current brush. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Start. Color FloodFillMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_EXTFLOODFILL. ...WMF] section 2.2.2.8), which.2.3.3.4 META_EXTFLOODFILL Record The META_EXTFLOODFILL Record fills an area with the brush that is defined in the playback device context. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Mode ColorRef Y X RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures, defined."
754,InsertMenuItemA,"Microsoft Build · May 19 – 22, 2025InsertMenuItemA function (winuser.h) Inserts a new menu item at the specified position in a menu. Syntax Parameters [in] hmenu Type: HMENU A handle to the menu in which the new menu item is inserted. [in] item Type: UINT The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Othe... InsertMenuA Inserts a new menu item into a menu, moving other items down the menu. (ANSI).(ANSI) CreateMDIWindowW Creates a multiple-document interface (MDI) child window. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. CreateSyntheticPointerDevice."
755,InvertRect,"Microsoft Build · May 19 – 22, 2025InvertRect function (winuser.h) The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior. [in] lprc A pointer to a RECT structure that contains the logical coordinates of the rectangle to be invertedThe InvertRect function inverts a rectangle in a.Ellipse Draws an ellipse. FillRect Fills a rectangle using a brush. FrameRect Draws a border around a rectangle using a brush. InvertRect Inverts the color values of the pixels in a rectangle. Pie Draws a pie-shaped wedge bounded by an ellipse and two radials. Polygon Draws a polygon. PolyPolygon draws a series of closed polygons. Rectangle Draws.CDC::HIMETRICtoDP Converts HIMETRIC units into device unitsCDC::HIMETRICtoLP Converts HIMETRIC units into logical units. CDC::IntersectClipRect Creates a new clipping region by forming the intersection of the current region and a rectangle. CDC::InvertRect Inverts the contents of a rectangle. CDC::InvertRgn Inverts the colors in a region..Drawing Rectangles A rectangle is a four-sided polygon whose opposing sides are parallel and equal in length. Although an application can draw a rectangle by calling the Polygon function, supplying the coordinates of each corner, the Rectangle function... FrameRect Redraws the sides of a rectangle. InvertRect Inverts the colors that appear within.Examples in this article are from a control created by the MFC ActiveX Control Wizard with default settings. These include CPalette::AnimatePalette, CFont::CreateFontIndirect, and three m... Functions that are not recorded in a metafile are: DrawFocusRect, DrawIcon, DrawText, ExcludeUpdateRgn, FillRect, FrameRect, GrayString, InvertRect, ScrollDC,.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationaliz... Only one window at a time can capture the mouse; this window receives mouse.(Unicode) InflateRect The InflateRect function increases or decreases the width and height of the specifie... IntersectClipRect The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle. IntersectRect The IntersectRect function calculates the intersection of two."
756,ReleaseDC,"Microsoft Build · May 19 – 22, 2025The ReleaseDC function is used to release a device context (DC) that was previously obtained by the GetDC function. It is important to note that the ReleaseDC function fails when an application attempts to use it to release a printer device context (DC). Instead, printer DCs must be deleted using the DeleteDC function.References:ReleaseDC function (winuser.h) The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.For each message, the window procedure draws a line connecting the previous position and the current position. To draw the line, the procedure uses GetDC to retrieve a display device context; then, as soon as drawing is complete and before returning from the message, the procedure uses the ReleaseDC function to release the display device context..IDXGISurface1::ReleaseDC method (dxgi.h) Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render. Remarks This method is ... DXGI 1.1 support is required, which is available on Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (KB 971644).Common Display Device Contexts A common device context is used for drawing in the client area of the window. To draw again, the application must retrieve a new common device context, and continue to retrieve and release a common device context each time it draws... If the application retrieves the device context handle by using the GetDC function,.Display Device Contexts An application obtains a display DC by calling the BeginPaint, GetDC, or GetDCEx function and identifying the window in which the corresponding output will appear. Howe... When the application is finished drawing, it must release the DC by calling the EndPaint or ReleaseDC function. There are five types of DCs for video.Device Contexts A device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer. All drawing calls are made through a device-context object, which encapsulat... CClientDC objects encapsulate working with a device context that represents only the client area of a window..Private Display Device Contexts A private device context enables an application to avoid retrieving and initializing a display device context each time the application must draw in a window. Thereafter, it can keep and use th... Because a private device context is not part of the display device context cache, an application need never release the.Printer Device Contexts (Windows GDI) The printer DC can be used when printing on a dot-matrix printer, ink-jet printer, laser printer, or plotter. When... An application must delete (rather than release) a printer DC; the ReleaseDC function fails when an application attempts to use it to release a printer DC. For more information, see Printer.Window Display Device Contexts A window device context enables an application to draw anywhere in a window, including the nonclient area. The function retrieves a window device context from the display device context cache. A window that uses a window device context must release it after drawing by using the ReleaseDC function as soon as possible..Possible Causes A likely cause of this message is that the application called GetDC or ReleaseDC while its device context’s target was set to NULL, or to a command list. Possible Fixes If an application uses GetDC or ReleaseDC exposed by IGdiInteropRenderTarget, ensure that the corresponding ID2D1DeviceContext has a valid bitmap set as its target.."
757,CreateThread,"Microsoft Build · May 19 – 22, 2025To use the CreateThread function in Windows programming, you need to follow these steps:Make sure to handle any errors that may occur during thread creation and execution.References:Creating Threads The CreateThread function creates a new thread for a process. The creating thread must specify the starting address of the code that the new thread is to execute. Typically, the starting address is the name of a function defined in the program code (for more information, see ThreadProc). This function takes a singl... Review how.CreateThread function (processthreadsapi.h) Creates a thread to execute within the virtual address space of the calling process. To create a thread that runs in the virtual address space of another process, use the CreateRemoteThread function. Syntax Parameters [in, optional] lpThreadAttributes A pointer ... The ExitProcess, ExitThread,.AgentsClient.CreateThread Method Definition Namespace: Azure.AI.Projects Assembly:Azure.AI.Projects.dll Package:Azure.AI.Projects v1.0.0-beta.7 Overloads CreateThread(RequestContent, RequestContext) [Protocol Method] Creates a new thread. Threads contain messages and can be run by agents. This protocol method allows explicit creation of the.Syntax Members Public Methods Name Description Win32ThreadTraits::CreateThread (Static) Call this function to create a thread that should not use CRT functions. Remarks Thread traits are classes that provide a creation function for a particular type of thread. The creation function has the same signature and semantics as the Windows CreateThread.AssistantsClient.CreateThread Method Definition Namespace: Azure.AI.OpenAI.Assistants Assembly:Azure.AI.OpenAI.Assistants.dll Package:Azure.AI.OpenAI.Assistants v1.0.0-beta.4 Overloads CreateThread(CancellationToken) Creates a new, empty thread using a default AssistantThreadCreationOptions instance. CreateThread(AssistantThreadCreationOptions,.Thread Functions for Debugging The CreateThread function creates a new thread for a process. Debuggers typically need to examine or change the contents of a thread's registers. To accomplish this, a debugger must obtain a handl... For more information about threads, see Processes and Threads. Learn to use the CreateThread function to create a new.Thread Handles and Identifiers When a new thread is created by the CreateThread or CreateRemoteThread function, a handle to the thread is returned. By default, this handle has full access rights... The CreateThread and CreateRemoteThread functions also return an identifier that uniquely identifies the thread throughout the system. When a new.LSA_CREATE_THREAD callback function (ntsecpkg.h) The CreateThread function is a wrapper for the Windows CreateThread function that should be used by the Local Security Authority (LSA). It creates a thread that the LSA can track, attaches debugging information to threads it starts, and provides special exception handling to protect the LSA process..Using Semaphore Objects The following example uses a semaphore object to limit the number of threads that can perform a particular task. First, it uses the CreateSemaphore function to create the semaphore and to specify initial and maximum counts, then it uses the CreateThread function to create the threads. Before a thread attempts to perform the.Syntax Members Public Methods Name Description CRTThreadTraits::CreateThread (Static) Call this function to create a thread that can use CRT functions. Remarks Thread traits are classes that provide a creation function for a particular type of thread. Parameters lpsa The security attributes for the new thread. dwStackSize The stack size for the."
758,LoadBitmapW,"Microsoft Build · May 19 – 22, 2025LoadBitmapW function (winuser.h) [LoadBitmap is available for use in the operating systems specified in the Requirements section. Instead, use LoadImage and DrawFrameControl.]. The LoadBitmap function loads the specified bitmap resource from a module's executable file. Syntax Parameters [in] hInstance A handle to the instance of the module whose.Is this correct? project.rc resource.h project.cpp debug console :| There are a number of reasons why the call to FindResourceW can fail. Finally, the code should use LoadImageW or LoadBitmapW if it will actually load a bitmap. Its not clear what purpose is served by calling FindResourceW since obtaining an HRSRC handle does not make that resource.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,.(Unicode) CharUpperW C... (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. (ANSI) CreateAcceleratorTableW Creates an accelerator table. The caret shape can be a line, a block, or a bitmap. (ANSI).CreatePatternBrush The CreatePatternBrush function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for."
759,SetThreadPriorityBoost,"Microsoft Build · May 19 – 22, 2025SetThreadPriorityBoost function (processthreadsapi.h) Disables or enables the ability of the system to temporarily boost the priority of a thread. Syntax Parameters [in] hThread A handle to the thread whose priority is to be boosted. Windows Server 2003 and Windows XP:  The handle must have the THREAD_SET_INFORMATION access right. [in].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Priority ... You can disable the priority-boosting feature by calling the SetProcessPriorityBoost or SetThreadPriorityBoost function. To determine whether this feature has been disabled, call the GetProcessPriorityBoost or.SetThreadIdealProcessorEx Sets the ideal processor for the specified thread and optionally retrieves the previous ideal processor. SetThreadInformation Sets information for the specified thread. SetThreadPriority Sets the priority value for the specified thread. SetThreadPriorityBoost Disables the ability of the system to temporarily boost the.SetProcessPriorityBoost Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process. SetProcessShutdownParameters Sets sh... This value, together with the priority class of the thread's process, determines the thread's base priority level. SetThreadPriorityBoost Disables or enables the.OB_PRE_CREATE_HANDLE_INFORMATION structure (wdm.h) The OB_PRE_CREATE_HANDLE_INFORMATION structure provides information to an ObjectPreCallback routine about a thread or process handle that is being opened. THREAD_SET_LIMITED_INFORMATION Modify a limited set of thread settings, such as by calling the user-mode SetThreadAffinityMask and.GetThreadPriorityBoost function (processthreadsapi.h) Retrieves the priority boost control state of the specified thread. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. GetProcessPriorityBoost Retrieves the.Moved into api-ms-win-core-errorhandling-l1-1-0.dll in 10.0.16299. GetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. SetThreadErrorMode Introduced into api-ms-win-core-errorhandling-l1-1-3.dll in 10.0.16299. APIs from api-ms-win-core-fibers-l1-1-1.dll API Requirements FlsAlloc Introduced into."
760,EndUpdateResourceW,"Microsoft Build · May 19 – 22, 2025EndUpdateResourceW function (winbase.h) Commits or discards changes made prior to a call to UpdateResource. Syntax Parameters [in] hUpdate Type: HANDLE A module handle returned by the BeginUpdateResource function, and used by UpdateResource, referencing the file to be updated. [in] fDiscard Type: BOOL Indicates whether to write the resource.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (ANSI) AddAtomW Adds a character s... (ANSI) EncryptFileW Encrypts a file or directory. (Unicode) EndUpdateResourceA Commits or discards changes made prior to a call to UpdateResource. (ANSI) EndUpdateResourceW Commits or discards changes made.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) BeginU... EndUpdateResourceA."
761,ResetEvent,"Microsoft Build · May 19 – 22, 2025ResetEvent function (synchapi.h) Sets the specified event object to the nonsignaled state. The ResetEvent function is used primarily for manual-reset event objects, which must be set explicitly to the nonsignaled state. Auto-reset event objects automatically change from signaled to nonsignaled after a single waiting thread is released..InstanceStore.ResetEvent(InstancePersistenceEvent, InstanceOwner) Method Definition Namespace: System.Runtime.DurableInstancing Assembly:System.Runtime.DurableInstancing.dll Resets the signaled event and removes the event from the signaled events list maintained by the instance owner. ...that was signaled earlier and to bResets the signaled event.CreateEventExA function (synchapi.h) Creates or opens a named or unnamed event object and returns a handle to the object. CREATE_EVENT_MANUAL_RESET 0x00000001 The event must be manually reset using the ResetEvent function. Use the SetEvent function to set the state of an ... Use the ResetEvent function to reset the state of an event object to.CreateEventExW function (synchapi.h) Creates or opens a named or unnamed event object and returns a handle to the object. CREATE_EVENT_MANUAL_RESET 0x00000001 The event must be manually reset using the ResetEvent function. Use the ResetEvent function to reset the state of an event object to nonsignaled. When the state of a manual-reset event.CEvent Class Represents an event, which is a synchronization object that enables one thread to notify another that an event has occurred. Syntax Members Public Constructors Name Description CEvent::CEvent Constructs a CEvent object. Public Methods Name Description CEvent::PulseEvent Sets the event to available (signaled), releases waiting threads,.CreateEventA function (synchapi.h) Creates or opens a named or unnamed event object. The ACLs in the default security descriptor for an event come from the primary or impersonation token of the creator. [in] bManualReset If this parameter is TRUE, the function creates a m... Use the ResetEvent function to reset the state of an event object to.The ACLs in the default security descriptor for an event come from the primary or impersonation token of the creator. [in] bManualReset If this parameter is TRUE, the function creates a manual-reset event object, which requires the use of the ResetEvent function to set th... Use the ResetEvent function to reset the state of an event object to.SetEvent function (synchapi.h) Sets the specified event object to the signaled state. Remarks The state of a manual-reset event object remains signaled until it is set explicitly to the nonsignaled state by the ResetEvent function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.Following are the two types of event object. Object Description Manual-reset event An event object whose state remains signaled until it is explicitly reset to nonsignaled by the ResetEvent function. While it is signaled, any number of waiting threads, or threads that subsequently specify the same event object in one of the wait functions, can be.After using the midiOutPrepareHeader function but before sending MIDI events to the device, create a nonsignaled event by calling the ResetEvent function, specifying the event handle retrieved by CreateEvent. Then, inside a loop that checks whether the MHDR_DONE bit is set in the dwFlags member of the MIDIHDR structure, use the WaitForSingleObject."
762,GetThreadPriority,"Microsoft Build · May 19 – 22, 2025GetThreadPriority function (processthreadsapi.h) Retrieves the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base-priority level. Syntax Parameters [in] hThread A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or.Process.GetThreadPriority(Int32) Method Definition Namespace: Android.OS Assembly:Mono.Android.dll Return the current priority of a thread, based on Linux priorities. Parameters tid Int32 The identifier of the thread/process. If tid equals zero, the priority of the calling process/thread will be returned. Returns ThreadPriority Returns the current.CMsgThread.GetThreadPriority method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Vide... Uses the Microsoft Win32 GetThreadPriority function to retrieve the priority of the current worker thread. Return value Returns the thread priority as an integer. Uses.DkmGetVolatilePropertiesAsyncResult.Priority Property Definition Namespace: Microsoft.VisualStudio.Debugger.ThreadProperties Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 The priority of the thread. ...alues def kernel32!GetThreadPriorityThe values returned correspond directly to.Figure 3Thread Priorities Figure 3 shows how the thread priorities for a Windows CE 1.x or Windows 2.x-based application running on Windows CE 3.0 map to the priorities for Windows CE 3.0. ... To access the new thread priorities, a pair of new Win32 APIs must be used: CeSetThreadPriority and CeGetThreadPriority. Possible priority values range from.GetMachi... GetPriorityClass Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base priority level. (GetThreadInformation) GetThreadIOPendingFlag Determines whether a specified thread has any I/O requests pending. GetThreadPriority Retrieves.GetThreadIOPendingFlag Determines whether a specified thread has any I/O requests pending. GetThreadPriority Retrieves the priority value for the specified thread. GetThreadPriorityBoost Retrieves the priority boost control state of the specified thread. Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess.CWinThread Class Represents a thread of execution within an application. Syntax Members Public Constructors Name Description CWinThread::CWinThread Constructs a CWinThread object. Public Methods Name Description CWinThread::CreateThread Starts execution of a CWinThread object. CWinThread::GetMainWnd Retrieves a pointer to the main window for the.SetThreadPriority function (processthreadsapi.h) Sets the priority value for the specified thread. This value, together with the priority class of the thread's pr... Use the GetPriorityClass and SetPriorityClass functions to get and set the priority class of a process. Use the GetThreadPriority function to get the priority value of a thread. Use.CreateThread function (processthreadsapi.h) Creates a thread to execute within the virtual address space of the calling process. Use the GetExitCodeThread function to get the thread's return value. The thread is created with a thread priority of THREAD_PRIORITY_NORMAL. Use the GetThreadPriority and SetThreadPriority functions to get and set the."
763,VerLanguageNameA,"Microsoft Build · May 19 – 22, 2025VerLanguageNameA function (winver.h) Retrieves a description string for the language associated with a specified binary Microsoft language identifier. Syntax Parameters [in] wLang Type: DWORD The binary language identifier. Remarks This function works on 16-, 3... Typically, an installation program uses this function to translate a language.VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files. (Unicode) VerLanguageNameA Retrieves a description string for the language associated with a specified binary Microsoft language identifier. (ANSI) VerLanguageNameW Retrieves a description string for the language associated.VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files. (Unicode) VerLanguageNameA Retrieves a description string for the language associated with a specified binary Microsoft language identifier. (ANSI) VerLanguageNameW Retrieves a description string for the language associated.QueryOptionalDelayLoadedAPI Introduced into api-ms-win-core-libraryloader-l2-1-0.dll in 10.0.10240. APIs from api-ms-win-core-localization-ansi-l1-1-0.dll API Requirements GetStringTypeExA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in 10.0.10240. EnumUILanguagesA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in."
764,SetWindowsHookA,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
765,PostMessageA,"Microsoft Build · May 19 – 22, 2025PostMessageA function (winuser.h) Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. To post a message in the message queue associated with a thread, use the PostThreadMessage function. Syntax Parameters [in, optional] hWnd.PostMessageA Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. (ANSI) PostMessageW Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the.this code would keep a form on top of all other windows in excel 2010, but in excel 365 it does not work (using 64bit) thanks for the help Private Declare PtrSafe Function FindWindow Lib &quot;user32&quot; Alias &quot;FindWindowA&quot; (ByVal lpClassName As Any, ByVal lpWindowName As Any) As Long Private Declare PtrSafe Function PostMessage Lib.I reissue the problem differently so don't miss the opportunity to get it it right ChangChiTheGtaphics My codes are below, #include &lt;io.h&gt; #include &lt;malloc.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;prevbmp.h&gt; #include &lt;commctrl.h&gt; #define MAXBUFSIZE 32767 // must be at least 2048 #define MAXPATH 256.DialogBoxA Creates a modal dialog box from a dialog box template resource. (ANSI) DialogBoxIndirectA Creates a modal dialog box from a dialog box template in memory. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding. DispatchMessage The DispatchMessage."
766,EnumChildWindows,"Microsoft Build · May 19 – 22, 2025EnumChildWindows function (winuser.h) Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE. ...Type: HWND A handle to the.EndDeferWindowPos Simultaneously updates the ... EndTask Forcibly closes the specified window. EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumPropsA Enumerates all entries in the property list of a window.NativeMethods.EnumChildWindows Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWndParent HandleRef callback NativeMethods.EnumThreadWindowsCallback extraData Returns Boolean Applies to. Learn more about the.GetWindow function (winuser.h) R... Remarks The EnumChildWindows function is more reliable than calling GetWindow in a loop. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-bas... EnumChildProc is a placeholder for the application-defined function name. EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing.EnableWindow Enables or disables mouse and keyboard input to the specified win... EndTask Forcibly closes the specified window. EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumClipboardFormats Enumerates.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Window Features This overview discusses features of windows such as window types, states, size, and position. An application uses the IsChild function to discover whether a given window is a child window or ... The EnumChildWindows.Using Windows The examples in this section describe how to perform the following tasks: Creating a Main Window Creating, Enumerating, and Sizing Child Windows Destroying a Window Using Layered W... In response to WM_SIZE, the main window retrieves the dimensions of its client area by using the GetClientRect function and then passes the dimensions.EnumT... To enumerate child windows of a particular window, use the EnumChildWindows function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Win32HelperMethods.FindChildWindowViaEnumChildWindows Method Definition Namespace: Microsoft.Uii.HostedApplicationToolkit.DataDrivenAdapter Assembly:Microsoft.Uii.HostedApplicationToolkit.DataDrivenAdapter.dll Retrieves the handle of the child matching window via EnumChildWindows. Parameters hWndParent Spe... Retrieves the handle of the child."
767,EnumSystemLocalesA,"Microsoft Build · May 19 – 22, 2025EnumSystemLocalesA function (winnls.h) Enumerates the locales that are either installed on or supported by an operating system. Note  For interoperability reasons, the application should prefer the EnumSystemLocalesEx function to EnumSystemLocales because Microsoft is migrating toward the use of locale names instead of locale identifiers for new.EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number ... (Unicode) EnumSystemLocalesA Enumerates the locales that are either installed on or supported by an operating system.Note  For interoperability reasons, the application should prefer the.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`....InfoEx GetNumberFormatEx GetStringTypeA GetStringTypeExA GetThreadLocalevoid); GetUserDefaultGeoName GetUserDefaultLocaleName GetUserPreferredUILanguages NOT SUPPORTED Always returns en-US IdnToAscii IdnToUnicode IsValidCodePage IsValidLocaleName LCIDToLocaleName LCMapStringEx LocaleNameToLCID ResolveLocaleName SetThreadLocale CompareString.(Unicode) EnumLanguageGroupLocalesA Enumerates the locales in a specified language group. EnumSystemLanguageGroupsA Enumerates the language groups that are eit... (Unicode) EnumSystemLocalesA Enumerates the locales that are either installed on or supported by an operating system.Note  For interoperability reasons, the application should prefer the."
768,OleQueryCreateFromData,"Microsoft Build · May 19 – 22, 2025OleQueryCreateFromData function (ole2.h) Checks whether a data object has one of the formats that would allow it to become an embedded object through a call to either the OleCreateFromData or OleCreateStaticFromData function. ...sfer object to beIf OleQueryCreateFromData finds one of the CF_METAFILEPICT, CF_BITMAP, CF_DIB, or CF_ENHMETAFILE....eCreateFromFileEx OleCreateLink OleCreateLinkEx OleCreateLinkFromData OleCreateLinkFromDataEx OleCreateLinkToFile OleCreateLinkToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFromData OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentClipboard OleIsRunning.OleNoteObjectVisible Increments or decrements an external reference that keeps an object in the running state. OleQueryCreateFromData Checks whether a data object has one of the formats that would allow it to become an embedded object through a call to either the OleCreateFromData or OleCreateStaticFromData function. OleQueryLinkFromData....ueryLinkFr function is similar to the OleQueryCreateFromData function, but determines whether an OLE linked object (rather than an OLE embedded object) can be created from the clipboardRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.COleClientItem Class Defines the container interface to OLE items. Remarks For more information, see OleGetClipboard and OleQueryCreateFromData in the Windows SDK. Remarks For more information, see OleGetClipboard and OleQueryLinkFromData in the Windows SDK. You must call one of the following creation member functions before you use the OLE item:.OleCreateStaticFromData function (ole2.h) Creates a static object, that contains only a representation, with no native data, from a data transfer object. You c... To determine whether an object is static, call the OleQueryCreateFromData function, which returns OLE_S_STATIC if one of CF_METAFILEPICT, CF_DIB, CF_BITMAP, or CF_ENHMETAFILE is present.To develop Component Object Model (COM), you need these headers: accctrl.h callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h ole2.h oledlg.h oleidl.h roapi.h rpcdce.h servprov.h shobjidl.h txlogpub.h unknwn.h."
769,CreateWindowExW,"Microsoft Build · May 19 – 22, 2025To use CreateWindowExW in Windows development, you need to follow these steps:By following these steps, you can effectively use CreateWindowExW to create and manage windows in a Windows application.References:CreateWindowExW function (winuser.h) Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow... Note The winuser.h header.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Extended Window Styles The following are the extended window styles, these can be used along with the CreateWindowExA/CreateWindowExW functions. Constant/value Description WS_EX_ACCEPTFILES 0x00000010L The window accepts drag-drop files..For example, if CreateWindowExA was used the buffer is an array of CHARs, but if CreateWindowExW was used the buffer is an array of WCHARs. Note For Comctl32.dll version 6, the buffer always contains an array of WCHARs, regardless of whether an ANSI or Unicode function created the edit control. Requirements Requirement Value Minimum supported....: error LNK2019: unresolved external symbol __imp_RegisterDeviceNotificationW referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_UnregisterDeviceNotification referenced in function _glfwPlatformTerminate 1&gt;glfw3.lib(win32_init.obj) : error LN unresolved external symbol.Rust for Windows, and the windows crate Introducing Rust for Windows In the Overview of developing on Windows with Rust topic, we demonstrated a simple app that outputs a Hello, world! message. Rust for ... Whether it's timeless functions such as CreateEventW and WaitForSingleObject, powerful graphics engines such as Direct3D, traditional.Hi, I'm working on win32 desktop application. I used CreateWindowExW() API to create a window. I created a LPCWSTR string as a title and set that title in CreateWindowExW() api, but when the window came up, i can only see the first character of my title in window title. The appli... I used CreateWindowExW() API to create a window. I created a.The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop... (ANSI).When you drag a VB control into a form, really .NET framework does a CreateWindowExW call to create it because the Win32 API what is really can create a control, .NET framework only adds a hidden API call, which is defined in the control and in System.Windows.Forms.dll (The control defines the class while System.Windows.Forms.dll calls.... using Visual Studio Community 2019 - Win32 Application project .. not a .net forum!! https://www.youtube.com/watch?v=9JMQkUOhW1s For ins CreateWindowW tries to become CreateWindowExWFORMAT: CreateWindowExW( In DWORD dwExStyle, _In_opt_ LPCWSTR lpClassName, _In_opt_ LPCWSTR lpWindowName, In DWORD dwStyle, In int X, In int Y, In int nWidth, In.The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Sends a message to the specified."
770,LoadLibraryW,"Microsoft Build · May 19 – 22, 2025LoadLibraryW function (libloaderapi.h) Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded. For additional load options, use the LoadLibraryEx function. Syntax Parameters [in] lpLibFileName The name of the module. This can be either a library module (a .dll file) or.libloaderapi.h header This header is used by multiple technologies. For more informati... (LoadLibraryExA) LoadLibraryExW Loads the specified module into the address space of the calling process. (LoadLibraryExW) LoadLibraryW Loads the specified module into the address space of the calling process. (LoadLibraryW) LoadResource Retrieves a handle.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory....LoadLiBut if you examine a disassembly of LoadLibraryA and LoadLibraryW, you will discover that they are merely thin wrappers around the more versatile LoadLibraryExA and LoadLibraryExW APIs, respectively. With LoadLibraryA, there is a curious test for the DLL twain_32.dll, but normally two zeroes are passed as the second and third parameters.To demonstrate vectored exception handling, I created a small project that uses breakpoints to monitor when a program calls LoadLibrary. You may be wondering why I chose to monitor the LoadLibraryExW function. There's a good reason. The most commonly used form of LoadLibrary is LoadLibraryA. It turns out that LoadLibraryA is just a wrapper around.As part of a learning process I want to emulate the loading of a DLL without the use of LoadLibraryW(). Thank you, L. Spiro| A pretty detailed source of information is available in connection with reactos.org. One starting point might be the source at dll_2win32_2kernel32_2client_2loader_8c.html| I have found this but am still interested in other.I've been working with an unpackaged app where I've been loading runtime components using base.h functions and getting an Interface I declared in a proxy server. As a self-contained app you must put both the Xaml and the xbf file in the executable directory. For everyone asking about plugins but never getting an answer, use WINRT_IMPL_LoadLibraryW.IOCTL_CHANGER_GET_ELEMENT_STATUS Retrieves the status of all elements or a specified number. IOCTL_CHANGER_GET_PARAMETERS Retrieves the parameters of the specified device. IOCTL_CHANGER_GET_PRODUCT_DATA Retrieves the product data for the specified device. IOCTL_CHANGER_GET_STATUS Retrieves the current status of the specified device.."
771,CreateAcceleratorTableA,"Microsoft Build · May 19 – 22, 2025CreateAcceleratorTableA function (winuser.h) Creates an accelerator table. Syntax Parameters [in] paccel Type: LPACCEL An array of ACCEL structures that describes the accelerator table. [in] cAccel Type: int The number of ACCEL structures in the array. Return value Type: HACCEL If the function succeeds, the return value is the handle to the.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. This function is used to obtain the.CopyAcceleratorTableA Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine."
772,GetLocaleInfoW,"Microsoft Build · May 19 – 22, 2025GetLocaleInfoW function (winnls.h) Retrieves information about a locale specified by identifier. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header winnls.h (include Windows.h) Library....eStringEx EnumSystemLocalesA DEPRECATED EnumSystemLocalesEx EnumSystemLocalesW DEPRECATED EnumSystemLocalesEx FindNLSString DEPRECATED FindNLSStringEx GetCPInfo DEPRECATED Use Unicode GetCPInfoExA DEPRECATED Use Unicode GetCPInfoExW DEPRECATED Use Unicode GetCurrencyFormatA DEPRECATED GetCurrencyFormatEx GetCurrencyFormatW DEPRECATED.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`.SYSGEOTYPE Defines the type of geographical location information requested in the GetGeoInfo or GetGeoInfoEx function. ... GetGeoInfoA Retrieves information about a specified geographical location. (ANSI) GetGeoInfoEx Retrieves information about a geographic location that you specify by using a two-letter International Organization for.GetFileMUIInfo Retrieves resou... GetGeoInfoA Retrieves information about a specified geographical location. (ANSI) GetGeoInfoEx Retrieves information about a geographic location that you specify by using a two-letter International Organization for Standardization (ISO) 3166-1 code or numeric United Nations (UN) Series M, Number 49 (M.49) code..Moved ... GetProcAddress Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. APIs from api-ms-win-core-localization-ansi-l1-1-0.dll API Requirements GetStringTypeExA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in 10.0.10240. EnumUILanguagesA Introduced into api-ms-win-core-localization-ansi-l1-1-0.dll in."
773,GetTabbedTextExtentA,"Microsoft Build · May 19 – 22, 2025GetTabbedTextExtentA function (winuser.h) The GetTabbedTextExtent function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The GetTabbedTextExtent function uses the currently selected font to compute the dimensions of the string..GetOutlineTextMetricsA The GetOutlineTextMetrics functio... (ANSI) GetOutlineTextMetricsW The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. GetTabbedTextExtentA The GetTabbedTextExtent function computes the width and height of a character string. (ANSI) GetTabbedTextExtentW The GetTabbedTextExtent function computes the.GetActiveWindow Retrieves the window handle to the active window attached to the calling thread's message queue. GetAltTabInfoA Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window. (ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the application-switching."
774,SetGraphicsMode,"Microsoft Build · May 19 – 22, 2025SetGraphicsMode function (wingdi.h) The SetGraphicsMode function sets the graphics mode for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] iMode The graphics mode. This parameter can be one of the following values. Value Meaning GM_COMPATIBLE Sets the graphics mode that is compatible with 16-bit.GetGraphicsMode ... Remarks An application can set the graphics mode for a device context by calling the SetGraphicsMode function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.CDC Class Defines a class of device-context objects. CDC::SetDCPenColor Sets the current pen color. CDC::SetGraphicsMode Sets the current graphics mode for the specified device context. CDC::SetMapMode Sets the current mapping mode. The class provides member functions for device-context operations, working with drawing tools, type-safe graphics.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. SetDisplayAutoRotationPreferences Sets the orientation preferences of the display. SetGraphicsMode Sets the graphics mode for the specified device context. SetMapMode Sets the mapping mode of the specified device context..Default Transformations Whenever an application creates a DC and immediately begins calling GDI drawing or output functions, it takes advantage of the default page-space to device-space, and device-space to client-area transformations. A world-to-page space transformation cannot happen until the application first calls the SetGraphicsMode function.SetWorldTransform function (wingdi.h) The SetWorldTransform function sets a two-dimensional linear transformation between world space and page space for the specified device context. The SetWorldTransform function will fail unless the graphics mode for the given device context has been set to GM_ADVANCED by previously calling the SetGraphicsMode.ModifyWorldTransform function (wingdi.h) The ModifyWorldTransform fu... Remarks The ModifyWorldTransform function will fail unless graphics mode for the specified device context has been set to GM_ADVANCED by previously calling the SetGraphicsMode function. Likewise, it will not be possible to reset the graphics mode for the device context to the.PATHOBJ structure (winddi.h) The PATHOBJ structure is used to describe a set of lines and Bezier curves that are to be stroked or filled. Syntax Members fl A set of hint flags that describe the path. GDI sets this flag only for solid lines that a... Also, GDI sets this flag only if the graphics mode of the device context is set to GM_COMPATIBLE..EnumFontFamiliesW function (wingdi.h) The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. When the graphics mode on the device context is set to GM_ADVANCED using the SetGraphicsMode function and the DEVICE_FONTTYPE flag is passed to the FontType parameter, this function returns a.EnumFontFamiliesA function (wingdi.h) The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. When the graphics mode on the device context is set to GM_ADVANCED using the SetGraphicsMode function and the DEVICE_FONTTYPE flag is passed to the FontType parameter, this function returns a."
775,HeapLock,"Microsoft Build · May 19 – 22, 2025HeapLock function (heapapi.h) Attempts to acquire the critical section object, or lock, that is associated with a specified heap. Syntax Parameters [in] hHeap A handle to the heap to be locked. Such threads will remain bloc... The HeapLock function is primarily useful for preventing the allocation and release of heap memory by other threads while.HeapUnlock function (heapapi.h) Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses the action of the HeapLock function. Syntax Parameters [in] hHeap A handle t... To get extended error information, call GetLastError. Remarks The HeapLock function is primarily useful for preventing the.HeapDestroy hea... It decommits and releases all the pages of a private heap object, and it invalidates the handle to the heap. HeapFree heapapi.h Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function. HeapLock heapapi.h Attempts to acquire the critical section object, or lock, that is associated with a specified.heapapi.h header This header is used by System Services. For more information, see: System Services heapapi.h contains t... HeapFree Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function. HeapLock Attempts to acquire the critical section object, or lock, that is associated with a specified heap. HeapQueryInformation.Enumerating a Heap The following example illustrates the use of the HeapWalk function to enumerate a heap. Then it uses HeapLock to lock the heap so other threads cannot access the heap while it is being enumerated. The example then calls HeapWalk with a pointer to a PROCESS_HEAP_ENTRY structure and iter... The following output shows typical.Locking the heap d... Use the HeapLock and HeapUnlock functions to control heap locking during heap enumeration. Examples Enumerating a Heap Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header heapapi.h (include.Memory Management Functions General memory functions Data execution prevention functions File mapping functions AWE functions Heap functions Virtual memory functions Global and local functions Bad memory functions Enclave functions ATL thunk functions Obsolete functions General memory functions Fun... Heap functions These are the heap functions..HeapCreate function (heapapi.h) Creates a private heap object that can be used by the calling process. Windows Server 2003 and Windows XP:  By default, the newly created private heap is a standard heap. There is a small performance cost to serialization, but it must be used w... The HeapLock and HeapUnlock functions can be used to block and permit.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. ENCLAVE_SEALING_IDENTITY_POLICY Defines values that specify how another enclave must be related to the enclave that calls EnclaveSealD... HEAP_INFORMATION_CLASS Specifies the."
776,GlobalFix,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
777,OpenSemaphoreA,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
778,GetCPInfo,"Microsoft Build · May 19 – 22, 2025GetCPInfo function (winnls.h) Retrieves information about any valid installed or available code page. Note  To obtain additional information about valid installed or available code pages, the application should use GetCPInfoEx. For details, see the CodePage parameter of GetCPInfoEx. [out] lpCPInfo Pointer to a CPINFO structure that receives.CPINFO structure (winnls.h) Contains information about a code page. This structure is used by the GetCPInfo function. Syntax Members MaxCharSize Maximum length, in bytes, of a character in the code page. CPINFOEX, used by the GetCPInfoEx function, provides an extended version of this structure. Requirements Requirement Value Minimum supported.(FoldStringA) GetACP Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, ... (GetCPInfo) GetCPInfoExA Retrieves information about any valid installed or available code page. This structure is used by the GetCPInfo function. This structure is used by the GetCPInfoEx function. This.Double-byte Character Sets A double-byte character set (DBCS), also known as an ""expanded 8-bit character set"", is an extended single-byte character set (SBCS), implemented as a code page. DBCSs were originally develope... See Conventions for Function Prototypes and Code Pages. To help identify a DBCS code page, an application can use the.GetACP Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use GetACP to translate text to or from Unicode. Get... GetCPInfo Retrieves information about any valid installed or available code page. (GetCPInfo) GetCPInfoExA Retrieves.Several Unicode and character set functions allow your applications to handle code pages. An application can use the GetCPInfo and GetCPInfoEx functions to obtain information about a code page. This information includes the default character used when a character in a converted string has no corresponding entry in the code page. An application can.If this value is 0, the funct... The application sets this parameter to NULL if the function is to use a system default value. To obtain the system default character, the application can call the GetCPInfo or GetCPInfoEx function. For the CP_UTF7 and CP_UTF8 settings for CodePage, this parameter must be set to NULL. Otherwise, the function fails....nes if a specified code page isRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also GetACP GetCPInfo GetOEMCP.Single-byte Character Sets A single-byte character set (SBCS) is a mapping of 256 individual characters to their identifying code values, implemented as a code page. To help identify an SBCS code page, an application can use the GetCPInfo or GetCPInfoEx function. In addition, an application can use the MultiByteToWi... A single-byte character set.Hi. Suppose you create files in the file system that uing a DBCS. Data converted from Unicode ... Also Several Unicode and character set functions allow your applications to handle code pages. An application can use the GetCPInfo and GetCPInfoEx functions to obtain information about a code page. This information includes the default character used."
779,GetUpdateRgn,"Microsoft Build · May 19 – 22, 2025GetUpdateRgn function (winuser.h) The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. ...lative to the upper-left corner of the window ( they are client coordinates)Syntax Parameters [in] hWnd Handle to the window with an update region that is to be retrieved. [in] hRgn Handle to the region.Retrieving the Update Region The GetUpdateRect and GetUpdateRgn functions retrieve the current update region for the window. GetUpdateRgn retrieves the update region itself. These functions can be ... Because BeginPaint validates the update region, any call to GetUpdateRect and GetUpdateRgn immediately after a call to BeginPaint returns an empty.Painting and Drawing Functions The following functions are used with painting and drawing. GetUpdateRect Gets the coordinates of the smallest rectangle that encloses the update region of a window. GetUpdateRgn Gets the update region of a window. GetWindowDC Gets the device context for a window, including title bar, menus, and scroll bars..CWnd::GetLastActivePopup Determines which pop-u... CWnd::GetTopWindow Returns the first child window that belongs to the CWnd. CWnd::GetUpdateRect Retrieves the coordinates of the smallest rectangle that completely encloses the CWnd update region. CWnd::GetUpdateRgn Retrieves the CWnd update region. CWnd::GetWindow Returns the window with the.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. GetUpdateRect The.UpdateWindow function (win... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced in.CWindow::GetLastActivePopup Retrieves the most r... CWindow::GetTopWindow Retrieves the top-level child window. CWindow::GetUpdateRect Retrieves the coordinates of the smallest rectangle that completely encloses the update region. CWindow::GetUpdateRgn Retrieves the update region and copies it into a specified region. CWindow::GetWindow Retrieves.ExcludeUpdateRgn function (winuser.h) The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region. ...ws Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also BeginPaint GetUp GetUpdateRgnThe ExcludeUpdateRgn function prevents drawing.RedrawWindow function (winuser.h) ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced.EnumDisplaySettingsA Th... EvaluateProximityToRect Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle. ExcludeUpdateRgn The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an."
780,CharLowerW,"Microsoft Build · May 19 – 22, 2025CharLowerW function (winuser.h) Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A null-terminated string, or specifies a single character. If the high-order word... Return value Type: LPTSTR If the.It is no longer available as of Windows Vista.] [This function is available through Windows XP with SP2 and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.] [CharLowerWrapW is available for use in Windows XP. It may... You should use CharLowerW in its place.] [CharUpperBuffWrapW is available for use in.CharLowerWrapW function [CharLowerWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use CharLowerW in its place.]. Converts a Unicode character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place. Note CharLowerWrapW is a.winuser.h header This header is used by multiple technologies. For more information, see: Da... CharLowerA Converts a character string or a single character to lowercase. (ANSI) CharLowerBuffA Converts uppercase characters in a buffer to lowercase characters. (ANSI) CharLowerBuffW Converts uppercase characters in a buffer to lowercase characters..To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) CharLowerBuffW Converts uppercase."
781,socket,"Microsoft Build · May 19 – 22, 2025A socket in computer networking is a communication endpoint that allows applications to send or receive packets of data across a network. It is associated with a running process and can have a name. Sockets are bidirectional, meaning they can communicate data in both directions simultaneously (full-duplex). There are two main types of sockets:Sockets are essential for enabling network communications and can be used across various network protocols.References:Windows Sockets: Background This article explains the nature and purpose of Windows Sockets. The Windows Sockets specification defines a binary-compatible network programming interface for Microsoft Windows. Windows Sockets are based on the UNIX sockets implementation in the Berkeley Software Distribution (BSD, release 4.3) from the Un....Socket Class Definition Namespace: System.Net.Sockets Assemblies:System.dll, System.Net.Sockets.dll Assemblies:netstandard.dll, System.Net.Sockets.dll Assembly:System.Net.Sockets.dll Assembly:System.dll Assembly:netstandard.dll Source:Socket.cs Source:Socket.cs Source:Socket.cs Implements the Berkeley sockets interface. Inheritance Object Socket.Creating a socket for the client After initialization, a SOCKET object must be instantiated for use by the client. To create a socket Declare an addrinfo object that contains a sockaddr structure and initialize these values. For this appl... Next Step: Connecting to a Socket Related topics Getting Started With Winsock Initializing Winsock Winsock.Sockets Sockets are a low-level data transfer technology on top of which many networking protocols are implemented. UWP offers TCP and UDP socket classes for client-server or peer-to-peer applications, whether connections are long-lived or an established connection is not required. This topic focuses on how to use the Universal Windows Platform.Sockets in .NET The System.Net.Sockets namespace contains a managed, cross-platform socket networking implementation. A... The Socket class is a managed-code version of the socket services provided relying on native interoperability with Linux, macOS, or Windows. The Socket class supports two basic modes, synchronous and asynchronous. Learn how.MFC supplies two models for writing network communications programs with Windows Sockets, embodied in two MFC classes. This article describes these models and further details MFC sockets support. A ""socket"" is an endpoint of communication: an object through which your application communicates with other Windows Sockets applications across a.Use Sockets to send and receive data over TCP Before you can use a socket to communicate with remote devices, the socket must be initialized with protocol and network address information. The constructor for the Socket class has parameters that specify the address family, socket type, and protocol type that the socket uses to make connections..Windows Sockets: Using Sockets with Archives This article describes the CSocket programming model. Class CSocket supplies soc... CSocket uses a version of the MFC serialization protocol to pass data to and from a socket object through an MFC CArchive object. CSocket provides blocking (while managing background processing of Windows messages) and.socket function (winsock2.h) The socket function creates a socket that is bound to a specific transport service provider. Other options for address family (AF_NETBIOS for use with NetBIOS, for example) are supported if a Windows Sockets service pr... The following table lists the possible values for the type parameter supported for Windows Sockets.TCP overview Important The Socket class is highly recommended for advanced users, instead of TcpClient and TcpListener. To work with Transmission Control Protocol (TCP), you have two options: either use Socket for maximum control and performance, or use the TcpClient and TcpListener helper classes. TcpClient and TcpListener are built on top of the."
782,DestroyWindow,"Microsoft Build · May 19 – 22, 2025DestroyWindow function (winuser.h) Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the.LineDisplay.DestroyWindow Method Definition Namespace: Microsoft.PointOfService Assembly:Microsoft.PointOfService.dll Destroys the active window. Applies to. Destroys the active window. . /dotnet/api/microsoft.pointofservice.linedisplay.destroywindow.Window Destruction Sequence In the MFC framework, when the user closes the frame window, the window's default OnClose handler calls DestroyWindow. The last member function called when the Windows window is destroyed is OnNcDestroy, which does some cleanup, calls the Default member function to perform Windows cleanup, and lastly calls the virtual.LineDisplayBase.DestroyWindow Method Definition Namespace: Microsoft.PointOfService.BaseServiceObjects Assembly:Microsoft.PointOfService.ControlBase.dll Destroys the current window. Applies to. Destroys the current window. . /dotnet/api/microsoft.pointofservice.baseserviceobjects.linedisplaybase.destroywindow.TN017: Destroying window objects This note describes the use of the CWnd::PostNcDestroy method. Use this method if you want to do customized allocation of CWnd-derived objects. This note also expla... Destroying windows The following are the two permitted ways to destroy a Windows object: Calling CWnd::DestroyWindow or the Windows API.Closing the Window When the user closes a window, that action triggers a sequence of window messages. The user can close an application window by clicking the Close button, or by using a keyboard shortcut such as ALT+F4. If you really do want to close the window, call the DestroyWindow function. Otherwise, simply return zero from the WM_CLOSE.Allocating and Deallocating Window Memory Do not use the C++ delete operator to destroy a frame window or view. Instead, call the CWnd member function DestroyWindow. Frame windows, therefore, should be allocated on the heap with operator new. B... What do you want to know more about Creating windows Window destruction sequence Detaching a CWnd.Destroying Frame Windows The MFC framework manages window destruction as well as creation for those windows associated with framework documents and views. In the framework, when the user closes the frame window, the window's default OnClose handler calls DestroyWindow. The last member function called when the Windows window is destroyed is.AppWindow.Destroy Method Definition Namespace: Microsoft.UI.Windowing Edit Attempts to destroy the app window. Applies to See also AppWindow DestroyWindow function (Win32). Attempts to destroy the app window. . /windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.destroy.Using Window Procedures This section explains how to perform the following tasks associated with window procedures. Designing a Window Procedure Associating a Window Procedure with a Window Class ... The DestroyWindow function takes care of destroying any child windows of the window being destroyed. The WM_NCDESTROY message is sent just before a."
783,RegisterClassExW,"Microsoft Build · May 19 – 22, 2025The RegisterClassExW function is used to register a window class in Windows programming. It allows an application to define the attributes of a window, such as its style, icon, cursor, menu, and window procedure. To use RegisterClassExW, you must first fill in a WNDCLASSEX structure with the necessary window class information. Then, you pass this structure to the RegisterClassExW function to register the class.When registering a window class using RegisterClassExW, the application requests that the system pass text parameters of messages to the windows of the created class using the Unicode character set. This is particularly useful for applications that need to support internationalization and handle a wide range of character sets.The process also involves specifying the hInstance member of the WNDCLASSEX structure, which identifies the instance of the application that owns the class. It's important to note that the class is not destroyed when the DLL that owns it is unloaded, so the application must ensure that all windows using the class are destroyed before unloading the DLL.References:RegisterClassExW function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Syntax Parameters [in] unnamedParam1 Type: const WNDCLASSEX* A pointer to a WNDCLASSEX structure. You must fill the structure with the appropriate class attributes before passing it to the function. Return.Application Global Classes An applicat... If you register the window class using the ANSI version of RegisterClassEx, RegisterClassExA, the application requests that the system pass text parameters of messages to the windows of the created class using the ANSI character set; if you register the class using the Unicode version of RegisterClassEx,.(Unicode) RegisterClassA Registers a window class for subsequent use in calls to the CreateWindow ... (RegisterClassA) RegisterClassExA Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassExA) RegisterClassExW Registers a window class for subsequent use in calls to the CreateWindow or.WNDPROC callback function (winuser.h) A callback function, which you define ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include windows.h) See also CallWindowProcW DefWindowProcW RegisterClassExW Window.Parameters wParam Type: **WPARAM** The BYTE font character set for the input language. If you register the window class using the Unicode version of RegisterClassEx (RegisterClassExW), you typically do not need to use this value. If you register the window class using the ANSI version of RegisterClassEx (RegisterClassExA), this value can be used.RegisterClassExA function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Remarks If you register the window class by using RegisterClassExA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI.(DrawTextW function) Emp... (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. (ANSI) GetClassInfoExW Retrieves information about a window class, including a handle to the small icon associated with the window class. (Unicode) GetClassInfoW Retrieves information.Hello, I have been creating a project using OpenGL, namely glfw3.lib. Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.exe&quot; /MANIFEST /NXCOMPAT /PDB:&quot;D:\Users\Alex."
784,CoRegisterClassObject,"Microsoft Build · May 19 – 22, 2025CoRegisterClassObject function (combaseapi.h) Registers an EXE class object with OLE so other applications can connect to it. Syntax Parameters [in] rclsid The CLSID to be registered. [in] pUnk A pointer to the IUnknown interface on the class object whose availability is being published. [in] dwClsContext The context in which the executable code.Registering a Running EXE Server When an executable (EXE) server is launched, it should call CoRegisterClassObject, which registers the CLSID for the server in what is called the class table (a different table than the running object table). When a server is registered in the class table, it allows the service control manager (SCM) to determine.CoRegisterActivationFilter Registers a process-wide filter to process activation requests. CoRegisterChannelHook Registers a channel hook. CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoRevokeClassObject Informs OLE that a class object, previously registered with the CoRegisterClassObject.CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. ... a server that can register multiple class objects to inform the SCM about all registered classes, and activationCoRevokeClassObject Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer.CoResumeClassObjects function (combaseapi.h) Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. Remarks Servers that can register multiple class objects call CoResumeClassObjects once, after having first called CoRegisterClassObject,.Registering a Class at Installati... When a class is registered as in-process, a call to CoGetClassObject to create its class object is automatically passed by COM to the DllGetClassObject function, which the class must implement to give the calling object a pointer to its class object. Classes implemented in executables can specify that COM.CoRevokeClassObject function (combaseapi.h) Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Window... Informs OLE that a class object,.Out-of-Process Server Implementation Helpers Four helper functions that can be called by out-of-process servers are available to simplify the job of writing server code. A COM server that registers multiple classes typically calls CoRegisterClassObject with REGCLS_LOCAL_SERVER for each CLSID it supports. To eliminate these race conditions and.CoRegisterActivationFilter Registers a process-wide filter to process activation requests. CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoRegisterDeviceCatalog Enables a downloaded DLL to register its device catalog interfaces within its running process so that ... CoResumeClassObjects.CoInitializeEx Introduced into api-ms-win-core-com-l1-1-1.dll in 10... CoMarshalInterThreadInterfaceInStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoRegisterClassObject Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into."
785,UpdateWindow,"Microsoft Build · May 19 – 22, 2025To update Windows, you can follow these steps:By following these methods, you can ensure that your Windows operating system is kept up to date.References:UpdateWindow function (winuser.h) The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty. The function sends a WM_PAINT message directly to the window procedure of the specified window, bypassing the application queue. ...updates the client.FormControl.updateWindow Method Definition Namespace: Dynamics.AX.Application Assembly: Updates the window for the control. Returns Int32 1 if the update was successful; otherwise, 0. Applies to. Updates the window for the control. . /dotnet/api/dynamics.ax.application.formcontrol.updatewindow.ITextDocument2::UpdateWindow method (tom.h) Notifies the client that the view has changed and the client should update the view if the Text Object Model (TOM) engine is in-place active. Syntax Return value Type: HRESULT If the method succeeds, it returns NOERROR. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only]....ndow resourc Namespace: microsoft.graph Important APIs under the /beta version in Microsoft Graph are subject to changeProperties Property Type Description updateWindowEndTime TimeOfDay End of a time window during which agents can receive updates updateWindowStartTime TimeOfDay Start of a time window during which agents can receive updates.ITextHost::TxViewChange method (textserv.h) Indicates to the text host that the update region has changed... Return value None Remarks The text services object must call TxViewChange every time its visual representation has changed, even if the control is inactive. If the control is active, then text services must also make sure the control's.Synchronous and Asynchronous Drawing Most drawing carried out during proc... The UpdateWindow and RedrawWindow functions allow for synchronous drawing. UpdateWindow sends a WM_PAINT message directly to the window if the update region is not empty. RedrawWindow also sends a WM_PAINT message, but gives the application greater control over how to.The InvalidateRect or InvalidateRgn function can indirectly generate WM_PAINT messages for your windows. If you do not want the application to wait until the application's message queue has no other messages, use the UpdateWindow function to force the WM_PAINT message to be sent immediately. If there is any invalid part of the client area,.hybridAgentUpdaterConfiguration resource type Namespace: microsoft.graph Important APIs under the /beta version in Microsoft Graph are subject to change. A tenant admin can configure for each onPremis... The hybridAgentUpdaterConfiguration specified for an onPremisesPublishingProfile is applicable to all the agents within that.How to Scroll Text This section describes the changes you can make to an application's main window procedure to enable a user to scroll text. What you need to know Technologies Windows Controls Prerequisites C/C++ Windows User Interface Programming Instructions Processing the WM_CREATE Message Scrolling units are typically set while processing the.ExcludeUpdateRgn function (winuser.h) The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region. Syntax Parameters [in] hDC Handle to the device context associated with the clipping region. [in] hWnd Handle to the window to update. The ExcludeUpdateRgn."
786,GetActiveWindow,"Microsoft Build · May 19 – 22, 2025GetActiveWindow function (winuser.h) Retrieves the window handle to the active window attached to the calling thread's message queue. Syntax Return value Type: HWND The return value is the handle to the active window attached to the calling thread's message queue. Remarks To get the handle to the foreground window, you can use GetForegroundWindow..AspNetManagementUtility.GetActiveWindow Method Definition Namespace: Microsoft.Aspnet.Snapin Assembly:AspNetMMCExt.dll Retrieves the window handle to the active window that is attached to the message queue of the calling thread. This API supports the product infrastructure and is not intended to be used directly from your code. Returns The handle.VisualTreeNavigationUtility.GetActiveWindow Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Returns Window Applies to. Learn more about the Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities.VisualTreeNavigationUtility.GetActiveWindow in the.CWnd::FindWindow Returns the handle of the window, which is identified by it... CWnd::FlashWindow Flashes the window once. CWnd::get_accValue Called by the framework to retrieve the value of the specified object. CWnd::GetActiveWindow Retrieves the active window. CWnd::GetAncestor Retrieves the ancestor window object of the specified window..SFSafariApplication.GetActiveWindow(Action) Method Definition Namespace: SafariServices Assembly:Xamarin.Mac.dll Parameters completionHandler Action Attributes ExportAttribute Applies to. Learn more about the SafariServices.SFSafariApplication.GetActiveWindow in the SafariServices namespace...The system shares the keyboard among all windows on the display by shifting the keyboard focus, at the user's direction, from one window to another. The user can activate a top-level window by clicking it, selecting it using the Alt+Tab or Alt+Esc key combination, or selecting it from the Task List. A thread can activate a top-level window by.Keyboard Input This section describes how the system generates keyboard input and how an application receives and processes that input. In This Section Name Description About Keyboard Input Discusses keyboard input. GetActiveWindow Retrieves the window handle to the active window attached to the calling thread's message queue. GetAsyncKeyState.Application.WindowHandle32 property (Visio) Returns the 32-bit handle of a Microsoft Visio window. For details about the GetActiveWindow function, see the Microsoft Platform SDK on the Microsoft Developer Network (MSDN) Web site. ....Visio.IVApplication.Wind Microsoft.Office.Interop.Visio.IVApplication.WindowHandle32 Example This Microsoft Visual.Window.WindowHandle32 property (Visio) Returns the 32-bit handle of a Microsoft Visio window. The HWND for the window returned by the GetActiveWindow () function if eith... For details about the GetActiveWindow function, see the Microsoft Platform SDK on the Microsoft Developer Network (MSDN) Web site. Use the WindowHandle32 property of the Window.GET_XBUTTON_WPARAM Retrieves the state of certain buttons from the specified WPARAM value. GetActiveWindow Retrieves the window handle to the active window attached to the calling thread's message queue. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call."
787,EraseTape,"Microsoft Build · May 19 – 22, 2025EraseTape function (winbase.h) The EraseTape function erases all or part of a tape. Syntax Parameters [in] hDevice Handle to the device where the tape is to be erased. This handle is created by using the CreateFile function. [in] dwEraseType Erasing technique. This parameter can be one of the following values. Value Meaning TAPE_ERASE_LONG 1L.Backup Functions The following functions are used with tape backup. Function Description BackupRead Reads data associated with a specified file or directory into a buffer. CreateTapePartition Reformats a tape. EraseTape Erases all or part of a tape. GetTapeParameters Retrieves information that describes the tape or the tape drive..Tape Input and Output There are several functions that applications can use to perform input and output (I/O) on a tape drive. Tape I/O is similar to I/O pe... More specific information on this subject is available from individual tape system manufacturers. The WriteTapemark function writes a specified number of setmarks, filemarks, short.Call this function when the callback environment is no longer needed for creating new thread pool objects. (DestroyThreadpoolEnvironment) EnterUmsSchedulingMode Converts the calling thread into a user-mode scheduling (UMS) scheduler thread. EraseTape Erases all or part of a tape. ExecuteUmsThread Runs the specified UMS worker thread..winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes event... (ANSI) EnumResourceTypesW Enumerates resource types within a binary module. (Unicode) EraseTape Erases all or part of."
788,OpenFile,"Microsoft Build · May 19 – 22, 2025To open a file using Microsoft products, you can follow these general steps:For specific issues, such as opening Access databases or repairing documents, you may need to follow additional steps outlined in the troubleshooting guides.References:OPENFILE Function Opens a Microsoft Visio document, if it's not already open, and activates the document window. Syntax OPENFILE( ""filename"") Parameters Name Required/Optional Data Type Description filename Required String The name of the file, including file path, you want to open. Remarks Multiple OPENFILE function calls are queued and executed.OpenFile function (winbase.h) Creates, opens, reopens, or deletes a file. Note  This function has limited capabilities and is not recommended. For new application development, use the CreateFile function. Syntax Parameters [in] lpFileName The name of the file. The string must consist of characters from the 8-bit Windows character set. The OpenFile.openFile Opens a file. Available for Model-driven apps Syntax context.navigation.openFile(file, options) Parameters Parameter Name Type Required Description file FileObject Yes An object describing the file to open. The FileObject has the following attributes: - fileContent: String. Contents of the file. - fileName: String. File MIME type. options.openfiles Enables an administrator to query, display, or disconnect files and directories that have been opened on a system. This command also enables or disables the system Maintain Objects List global flag. openfiles /disconnect Enables an administrator to disconnect files and folders that have been opened remotely through a shared folder.....finition Namespace: System.Web.UI Assembly:System.W Gets a Stream used to read a fileRemarks The OpenFile method returns a Stream object that can be used to read the contents of the file specified in the path parameter. The path parameter can be either a relative or root URL without a protocol (such as ""~/mySite/myFile.txt), or a physical path,.OpenFileDialog.OpenFile Method Definition Namespace: Microsoft.Win32 Assembly:PresentationFramework.dll Opens a read-only stream for the file that is selected by the user using OpenFileDialog. Remarks The file is opened with read-only permission (Open, Read, and Read), whether or not the Read Only checkbox is checked in the dialog. Because the.ContentProvider.OpenFile Method Definition Namespace: Android.Content Assembly:Mono.Android.dll Overloads OpenFile(Uri, String) Override this to handle requests to open a file blob. OpenFile(Uri, String, CancellationSignal) Override this to handle requests to open a file blob. OpenFile(Uri, String) Override this to handle requests to open a file.OpenFileDialog.OpenFile Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Source:OpenFileDialog.cs Source:OpenFileDialog.cs Source:OpenFileDialog.cs Opens the file selected by the user, with read-only permission. The file is speci... IOException An I/O error occurred while opening the file. Examples The following.How to: Open files with the OpenFileDialog The System.Windows.Forms.OpenFileDialog component opens the Windows dialog box for browsing and selecting files. To open and read the selected files, you can use the OpenFileDialog.OpenFile method, or create an instance of the System.IO.StreamReader class. The f... Learn how to use the OpenFileDialog.SaveFileDialog.OpenFile Method Definition Namespace: Microsoft.Win32 Assembly:PresentationFramework.dll Creates a read-write file stream for the filename selected by the user using SaveFileDialog. Returns Stream A new Stream that contains the selected file. Remarks The file stream that is returned is opened with read-write access (Create and."
789,OpenWaitableTimerW,"Microsoft Build · May 19 – 22, 2025OpenWaitableTimerW function (synchapi.h) Opens an existing named waitable timer object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library Kernel32.lib DLL.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. CreateWaitableTimerW Creates or opens a waitable timer object. Del... OpenSemaphoreW Opens an.DuplicateHandle function (handleapi.h) Duplicates an object handle. S... Semaphore The handle is returned by the CreateSemaphore or OpenSemaphore function. Thread The handle is returned by the CreateProcess, CreateThread, CreateRemoteThread, or GetCurrentThread function Timer The handle is returned by the CreateWaitableTimerW or OpenWaitableTimerW.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
790,GetDIBits,"Microsoft Build · May 19 – 22, 2025GetDIBits function (wingdi.h) The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format. Syntax Parameters [in] hdc A handle to the device context. [in] hbm A handle to the bitmap. This must be a compatible bitmap (DDB). [in] st... The GetDIBits function retrieves.Device-Dependent Bitmaps Device-dependent bitmaps (DDBs) are described by using a single structure, the BITMAP structure. To transfer a bitmap between devices with different color organization, use GetDIBits to convert the compatible bitmap to a DIB and call SetDIBits or StretchDIBits to display the DIB to the second device. There are two types of.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. GetBitmapBits The.You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll.GetBitmapBits function (wingdi.h) The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the GetDIBits function. Requirements Requirement Value Minimum supported client Windows 2000.You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll.IVsToolboxItemProvider Interface Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assemblies:Microsoft.VisualStudio.Shell.14.0.dll, Microsoft.VisualStudio.Shell.Interop.10.0.dll Assemblies:Microsoft.VisualStudio.Shell.15.0.dll, M... Either Bitmap : binary data representing the pixels of an image, with four bytes per pixel(, red, green,.GetObject function (wingdi.h) The GetObject function retrieves information for the specified graphics object. You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function. If hgdiobj is a handle to a logical palette, GetObject retrieves a 2-byte integer that specifies the number of entries in the palette. Requirements.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. GetDIBColorTable Retrieves RGB color values fr... GetDIBits Copies a bitmap into a buffer. GetPixel Gets the RGB color value of the pixel at a given coordinate. Obsolete Functions The following functions are provided only for compatibility with 16-bit versions of."
791,IntersectRect,"Microsoft Build · May 19 – 22, 2025IntersectRect function (winuser.h) The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. ... source rectangles do not intersect, an empty rectangle (in which all coordinates are set to zero) is placed into the destination rSyntax.InflateRect Increases or decreases the width and height of the specified rectangle. IntersectRect Calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. IsRectEmpty Determines whether the specified rectangle is empty. OffsetRect Moves the specified rectangle by.The point is in the rectangle if it lies on the left or top side or is completely ... The point is not in the rectangle if it lies on the right or bottom side. The IntersectRect function creates a new rectangle that is the intersection of two existing rectangles, as shown in the following figure. The UnionRect function creates a new rectangle that.Rect.Intersect methods This topic lists the Intersect methods of the Rect class. For a complete li... Overload list Method Description Intersect(Rect&) The Rect::Intersect method replaces this rectangle with the intersection of itself and another rectangle. Intersect(Rect&,Rect&,Rect&) The Rect::IntersectRect object. This topic lists the Intersect.Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::InflateRect Increases the width and height of CRect. CRect::IntersectRect Sets CRect equal to the intersection of two rectangles. CRect::IsRectNull Determines whether the top, bottom, left, and right member variables are all equal to 0. Example.Retrieve the total number of buttons by sending the band's toolbar control a TB_BUTTONCOUNT message. Starting from the leftmost button, retrieve the button's bounding rectangle by sending the toolbar control a TB_GETITEMRECT message. Pass the band and button rectangles to the IntersectRect function. This function will return a RECT structure that.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. I... IntersectRect The....onitors associated with the mir drivers) that intersect a region formed by the intersectionEvaluateProximityToPolygon Returns the score of a polygon as the probable touch target (compared to all other polygons that intersect the touch contact area) and an adjusted touch point within the polygon. EvaluateProximityToRect Returns the score of a.Flip model, dirty rectangles, scrolle... You can call the GDI IntersectRect function to determine whether two RECT structures that represent the two dirty rectangles intersect. In this code snippet, a call to IntersectRect returns the intersection of two dirty rectangles in another RECT called dirtyRectCopy. After the code snippet determines that....gle by the specified oRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also InflateRect IntersectRect RECT Rectangle Functions."
792,CoUnmarshalHresult,"Microsoft Build · May 19 – 22, 2025CoUnmarshalHresult function (combaseapi.h) Unmarshals an HRESULT type from the specified stream. Syntax Parameters [in] pstm A pointer to the stream from which the HRESULT is to be unmarshaled. [out] phresult A pointer to the unmarshaled HRESULT. Return value This function can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as.Functions (COM) The following functions are provided by COM. CoLockObjectExternal Called either to lock an object to ensure that it stays in memory, or to release such a lock. CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream.CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoRegisterPSClsid Enables a downloaded ... CoReleaseMarshalData Destroys a previously marshaled data packet. CoUnmarshalHresult Unmarshals an HRESULT type from the specified stream. CoUnmarshalInterface Initializes.CoLockObjectExternal Called either to lock an object to ensure that it stays in memory, or to release such a lock. CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream the data required to initialize a proxy object in some.CoMarshalHresult function (combaseapi.h) Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows."
793,SetHandleInformation,"Microsoft Build · May 19 – 22, 2025The SetHandleInformation function is used in programming to set certain properties of an object handle. This function allows you to modify the behavior of handles in your application. The syntax for the function is as follows:If the function succeeds, it returns a nonzero value. If it fails, it returns zero, and you can call GetLastError to get more information about the error.Using SetHandleInformation, you can control whether a handle can be inherited by child processes or protect it from being closed.References:...formation function (handleapi.h) Sets certain properties of an object Syntax Parameters [in] hObject A handle to an object whose information is to be set. You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job, mailslot, mutex, pipe, printer,.Handle and Object Functions The fo... Function Description CloseHandle Closes an open object handle. CompareObjectHandles Compares two object handles to determine if they refer to the same underlying kernel object. DuplicateHandle Duplicates an object handle. GetHandleInformation Retrieves certain properties of an object handle..To use a handle, the... Usually, the parent process communicates this information to the child process through its command line, environment block, or some form of interprocess communication. Use the SetHandleInformation function to control if an existing handle is inheritable or not. Inheriting Environment Variables A child process inherits the.handleapi.h header This header is used by System Services. For more information, see: System Services handleapi.h contains the following programming interfaces: Functions CloseHandle Closes an open object handle. CompareObjectHandles Compares two object handles to determine if they refer to... DuplicateHandle Duplicates an object handle..Mailslot Operations When working with mailslots, clients and servers should use only the functions discussed in the following tables. Do not use other functions, even if they accept file handles or file names as parameters, as they are not designed to work with mailslots. GetHandleInformation Retrieves properties of the mailslot handle..Creating a Child Process with Redirected Input and Output The example in this topic demonstrates how to create a child process using the CreateProcess function from a console process. Therefore, before creating the child process, the parent process uses the SetHandleInformation function to ensure that the write handle for the child process's.GetHandleInformation function (handle... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header handleapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also CloseHandle CreateProcess.We implemented a Windows assembly in C#. This program is listening on a socket for incoming connections and starting child processes (unmanaged c code) which should then be using this socket. This is an excerpt of the code we are using: where t... We checked and apparently the socket (handle) was not marked as inheritable in .NET 6, whereas using."
794,GetDiskFreeSpaceExW,"Microsoft Build · May 19 – 22, 2025GetDiskFreeSpaceExW function (fileapi.h) Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. Syntax Parameters [in, optional] lpDirectoryName A.FindFirstFileExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindNextFileW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExA.Use _chdir, _getcwd and related functions. _cgets _cgets_s _cgetws _cgetws_s _cprintf _cprintf_l _cprintf_p _cprintf_p_l _cprintf_s _cprintf_s_l _cputs _cputws _cscanf _cscanf_l _cscanf_s _cscanf_s_l _cwait _cwprintf _cwprintf_l _cwprintf_p _cwprintf_p_l _cwprintf_s _cwprintf_s_l _cwscanf _cwscanf_l _cwscanf_s _cwscanf_s_l _vcprintf _vcprintf_l.Sy... Remarks Use this function to determine how much storage space is available if your title uses Growable Persistent Local Storage (GPLS). Note that calling GetDiskFreeSpaceExW will only tell titles the maximum amount of free space left in PLS - this is not guaranteed to be available. Requirements Header: XPersistentLocalStorage.h Library:.Describes the temporary local storage available to titles on Xbox consoles and how to access temporary locally stored data, installed game data, and the developer scratch partition.To request Growable PLS, add the following marku... Before writing to Growable PLS, your title must check for available space using the XPersistentLocalStorageGetSpaceInfo API. Note that calling GetDiskFreeSpaceExW will only tell titles the maximum amount of free space left in PLS - this is not guaranteed to be available..(Unicode) GetDiskFreeSpaceA Retrieves information about the specified disk, including the amount of free space on the disk. (ANSI) GetDiskFreeSpaceExA Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
795,GetWindowTextLengthA,"Microsoft Build · May 19 – 22, 2025GetWindowTextLengthA function (winuser.h) Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in....ncated text is present, calli GetWindowTextLengthA function retrieves the length of the truncated textHowever, there are instances where, after pasting in non-English text (like the testString2 in the sample program), the GetWindowTextLengthA function returns a value that is less than the actual number of bytes (or code units), but more than.GetWindowTextA Copies the text of ... However, GetWindowText cannot retrieve the text of a control in another application. (ANSI) GetWindowTextLengthA Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). (ANSI) GetWindowTextLengthW Retrieves the length, in characters, of the specified.AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx Calculates the required size of the window rectangle, based on the desired size of the."
796,SetBrushOrgEx,"Microsoft Build · May 19 – 22, 2025SetBrushOrgEx function (wingdi.h) The SetBrushOrgEx function sets the brush origin that GDI assigns to the next brush an application selects into the specified device context. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in device units, of the new brush origin. If this value is greater than the brush width,.3.2.2.7 EMR_SETBRUSHORGEX Example This section provides an example of the EMF EMR_SETBRUSHORGEX record ([MS-EMF] section 2.3.11.12). 00000120:0D 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000D) Size (0x00000010) Origin (0x00000000) ... (0x00000000) Type (4 bytes):....MF] section 2.3.11.12). 00000160:                         0D 00 00 00 10 00 00 00 00000170: 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000D) Size (0x00000010) Origin (0x00000000) ... (0x00000000) Type (4 bytes): 0x0000000D identifies the record t EMR_SETBRUSHORGEXSize (4 bytes):....cord ([MS-EMF] section 2.3.11.12). 000001E0:              0D 00 00 00 10 00 00 00 00 00 00 00 000001F0: 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000D) Size (0x00000010) Origin (0x00000000) ... (0x00000000) Type (4 bytes): 0x0000000D identifies the record t EMR_SETBRUSHORGEXSize (4 bytes):.You can do this by calling the SetBrushOrgEx function. Your application can retrieve the current brush origin by calling the GetBrushOrgEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.... EMR_SETBRUSH Example 3 This section provides an example of the EMF EMR_SETBRUSHORGEX record ([MS-EMF] section 2.3.11.12). 00000730: 0D 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000D) Size (0x00000010) Origin (0x00000000) ... (0x00000000) Type (4 bytes):.3.2.6.7 EMR_SETBRUSHORGEX Example This section provides an example of the EMR_SETBRUSHORGEX record ([MS-EMF] section 2.3.11.12). 00064BE0:                        0d 00 00 00 10 00 00 00 00064BF0:00 00 00 00 00 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x0000000D) Size (0x00000010) Origin (0x00000000) ....CreateBrushIndirect function (wingdi.h) The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pa... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.2.3.11.12 EMR_SETBRUSHORGEX Record The EMR_SETBRUSHORGEX record specifies the origin of the current brush. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Origin. Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETBRUSHORGEX. Origin (8 bytes): A PointL... The EMR_SETBRUSHORGEX record.Brush Origin When an application calls a drawing function to paint a shape, the system positions a brush at the start of the paint operation and maps a pixel in the brush bitmap to the client area at the window origin, which is the upper-left corner of the window. To do this, the application should reset the brush origin by calling the."
797,OutputDebugStringW,"Microsoft Build · May 19 – 22, 2025OutputDebugStringW function (debugapi.h) Sends a string to the debugger for display. Syntax Parameters [in, optional] lpOutputString The null-terminated string to be displayed. If the application d... OutputDebugStringW converts the specified string based on the current system locale information and passes it to OutputDebugStringA to be displayed..Debugging Functions The following functions are used with debugging. OutputDebugString Sends a string to the debugger for display. WaitForDebugEvent Waits for a debugging event to occur i... WaitForDebugEventEx Waits for a debugging event to occur in a process being debugged, and enables support for Unicode strings from OutputDebugStringW..OutputDebugStringA function (debugapi.h) Sends a string to the debugger for display. In the past, the operating system did not return Unicode strings through OutputDebugStringW (ASCII strings were returned instead). To force OutputDebugStringW to return Unicode stri... OutputDebugStringW converts the specified string based on the current system.debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. ContinueDebugEvent Ena... OutputDebugStringA Sends a string to the debugger for display..Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. F... Moved into api-ms-win-core-debug-l1-1-0.dll in 10.0.16299. OutputDebugStringA Introduced into api-ms-win-core-debug-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-debug-l1-1-2.dll in 10.0.10586. Moved into.OutputDebugStringWrapW function [This function is available for use in Windows XP. Use OutputDebugStringW in its place.]. Sends a Unicode string to the debugger for display. Note OutputDebugStringWrapW is a wrapper for the OutputDebugStringW function. See the OutputDebugString ... Remarks OutputDebugStringWrapW provides the ability to use Unicode.WaitForDebugEventEx function (debugapi.h) Waits for a debugging event to occur in a process being debugged. Important  In the past, the operating system did not output Unicode strings via OutputDebugStringW and instead only output ASCII strings. To force OutputDebugStringW to correctly output Unicode strings, debuggers are required to call.WaitForDebugEvent function (debugapi.h) Waits for a debugging event to occur in a process being debugged. Important  In the past, the operating system did not output Unicode strings via OutputDebugStringW and instead only output ASCII strings. To force OutputDebugStringW to correctly output Unicode strings, debuggers are required to call.I'm debugging a C++ function in Visual Studio 2019 and there are multiple return statements in it. I want to know which return statement exited the ... So code such as: will display the source line number of the return statement. If you don't want to clutter up the stdout display with these line numbers, or if you don't have a console attached to.RtlGetSystemGlobalData - Gets the address of the system global data area. memcmp memory.h orstring.h Compares characters in two buffers. memcpy memory.h orstring.h Copies bytes between buffers. memmove string.h Moves one buffer to another. memset memory.h orstring.h Sets a buffer to a specified character. OutputDebugStringW debugapi.h Sends a."
798,CreateCompatibleBitmap,"Microsoft Build · May 19 – 22, 2025The CreateCompatibleBitmap function in Windows programming is used to create a bitmap that is compatible with the device associated with a specified device context (HDC). Here’s how to use it:References:CreateCompatibleBitmap function (wingdi.h) The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context. Syntax Parameters [in] hdc A handle to a device context. [in] cx The bitmap width, in pixels. [in] cy The bitmap height, in pixels. ...lue is a handle to the compatible.Device-Dependent Bitmaps Device-dependent bitmaps (DDBs) are described by using a single structure, the BITMAP structure. The CreateBitmap, CreateCompatibleBitmap, and CreateBitmapIndirect functions create nondiscardable bitmaps. Specifying CBM_INIT in the call to CreateDIBitmap is equivalent to calling the CreateCompatibleBitmap function to.CreateBitmap The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). CreateBrushIndirect The CreateBrushIndirect function creates a logical brush tha... CreateCompatibleBitmap The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated.CBitmap Class Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap. Syntax Members Public Constructors Name Description CBitmap::CBitmap Constructs a CBitmap object. CBitmap::CreateCompatibleBitmap Initializes the object with a bitmap so that it is compatible with a specified device..CreateColorSpaceA The Cre... (ANSI) CreateColorSpaceW The CreateColorSpace function creates a logical color space. (Unicode) CreateCompatibleBitmap The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context. CreateCompatibleDC The CreateCompatibleDC function creates a memory.Memory Device Contexts To enable applications to place output in memory rather than sending it to an actual device, use a special device context for bitmap operations called a memory device context. Because the bitmap is compatible with the device, a memory DC is also sometimes referred to as a compatible device context. To create a bitmap of the.Bitmap Creation To create a bitmap, use the CreateBitmap, CreateBitmapIndirect, or CreateCompatibleBitmap function, CreateDIBitmap, and CreateDiscardableBitmap. On the other hand, the CreateCompatibleBitmap and CreateDiscardableBitmap functions use a specified device context to obtain the number of color planes and the number of bits required to.Later, when the user se... To store an image temporarily, your application must call CreateCompatibleDC to create a DC that is compatible with the current window DC. After you create a compatible DC, you create a bitmap with the appropriate dimensions by calling the CreateCompatibleBitmap function and then select it into this device context by.CreateDiscardableBitmap function (wingdi.h) The CreateDiscardableBitmap function creates a discardable bitmap that is compatible with the specified device. An application can select this bitmap as the current bitmap for a memory device that is compatible with the specified device. Requirements Requirement Value Minimum supported ... The.... the CreateBitmapIndirect function can be used to create color bitmaps, for performance reasons applications should use CreateBitmapIndirect to create monochrome bitma CreateCompatibleBitmap to create color bitmapsBecause CreateCompatibleBitmap takes a device context, it returns a bitmap that has the same format as the specified device context.."
799,WaitNamedPipeA,"Microsoft Build · May 19 – 22, 2025WaitNamedPipeA function (winbase.h) Waits until either a time-out interval elapses or an instance of the specified named pipe is available for connection (that is, the pipe's server process has a pending ConnectNamedPipe operation on the pipe). The WaitNamedPipeA (ANSI) function (winbase.h) waits until either a time-out interval elapses or an.(Unicode) BuildCommDCBW Fills a spe... (Unicode) CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA) CheckNameLegalDOS8Dot3A Determines whether the specified name can be used to create a file on a FAT file system..APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
800,SetNamedPipeHandleState,"Microsoft Build · May 19 – 22, 2025SetNamedPipeHandleState function (namedpipeapi.h) Sets the read mode and the blocking mode of the specified named pipe. If the specified handle is to the client end of a named pipe and if the named pipe server process is on a remote computer, the function can also be used to control local buffering. Syntax Parameters [in] hNamedPipe A handle....namedpipeapi.h header This header is used by multiple technologies. PeekNamedPipe Copies data from a named or anonymous pipe into a buffer without removing it from the pipe. SetNamedPipeHandleState Sets the read mode and the blocking mode of the specified named pipe. If the specified handle is to the client end of a named pipe and if the named.To set the pipe handle state, use the SetNamedPipeHandleState function. Windows 10, version 1709:  Pipes are only supported within an app-container; ie, from one UWP process to a... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps.To set the pipe handle state, use the SetNamedPipeHandleState function. Windows 10, version 1709:  Pipes are only supported within an app-container; ie, from one U... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Named Pip... The SetNamedPipeHandleState function sets the read mode and wait modes of a pipe handle. Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. Pipe operations, including pipe clients.PeekNamedPipe Copies data from a named or anonymous pipe into a buffer without removing it from the pipe. SetNamedPipeHandleState Sets the read mode and the blocking mode of the specified named pipe. TransactNamedPipe Combines the functions that write a message to and read a message from the specified named pipe into a single network operation..The client can use the SetNamedPipeHandleState function to enable nonblocking mode by specifying PIPE_NOWAIT or to enable message-read mode by specifying PIPE_READMODE_MESSAGE. The foll... Yes No Provide product feedback | Get help at Microsoft Q&A. Code example shows a pipe client that opens a named pipe, sets the pipe handle to message-read.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Named Pipe Type, Read, and Wait Modes The pipe server specifies the pipe type mode, read mode, and wait mode in the dwPipeMode parameter of the CreateNamedPipe function. For a pipe client, a pipe handle re... Both pipe clients and pipe.The write-through mode of a pipe handle cannot be changed after the pipe h... The write-through mode can be different for server and client handles to the same pipe instance. A pipe client can use the SetNamedPipeHandleState function to control the number of bytes and the time-out period before transmission for a pipe on which write-through mode.ConnectNamedPipe function (namedpipeapi.h) Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. The behavior of ConnectNamedPipe depends on two conditions: whether the pipe handle's wait mode is set to blocking or nonblocking and whether the function is set to execute synchronously or in."
801,MoveFileW,"Microsoft Build · May 19 – 22, 2025MoveFileW function (winbase.h) Moves an existing file or a directory, including its children. To specify how to move the file, use the MoveFileEx or MoveFileWithProgress function. To perform this operation as a transacted operation, use the MoveFileTransacted function. Syntax Parameters [in] lpExistingFileName The current name of the file or.Apply the Public and Shared modifiers to the function declaration and set parameters for MoveFile based on the arguments the Windows API function uses: Your function can ... In this example, the DllImport attribute forces calls to MoveFile to be forwarded to MoveFileW in KERNEL32.DLL. The MoveFileW method copies a file from the path src to the.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.MoveFile function (winbase.h) Moves an existing file or a directory, including its children. To specify how to move the file, use the MoveFileEx or MoveFileWithProgress function. To perform this operation as a transacted operation, use the MoveFileTransacted function. Syntax Parameters [in] lpExistingFileName The current name of the file or....0 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW,.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.Win32-based applications should use the CreateFile function. _lread The _lread function reads data from the specified file. Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (ANSI) AddAtomW Adds a character string to the local atom table and returns a unique value (an atom) identifying the."
802,InsertMenuItemW,"Microsoft Build · May 19 – 22, 2025InsertMenuItemW function (winuser.h) Inserts a new menu item at the specified position in a menu. Syntax Parameters [in] hmenu Type: HMENU A handle to the menu in which the new menu item is inserted. [in] item Type: UINT The identifier or position of the menu item before which to insert the new item. Requirements Requirement Value Minimum.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. The menu is initially empty, but it can.(ANSI) CreateMDIWindowW Creates a multiple-document interface (MDI) child window. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. (ANSI) CreateWindowExW."
803,GetCapture,"Microsoft Build · May 19 – 22, 2025GetCapture function (winuser.h) Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders. Syntax Return value Type: HWND The return value is a handle to the capture window associated with the current.IOleInPlaceSiteWindowless.GetCapture Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Called by an in-place active, windowless object to determine if it still has the mouse capture or not..IOleInPlaceSiteWindowless::GetCapture method (ocidl.h) Called by an in-place active, windowless object to determine whether it still has the mouse capture. Syntax Return value This method returns S_OK on success. Return code Description S_FALSE The object does not currently have the mouse capture. Requirements Requirement Value M... Called by an.If an application has not captured mouse input and the user releases the mouse button outside the window, the window does not receive the button-up message. A thread can use the GetCapture function to determine whether one of its windows has captured the mouse. If one of the thread's windows has captured the mouse, GetCapture retrieves a handle to.GetAutoRotationState Retrieves an AR_STATE value containing the state of screen auto-rotation for the system, for ex... GetAwarenessFromDpiAwarenessContext Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT. GetCapture Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the.IOleInPlaceSiteWindowless Interface Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Enables a windowless object to process window messages, participate in drag-and-drop operations, and draw..Mouse Input Functions In this section Topic Description _TrackMouseEvent Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. The width and height of the drag rectangle are s... GetCapture Retrieves a handle to the window (if any) that has captured the mouse. ReleaseCapture Releases the.COleControl::GetBackColor Returns the value of the stock BackColor property. COleControl::GetBorderStyle Returns the value of the stock BorderStyle property. COleControl::GetCapture Determines whether a windowless, activated control object has the mouse capture. COleControl::GetClassID Retrieves the OLE class ID of the control..G... GetCapture Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders. RegisterRawInputDevices Registers the devices that supply the raw input data. ReleaseCapture Releases the mouse capture from a.COleControl provides member functions that invoke mouse capture, keyboard focus, scrolling, and other window services from the container as appropriate, including: GetFocus, SetFocus GetCapture, SetCapture, ReleaseCapture GetDC, ReleaseDC InvalidateRgn ScrollWindow GetClientRect In windowless controls, you should always use the COleControl member."
804,IsWindowUnicode,"Microsoft Build · May 19 – 22, 2025IsWindowUnicode function (winuser.h) Determines whether the specified window is a native Unicode window. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be tested. Return value Type: BOOL If the window is a native Unicode window, the return value is nonzero. The window is a native ANSI window. The system does automatic two-way.IsWindow Determines whether the specified window handle identifies an existing window. IsWindowUnicode Determines whether the specified window is a native Unicode window. IsWindowVisible Determines the visibility state of the specified window. RegisterWindowMessageA Defines a new window message that is guaranteed to be... (ANSI).GetWindowThreadProcessId Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the... IsHungAppWindow Determines whether Windows considers that a specified application is not responding. IsWindow Determines whether the specified window handle identifies an existing.If the application registers the window class using RegisterClassA, the function informs the operating system that the wi... Registration using RegisterClassW allows the application to request the operating system to pass text parameters of messages as Unicode. The IsWindowUnicode function enables an application to query the nature of each window..MSLU: Develop Unicode Applications for Windows 9x Platforms wi... This would be a window that is seen as a Unicode window by MSLU, even though the operating system is quite certain it is not a Unicode window. Unicode functionality Nothing is ever simple, and it quickly became clear that there were quite a few APIs relating to Unicode support that.Remarks If you register the window class by using RegisterClassA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using RegisterClassW, the application requests that the system pass text parameters of... The IsWindowUnicode.Unicode Support for Common Contr... For versions 5.80 and later of comctl32.dll, common controls notifications support both ANSI and Unicode formats on Windows 95 systems or later. If you do not handle this message, the system calls IsWindowUnicode to determine the format. Since Windows 95 and Windows 98 always return FALSE to this function call,.Remarks If you register the window class by using RegisterClassExA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using RegisterClassExW, the application requests that the system pass text parameter... The IsWindowUnicode.Remarks If you register the window class by using RegisterClassA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using RegisterClassW, the application requests that the system pass text parameters of... The IsWindowUnicode.Remarks If you register the window class by using RegisterClassExA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using RegisterClassExW, the application requests that the system pass text parameter... The IsWindowUnicode."
805,OpenDesktopA,"Microsoft Build · May 19 – 22, 2025OpenDesktopA function (winuser.h) Opens the specified desktop object. Syntax Parameters [in] lpszDesktop The name of the desktop to be opened. Desktop names are case-insensitive. Note The winuser.h header defines OpenDesktop as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any ... (ANSI) GetUserObjectInformationW Retrieves information about the specified window station or desktop object. (Unicode) OpenDesktopA Opens the specified desktop object. (ANSI) OpenDesktopW.CreateCursor Creates a cursor having the specified size, bit patterns, and hot spot. CreateDesktopA Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. (ANSI) CreateDesktopExA Creates a new desktop with the specified heap, associates it with the current window station."
806,GetMessagePos,"Microsoft Build · May 19 – 22, 2025GetMessagePos function (winuser.h) Retrieves the cursor position for the last message retrieved by the GetMessage function. To determine the current position of the cursor, use the GetCursorPos function. Syntax Return value Type: DWORD The return value specifies the x- and y-coordinates of the cursor position. Requirements Requirement Value.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. Extra message information is an application- or driver-defined value assoc... GetMessagePos Retrieves.C28623 warning C28623: Unsigned cast of GetMessagePos() coordinates. Use GET_X_LPARAM/GET_Y_LPARAM instead of LOWORD/HIWORD Systems with multiple monitors can have negative x-coordinates and y-coordinates. On such systems, GetMessagePos may therefore return negative values. Example PREfast reports the ... Warning C28623 Unsigned cast of.MAKEPOINTS macro (wingdi.h) The MAKEP... Return value None Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) See also GetMessagePos Rectangle Macros Rectangles Overview..Message Functions (Windows and Messages) BroadcastSystemMessage BroadcastSystemMessageEx DispatchMessage GetInputState GetMessage GetMessageExtraInfo GetMessagePos GetMessageTime GetQueueStatus InSendMessage InSendMessageEx PeekMessage PostMessage PostQuitMessage PostThreadMessage RegisterWindowMessage ReplyMessage SendAsyncProc SendMessage.To get the coordinates of the cursor if the message was generated by a mouse click, the application can call GetMessagePos. An application can test whether the message was generated by the mouse by checking whether lParam contains FAPPCOMMAND_MOUSE. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. GetMessage The GetMessage function.An application can retrieve this information by calling the GetMessageTime and GetMessagePos functions while processing a message. A thread can use the WaitMessage function to yield control to other threads when it has no me... The following sections describe how a message loop works and explain the role of a window procedure: Message Loop Window.Use _beginthreadex() instead C28623 warning C28623: Unsigned cast of GetMessagePos() coordinates. Use GET_X_LPARAM/GET_Y_LPARAM instead of LOWORD/HIWORD C28624 warning C28624: No call to Release() to match incremented refcount from LResultFromObject C28625 warning C28625: Function call used to clear sensitive data will be optimized away C28636.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-message-l1-1-1 (introduced in Windows 8.1) See also."
807,GetPriorityClass,"Microsoft Build · May 19 – 22, 2025GetPriorityClass function (processthreadsapi.h) Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base priority level. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.GetMachineTypeAttributes Queries if the specified architecture is supported on the current system, either natively or by any form of compatibility or emulation layer. GetPriorityClass Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base.In this article, you'll discover how to write a utility called AssemblyBrowser, which is similar to the Unix ps tool. IntPtr MainWindowHandle Handle of the main window. string MainWindowTitle Title of the main window. bool PriorityBoostEnabled Direct call to the Win32 GetProcessPriorityBoost and SetProcessPriorityBoost APIs. ProcessPriorityClass.GetLogicalProcessorInformation Retrieves information about logical processors and related hardware. GetPriorityClass Retrieves the priority class for the specified process. GetProcessAffinityMask Retrieves a process affinity mask for the specified process and the system affinity mask for the system. SetPriorityClass Sets the priority class for the.If the calling process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS, the new... Use the GetPriorityClass function to determine the current priority class of a process and the SetPriorityClass function to change the priority class of a process. Processes that monitor the system, such as screen savers or applications that periodically.SetThreadPriority function (processthreadsapi.h) Sets the priority value for the specified thread. This val... All threads initially start at THREAD_PRIORITY_NORMAL. Use the GetPriorityClass and SetPriorityClass functions to get and set the priority class of a process. Use the GetThreadPriority function to get the priority value of a thread. Use.OpenProcess function (processthreadsapi.h) Opens an existing local process object. ...Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib DLL Kernel32.dll See also.GetMachineTypeAttributes Queries if the specified architecture is supported on the current system, either natively or by any form of compatibility or emulation layer. GetPriorityClass Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base.For a list of value... This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the.CreateProcessWithLogonW function (winbase.h) Creates a new process and its primary thread. This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see GetPriorityClass. If none of the priority class flags is specified, the priority class."
808,CallNamedPipeA,"Microsoft Build · May 19 – 22, 2025CallNamedPipeA function (winbase.h) Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. Syntax Parameters [in] lpNamedPipeName The pipe name. [in] lpInBuffer The data to be written to the pipe. [in] nInBufferSize The size of the write buffer, in.(Unicode) BuildCommDCBW Fills a spe... (Unicode) CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA) CheckNameLegalDOS8Dot3A Determines whether the specified name can be used to create a file on a FAT file system..To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dis... (Unicode) CallEnclave Calls a function within an enclave. CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (CallNamedPipeA).APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
809,AddFontResourceW,"Microsoft Build · May 19 – 22, 2025AddFontResourceW function (wingdi.h) The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application. To mark a font as private or not enumerable, use the AddFontResourceEx function. Syntax Parameters [in] unnamedParam1 A pointer to a.(ANSI) AddFontResourceExW The AddFontResourceEx function... Fonts added with the AddFontResourceEx function can be marked as private and not enumerable. (Unicode) AddFontResourceW The AddFontResource function adds the font resource from the specified file to the system font table. CFP_ALLOCPROC Client-provided callback function, used by.AddFontResourceA The AddFontResource function adds the font resource from the specified file to the system font table. (ANSI) AddFontResourceExA The AddFontRe... Fonts added with the AddFontResourceEx function can be marked as private and not enumerable. (Unicode) AddFontResourceW The AddFontResource function adds the font resource from the."
810,CreateIcon,"Microsoft Build · May 19 – 22, 2025CreateIcon function (winuser.h) Creates an icon that has the specified size, colors, and bit patterns. To create a colored icon at run time you can use the CreateIconIndirect function, which creates a icon based on the content of an ICONINFO structure. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the instance of the.However, the following example uses CreateIcon to create a custom monochrome icon at run-time, based on bitmap bitmasks; it is included to illustrate how the system interprets icon bitmap bitmasks. To create the icon, CreateIcon applies the following truth table to the AND and XOR bitmasks. AND bitmask XOR bitmask Display 0 0 Black 0 1 White 1 0.About Icons The system uses icons throughout the user interface to represent objects such as files, folders, shortcuts, applications, and documents. The icon functions enable applications to create, load, display, arrange, animate, and destroy icons. To retrieve the size o... The CreateIcon, CreateIconFromResourceEx, CreateIconIndirect, and.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. Icon Functions Name Description CopyIcon Copies the specified icon from another module to the current module. CreateIcon Creates an icon that has the specified size, colors, and bit patterns..Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..winuser.h header This header is used by multiple technologies. The CreateDialog macro uses the CreateDialogParam function. (Unicode) CreateIcon Creates an icon that has the specified size, colors, and bit patterns. CreateIconFromResource Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResource).CreateIcon Creates an icon that has the specified size, colors, and bit patterns. CreateIconFromResource Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResource) CreateIconFromResourceEx Creates an icon or cursor from resource... DrawIcon Draws an icon or cursor into the specified device context. DrawIconEx Draws.... : error LNK2019: unresolved external symbol __imp_CreateBitmap referenced in fu createIcon 1&gt;glfw3.lib(win32_window.obj) : error LNK2019: unresolved external symbol __imp_CreateRectRgn referenced in function updateFramebufferTransparency 1&gt;glfw3.lib(win32_window.obj) : error LNK2019: unresolved external symbol __imp_DeleteObject.GetIconInfo function (winuser.h) Retrieves information about the specified icon or cursor. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.ImageList_ReplaceIcon function (commctrl.h) Replaces an image with an icon or cursor. Remarks Because the system does not save hicon, you can destroy it after the function returns if the icon or cursor was created by the CreateIcon function. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported."
811,WriteProfileSectionW,"Microsoft Build · May 19 – 22, 2025WriteProfileSectionW function (winbase.h) Replaces the contents of the specified section in the Win.ini file with specified keys and values. If Win.ini uses Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters. WriteProfileSection deletes the existing keys and values for the named.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (AccessCheckByTypeAndAuditAlarmA) AccessCheckByTypeResultListAndAuditAlarmA Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread..To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplauncher.h iwscapi.h."
812,LoadResource,"Microsoft Build · May 19 – 22, 2025LoadResource is a function used in Windows applications to load a resource into memory after it has been found using the FindResource or FindResourceEx functions. The LoadResource function takes a resource handle, which is obtained from FindResource, and loads the resource data into memory for use by the application.The typical usage of LoadResource involves the following steps:It's important to note that memory associated with resources loaded through LoadResource will be released automatically when the module is unloaded.References:LoadResource function (libloaderapi.h) Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose executable file contains the resource. If hModule is NULL, the system loads the resource from the module that was.PackageResources.LoadResource(String) Method Definition Namespace: Microsoft.SqlServer.Configuration Assembly:Microsoft.SqlServer.Configuration.dll Loads the specified package resources. Parameters resId String The ID of the resource to load. Returns String The string that represents the package resources. Applies to. Loads the specified package.The LoadResource function uses the resource handle returned by FindResource to load the resource into memory. After an application loads a resource by using LoadResource, the system will unload the associated memory only when all references to its module are freed through FreeLibrary. An application can use FindResource and LoadResource to find.Image.loadResource(Int32) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Loads a resource from Ax32.exe. Parameters _id Int32 The ID of the resource that you want to load. Values of resources can be found in the Resources macro. Returns Int32 0 indicates success; otherwise, failure. Remarks The.FONT statement Defines the font with which the system will draw text in the dialog box. The font must have been previously loaded; for example, by calling the LoadResource function. pointsize The size of the font, in points. typeface The name of the typeface. Examples The following example demonstrates the use of the FONT statement: See also.PackageResources Class Definition Namespace: Microsoft.SqlServer.Configuration Assembly:Microsoft.SqlServer.Configuration.dll Provides methods for loading package resources. Inheritance Object PackageResources Methods LoadResource(String) Loads the specified package resources. Applies to. Provides methods for loading package resources. ..ITtsEngineSite.LoadResource(Uri, String) Method Definition Namespace: System.Speech.Synthesis.TtsEngine Assembly:System.Speech.dll Package:System.Speech v10.0.0-preview.3.25171.5 Source:TTSEngineTypes.cs Source:TTSEngineTypes.cs Source:TTSEngineTypes.cs Loads the resource at the specified URI. Parameters uri Uri The URI of the resource. mediaType.Back then, each resource was ... In Win32, LoadResource just looks up the address of a resource within an executable and lets normal demand paging take care of bringing the data into memory. In Win16, LoadResource had to find the resource in the file, allocate a segment of the appropriate size, and copy the resource data from the executable. When.FindResourceExW function (libloaderapi.h) Determines the location of the resource with the specified type, name, and language in the specified module. An application can use FindResourceEx to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to.FindResourceW function (libloaderapi.h) Determines the location of a resource with the specified type and name in the specified module. An application can use FindResource to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to LoadResource and then."
813,EnumFontFamiliesExA,"Microsoft Build · May 19 – 22, 2025EnumFontFamiliesExA function (wingdi.h) The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both. Syntax Parameters [in] hdc A handle to the device context from which to.EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (ANSI) EnumFontFamiliesExA The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumF... (ANSI).EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (ANSI) EnumFontFamiliesExA The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumF... (ANSI)."
814,GetMessageA,"Microsoft Build · May 19 – 22, 2025GetMessageA function (winuser.h) Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval. Unlike GetMessage, the PeekMessage function does not wait for a message to be posted before returning. Syntax Parameters [out] lpMsg Type: LPMSG A pointer to.ITfMessagePump::GetMessageA method (msctf.h) Obtains a message from the message queue and does not return until a message is obtained. Syntax Parameters [out] pMsg Pointer to a MSG structure that receives message data. [in] hwnd Handle to the window whose messages are obtained. ...alling [in] wMsgFilterMin Specifies the lowest message value.ITfMessagePump interface (msctf.h) The ITfMessagePump interface is impleme... ITfMessagePump::GetMessageA ITfMessagePump::GetMessageA method ITfMessagePump::GetMessageW ITfMessagePump::GetMessageW method ITfMessagePump::PeekMessageA ITfMessagePump::PeekMessageA method ITfMessagePump::PeekMessageW ITfMessagePump::PeekMessageW method Remarks If the.DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. GetMessage The GetMessage function.(ANSI) DialogBoxIndirectA Creates a modal dialog box from a dialog box template in memory. DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to.GetMessageA ITfMessagePump::GetMessageA method GetMessageW ITfMessagePump::GetMessageW method GetOwnerClsid ITfCompositionView::GetOwnerClsid method GetPageIndex The ITfCandidateListUIElement::GetPageIndex method returns the page index of the list. PeekMessageA ITfMessagePump::PeekMessageA method PeekMessageW ITfMessagePump::PeekMessageW method."
815,GetDCOrgEx,"Microsoft Build · May 19 – 22, 2025GetDCOrgEx function (wingdi.h) The GetDCOrgEx function retrieves the final translation origin for a specified device context (DC). The final translation origin specifies an offset that the system uses to translate device coordinates into client coordinates (for coordinates in an application's window). Syntax Parameters [in] hdc A handle to the DC.GetDC... GetDCEx The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDCOrgEx The GetDCOrgEx function retrieves the final translation origin for a specified device context (DC). GetDCPenColor The GetDCPenColor function retrieves the current pen color for the.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.Device Context Functions The following functions are used with device contexts. GetDCEx Retrieves a handle to a display device context for the client area of a specified window or for the entire screen. GetDCOrgEx Retrieves the final translation origin for a specified device context. GetDCPenColor Retrieves the current pen color for the specified.Performance Considerations and Best Practices This topic presents a set of best practices for using the Desktop Window Manager (DWM) APIs. Note that in Windows Vista and later versions of Windows, custom drawing only part of a top-level window will not provide the desired stale conte... APIs such as GetDCOrgEx can be used to determine certain."
816,SetMenuDefaultItem,"Microsoft Build · May 19 – 22, 2025SetMenuDefaultItem function (winuser.h) Sets the default menu item for the specified menu. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu to set the default item for. [in] uItem Type: UINT The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of fByPos..About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. Clicking a menu item opens a submenu or causes the application to carry out a command. When the user opens a submenu by. To retrieve and set the default item for a submenu, use the GetMenuDefaultItem and SetMenuDefaultItem functions. You.SetCursor Sets the cursor shape. SetCursorPos Moves the cursor to the specified screen coordinates. SetMenu Assigns a new menu to the specified window. SetMenuDefaultItem Sets the default menu item for the specified menu. SetMenuInfo Sets information for a specified menu. SetMenuItemBitmaps Associates the specified bitmap with a menu item. Whether.CMenu::MeasureItem Called by the framework to determine menu dimensions when an owner-drawn menu is created. CMenu::SetDefaultItem Sets the default menu item for the specified menu. CMenu::SetMenuContextHelpId Sets the help context ID to be associated with the menu. To change the attributes of existing ... CMenu::SetDefaultItem Sets the default.If the menu item opens a drop-down men... Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu. SetMenu Assigns a new menu to the specified window. SetMenuDefaultItem Sets the default menu item for the specified menu. SetMenuInfo Sets information for a specified menu. SetMenuItemBitmaps.GetMenuDefaultItem function (winuser.h) Determines the default menu item on the specified menu. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL....n This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDime GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu GetSystemMenu.Enable only these actions on the popup menu. Use SetMenuDefaultItem to set the default action based on dropDefault. Finally, take the action indicated by the user selection from the popup menu. DROPEFFECT_SCROLL Indicates that a drag scroll operation is about to occur or ... For more information on setting the default menu command, see.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
817,MapVirtualKeyW,"Microsoft Build · May 19 – 22, 2025MapVirtualKeyW function (winuser.h) Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. Note The winuser.h header defines MapVirtualKey as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor.(ANSI) MapVirtualKeyExA Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. (ANSI) MapVirtualKeyExW Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. (Unicode) MapVirtualKeyW Translates (maps) a....n _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LN unresolved external symbol __imp_ShowWindow 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_ToUnicode referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_MapVirtualKeyW referenced....or Windows Applic Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows.APIs from api-ms-win-crt-convert-l1-1-0.dll API Requirements __toascii Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atodbl Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atodbl_l Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atof_l Introduced into api-ms-win-crt-convert-l1-1-0.dll in."
818,CreateDirectoryExA,"Microsoft Build · May 19 – 22, 2025CreateDirectoryExA function (winbase.h) Creates a new directory with the attributes of a specified template directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. The new directory retains the other attributes of the specified template.(Unicode) CreateBoundaryDescriptorA The CreateBoundaryDescriptorA (ANSI) function (winbase.h) creates a boundary descriptor. CreateDirectory The CreateDirectory function (winbase.h) creates a new directory. CreateDirectoryExA Creates a new directory with the attributes of a specified template directory. (ANSI) CreateDirectoryExW Creates a new.IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS... CREATE_BIND_LINK_FLAGS These flags can be passed in to CreateBindLink to change the default bind link behavior to suit the needs of the user. DIRECTORY_FLAGS Defines the flags that can be used with the CreateDirectory2 function to specify how the directory should be created. FILE_INFO_BY_HANDLE_CLASS."
819,FreeDDElParam,"Microsoft Build · May 19 – 22, 2025FreeDDElParam function (dde.h) Frees the memory specified by the lParam parameter of a posted Dynamic Data Exchange (DDE) message. An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam value. This function frees the memory specified by the lParam parameter..For more information, see: Data Exchange dde.h contains the following programming interfaces: Functions DdeSetQualityOfService Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates. FreeDDElParam Frees the memory specified by the lParam parameter of a posted Dynamic.DDE applications must use PackDDElParam and UnpackDDElParam for all messages posted during a DDE conversation. Applications can also use the ReuseDDElParam and FreeDDElParam functions. ReuseDDElParam allows a DDE application to reuse a packed lParam parameter, helping reduce the number of memory reallocations the application must perform during a.The application must free the memory object specified by the lParam parameter by calling the FreeDDElParam function. [out] puiLo Type: PUINT_PTR A pointer to a variable that receives the low-order word of lParam. [out] puiHi Type: PUINT_PTR A pointer to a variable that receives the high-order word of lParam. Requirements Requirement Value Minimum.Dynamic Data Exchange This section provides guidelines for implementing dynamic data exchange for applications that cannot use the Dynamic Data Exchange Management Library (DDEML). A DDE conversation's quality of service lasts for the duration of the conversation; cal... FreeDDElParam Frees the memory specified by the lParam parameter of a posted.DDE Functions In this section DdeSetQualityOfService FreeDDElParam ImpersonateDdeClientWindow PackDDElParam ReuseDDElParam UnpackDDElParam. . | DDE Functions. /windows/win32/dataxchg/dynamic-data-exchange-functions.The application that receives a posted WM_DDE_ACK message must free the lParam parameter by using the FreeDDElParam function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Dde.h (include Windows.h) See also Reference.To free the global memory object, the server s... To free the object, the server should call the FreeDDElParam function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Dde.h (include Windows.h) See also Reference DDEPOKE.Find... (ANSI) FindAtomW Searches the local atom table for the specified character string and retrieves the atom associated with that string. (Unicode) FreeDDElParam Frees the memory specified by the lParam parameter of a posted Dynamic Data Exchange (DDE) message. An application receiving a posted DDE message should call this function after it.ReuseDDElParam function (dde.h) Enables an application to reuse a packed Dynamic Data Exchange (DDE) lParam parameter, rather than allocating a new packed lParam. Use ReuseDDElParam instead of FreeDDElParam if the lParam parameter will be reused in a responding message. Requirements Requirement Value Minimum supported client Windows 2000."
820,PeekMessageA,"Microsoft Build · May 19 – 22, 2025PeekMessageA function (winuser.h) Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist). Syntax Parameters [out] lpMsg Type: LPMSG A pointer to an MSG structure that receives message information. [in, optional] hWnd Type: HWND A handle to the window whose messages are.ITfMessagePump::PeekMessageA method (msctf.h) Obtains a message from the message queue and returns if no message is obtained. Syntax Parameters [out] pMsg Pointer to a MSG structure that receives message data. [in] hwnd Handle to the window whose messages are obtained. ... value is NULL, this method obtains messages for any window owned by the.MouseProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function whenever an application calls the GetMessage or PeekMessageA/PeekMessageW function and there is a mouse message to be processed. MouseProc is a placeholder for the.InSendMessageEx Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process). PeekMessageA Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist). (ANSI) PeekMessageW Dispatches.The system calls this function whenever an application calls the GetMessage or PeekMessageA/PeekMessageW function and there is a keyboard message (WM_KEYUP or WM_KEYDOWN to be processed. (An application called the PeekMessage function, specifying the PM_NOREMOVE flag.) wParam [in] Type: WPARAM The virtual-k... The system calls this function.This includes GetMessage, PeekMessageA/PeekMessageW, modal dialog box, and COM functions. Calling such functions may result in the thread not returning from GetMessage or WaitMessage when there are messages in the calling thread's message queue. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.ITfMessagePump interface (msctf.h) The ITfMessagePump interface is impleme... ITfMessagePump::GetMessageA ITfMessagePump::GetMessageA method ITfMessagePump::GetMessageW ITfMessagePump::GetMessageW method ITfMessagePump::PeekMessageA ITfMessagePump::PeekMessageA method ITfMessagePump::PeekMessageW ITfMessagePump::PeekMessageW method Remarks If the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print GetMsgProc function -description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function whenever the GetMessage or PeekMessageA/PeekMessageW.For example, a thread could use MsgWaitForMulti... The thread can use the GetMessage or PeekMessageA or PeekMessageW function to retrieve the input. When waiting for the states of all objects to be set to signaled, these multiple-object functions do not modify the states of the specified objects until the states of all objects have been set.PeekMessageA ITfMessagePump::PeekMessageA method PeekMessageW ITfMessagePump::PeekMessageW method Play ITfFnPlayBack::Play method Pop ITfDocumentMgr::Pop method PreserveKey ITfKeystrokeMgr::PreserveKey method ProcessLattice ITfFnLMInternal::ProcessLattice method Push ITfDocumentMgr::Push method QueryInsert The ITextStoreACP::QueryInsert method."
821,ReleaseSemaphore,"Microsoft Build · May 19 – 22, 2025ReleaseSemaphore is a function used in synchronization to increase the count of a semaphore object. When a thread has completed its task and no longer needs access to the shared resource protected by the semaphore, it calls ReleaseSemaphore to increment the semaphore's count. This action allows other waiting threads to proceed if the semaphore's count was previously at zero, indicating that the resource was unavailable.The count of the semaphore can never exceed its maximum value, and the ReleaseSemaphore function can specify how much to increase the count by. This mechanism is crucial for managing access to resources that have limited availability, ensuring that only a specified number of threads can access the resource at any given time.References:ReleaseSemaphore function (synchapi.h) Increases the count of the specified semaphore object by a specified amount. Syntax Parameters [in] hSemaphore A handle to the semaphore object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Semaphore Objects A semaphore object is a synchronization object that maintains a ... After initialization, you can use ReleaseSemaphore to increment the count to the maximum value. Yes No Provide product feedback | Get help at Microsoft.Using Semaphore Objects The following example uses a semaphore object to limit the number of threads that can perform a particular task. WaitForSingleObject decrements the semaphor... When a thread completes the task, it uses the ReleaseSemaphore function to increment the semaphore's count, thus enabling another waiting thread to perform the task..IHostSemaphore::ReleaseSemaphore Method Increases the count of the current IHostSemaphore instance by the specified amount. Remarks The CLR typically calls ReleaseSemaphore to notify the host that it has finished using a resource, passing a value of 1 for the lReleaseCount parameter. Header: MSCorEE.h Library: Included as a resource in MSCorEE.dll.OpenPrivateNamespace Opens a private namespace. Semaphore functions Semaphore function Description CreateSemaphore Creates or opens a named or unnamed semaphore object. CreateSemaphoreEx Creates or opens a named or unnamed semaphore object and returns a handle to the object. OpenSemaphore Opens an existing named semaphore object. ReleaseSemaphore.CreateSemaphoreExW function (synchapi.h) Creates or opens a named or unnamed semaphore object and returns a handle to the object. When the thread has finished, it calls the ReleaseSemaphore function, which increments the count of the semaphore object. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps].For more information, see the Print support app design guide. Eng-prefixed function Wi... EngDeleteSemaphore DeleteCriticalSection EngFindResource FindResource EngFreeModule FreeLibrary EngLoadModule LoadLibrary EngMultiByteToWideChar MultiByteToWideChar EngQueryLocalTime GetLocalTime EngReleaseSemaphore ReleaseSemaphore EngWideCharToMultiByte.IHostSemaphore Interface Represents the host's implementation of a semaphore for threading. Methods Method Description ReleaseSemaphore Method Increases the count of the current IHostSemaphore instance by the specified amount. Header: MSCorEE.h Library: Included as a resource in MSCorEE.dll .NET Framework Versions: Available since 2.0 See also.CreateSemaphoreExA function (winbase.h) Creates or opens a named or unnamed semaphore object and returns a handle to the object. The count is increased by a specified amount by calling the ReleaseSemaphore function. [in] lMaximumCount The maximum count for the semaphore object. When the thread has finished, it calls the ReleaseSemaphore function,.CQueue class [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMedia... For example: The class uses two semaphores to control queuing operations, a ""get"" semaphore and a ""put"" semaphore. The GetQueueObject method waits on the ""get"" semaphore (using the WaitForSingleObject function)."
822,IsCharAlphaW,"Microsoft Build · May 19 – 22, 2025IsCharAlphaW function (winuser.h) Determines whether a character is an alphabetical character. Syntax Parameters [in] ch Type: TCHAR The character to be tested. Return value Type: BOOL If the character is alphabetical, the return value is nonzero. Remarks Note The winuser.h header defines IsCharAlpha as an alias that automatically selects the ANSI.(Unicode) IS_INTRESOURCE Determines whether a value is an integer identifier for a resource. IsCharAlphaA Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel. (ANSI) IsCharAlphaNumericA Determines whether a character is.winuser.h header This header is used by multiple technologies. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. There are four types of."
823,GetClassInfoExW,"Microsoft Build · May 19 – 22, 2025GetClassInfoExW function (winuser.h) Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.(ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the applicatio... GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a.(ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo fun... (ANSI) GetClassInfoExW Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a."
824,mouse_event,"Microsoft Build · May 19 – 22, 2025The mouse_event function is used to synthesize mouse motion and button clicks in your application. However, it's important to note that this function has been superseded by the SendInput function, which is the recommended method for simulating mouse events in modern applications.To use mouse_event, you would typically call it with parameters that specify the type of mouse action (e.g., moving the mouse, clicking a button) and the coordinates on the screen where the action should occur. However, since mouse_event is outdated, it is advisable to use SendInput for new development.For more detailed information on how to implement mouse events in your application, you can refer to the relevant sections in the Microsoft documentation.References:mouse_event function (winuser.h) The mouse_event function synthesizes mouse motion and button clicks.The mouse_event function is used to synthesize mouse events by applications that need to do so.Each structure represents an event to be inserted into the keyboard or mouse input stream.These events are not interspersed with other keyboard or mouse input events inserted either by the user (with the keyboard or mouse) or by calls to keybd_event, mouse_event, or other calls to SendInput.A collection of utilities to expand the range of usage for the mouse and cursor.The system calls this function every time a new mouse input event is about to be posted into a thread input queue.Mouse Without Borders enables you to interact with other computers from the same keyboard and mouse, sharing clipboard contents and files between the machines.Learn about Blazor's event handling features, including event argument types, event callbacks, and managing default browser events.Used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.ReleaseCapture Releases the mouse capture from a window in the current thread and restores normal mouse input processing.This section describes how the system provides mouse input to your application and how the application receives and processes that input.MK_LBUTTON 0x0001 The left mouse button is down.MK_RBUTTON 0x0002 The right mouse button is down."
825,ExcludeClipRect,"Microsoft Build · May 19 – 22, 2025ExcludeClipRect function (wingdi.h) The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the specified rectangle. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical units, of the upper-left corner of the rectangle. [in] top The y-coordinate, in.Clipping Functions The following functions are used with clipping. Function Description ExcludeClipRect Creates a new clipping region that consists of the existing clipping region minus the specified rectangle. ExtSelectClipRgn Combines the specified region with the current clipping region using the specified mode. SetMetaRgn Intersects the.EqualRect The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners. ExcludeClipRect The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the specified rectangle. ExcludeUpdateRgn The.CDC::DrawFrameControl Draw a frame control. Escape calls made by an application are translated and sent to the device driver. CDC::ExcludeClipRect Creates a new clipping region that consists of the existing clipping region minus the specified rectangle. CDC::ExcludeUpdateRgn Prevents drawing within invalid areas of a window by excluding an updated.(Unicode) EnumMetaFile The EnumMetaFile function enumerates the records within a Windows-format ... Escape Enables an application to access the system-defined device capabilities that are not available through GDI. ExcludeClipRect The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the.2.3.2.1 EMR_EXCLUDECLIPRECT Record The EMR_EXCLUDECLIPRECT record excludes the specified rectangle from the current clipping region. Type (4 bytes): An unsigned integer that identifies this record type as EMR_EXCLUDECLIPRECT. This value is 0x0000001D. ...The result of the intersection is saved as the new current clippinThe lower and right edges.EMREXCLUDECLIPRECT structure (wingdi.h) The EMREXCLUDECLIPRECT and EMRINTERSECTCLIPRECT structures contain members for the ExcludeClipRect and IntersectClipRect enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum su... The EMREXCLUDECLIPRECT and.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). It is typically rectangular. Move the existing region by a specified offset by calling the OffsetClipRgn function. Exclude a rectangular part of the client area from the current clipping region by calling the ExcludeClipRect.2.3.5.2 META_EXCLUDECLIPRECT Record The META_EXCLUDECLIPRECT Record sets the clipping region in the playback device context to the existing clipping region minus the specified rectangle. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Bottom Right Top Left RecordSize (4 bytes): A 32-bit unsigned integer....0x0000000E, EMR_SETPIXELV = 0x0000000F, EMR_SETMAPPERFLAGS = 0x00000010, EMR_SETMAPMODE = 0x00000011, EMR_SETBKMODE = 0x00000012, EMR_SETPOLYFILLMODE = 0x00000013, EMR_SETROP2 = 0x00000014, EMR_SETSTRETCHBLTMODE = 0x00000015, EMR_SETTEXTALIGN = 0x00000016, EMR_SETCOLORADJUSTMENT = 0x00000017, EMR_SETTEXTCOLOR = 0x00000018, EMR_SETBKCOLOR =."
826,GetCommandLineA,"Microsoft Build · May 19 – 22, 2025The GetCommandLineA function is part of the Windows API and is used to retrieve the command line string for the current process in ANSI format. It provides the entire command line that was used to launch the application, which includes the executable name and any arguments that were passed.To use GetCommandLineA, you typically call the function without any parameters, and it returns a pointer to a null-terminated string that contains the command line. This string can then be parsed to extract individual arguments if needed.For applications developed with Visual Basic, the equivalent functionality can be accessed using the Command function, which returns the argument portion of the command line used to launch the application.References:GetCommandLineA function (processenv.h) Retrieves the command-line string for the current process. Security Remarks The command line returned by GetCommandLineA is a conversion of the Unicode command line to the 8-bit process code page. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported.LaunchActivatedEventArgs.Arguments Property Definition Namespace: Microsoft.UI.Xaml Edit Gets the arguments that are passed to the application during launch. You can retrieve command-line arguments for the current process by calling: [C#] Environment.GetCommandLineArgs() (requires full trust to execute) [C++] GetCommandLineA function.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (ANSI) F....Inheritance LaunchActivatedEventArgs Attributes ContractVersionAttribute MarshalingBehaviorAttribute Remarks ... You can retrieve command-line arguments for the current process by calling: [C#] Environment.GetCommandLineArgs() (requires full trust to execute) [C++] GetCommandLineA function (processenv.h) Properties Arguments Gets the arguments.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
827,getsockopt,"Microsoft Build · May 19 – 22, 2025getsockopt function (winsock2.h) The getsockopt function retrieves a socket option. Syntax Parameters [in] s A descriptor identifying a socket. [in] level The level at which the option is defined. The optname value must be a socket option defined within the specified level, or behavior is undefined. [out] optval A pointer to the buffer in which.getsockopt function (winsock.h) The getsockopt function retrieves a socket option. Syntax Parameters [in] s A descriptor identifying a socket. [in] level The level at which the option is defined. The optname value must be a socket option defined within the specified level, or behavior is undefined. [out] optval A pointer to the buffer in which the.Bluetooth and getsockopt Bluetooth uses the getsockopt function to query various parameters associated with the server channel or the connection. Use of getsockopt with Bluetooth has the following requirements: The s parameter of getsockopt must be a valid Bluetooth socket. The level parameter of getsockopt must be SOL_RFCOMM. For... Bluetooth.SO_BSP_STATE socket option The SO_BSP_STATE socket option returns the local address, local port, remote address, remote port, socket type, and protocol used by a socket. To perform this operation, call the getsockopt function with the following parameters. Remarks The getsockopt function called with the SO_BSP_STATE socket option retrieves the.SO... If this option is used on Windows Vista and later, the getsockopt and setsockopt functions fail with WSAEINVAL. This option should be set if the getpeername, getsockname, getsockopt, or setsockopt functions are to be used on the accepted socket. This option should be set if the getpeername, getsockname, getsockopt, setsockopt, or shutdown.LINGER structure (winsock2.h) The linge... The getsockopt function can be called with the optname parameter set to SO_LINGER to retrieve the current value of the linger structure associated with a socket. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.The getsockopt function can be called with the optname parameter set to SO_LINGER to retrieve the current value of the linger structure associated with a socket. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winsock.h.Os.GetsockoptTimeval(FileDescriptor, Int32, Int32) Method Definition Namespace: Android.Systems Assembly:Mono.Android.dll See getsockopt(2). Parameters fd FileDescriptor level Int32 option Int32 Returns StructTimeval Attributes RegisterAttribute Remarks See getsockopt(2).Only for use with option values that return a struct timeval such as.This extended error code can be different from the error code obtained from getsockopt when called with an optname parameter of SO_ERROR, which is socket-specific since WSAGetLastError is for all thread-specific sockets. Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps... The....g to a protocol name. getprotobynumber The getprotobynumber function (winsock.h) retrieves protocol information corresponding to a protocol number. getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and protocol. getservbyport The getservbyport function (winsock.h) retrieves."
828,GetCurrentDirectoryA,"Microsoft Build · May 19 – 22, 2025GetCurrentDirectory function (winbase.h) Retrieves the current directory for the current process. Syntax Parameters [in] nBufferLength The length of the buffer for the current directory string, in TCHARs. The buffer length must include room for a terminating null character. [out] lpBuffer A pointer to the buffer that receives the current directory."
829,GetCurrentProcessId,"Microsoft Build · May 19 – 22, 2025The GetCurrentProcessId function is used to retrieve the process identifier (PID) of the calling process. This identifier is unique for each process running in the system and can be used for various purposes, such as debugging or process management.To use the GetCurrentProcessId function, you typically call it without any parameters, and it returns the PID of the current process as a DWORD value. This function is useful when you need to obtain the identifier for the process in which your code is executing.References:GetCurrentProcessId function (processthreadsapi.h) Retrieves the process identifier of the calling process. Syntax Return value The return value is the process identifier of the calling process. Remarks Until the process terminates, the process identifier uniquely identifies the process throughout the system. Requirements Requirement Value Minimum.GetProcessId function (processthreadsapi.h) Retrieves the process identifier of the specified process. Requirements Requirement Value Minimum supported client Windows Vista, Windows XP with SP1 [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header processthreadsapi.h.Table of contents Exit focus mode Save Table of contents Add Edit... Syntax Parameters [out] Id Receives the engine process ID for the current process. Requirements Requirement Value Target Platform Desktop Header dbgeng.h (include Dbgeng.h) Feedback Was this page helpful. The GetCurrentProcessId method returns the engine process ID for the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print IDebugSystemObjects2::GetCurrentProcessId method (dbgeng.h) The GetCurrentP... Syntax Parameters [out] Id Receives the engine process ID for the current process. The GetCurrentProcessId method returns the engine process ID for the.Table of contents Exit focus mode Save Table of contents Add Edit Share v... Syntax Parameters [out] Id Receives the engine process ID for the current process. Return value This method may also return error values. Yes No Provide product feedback | Get help at Microsoft Q&A. The GetCurrentProcessId method returns the engine process ID for the.Getting the Session ID of the Current Process [The memory addresses specified by this example code may change in future releases of Windows. To ensure that your application will continue to run correctly in the future, your application must call GetCurrentProcessId and then ProcessIdToSessionId instead of the following sample code.]. The following.Table of contents Exit focus mode Save Table of contents Add Edit... Syntax Parameters [out] Id Receives the engine process ID for the current process. Requirements Requirement Value Target Platform Desktop Header dbgeng.h (include Dbgeng.h) Feedback Was this page helpful. The GetCurrentProcessId method returns the engine process ID for the.FlushProcessWriteBuffers Flushes the write queue of each processor that is running a thread of the current process. GetCurrentProcess Retrieves a pseudo handle for the current process. GetCurrentProcessId Retrieves the process identifier of the calling process. GetCurrentProcessorNumber Retrieves the number of the processor the current thread was.GetCurrentProcess Retrieves a pseudo handle for the current process. GetCurrentProcessId Retrieves the process identifier of the calling process. GetCurrentProcessorNumber Retrieves the number of the processor the current thread was running on during the call to this function. IsWow64Process2 Determines whether the specified process is running.The ... The CreateProcess function also returns an identifier that uniquely identifies the process throughout the system. A process can use the GetCurrentProcessId function to get its own process identifier (also known as the process ID or PID). The identifier is valid from the time the process is created until the process has been terminated. A."
830,CreateRectRgn,"Microsoft Build · May 19 – 22, 2025CreateRectRgn function (wingdi.h) The CreateRectRgn function creates a rectangular region. Syntax Parameters [in] x1 Specifies the x-coordinate of the upper-left corner of the region in logical units. [in] y1 Specifies the y-coordinate of the upper-left corner of the region in logical units. [in] x2 Specifies the x-coordinate of the lower-right.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreatePolyPolygonRgn Creates a region consisting of a series of polygons. CreateRectRgn Creates a rectangular region. CreateRectRgnIndirect Creates a rectangular region..Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region.CRgn Class Encapsulates a Windows graphics device interface (GDI) region. Syntax Members Public Constructors Name Description CRgn::CRgn Constructs a CRgn object. Remarks Unlike CreateRectRgn, however, it does not a... This means that the CRgn object must already have been initialized with a valid Windows region before calling SetRectRgn. Use this.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.Changes in the Programming Model The following sections describe several ways that programming with Windows GDI+ is different from programming with Windows Graphics Device Interface (GDI). Constructing Regions GDI provides several functions for creating regions: CreateRectRgn, CreateEllpticRgn, CreateRoundRectRgn, CreatePolygonRgn, and.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. CreatePolyPolygonRgn The.GetRegionData function (wingdi.h) The GetRegionData function fills the specified buffer with data describing a region. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,.ExtCreateRegion function (wingdi.h) The ExtCreateRegion function creates a region from the specified region and transformation data. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include."
831,lstrcmpiA,"Microsoft Build · May 19 – 22, 2025lstrcmpiA function (winbase.h) Compares two character strings. The comparison is not case-sensitive. To perform a comparison that is case-sensitive, use the lstrcmp function. Syntax Parameters [in] lpString1 Type: LPCTSTR The first null-terminated string to be compared. [in] lpString2 Type: LPCTSTR The second null-terminated string to be compared..(LookupIconIdFromDirectoryEx) lstrcatA Appends one string to another.Warning  Do not use. (ANSI) lstrcatW Appends one string to another.Warning  Do not use. (Unicode) lstrcmpA Compares two character strings. (ANSI) lstrcmpiA Compares two character strings. (ANSI) lstrcmpiW Compares two character strings. (Unicode) lstrcmpW Compares two character.(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA."
832,CreateSemaphoreA,"Microsoft Build · May 19 – 22, 2025CreateSemaphoreA function (winbase.h) Creates or opens a named or unnamed semaphore object. To specify an access mask for the object, use the CreateSemaphoreEx function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.CreateProcessWithTok... The new process runs in the security context of the specified token. It can optionally load the user profile for the specified user. CreateSemaphoreA Creates or opens a named or unnamed semaphore object. (CreateSemaphoreA) CreateSemaphoreExA Creates or opens a named or unnamed semaphore object and returns a handle to the.The new process runs in the security context of the specified token. It can optionally load the user profile for the specified user. CreateSemaphoreA Creates or opens a named or unnamed semaphore object. (CreateSemaphoreA) CreateSemaphoreExA Creates or opens a named or unnamed semaphore object and returns a handle to the object..CoTaskMemRealloc Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoUninitialize Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoUnmarshalInterface Introduced into api-ms-win-core-com-l1-1-1.dll in."
833,CreateMutexW,"Microsoft Build · May 19 – 22, 2025CreateMutexW function (synchapi.h) Creates or opens a named or unnamed mutex object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista,.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a sli... (ANSI) CreateMutexExW Creates or opens a named or unnamed mutex object and returns a handle to the object. (Unicode) CreateMutexW Creates.Find a sample for the API you're interested in You can use Microsoft Visual Studio to search an entire repo's source code to see whether the usage of a particular Windows API is being demonstrated. Be careful of checking Match whole word if the API can be called in various forms—for example, CreateMutex, CreateMutexA, and CreateMutexW. The Windows.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessar... ReplaceFileW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240..AddSnapshotToRecove... AddToSnapshotSet The AddToSnapshotSet method adds an original volume or original remote file share to the shadow copy set. AddVDisk Creates a virtual disk object for an existing virtual disk file. Advise Registers the caller's IVdsAdviseSink interface with VDS so that the caller receives notifications from the VDS service.."
834,GetScrollInfo,"Microsoft Build · May 19 – 22, 2025The GetScrollInfo function is used to retrieve the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). This function is essential for applications that need to manage the scrolling behavior of content within a window.To use GetScrollInfo, an application typically calls this function with a handle to the scroll bar and a pointer to a SCROLLINFO structure that will receive the information about the scroll bar. The application can then use the retrieved information to adjust the content displayed in the window accordingly.References:GetScrollInfo function (winuser.h) The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). Syntax Parameters [in] hwnd Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the.VsTextViewClass.GetScrollInfo(Int32, Int32, Int32, Int32, Int32) Method Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Returns the core text editor's scroll bar settings for the.FlatSB_GetScrollInfo function (commctrl.h) Gets the information for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard GetScrollInfo function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. Remarks Note  Flat scroll bar functions are.IVsTextView.GetScrollInfo(Int32, Int32, Int32, Int32, Int32) Method Definition Namespace: Microsoft.VisualStudio.TextManager.Interop Assembly:Microsoft.VisualStudio.TextManager.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Returns the core text editor's scroll bar settings for the.SBM_GETSCROLLINFO message The SBM_GETSCROLLINFO message is sent to retrieve the parameters of a scroll bar. Instead, they should use the GetScrollInfo function. Applications which implement a custom scroll bar control must respond to th... Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported.When provided with a scroll bar, the user can scroll a data object in the client area to bring into view the portions of the object that extend beyond the borders of the window. Overviews Topic Contents About Scroll Bars A scroll bar consists of a shaded shaft with an arrow button at each end and a scroll b... GetScrollInfo The GetScrollInfo.You can change the range at any time. You can use the SetScrollInfo function to set the range values, and the GetScrollInfo function to retrieve the current range values. An application typically adjusts the scroll range to convenient integers, making it easy to translate the scroll box position into a value corresponding to the data object to be.Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. ...ts Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum.CWindow Class This class provides methods for manipulating a window. Important This class and its members cannot be used in applications that execute in the Windows Runtime. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindo... CWindow::GetParent Retrieves the immediate parent window. CWindow::GetScrollInfo."
835,LocalShrink,"Microsoft Build · May 19 – 22, 2025We couldn't find any results matching ""LocalShrink""In Premium and Business Critical service tiers, if the transaction log becomes large, it might significantly contribute to local storage consumption toward the maximum local storage limit. If local storage consumption is close to the limit, customers might choose to shrink transaction log using the DBCC SHRINKFILE command as shown in the following.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Shrink a basic volume You can decrease the space used by primary partitions and logical drives by shrinking them into adjacent, contiguous space on the same disk. For example, you might discover that you need another partition but don't.Resize-VHD Module: Hyper-V Resizes a virtual hard disk. Syntax Description The Resize-VHD cmdlet changes the maximum physical size of a virtual hard disk. The shrink operation fails if it would shrink the virtual disk to less than its minimum size (available through the VHDX object's MinimumSize property). Type:SwitchParameter Aliases:wi.FSCTL_SHRINK_VOLUME IOCTL (winioctl.h) Signals that the volume is to be prepared to perform the shrink operation, the shrink operation is to be committed, or the shrink operation is to be terminated. In Windows 8 and Windows Server 2012, this code is supported by the following tech... Signals that the volume is to be prepared to perform the shrink.Selection.Shrink Method Definition Namespace: Microsoft.Office.Interop.Word Assembly:Microsoft.Office.Interop.Word.dll Shrinks the selection to the next smaller unit of text. Remarks The progression of textual units is as follows: entire document, section, paragraph, sentence, word, insertion point. Applies to. Shrinks the selection to the next.IVdsVolume::Shrink method (vds.h) [Beginning with Windows 8 and Windows Server 2012, the Virtual Disk Service COM interface is superseded by the Windows Storage Management API.]. Reduces the size of the volume and all plexes, and returns the released extents to free space. Syntax Parameters [in] ullNumberOfBytesToRemove The size of the reduction.Selection.Shrink method (Word) Shrinks the selection to the next smaller unit of text. Syntax expression. Shrink expression A variable that represents a Selection object. Remarks The unit progression for this method is as follows: entire document, section, paragraph, sentence, word, insertion point. Example This example... Please see Office VBA.Font.Shrink method (Word) Decreases the font size to the next available size. Syntax expression. Shrink expression A variable that represents a Font object. Remarks If the selection or range contains more than one font size, each size is decreased to the next available setting. Example This example inserts a line of increasi... Please see Office.FontClass.Shrink Method Definition Namespace: Microsoft.Office.Interop.Word Assembly:Microsoft.Office.Interop.Word.dll Implements Shrink() Applies to. Learn more about the Microsoft.Office.Interop.Word.FontClass.Shrink in the Microsoft.Office.Interop.Word namespace.. /dotnet/api/microsoft.office.interop.word.fontclass.shrink.Font.Shrink method (Publisher) Decreases the font size to the next available size. If the selection or range contains more than one font size, each size is decreased to the next available setting. Syntax expression.Shrink expression A variable that represents a Font object. Remarks Applying the Shrink method to text that is already the smallest."
836,ConvertThreadToFiber,"Microsoft Build · May 19 – 22, 2025ConvertThreadToFiber function (winbase.h) Converts the current thread into a fiber. You must convert a thread into a fiber before you can schedule other fibers. Syntax Parameters [in, optional] lpParameter A pointer to a variable that is passed to the fiber. The fiber can retrieve this data by using the GetFiberData macro. Return value If the.ConvertFiberToThread function (winbase.h) Converts the current fiber into a thread. Syntax Return value If the function succeeds, the return value is nonzero. To get extended error information, call GetLastError. Remarks The function releases the resources allocated by the ConvertThreadToFiber function. After calling this function, you cannot call.(Unicode) ConvertFiberToThread Converts the current fiber into a thread. ConvertThreadToFiber Converts the current thread into a fiber. You must convert a thread into a fiber before you can schedule other fibers. (ConvertThreadToFiber) ConvertThreadToFiberEx Converts the current thread into a fiber. You must convert a thread into a fiber before.ConvertFiberToThread Converts the current fiber into a thread. ConvertThreadToFiber Converts the current thread into a fiber. You must convert a thread into a fiber before you can schedule other fibers. (ConvertThreadToFiber) ConvertThreadToFiberEx Converts the current thread into a fiber. You must convert a thread into a fiber before you can.Before scheduling the first fiber, call the ConvertThreadToFiber function to create an area in which to save fiber state information. The stored state information for this fiber includes the fiber data passed as an argument to ConvertThreadToFiber. The CreateFiber function is used to create a new fiber from an existing fiber; the call requires the.Function Description ConvertFiberToThread Converts the current fiber into a thread. ConvertThreadToFiber Converts the current thread into a fiber. ConvertThreadToFiberEx Converts the current thread into a fiber. CreateFiber Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address. Obsolete.Remarks The CreateFiber and ConvertThreadToFiber functions return the fiber address when the fiber is created. The GetCurrentFiber macro... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winnt.h.GetFiberData function (winnt.h) Retrieves the fiber data associated with the current fiber. Syntax Return v... Remarks The fiber data is the value passed to the CreateFiber or ConvertThreadToFiber function in the lpParameter parameter. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported.IsThreadAFiber function (fibersapi.h) Determines whether the current thread is a fiber. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2008 [desktop apps | UWP apps] Target Platform Windows Header fibersapi.h Library Kernel32.lib DLL Kernel32.dll See also.CreateFiber function (winbase.h) Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. Before a thread can schedule a fiber using the SwitchToFiber function, it must call the ConvertThreadToFiber function so there is a fiber associated with the thread.."
837,WSAStartup,"Microsoft Build · May 19 – 22, 2025WSAStartup is a function that initializes the use of the Windows Sockets DLL (WS2_32.dll) by a process. It must be called before any other Winsock functions are used. The function takes two parameters: a version request and a pointer to a WSADATA structure that will receive information about the Windows Sockets implementation.To use WSAStartup, you typically follow these steps:If WSAStartup returns a non-zero value, it indicates a failure in initializing Winsock.References:WSAStartup function (winsock.h) The WSAStartup function initiates use of the Winsock DLL by a process. Syntax Parameters [in] wVersionRequired The highest version of Windows Sockets specification that the caller can use. The high-order byte specifies the minor ver... Otherwise, it returns one of the error codes listed below. The WSAStartup.WSAStartup function (winsock2.h) The WSAStartup function initiates use of the Winsock DLL by a process. Syntax Parameters [in] wVersionRequested The highest version of Windows Sockets specification that the caller can use. The high-order byte specifies the minor v... Otherwise, it returns one of the error codes listed below. The WSAStartup.Call WSAStartup and return its value as an integer and check for errors. The WSAStartup function is called to initiate use of WS2_32.dll. The WSADATA structure contains information about the Windows Sockets implementation. The MAKEWORD(2,2) parameter of WSAStartup makes a request for version 2.2 of Winsock on the system, and sets the passed.ioctlsocket function (winsock.h) The ioctlsocket function controls the I/O mode of a socket. Otherwise, a value of SOC... Error code Meaning WSANOTINITIALISED A successful WSAStartup call must occur before using this function. WSAENETDOWN The network subsystem has failed. Here are the supported commands to use in the cmd parameter and their.Winsock NSP Reference Links This topic provides you with useful links to topics about the Windows Sockets Functions and Windows Sockets Structures. The following list identifies links to topics about the Windows Sockets Functions: WSACleanup WSAGetLastError WSANSPIoctl WSALookupServiceBegin WSALookupServiceEnd WSALookupServiceNext WSASetService.WSACreateEvent function (winsock2.h) The WSACreateEvent function creates a new event object. Syntax Return value If no... To get extended error information, call WSAGetLastError. Error code Meaning WSANOTINITIALISED A successful WSAStartup call must occur before using this function. WSAENETDOWN The network subsystem has failed. Windows Sockets 2.Note  An application can call the WSAGetLastError function to determine the extended error code for other Windows sockets functions as is normally done in Windows Sockets even if the WSAStartup function fails or the WSAStartup function was not called to properly initialize Windows Sockets before calling a Windows Sockets function. The.Note  An application can call the WSAGetLastError function to determine the extended error code for other Windows sockets functions as is normally done in Windows Sockets even if the WSAStartup function fails or the WSAStartup function was not called to properly initialize Windows Sockets before calling a Windows Sockets function. The.WSADATA structure (winsock.h) The WSADATA structure contains information about the Windows Sockets implementation. This is the same value as the wVersion member when the version requested in the wVersionRequested parameter passed to the WSAStartup function is the highest version of the Windows Sockets specification t... Remarks The WSAStartup.WSADATA structure (winsock2.h) The WSADATA structure contains information about the Windows Sockets implementation. This is the same value as the wVersion member when the version requested in the wVersionRequested parameter passed to the WSAStartup function is the highest version of the Windows Sockets specification ... Remarks The WSAStartup."
838,ChangeDisplaySettingsA,"Microsoft Build · May 19 – 22, 2025ChangeDisplaySettingsA function (winuser.h) The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode. To change the settings of a specified display device, use the ChangeDisplaySettingsEx function. Note  Apps that you design to target Windows 8 and later can no longer query or set display.ChangeClipboardChain Removes a specified window from the chain of clipboard viewers. ChangeDisplaySettingsA The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExA The ChangeDisplaySettingsEx function changes the settings of the specified display device.CFP_ALLOCPROC Client-provided callback function, used by CreateFontPackage and MergeFont. CFP_FREEPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to fre... CFP_REALLOCPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to reallocate memory when the size of an allocated."
839,lstrcmpW,"Microsoft Build · May 19 – 22, 2025lstrcmpW function (winbase.h) Compares two character strings. The comparison is case-sensitive. To perform a comparison that is not case-sensitive, use the lstrcmpi function. Syntax Parameters [in] lpString1 Type: LPCTSTR The first null-terminated string to be compared. [in] lpString2 Type: LPCTSTR The second null-terminated string to be compared..MNLS_lstrcmpW Applies to: Outlook 2013 | Outlook 2016 Compares two Unicode strings. Parameters lpString1 [in] Pointer to the first Unicode string to compare. lpString2 [in] Pointer to the second Unicode string to compare. Remarks MNLS_lstrcmpW performs a comparison by calling MNLS_CompareStringW with a locale of GetUserDefaultLCID, 0 for flags,.(ANSI) lstrcatW Appends one str... (Unicode) lstrcmpA Compares two character strings. (ANSI) lstrcmpiA Compares two character strings. (ANSI) lstrcmpiW Compares two character strings. (Unicode) lstrcmpW Compares two character strings. (Unicode) lstrcpyA Copies a string to a buffer. (ANSI) lstrcpynA Copies a specified number of characters from a....adAdviseSink LAUNCHWIZARDENTRY IsBadBoundedStringPtr LPropCompareProp LPFNBUTTON MAPIAdminProfiles LpValFindProp MAPIAllocateMore MAPIAllocateBuffer MAPIDeInitIdle MAPICrashRecovery MAPIGetDefaultMalloc MAPIFreeBuffer MAPIInitIdle MAPIInitialize MAPIOFFLINE_AGGREGATEINFO MAPILogonEx MAPIOpenFormMgr MAPIOFFLINE_CREATEINFO MAPIReallocateBuffer.(ANSI) GlobalFindAtomW Searches the global atom table for the specified charac... (ANSI) GlobalGetAtomNameW Retrieves a copy of the character string associated with the specified global atom. (IsBadStringPtrA) IsBadStringPtrW Verifies that the calling process has read access to the specified range of memory. (IsBadString. (Unicode) lstrcatA."
840,MenuItemFromPoint,"Microsoft Build · May 19 – 22, 2025MenuItemFromPoint function (winuser.h) Determines which menu item, if any, is at the specified location. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window. [in] hMenu Type: HMENU A handle to the.IsMenu Determines whether a handle... LoadMenu Loads the specified menu resource from the executable (.exe) file associated with an application instance. LoadMenuIndirect Loads the specified menu template in memory. MenuItemFromPoint Determines which menu item, if any, is at the specified location. ModifyMenu Changes an existing menu item. This.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar,.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
841,OpenSemaphoreW,"Microsoft Build · May 19 – 22, 2025OpenSemaphoreW function (synchapi.h) Opens an existing named semaphore object. Syntax Parameters [in] dwDesiredAccess The access to the semaphore object. Remarks The OpenSemaphore function enables multiple processes to open handles of the same semaphore object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lo... (CreateSemaphoreExW) CreateSemaphoreW Creates or opens a named or unnamed semaphore object. (Unicode) OpenMutexW.A process can specify the name of a semaphore object in a call to the [OpenSemaphore](/windows/win32/api/synchapi/nf-synchapi-opensemaphorew) or CreateSemaphore function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later."
842,GetMenuState,"Microsoft Build · May 19 – 22, 2025GetMenuState function (winuser.h) Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu. Note  The GetMenuState function has been superseded by the GetMenuItemInfo. You can still use GetMenuState, however, if you do not need any of the.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. CMenu::GetMenuItemID Obtains the menu-item identifie... CMenu::GetMenuItemInfo Retrieves information about a menu item. CMenu::GetMenuState Returns the status of the specified menu item or the number of.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. You can set a menu item's check mark attribute ... You can use the GetMenuState function to determine whether a menu item is currently selected or cleared. Instead of CheckMenuItem and GetMenuState, you can use the GetMenuItemInfo and.Menus and Other Resources Overview of the Menus and Other Resources technology. To dev... (Unicode) GetMenuItemRect Retrieves the bounding rectangle for the specified menu item. GetMenuState Retrieves the menu flags associated with the specified menu item. GetMenuStringA Copies the text string of the specified menu item into the specified buffer..Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.Ge... GetMenuItemInfo Retrieves information about a menu item. GetMenuItemRect Retrieves the bounding rectangle for the specified menu item. GetMenuState Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu. GetMenuString Copies the text.(ANSI) AppendMenuW Ap... CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a radio item. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem,."
843,LoadLibraryExW,"Microsoft Build · May 19 – 22, 2025LoadLibraryExW function (libloaderapi.h) Loads the specified module into the address space of the calling process. If no flags are specified, the behavior of this function is identical to that of the LoadLibrary function. If you are planning to access only data or resources in the DLL, use LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or.From the March 2002 issue of MSDN Magazine Windows 2000 Loader What Goes On I... All Paths Lead to LoadLibraryExW There are several ways to get to LoadLibraryExW. For example, LoadTypeLibEx and CoLoadLibrary in the COM universe eventually call LoadLibraryExW. The two most familiar routes to LoadLibraryExW are LoadLibraryA and LoadLibraryW..libloaderapi.h header This header is used by multiple technologies. ... (LoadLibraryExA) LoadLibraryExW Loads the specified module into the address space of the calling process. (LoadLibraryExW) LoadLibraryW Loads the specified module into the address space of the calling process. (LoadLibraryW) LoadResource Retrieves a handle that can be used to.Under the Hood: New Vectored Exception Handling in Windows XP New Vectored Exception Handling in Windows XP Matt Pietrek Download the code for this article:Hood0109.exe (67KB) Browse the code for. In addition, the function locates the address of LoadLibraryExW in KERNEL32.DLL, and sets a breakpoint at its first in... You may be wondering why I.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.SignerCertificate Status Path 745A64E580C00EE694639E92FC9C8AC1BEAC5E5D Valid mswsock.dll I tried both &quot;mswsock.dll&quot; and the absolute path, neither worked.| Try calling SetProcessMitigationPolicy function with ProcessSignaturePolicy and.PFN_FWDELETEDYNAMICKEYWORDADDRESS0 callback function (netfw.h) Function pointer type of the entry point in the service that you call to delete the dynamic keyword address with the specified ID. Use the LoadLibraryExW/GetProcAddress pattern for calling this function. When you call GetProcAddress, pass a handle to the firewallapi.dll module, and.This is what i see in setupact.log: 2021-12-14 16:20:56, Error [0x08085f] MIG MigHost: CMigPluginSurrogate::LoadAndRegisterServerInThreadContext: LoadLibraryExW(C:\$WINDOWS.~BT\NewOS\Windows\system32\migration\scmdmigplugin.dll, LOAD_WITH_ALTERED_SEARCH_PATH) failed gle=0x7f.[gle=0x0000007f] 2021-12-14 16:20:56, Info MIG MigHost:.PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0 callback function (netfw.h) Function pointer type of the entry point in the service that you call to enumerate dynamic keyword addresses by type. You can request a particular subset of objects based on the enumeration flags passed in. Note A ... Use the LoadLibraryExW/GetProcAddress pattern for calling this....ind __processing_throw _purecall __report_gsfailure __RTDynamicCast _SetWinRTOutOfMemoryExceptionCallback __std_exception_copy __std_exception_destroy __std_terminate __std_type_info_compare __std_type_info_destroy_list __std_type_info_hash __std_type_info_name __telemetry_main_invoke_trigger __telemetry_main_return_trigger __unDName."
844,GetWindowLongW,"Microsoft Build · May 19 – 22, 2025GetWindowLongW function (winuser.h) Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory. Note  If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on.(Unicode) GetClassLongW Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (GetClassNameA) GetCla... (RegisterClassW) RegisterShellHookWindow Registers a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications. (ANSI).(GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. (GetClassNameW) GetClassWord Retrieves the 16-bit (WORD) value at the specified offset into the extra class.This is where I see all the Linker Errors: Build started... 1&gt;------ Build started: Project: NovaForge, Configuration: Debug x64 ------ 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_TranslateMessage referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external."
845,SelectClipPath,"Microsoft Build · May 19 – 22, 2025SelectClipPath function (wingdi.h) The SelectClipPath function selects the current path as a clipping region for a device context, combining the new region with any existing clipping region using the specified mode. ...e device context of the path. [in] mode The way to use The SelectClipPath function selects the current path as a clipping region.RectVisible Determines whether any part of the specified rectangle lies within the clipping region of a device context. SelectClipPath Selects the current path as a clipping region for a device context, combining the new region with any existing clipping region by using the specified mode. SelectClipRgn Selects a region as the current clipping.EMRSELECTCLIPPATH structure (wingdi.h) Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records. Syntax Members emr The base structure for all reco... Contains parameters for the SelectClipPath, SetBkMode, SetMapMode,.Clip Paths and Graphic Effects An application can use clipping and paths to create special graphic effects. Note Before graphics device interface (GDI) adds text created with a bitmapped font to a path, it converts the font to an outline or vector font. An application creates a clip path by generating a path bracket and then calling the.CDC::ScaleWindowExt Modifies the window extents relative to the current values. CDC::ScrollDC Scrolls a rectangle of bits horizontally and vertically. CDC::SelectClipPath Selects the current path as a clipping region for the device context, combining the new region with any existing clipping region by using the specified mode. CDC::SelectClipRgn.When the application retrieves a display device context using the BeginPaint, GetDC, or GetDCEx function, the system sets the clipping region for the device context to the intersection of the visible region and the update region. Applications can change the clipping region by using functions such as SetWindowRgn, SelectClipPath and SelectClipRgn,.Clip Paths Like a clipping region, a clip path is another graphics object that an application can select into a device context. Unlike a clipping region, a clip ... For more information about paths and path brackets, see Paths. After the path is created, it can be converted to a clip path by calling the SelectClipPath function, identifying a.2.3.2.5 EMR_SELECTCLIPPATH Record The EMR_SELECTCLIPPATH record sets the current clipping region in the playback device context to the current clipping region combined with current path bracket. Fields not specified in this section are specified in section 2.3.2. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 ... The EMR_SELECTCLIPPATH record.Conversion of Paths to Regions An application can convert a path into a region by calling the PathToRegion fu... Like SelectClipPath, PathToRegion is useful in the creation of special graphics effects. For example, there are no functions that allow an application to offset a path; however, there is a function that enables an application to offset.EMR_SELECTOBJECT: This record selects an object in the playback device context, which is identifie... EMR_SELECTPALETTE: This record selects a LogPalette object (section 2.2.17) into the playback device context, identifying it by its index in. EMR_ENDPATH: This record closes an open path bracket and selects the path into the playback device."
846,GetProcessWorkingSetSize,"Microsoft Build · May 19 – 22, 2025GetProcessWorkingSetSize function (memoryapi.h) Retrieves the minimum and maximum working set sizes of the specified process. Syntax Parameters [in] hProcess A handle to the process whose working set sizes will be obtained. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information,.Process Working Set The working set of a program is a collection of those pages in its virtual address space that have been recently referenced. To get the requested minimum and maximum sizes of the working set for your application, call the GetProcessWorkingSetSize function. Related topics Memory Performance Information Working Set. The working.GetMemoryErrorHandlingCapabilities Gets the memory error handling capabilities of the system. GetProcessWorkingSetSize Retrieves the minimum and maximum working set sizes of the specified process. (GetProcessWorkingSetSize) GetProcessWorkingSetSizeEx Retrieves the minimum and maximum working set sizes of the specified process..SetProcessWorkingSetSize function (memoryapi.h) Sets the minimum and maximum working set sizes for the specified process. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header memoryapi.h Library onecore.lib DLL Kernel32.dll See also.Small Working Set Smaller wor... The process working set is the closest metric the operating system directly provides for measuring locality of reference. To set the upper and lower limits of the working set, use SetProcessWorkingSetSize. To get the upper and lower limits of the working set, use GetProcessWorkingSetSize. To view the size of the.GetProcessWorkingSetSize Retrieves the minimum and maximum working set sizes of the specified process. SetProcessShutdownParameters Sets shutdown paramete... SetProcessWorkingSetSize Sets the minimum and maximum working set sizes for the specified process. SetProcessWorkingSetSizeEx Sets the minimum and maximum working set sizes for the specified."
847,CreateFileMappingA,"Microsoft Build · May 19 – 22, 2025CreateFileMappingA function (winbase.h) Creates or opens a named or unnamed file mapping object for a specified file. ...A handle to the file from which to create a file mappinIn this scenario, CreateFileMapping creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system..Creating a File Mapping Object The first step in mapping a file is to open the file by calling the CreateFile function. To ensure that other processes cannot write to the portion of the file that is mapped, you should open the file with exclusive access. In addition, the file handle should remain open until the process no longer needs the file.File mapp... Function Description CreateFileMappingA Creates or opens a named or unnamed file-mapping object for a specified file. CreateFileMappingW Creates or opens a named or unnamed file-mapping object for a specified file. CreateFileMappingFromApp Creates or opens a named or unnamed file-mapping object for a specified file from a Windows.(CreateFiber) CreateFiberEx Allocates a fiber object, assigns it a stack, and sets up executi... (CreateFiberEx) CreateFileMappingA Creates or opens a named or unnamed file mapping object for a specified file. (CreateFileMappingA) CreateFileMappingNumaA Creates or opens a named or unnamed file mapping object for a specified file and specifies the.Describes the usage of writeable memory mapped files in the Microsoft Game Development Kit (GDK).Sets a configuration setting for XMem.Hi, I have a publisher and subscriber kind of a project. I am using CreateFileMappingW API to create a shared memory. But after 30 to 40 Iterations, when Publisher is trying to map to the existing Shared memory using CreateFileMappingW API, the API is creating a new Shared memory. ...ted path */ if (access(keyFilePath, F_OK) == -1) {.... mitigation are: LoadLibraryA LoadLibraryW LoadLibraryExA LoadLibraryExW LdrLoadDll VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory VirtualProtect VirtualProtectEx NtProtectVirtualMemory HeapCreate RtlCrea CreateProcessA CreateProcessW CreateProcessInternalA CreateProcessInternalW NtCreateUserProcess NtCreateProcess NtCreateProcessEx.IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned.The XMEM_OPTIONS values are used as the Option parameter for the XMEM_OPTION struct."
848,FillPath,"Microsoft Build · May 19 – 22, 2025FillPath function (wingdi.h) The FillPath function closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode. Syntax Parameters [in] hdc A handle to a device context that contains a valid path. ...e If the function succeeds, the return value isThe FillPath function closes any.ICanvas.FillPath(PathF, WindingMode) Method Definition Namespace: Microsoft.Maui.Graphics Assembly:Microsoft.Maui.Graphics.dll Source:ICanvas.cs Source:ICanvas.cs Source:ICanvas.cs Draws and fills the specified path onto the canvas. Parameters path PathF The path to be drawn. windingMode WindingMode The fill algorithm to be used. Applies to. Draws.Filling Open Figures You can fill a path by passing the address of a GraphicsPath object to the Graphics::FillPath method. The Graphics::FillPath method fills the path according to the fill mode (alternate or winding) currently set for the path. The Graphics::FillPath method fills the path according to the default fill mode, which is.CGContext.FillPath Method Definition Namespace: CoreGraphics Assembly:Xamarin.iOS.dll Assembly:Xamarin.Mac.dll Fills the current path, using Non-Zero Winding rule. Remarks For an explanation of the Even-Odd and Non-Zero Winding rule, see CGPathDrawingMode. Applies to. Fills the current path, using Non-Zero Winding rule. ..AbstractCanvas.FillPath(PathF, WindingMode) Method Definition Namespace: Microsoft.Maui.Graphics Assembly:Microsoft.Maui.Graphics.dll Source:AbstractCanvas.cs Source:AbstractCanvas.cs Source:AbstractCanvas.cs Parameters path PathF windingMode WindingMode Implements FillPath(PathF, WindingMode) Applies to. Learn more about the.Graphics::FillPath method (gdiplusgraphics.h) The Graphics::FillPath method uses a brush to fill the interior of a path. If a figure in the path is not closed, this method treats the nonclosed figure as if it were closed by a straight line that connects the figure's starting and ending points. ...Syntax Parameters [in] brush Type: const Brush*.Graphics.FillPath(Brush, GraphicsPath) Method Definition Namespace: System.Drawing Assembly:System.Drawing.Common.dll Assembly:System.Drawing.dll Package:System.Drawing.Common v10.0.0-preview.3.25173.2 Source:Graphics.cs Source:Graphics.cs Source:Graphics.cs Source:Graphics.cs Source:Graphics.cs Source:Graphics.cs Fills the interior of a.How to: Fill Open Figures You can fill a path by passing a GraphicsPath object to the FillPath method. The FillPath method fills the path according to the fill mode (alternate or winding) currently set for the path. Compiling the Code The preceding example is designed for use with Windows Fo... Learn how to fill open figures by passing a....sions.FillPath Definition Namespace: Microsoft.Maui.Graphics Assembly:Microsoft.Maui.Graphics.dll Overloads FillPath(ICanvas, PathF) FillPath(ICanvas, PathF, WindingMode) FillPath(ICanvas, PathF) Source:CanvasExtensions.cs Source:CanvasExtensions.cs Source:CanvasExtensions.cs Parameters target ICanvas path PathF Applies to FillPath(ICanvas,.The Graphics class in GDI+ provides the following methods for filling closed shapes and curves: FillRect... The FillPath method fills the interiors of the separate pieces of a path. If a piece of a path doesn't form a closed curve or shape, the FillPath method automatically closes that piece of the path before filling it. The following example."
849,GetClipboardData,"Microsoft Build · May 19 – 22, 2025The GetClipboardData function is used to retrieve data from the clipboard in a specified format. Before calling this function, the clipboard must be opened using the appropriate API functions. The function returns a handle to the data in the requested format, which can then be manipulated or used as needed.To use GetClipboardData, follow these general steps:Make sure to check if the clipboard contains data in the desired format before attempting to retrieve it.References:GetClipboardData function (winuser.h) Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously. The application must not use the handle after the EmptyClipboard or CloseClipboard function is called, or aft... The system performs implicit data format conversions between certain clipboard formats when.GraphDataObject.GetClipboardData Method Definition Namespace: Microsoft.VisualStudio.GraphModel Assembly:Microsoft.VisualStudio.GraphModel.dll Package:Microsoft.VisualStudio.GraphModel v17.13.40008 Get the XML from the clipboard. Returns String The data for the data object Applies to. Get the XML from the clipboard. ..IRichEditOleCallback::GetClipboardData method (richole.h) Allows the client to supply its own clipboard object. Syntax Parameters lpchrg Type: CHARRANGE* The clipboard object range. reco Type: DWORD The clipboard operation flag can be one of these values. Value Meaning RECO_COPY Copy to the clipboard. RECO_CUT Cut to the clipboard. lplpdataobj.IRichEditOle::GetClipboardData method (richole.h) Retrieves a clipboard object for a range in an edit control. Syntax Parameters lpchrg Type: CHARRANGE* The range for which to create the clipboard object. reco Type: DWORD Unused. lplpdataobj Type: LPDATAOBJECT* The IDataObject interface of the clipboard object representing the range specified in.IOleObject.GetClipboardData(UInt32, IDataObject) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters dwReserved UInt32 ppDataObject IDataObject Remarks For information on the COM.IOleObject::GetClipboardData method (oleidl.h) Retrieves a data object containing the current contents of the embedded object on which this method is called. ... pointer to this data object, it is possible to create a new embedded object with the same data as the Remarks You can use the IOleObject::GetClipboardData method to convert a linked.Win32.IOleObject.GetClipboardData(UInt32, IDataObject) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters dwReserved UInt32 ppDataObject IDataObject Applies to. Learn more about the.COleClientItem::CreateStaticFromClipboard Creates a static item from the Clipboard. COleClientItem::CreateStaticFromData Creates a static item from a data object. COleClientItem::GetClipboardData Gets the data that would be placed on the Clipboard by calling the CopyToClipboard member function. COleClientItem::OnGetClipboardData Called by the.EdpGetDataInfoFromWin32Clipboard function Note Starting in July 2022, Microsoft is deprecating Windows Information Protection (WIP) and the APIs that support WIP. For your data protection needs, Microsoft recommends that you use Microsoft Purview Information Protec... In the presence of WIP policy, generates a string with format information about.Refer to... You can implement it in such a way that your clipboard data object exposes a private clipboard format in addition to those exposed by the data object returned by IRichEditOleCallback::GetClipboardData. Or if you want to block other applications from copying your content altogether, you can return a data object that only contains your."
850,IsDlgButtonChecked,"Microsoft Build · May 19 – 22, 2025IsDlgButtonChecked function (winuser.h) The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box that contains the button control. [in] nIDButton Type: int The identifier of the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Button (Windows Controls) This section contains information about the programming elements used with button controls. CheckRadioButton Adds a check ... IsDlgButtonChecked The IsDlgButtonChecked function determines whether a button.CheckDlgButton function (winus... Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-dialogbox-l1-1-0 (introduced in Windows.CWnd::GetDlgCtrlID If the CWnd is a child window, calling this function returns its ID value. CWnd::IsChild Indicates whether CWnd is a child window or other direct descendant of the specified window. CWnd::IsDlgButtonChecked Determines whether a button control is checked. CWnd::IsZoomed Determines whether CWnd is maximized. CWnd::OnToolHitTest.Sending Messages to Buttons Handling Messages from a Button Notification Messages from Buttons Button Color Messages Button Default Message Processing Related topics Sending Messages to Buttons A parent window can send messages to a button in an overlapped or child window by using the SendMessage function, or it can send messages to a button in a.Public Methods Name Description COleControlContainer::AttachControlSite Creates a control site, hosted by the container. COleControlContainer::IsDlgButtonChecked Determines the state of the specified button. COleControlContainer fully implements the IOleInPlaceFrame and IOleContainer interfaces, allowing the contained ActiveX controls to fulfill.The dialog box procedure can set the initial state of a check box by using the CheckDlgButton function, which sets or clears the check box. Before a dialog box terminates, the dialog box procedure can check the state of each radio button and check box by using the IsDlgButtonChecked function, which returns the current state of the button. The.CWindow::CheckDlgButton Changes the check state of the specified button. CWindow::IsDialogMe... CWindow::IsDlgButtonChecked Determines the check state of the button. CWindow::IsWindowEnabled Determines whether the window is enabled for input. Return Value TRUE if the window is successfully centered; otherwise, FALSE. CWindow::CheckDlgButton.Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-dialogbox-l1-1-2 (introduced in Windows 10, version 10.0.10240) See also.Button Types There are several types of buttons and one or more button styles to distinguish between buttons of the same type. This document discusses the following topics. Button Types and Styles Check Boxes Group Boxes Push Buttons Radio Buttons Related topics Button Types and Styles A button belong... The application can ascertain the state of."
851,GetTimeZoneInformation,"Microsoft Build · May 19 – 22, 2025GetTimeZoneInformation function (timezoneapi.h) Retrieves the current time zone settings. These settings control the translations between Coordinated Universal Time (UTC) and local time. To support boundaries for daylight saving time that change from year to year, use the GetDynamicTimeZoneInformation or GetTimeZoneInformationForYear function..TIME_ZONE_INFORMATION structure (timezoneapi.h) Specifies settings for a time zone. Syntax Members Bias The current bias for local time translation on this computer, in minutes. For example, ""EST"" could indicate Eastern Standard Time. The string will be returned unchanged by the GetTimeZoneInformation function. This string can be empty..SystemInformationEvent.TimeZone Property Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Gets the name of the time zone. This value is retrieved from GetTimeZoneInformation. Property Value String Applies to. Gets the name of the time zone. This value is retrieved from GetTimeZoneInformation. ..Function Description EnumDynamicTimeZoneInformation Enumerates dynamic daylight saving time information entries stored in the registry. GetLocalTime Retrieves the current local date and time... GetTimeZoneInformation Retrieves the current time zone settings. GetTimeZoneInformationForYear Retrieves the time zone settings for the specified year and.The current time-zone settings control h... You can retrieve the current time-zone settings by using the GetTimeZoneInformation function. The function copies the result to a TIME_ZONE_INFORMATION structure and returns a value indicating whether local time is currently in standard time or daylight saving time (DST). To support boundaries for.SystemInformationEvent.TimeZoneBias Property Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Gets the bias of the time zone from UTC, in minutes. This value is retrieved from GetTimeZoneInformation. Property Value Int64 Applies to. Gets the bias of the time zone from UTC, in minutes. This value is.timezoneapi.h header This header is used by System Services. For more information, see: System Services timezoneapi.h contains the following programming interfaces: Functions EnumDynamicTimeZoneInformation Enumerates DYNAMIC_TIME_ZONE_INFORMATION entries stored in the registry. GetTimeZoneInformation Retrieves the current time zone settings. These.A v... The C run-time library will determine the daylight savings time behavior from the TZ environment variable. If TZ isn't set, the Win32 API call GetTimeZoneInformation is used to get the daylight savings time information from the operating system. If the call fails, the library assumes the United States' rules for implementing the calculation.SystemInformationEvent Class Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Describes a SystemInformationEvent. The SystemInformationEvent occurs once and describes details about the computer where the recording was collected. The SystemInformationEvent is one of the events in the ProcessChain or.SMS_Site Server WMI Class The SMS_Site Windows Management Instrumentation (WMI) class is an SMS Provider server class, in Configuration Manager, that represents identification and status data for a Configuration Manager site installation. Value Site status 1 ACTIVE 2... TimeZoneInfo Data type: String Access type: Read/Write Qualifiers: None Site."
852,CoGetCallContext,"Microsoft Build · May 19 – 22, 2025CoGetCallContext function (combaseapi.h) Retrieves the context of the current call on the current thread. Syntax Parameters [in] riid Interface identifier (IID) of the call context that is being requested. Remarks CoGetCallContext retrieves the context of the current call on the current thread. Requirements Requirement Value Minimum supported.CoGetApartmentType Returns the current apartment type and type qualifier. CoGetCallContext Retrieves the context of the current call on the current thread. CoGetCallerTID Returns a pointer to a DWORD that contains the apartment ID of the caller's thread. CoSuspendClassObjects Prevents any new activation requests from the SCM on all cl....CoGetAp... CoGetCallContext Retrieves the context of the current call on the current thread. CoGetCallerTID Returns a pointer to a DWORD that contains the apartment ID of the caller's thread. CoRevokeClassObject Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use..IServerSecurity::RevertToS... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objidl.h (include ObjIdl.h) See also CoGetCallContext CoSwitchCallContext Security in COM. The IServerSecurity (objidl.h).IServerSec... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header objidlbase.h (include ObjIdl.h) See also CoGetCallContext CoSwitchCallContext Security in COM. The IServerSecurity (objidlbase.h).An implementation of IServerSecurity is supplied by COM on the context object for the current call when standard marshaling is used. However, thi... When a call arrives at the server, the server can call CoGetCallContext to obtain a pointer to the IServerSecurity interface. With this pointer, IServerSecurity methods can be called by the server to.Server-side functions and call-context interfa... The IServerSecurity interface and the CoGetCallContext, CoImpersonateClient, and CoRevertToSelf functions provide server-side call security. When a call arrives at the server, the server may call the CoGetCallContext function to retrieve an IServerSecurity interface, which allows the server to.Any code executing within a context can acquire references to these objects by calling CoGetObjectContext and CoGetCallContext, respectively (or the Visual Basic 6.0 equivalents, GetObjectContext and GetSecurityCallContext). Imple... The System.EnterpriseServices.SecurityCallContext class wraps CoGetCallContext, the COM+ API for retrieving call.CoSwitchCallContext function (combaseapi.h) Switches the call context object used by CoGetCallContext. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header combaseapi.h (include Objbase.h).ISecurityCallersColl interface (comsvcs.h) Provides access to information about individual callers in a collection of callers. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header comsvcs.h See also."
853,PtInRegion,"Microsoft Build · May 19 – 22, 2025PtInRegion function (wingdi.h) The PtInRegion function determines whether the specified point is inside the specified region. Syntax Parameters [in] hrgn Handle to the region to be examined. [in] x Specifies the x-coordinate of the point in logical units. [in] y Specifies the y-coordinate of the point in logical units. Return value If the.Hit Testing Regions An application performs hit testing on regions to determine the coordinates of the current cursor position. Then it passes these coordinates as well as a handle identifying the region to the PtInRegion function. The cursor coordinates can... The return value for PtInRegion indicates whether the cursor position is within the.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. PaintRgn Paints the specified region by using the brush currently selected into the device context. PtInRegion Determines whether the specified point is inside the specified.CRgn::GetRgnBox Retrieves the coordinates of the bounding rectangle of a CRgn object. CRgn::OffsetRgn Moves a CRgn object by the specified offsets. CRgn::PtInRegion Determines whether a specified point is in the region. CRgn::RectInRegion Determines whether any part of a specified rectangle is within the boundaries of the region. CRgn::SetRectRgn.Using Regions to Perform Hit Testing The example in Brushes uses regions to simulate a ""zoomed"" view of an 8- by 8-pixel monochrome bitmap. By clicking on the pixels in this bitmap, the user cr... The example shows how to use the PtInRegion function to perform hit testing and the InvertRgn function to invert the colors in a region. The example in.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). It is typically rectangular. Compare a copy of the current clipping region to a second region by calling the... Determine whether a point lies within the interior of a copy of the current clipping region by calling the.CreateRectRgn function (wingdi.h) The CreateRectRgn function creates a rectangular region. This means that any point on a line between two sequential vertices is not included in the region. If you were to call PtInRegion for such a point, it would return zero as the result. Requirements Requirement Value Minimum supported client Windows 2000.CreatePolygonRgn function (wingdi.h) The CreatePolygonRgn function creates a polygonal region. Regions created by the CreateRgn methods (such as CreateRectRgn and CreatePolygonRgn) only include the interior of the shape; the shape's outline is excluded from the region. If you were to call PtInRegion for such a point, it would return zero as the.The OnLButto... Next, modify the handler. To modify the OnLButtonDown method Change the code which comprises the OnLButtonDown method in PolyCtl.cpp (deleting any code placed by the wizard) so that it looks like this: This code makes use of the points calculated in the OnDraw function to create a region that detects the user's mouse clicks with.... boundaries of a Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also PtInRegion RECT Region Functions Regions Overview. The."
854,GetInputState,"Microsoft Build · May 19 – 22, 2025GetInputState function (winuser.h) Determines whether there are mouse-button or keyboard messages in the calling thread's message queue. Syntax Return value Type: BOOL If the queue contains one or more new mouse-button or keyboard messages, the return value is nonzero. If there are no new mouse-button or keyboard messages in the queue, the return.TvInputManager.GetInputState(String) Method Definition Namespace: Android.Media.TV Assembly:Mono.Android.dll Returns the state of a given TV input. Remarks Returns the state of a given TV input.The state is one of the following: #INPUT_STATE_CONNECTED#INPUT_STATE_CONNECTED_STANDBY#INPUT_STATE_DISCONNECTEDJava documentation for.Once an application find the input to use, it uses TvView or TvRecordingClient for further interaction such as watching and recording broadcast TV programs. Java documentation for android.media.tv.TvInputManager.Portions of this page are modifications based on work created and shared by the Android Open Source Project and used according to terms.Using Messages and Message Queues The following code examples demonstrate how to perform the following tasks associated with Windows messages and message queues. Other functions, including GetQueueStatus and GetInputState, also allow you to examine the contents of a thread's message queue. GetQueueStatus returns an array of flags that indicates.Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. It is typically used to dispatch a message retrieved by the GetMessag... GetInputState Determines.GetForegroundWindow Retrieves a handle to the foreground window (the window with which the user ... GetGUIThreadInfo Retrieves information about the active window or a specified GUI thread. GetInputState Determines whether there are mouse-button or keyboard messages in the calling thread's message queue. GetLastActivePopup Determines which pop-up.Message Functions (Windows and Messages) BroadcastSystemMessage BroadcastSystemMessageEx DispatchMessage GetInputState GetMessage GetMessageExtraInfo GetMessagePos GetMessageTime GetQueueStatus InSendMessage InSendMessageEx PeekMessage PostMessage PostQuitMessage PostThreadMessage RegisterWindowMessage ReplyMessage SendAsyncProc SendMessage.(Unicode) GetAncestor Retrieves the handle to the ancestor of the specified window. GetAsyncKeyState Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. GetAutoRotationState Retrieves an AR_STATE value containing the state of screen auto-rotation for.... (winuser.h) Ret the type of messages found in the calling thread's message queueRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API."
855,PostThreadMessageA,"Microsoft Build · May 19 – 22, 2025PostThreadMessageA function (winuser.h) Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message. Syntax Parameters [in] idThread Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message.(ANSI) PostMessageW Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. (Unicode) PostQuitMessage Indicates... PostThreadMessageA Posts a message to the message queue of the specified thread. (ANSI) PostThreadMessageW Posts a.We went through PostThreadmessageA(), which helps to post the message from a different thread with the help of threadID, Is there any way where we can do this without threadID?| Did you consider creating an invisible Message-Only window ( https://learn.microsoft.com/en-us/windows/win32/winmsg/window-features#message-only-windows ). We went through.(Unicode) AreDpiAwarenessContextsEqual Determines whether two D... ArrangeIconicWindows Arranges all the minimized (iconic) child windows of the specified parent window. AttachThreadInput Attaches or detaches the input processing mechanism of one thread to that of another thread. BeginDeferWindowPos Allocates memory for a multiple-window- position."
856,ShowWindow,"Microsoft Build · May 19 – 22, 2025The ShowWindow function is used to set the specified window's show state. It takes two parameters: hwnd, which is the handle to the window, and nCmdShow, which specifies how the window should be shown (e.g., minimized, maximized, or shown normally). The hwnd parameter is typically obtained from the CreateWindowEx function when creating a window.Here is a simple usage example:In this example, hwnd is the window handle, and nCmdShow is a flag that determines how the window is to be displayed. The operating system passes the nCmdShow value to the program through the wWinMain function.References:WindowRectChangingEventArgs.ShowWindow Property Definition Namespace: Microsoft.UI.Input Edit Gets or sets whether the window should be shown. Property Value A value indicating whether or not the the window should be shown. The default is the current state of the window. Setting this property to true, shows the window. Setting this property to.ShowWindow function (winuser.h) Sets the specified window's show state. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [in] nCmdShow Type: int Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO.BrowserWindowEx.ShowWindow Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Overloads ShowWindow(String, String, Boolean) Displays the window. ShowWindow(String, String, Boolean) Displays the window. ...RL. frame String Specifies the frame to display the window in..GetHelpCommand.ShowWindow Property Definition Namespace: Microsoft.PowerShell.Commands Assembly:System.Management.Automation.dll Package:Microsoft.PowerShell.5.1.ReferenceAssemblies v1.0.0 Package:System.Management.Automation v7.2.12 Package:System.Management.Automation v7.3.5 Package:System.Management.Automation v7.4.0 Gets and sets a value.ChartClass.ShowWindow Property Definition Namespace: Microsoft.Office.Interop.Excel Assembly:Microsoft.Office.Interop.Excel.dll Property Value Boolean Implements ShowWindow Applies to. Learn more about the Microsoft.Office.Interop.Excel.ChartClass.ShowWindow in the Microsoft.Office.Interop.Excel namespace...WPF and Windows Workflow Foundation integration in XAML The WPFWFIntegration sample demonstrates how to create an application that uses Windows Presentation Foundation (WPF) and Windows Workflow Foundation (WF) features in a single XAML document. Sample details The ShowWindow.xaml file deserializes into a Sequence activity with two string.MixedRealityProjectConfiguratorWindow.ShowWindow Method Definition Namespace: Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly:Microsoft.MixedReality.Toolkit.Editor.Inspectors.dll Show the MRTK Project Configurator utility window or focus if already opened Attributes UnityEditor.MenuItemAttribute Applies to. Show the MRTK Project.ShowWindowAsync function (winuser.h) Sets the show state of a window without waiting for the operation to complete. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [in] nCmdShow Type: int Controls how the window is to be shown. ...return value isRemarks This function posts a show-window event to the message queue of the given.InputMethodService.ShowWindow(Boolean) Method Definition Namespace: Android.InputMethodServices Assembly:Mono.Android.dll Parameters showInput Boolean Attributes RegisterAttribute Remarks Portions of this page are modifications based on work created and shared by the Android Open Source Project and used according to terms described in the Creative.BrowserWindowEx.ICRMWindowContainer.ShowWindow Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Displays the window. Parameters crmurl String Specifies the CRM URL. frame String Specifies the frame to display the window in. onLoadHistory List Contains the history of the."
857,ConvertDefaultLocale,"Microsoft Build · May 19 – 22, 2025ConvertDefaultLocale function (winnls.h) Converts a default locale value to an actual locale identifier. Note  This function is only provided for converting partial locale identifiers. The LCIDToLocaleName function can be used to convert a locale identifier to a valid locale name. Your application can also use GetUserDefaultLocaleName to retrieve.For more information, see: Internationalization for Windows Applications winnls.h contains the following programming interfaces: Functions CompareString The CompareString function (winnls.h) compares two character strings for a locale specified by an identifier. (CompareStringA) ConvertDefaultLocale Converts a default locale value to an actual.ConvertDefaultLocale Converts a default locale value to an actual locale identifier. EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system... Describes.(CompareStringA) CompareStringEx Compares two Unicode (wide character) strings, for a locale specified by name.Caution  Using CompareStringEx incorrectly c... ComprehensiveCheck Checks the spelling of the supplied text in a more thorough manner than ISpellChecker::Check, and returns a collection of spelling errors. ConvertDefaultLocale Converts a....ny application that runs only on Windows Vista and later shou GetSystemDefaultLocaleNameRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL.GetUserDefaultLCID function (winnls.h) Returns the locale identifier for the user default locale. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h) Library Kernel32.lib DLL."
858,GetCurrentDirectoryW,"Microsoft Build · May 19 – 22, 2025The GetCurrentDirectoryW function in Windows programming is used to retrieve the current directory for the calling process. This function is a wide-character version of GetCurrentDirectory, which means it works with Unicode strings.Here is a basic example of how to use the GetCurrentDirectoryW function:In this example, a buffer is created to hold the current directory path. The GetCurrentDirectoryW function is called with the size of the buffer, and it fills the buffer with the current directory path. If the function succeeds, the current directory is printed; otherwise, an error message is displayed.References:We are trying to access phone dumps where the path is over 255 characters long, what is Microsoft's official way of enabling this in Windows 11?| Hello, Thank you for posting in Microsoft Q&amp;A. Based on the description, I understand your question is related to enable long file path... Here are the directory management functions that no longer.GetCurrentDirectory function (winbase.h) Retrieves the current directory for the current process. Syntax Parameters [in] nBufferLength The length of the buffer for the current directory string, in TCHARs. The buffer length must include room for a terminating null character. [out] lpBuffer A pointer to the buffer that receives the current directory.Functions without MAX_PATH restrictions These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CreateDirectoryW, CreateDirectoryExW GetCurrentDirectoryW RemoveDirectoryW SetCurrentDirectoryW. These are the file management functions that no longer have MAX_PATH restrictions if you.GetThreadErrorM... APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. CreateDirectoryW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in."
859,ActivateKeyboardLayout,"Microsoft Build · May 19 – 22, 2025ActivateKeyboardLayout function (winuser.h) Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard. Syntax Parameters [in] hkl Type: HKL Input locale identifier to be activated. The.Using Keyboard Input Covers tasks that are associated with keyboard input. Keyboard Input Reference Contains the API reference. Functions Name Description ActivateKeyboardLayout Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale.Keyboard Layout Samples Browse code The keyboard layout samples demonstrate how to generate layouts for various keyboards and locales. You may ... LoadKeyboardLayout API can be used to load the keyboard layouts. To activate the keyboard layout, you may choose to specify KLF_ACTIVATE flag to LoadKeyboardLayout API, or you may need to call.Functions _TrackMouseEvent Posts messages when the mouse pointer leaves a window or hovers over a window for... This function calls TrackMouseEvent if it exists, otherwise it emulates it. ActivateKeyboardLayout Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input.When the user clicks into text marked with a different language, the application calls the ActivateKeyboardLayout function to activate the user's default layout for that language. If the user edits text in a language which is not in the active list, the application can call the LoadKeyboardLayout function with the language to get a layout based on.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.GetKeyboardLayout function (winuser.h) Retrieves the active input locale identifier (formerly called the ke... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.For more inform... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also ActivateKeyboardLayout Conceptual Keyboard Input.For more inform... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also ActivateKeyboardLayout Conceptual Keyboard Input."
860,GlobalFindAtomW,"Microsoft Build · May 19 – 22, 2025GlobalFindAtomW function (winbase.h) Searches the global atom table for the specified character string and retrieves the global atom associated with that string. Syntax Parameters [in] lpString Type: LPCTSTR The null-terminated character string for which to search. Note The winbase.h header defines GlobalFindAtom as an alias that automatically.If the atom's reference count reaches zero, GlobalDeleteAtom removes the string associated with the atom from the global atom table. GlobalFindAtomA Searches the global atom table for the specified character string and retrieves the global atom associated with that string. (ANSI) GlobalFindAtomW Searches the global atom table for the specified.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. ... uniqu (an atom)."
861,GetSystemPowerStatus,"Microsoft Build · May 19 – 22, 2025GetSystemPowerStatus function (winbase.h) Retrieves the power status of the system. The status indicates whether the system is running on AC or DC power, whether the battery is currently charging, how much battery life remains, and if battery saver is on or off. Syntax Parameters [out] lpSystemPowerStatus A pointer to a SYSTEM_POWER_STATUS.What's New in Power Management Windows 10 helps your application optimize power consumption when it's running on a mobile device. SYSTEM_POWER_STATUS : This s... The fourth member, SystemStatusFlag (previously named Reserved1), now indicates if battery saver is engaged or not. Use the GetSystemPowerStatus function to retrieve a pointer to this.(Unicode) GetDevicePowerState Retrieves the current power state of the specified device. GetDllDirectoryA Retrieves the application-specific portion of the search path used to locate DLLs fo... (GetShortPathNameA) GetSystemDEPPolicy Gets the data execution prevention (DEP) policy setting for the system. GetSystemPowerStatus Retrieves the power.Mobility Make Your WPF Apps Power-Aware Andre Michaud This article discusses: Creating power-aware applications Power support on Windows XP Power support on Windows Vista Custom WPF dependency properties and routed events This article uses the following technologies: .NET Framework 3.0, Windows Vista, Windows XP Code download available at: Power.Power Management Functions The following functions are used with power management. Function Description CallNtPowerInformation Sets or retrieves power information. GetPwrCapabilities Retrieves information about the system power capabilities. GetSystemPowerStatus Retrieves the power status of the system. IsSystemResumeAutomatic Indicates the.This month I am going to delve into the interop details of marshaling data structures to native functions. In a future piece, I hope to address calls into native code that calls ba... Figure 1 Native GetSystemPowerStatus Figure 2 shows C# code that makes a call to the native GetSystemPowerStatus API, and outputs information from the resulting data.Battery Information Batteries can provide power for portable computers and computers running on an uninterruptible power supply (UPS). On these computers, the operating system provides information on the state of the battery so applications can provide useful functions for the user. To obtain information about the battery status, use the.PBT_APMPOWERSTATUSCHANGE event Notifies applications of a change in the power status of the computer, such as a switch from battery power to A/C. Remarks An application should process this event by calling the GetSystemPowerStatus function to retrieve the current power status of the computer. Requirements Requirement Value Minimum supported client.GetDevicePowerState function (winbase.h) Ret... To determine whether the system is running on battery power, and the remaining battery life, use the GetSystemPowerStatus function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform.I have reviewed the PowerSettingGUIDs documentation and found a value named GUID_POWER_SAVING_S... Reference: https://learn.microsoft.com/en-us/windows/win32/power/power-setting-guids However, this value is also set to true when the user manually turns on battery saver. You could try to use GetSystemPowerStatus function to retrieve the current."
862,GetTempPathA,"Microsoft Build · May 19 – 22, 2025GetTempPathA function (fileapi.h) Retrieves the path of the directory designated for temporary files. Syntax Parameters [in] nBufferLength The size of the string buffer identified by lpBuffer, in TCHARs. [out] lpBuffer A pointer to a string buffer that receives the null-terminated string specifying the temporary file path. The GetTempPath function.(GetShortPathNameW) GetTempFileNameA Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated(GetTempFileNameA) GetTempFileNameW Creates a name for a temporary file. If a unique file name is generated, an empty file is created and.Moved into api-ms-win-core-file-l1-2-2.... Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetTempFileNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetTempPathW Introduced into.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
863,SetProcessWindowStation,"Microsoft Build · May 19 – 22, 2025SetProcessWindowStation function (winuser.h) Assigns the specified window station to the calling process. This enables the process to access objects in the window station such as desktops, the clipboard, and global atoms. All subsequent operations on the window station use the access rights granted to hWinSta. Syntax Parameters [in] hWinSta A.Process Connection to a Window Station A process automatically establishes a connection to a window station and desktop when it first calls a USER32 or GDI32 ... The system determines the window station to which a process connects according to the following rules: If the process has called the SetProcessWindowStation function, it connects to the.A process can use the SetProcessWindowStation function to change its window station. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with a... (ANSI) OpenWindowStationW Opens the specified window station. (Unicode) SetProcessWindowStation Assigns the specified window station to the calling process. SetThreadDesktop Assigns the.Window Station and Desktop Functions Applications can use the following functions with window station objects. Function Description... OpenWindowStation Opens the specified window station. SetProcessWindowStation Assigns the specified window station to the calling process. SetUserObjectInformation Sets information about the specified window.OpenInputDesktop function (winuser.h) Opens the desktop that receives user input. Syntax Parameters [in] dwFlags This parameter can be zero or the following value. To get extended error information, call GetLastError. Remarks The calling process must have an associated window station, either assigned by the system when the process is created, or....h) Assigns the specified desktop to the calling Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowstation-l1-1-0 (introduced in Windows 8) See also.CreateDesktopW function (winuser.h) Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the SetProcessWindowStation function. Requirements.Remarks The calling process must have an associated window station, either assigned by the system at process creation time or set by the SetProcessWindowStation function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target."
864,OpenWaitableTimerA,"Microsoft Build · May 19 – 22, 2025StringFromIID Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. APIs from api-ms-win-core-com-l2-1-1.dll API Requirements CreateILockBytesOnHGlobal Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. FmtIdToPropStgName Introduced into api-ms-win-core-com-l2-1-1.dll in."
865,SetSysColors,"Microsoft Build · May 19 – 22, 2025SetSysColors function (winuser.h) Sets the colors for the specified display elements. ...y elements are the various parts of a window and the display that appear on the system displaSyntax Parameters [in] cElements Type: int The number of display elements in the lpaElements array. [in] lpaElements Type: const INT* An array of integers that.System Palette and Static Colors Ordinarily, the system palette entr... Furthermore, after setting the system palette usage to SYSPAL_NOSTATIC, the application must immediately realize its logical palette, call the GetSysColor function to save the current system color settings, call the SetSysColors function to set the system colors to reasonable.The GetSystemMetrics function retrieves the specified system metric. Applications can also retrieve and set the color of window elements such as menus, scroll bars, and buttons by using the GetSysColor and SetSysColors functions, respectively. The SystemParametersInfo function retrieves or sets various system attributes, such as double-click t....When the user selects an owner-drawn button, the button sends its parent wind... Button Color Messages The system provides default color values for buttons. An application can retrieve the default values for these colors by calling the GetSysColor function, or set the values by calling the SetSysColors function. The following table shows the.The following diagram shows the request code tha... Sets the scroll box to the position specified in the message; scrolls the data by the same number of units the scroll box has moved. Sets the scroll box to the position specified in the message and scrolls the data by the same number of units the scroll box has moved for applications that draw.SetMessageExtraInfo Sets the extra message in... SetPropA Adds a new entry or changes an existing entry in the property list of the specified window. (ANSI) SetPropW Adds a new entry or changes an existing entry in the property list of the specified window. (Unicode) SetSysColors Sets the colors for the specified display elements. SetTimer Creates.Window Background The window background is the color or pattern used to fill the client area before a window begins drawing. The window background covers whatever was on the screen before the window was moved there, erasing existing images and preventing the appli... The GetStockObject or CreateSolidBrush function can be used to create a brush.If an application sets the hIcon and hIconSm members of the WNDCLASSEX structure to NULL, the system uses the default application icon as the large and small class icons for the window class. For a list of the standard system color values, see SetSysColors. Alternatively, you can use the GetSysColorBrush function to retrieve a handle to a brush.SetSystemPaletteUse function (wingdi.h) The SetSystemPaletteUse function allows an application to specify whether the system palette contains 2 or 20 static colors. The default system palette contains 20 s... Call the GetSysColor function to save the current system-color settings. Call the SetSysColors function to set the system colors to.Stock Brush There are seven predefined logical stock brushes maintained by the graphics device interface (GDI). The 21 stock brushes maintained by the window mana... An application can set the color corresponding to a window element by calling the SetSysColors function. There are seven predefined logical stock brushes maintained by the graphics."
866,ReleaseStgMedium,"Microsoft Build · May 19 – 22, 2025ReleaseStgMedium function (ole2.h) Frees the specified storage medium. Syntax Parameters unnamedParam1 Return value None Remarks The ReleaseStgMedium function calls the appropriate method or function to release the specified storage medium. ... storage medium struct parameters, such as IDataObject::GetData or IDataObject::SetDataIn addition to.If pUnkForRelease is null, ReleaseStgMedium uses default procedures to release the storage; otherwise, ReleaseStgMedium uses the specified IUnknown interface. ...g process to control the way the storage is when the receiving process calls the ReleaseStgMedium functionIf pUnkForRelease is null, ReleaseStgMedium uses default procedures to release.STGMEDIUM Struct Definition Namespace: System.Runtime.InteropServices.ComTypes Assemblies:Syste... Fields pUnkForRelease Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the ReleaseStgMedium function. If pUnkForRelease is null, ReleaseStgMedium.uSTGMEDIUM structure (objidl.h) Represents a generalized global memory handle used for data transfer operations by the IAdv... The tymed member is TYMED_ISTORAGE. pUnkForRelease Pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the ReleaseStgMedium function..Extract the file pa... Process the file paths as needed and paste them into your application. Call ReleaseStgMedium and pass in the pointer to the STGMEDIUM structure that you passed to IDataObject::GetData in step 1. Once you have released the structure, the HDROP value that you created in step 2 is no longer valid and should not be used. Copying.STGMEDIUM structure The STGMEDIUM structure provides access to the data... The tymed member of the STGMEDIUM structure is a TYMED_XXX value that identifies the data transfer mechanism. Call GlobalUnlock to release the lock on the global memory object. Call ReleaseStgMedium to release the global memory object. Note You must use ReleaseStgMedium to.Syntax Parameters [in] pformatetc A pointer to the FORMATETC structure defining the format used by the data object when interpreting the data contained in the storage medium. [in] pmedium A pointer to the STGMEDIUM structure defining the storage medium in which the data is being passed. [in] fRelease If TRUE, the data object called, which.Parameters formatIn FORMATETC A FORMATETC structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium. medium STGMEDIUM A STGMEDIUM structure, passe... This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function..Parameters formatIn FORMATETC A FORMATETC structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium. medium STGMEDIUM A STGMEDIUM structure, ... This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false.ClipboardObject.IDataObject.SetData(FORMATETC[], STGMEDIUM[], Int32) Method Definition Namespace: Microsoft.VisualStudio.Data.Framework Assembly:Microsoft.VisualStudio.Data.Framework.dll Package:Microsoft.VisualStudio.Data... This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false."
867,FindFirstFileA,"Microsoft Build · May 19 – 22, 2025FindFirstFileA function (fileapi.h) Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used). To specify additional attributes to use in a search, use the FindFirstFileEx function. To perform this operation as a transacted operation, use the FindFirstFileTransacted function..For example, if FindFirstFileA returns a string that contains certain extended ANSI characters, WriteConsoleA will not display the string properly. The following are file functions: CopyFile CreateDirectory CreateFile CreateProcess DeleteFile FindFirstFile FindNextFile GetCurrentDirectory GetDiskFreeSpace GetDriveType GetFileAttributes.FindClose Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindNextFileA Introduced into ap... GetFileAttributesExA Introduced into api-ms-win-core-file-l1-2-1.dll in.Manifest File Format The file format for the manifest files borrows as much from C++ and IDL as possible. There are a few notable additions to the format, which can be best illustrated by the following example: The function FindFirstFileA takes two parameters. The first is lpFileName, which is a full path (usually with wildcards) defining where to.FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counte... FINDEX_INFO_LEVELS Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data. FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CompareFileTime Compares two file times. STREAM_INFO_LEVELS Defines values that are used with the.SetFileApisToOEM function (fileapi.h) Causes the file I/O functions for the process to use the OEM character set code page. For example, if the FindFirstFileA function returns a string that contains certain extended ANSI characters, and the 8-bit console functions are set to use the OEM code page, then the WriteConsoleA function will not display.SetFileApisToANSI function (fileapi.h) Causes the file I/O functions to use the ANSI character set code page for the current process. For example, if the FindFirstFileA function returns a string that contains certain extended ANSI characters, and the 8-bit console functions are set to use the OEM code page, then the WriteConsoleA function does not."
868,FreeLibrary,"Microsoft Build · May 19 – 22, 2025The FreeLibrary function in Windows is used to decrement the reference count of a loaded dynamic-link library (DLL). When the reference count reaches zero, the module is unloaded from the address space of the calling process, and the handle to the library is no longer valid.To use FreeLibrary, you need to pass a handle to the loaded library module, which can be obtained from functions like LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx. If the function succeeds, it returns a nonzero value; if it fails, it returns zero, and you can call GetLastError to retrieve extended error information.It's important to note that calling FreeLibrary does not affect other processes using the same module, and it is not safe to call FreeLibrary from within the DllMain function of the DLL.References:FreeLibrary function (libloaderapi.h) Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header libloaderapi.h.FreeLibrary and AfxFreeLibrary Processes that explicitly link to a DLL call the FreeLibrary function when the DLL module is no longer needed. This function decrements the module's reference count. And, if the reference count is zero,... In an MFC application, use AfxFreeLibrary instead of FreeLibrary to unload an MFC extension DLL. The interface.Using Run-Time Dynamic Linking You can use the same DLL in both load-time and run-time dynamic linking. If LoadLibrary succeeds, the program uses the returned handle in the GetProcAddress ... After calling the DLL function, the program calls the FreeLibrary function to unload the DLL. Because the program uses run-time dynamic linking, it is not.MUI: Application-Specific Settings Sample (Windows Vista) The sample application described in this topic is another Hello MUI application that supports application-specific settings for its user interface languages and runs on Windows Vista and later. After ... This code loads and releases resource files using calls to the resource loader.Remarks A software adapter is a DLL that implements the entirety of a dev... The reference count can be decremented by calling FreeLibrary. The typical calling scenario is to call LoadLibrary, pass the handle to CreateSoftwareAdapter, then immediately call FreeLibrary on the DLL and forget the DLL's HMODULE. Since the software adapter calls.Dynamic-Link Library Functions The following functions are used in dynamic linking. FreeLibrary Decrements the reference count of the loaded DLL. When the reference count reaches zero, the module is unmapped from the address space of the calling process. FreeLibraryAndExitThread Decrements the reference count of a loaded DLL by one, and then calls.VBAGetExprSrv Loads Visual Basic for Applications and retrieves a pointer to the IExpressionService object. VBAGetExprSrv calls LoadLibrary() to load the Visual Basic for Applications DLL based on the version numbers that are passed in. The handle returned by LoadLibrary() is stored in the location pointed to by lphinstVBA. If the call is.The entry-point function is not called if the DLL was already loaded by the process through a call to LoadLibrary or LoadLibraryEx with no corresponding call to the FreeLibrary function. ...n use this handle to identify the DLL in a call to the GetProc FreeLibrary, or FreeLibraryAndExitThreadThe GetModuleHandle function returns a handle used in.LoadLibrary and AfxLoadLibrary Processes call LoadLibrary or LoadLibraryEx to explicitly link to a DLL. The handle is required in other functions used for explicit linking—for example, GetProcAddress and FreeLibrary. That happens when a previous call to LoadLibrary or LoadLibraryEx for the DLL hasn't had a corresponding call to the FreeLibrary.Releasing the Transport Provider Applies to: Outlook 2013 | Outlook 2016 When MAPI or the MAPI spooler finishes using a transport logon object: MAPI or the MAPI spooler calls the transport provider's IXPLogon::TransportLogoff method. If this was the last known provider object using this DLL on this process, MAPI calls the FreeLibrary function on."
869,PeekMessageW,"Microsoft Build · May 19 – 22, 2025PeekMessageW function (winuser.h) Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist). Syntax Parameters [out] lpMsg Type: LPMSG A pointer to an MSG structure that receives message information. [in, optional] hWnd Type: HWND A handle to the window whose messages are.ITfMessagePump::PeekMessageW method (msctf.h) Obtains a message from the message queue and returns if no message is obtained. Syntax Parameters [out] pMsg Pointer to a MSG structure that receives message data. [in] hwnd Handle to the window whose messages are obtained. ... is NULL, this method obtains messages for any window that belongs to the.MouseProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function whenever an application calls the GetMessage or PeekMessageA/PeekMessageW function and there is a mouse message to be processed. The HOOKPROC type defines a pointer to.The system calls this function whenever an application calls the GetMessage or PeekMessageA/PeekMessageW function and there is a keyboard message (WM_KEYUP or WM_KEYDOWN to be processed. (An application called the PeekMessage function, specifying the PM_NOREMOVE flag.) wParam [in] Type: WPARAM The virtual-k... The system calls this function.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print GetMsgProc function -description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function whenever the GetMessage or PeekMessageA/PeekMessageW.Remarks Your message loop should use the PSM_ISDIALOGMESSAGE message with modeless property sheets to pass messages to the property sheet dialog box. On systems that support Unicode, use the Unicode versions of the GetMessage and PeekMessage functions (GetMessageW and PeekMessageW) to retrieve messages. If the return value indicates that the.This includes GetMessage, PeekMessageA/PeekMessageW, modal dialog box, and COM functions. Calling such functions may result in the thread not returning from GetMessage or WaitMessage when there are messages in the calling thread's message queue. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.InSendMessage... PeekMessageA Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist). (ANSI) PeekMessageW Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist). PostMessageA Places (posts).PropSheet_IsDialogMessage macro (prsht.h) Passes a message to a property sheet dialog box and indicates whether the dialog box processed the message. Remarks Your message loop should use the PropSheet_IsDialogMessage macro with modeless property sheets to pass messages to the property sheet dialog box. On systems that support Unicode, use the.ITfMessagePump interface (msctf.h) The ITfMessagePump interface is impleme... ITfMessagePump::GetMessageA ITfMessagePump::GetMessageA method ITfMessagePump::GetMessageW ITfMessagePump::GetMessageW method ITfMessagePump::PeekMessageA ITfMessagePump::PeekMessageA method ITfMessagePump::PeekMessageW ITfMessagePump::PeekMessageW method Remarks If the."
870,FindResourceW,"Microsoft Build · May 19 – 22, 2025FindResourceW function (libloaderapi.h) Determines the location of a resource with the specified type and name in the specified module. To specify a language, use the FindResourceEx function. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the.Is this correct? project.rc resource.h project.cpp debug console :| There are ... The first thing to do is to call GetLastError() when the call fails. If the resource.h file contains a #define statement for IN_BITMAP then passing L&quot;IN_BITMAP&quot; is an error. Finally, the code should use LoadImageW or LoadBitmapW if it will actually load a.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internation... (Unicode) FindResourceExW Determines the location of the resource with the specified type, name, and language in the specified module. (FindResourceExW) FindResourceW Determines the location of a resource with the specified type and name.FindResourceWrapW function [FindResourceWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use FindResourceW instead.]. Determines the location of a resource with the specified type and name, in the specified module. Note FindResourceWrapW is a wrapper for the FindResourceW function. See.Client applications instead should use IAttachmentExecute to present a user environment that provides safe download and exchange of files through email and messaging attachments.] [FindResourceWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use FindResourceW instead.] [GetDateFormatWrapW is.(Unicode) FindResourceA Determines the location of a resource with the specified type and nam... (FindResourceA) FindResourceExA Determines the location of the resource with the specified type, name, and language in the specified module. (FindResourceExA) FindResourceExW Determines the location of the resource with the specified type, name, and.I now see that the code that calls FindResourceW in ATL::AtlGetStringResourceImage is doing this to the ID: MAKEINTRESOURCEW(((id&gt;&gt;4)+1) &amp; static_cast&lt;WORD&gt;(~0)) ) If I call with the hard coded 65536, the result is 0x1000 and that is a valid resource handle. ...0000 &amp; 0x0FFFF = 0x0000 FindResourceW is passed 0x0 and fails to."
871,TransmitCommChar,"Microsoft Build · May 19 – 22, 2025TransmitCommChar function (winbase.h) Transmits a specified character ahead of any pending data in the output buffer of the specified communications device. Syntax Parameters [in] hFile A handle to the communications device. The CreateFile function returns this handle. [in] cChar The character to be transmitted. To get extended error information,.Communications Functions The following functions are used with communications resources. SetupComm Initializes the communications parameters for a specified communications device. TransmitCommChar Transmits a specified character ahead of any pending data in the output buffer of the specified communications device. WaitCommEvent Waits for an event.Read and Write Operations Windows supports both synchronous and asynchronous (overlapped) file I/O operations on serial communications resources. A thread can also write to a communications resource by using the TransmitCommChar function, which transmits a specified character ahead of any pending data in the output buffer. This function is useful....-to signal to be sent. fDsrHold If this member is TRUE, transmission is waiting for the DSR (data-set-ready) signal to be(Transmission halts when the XOFF character is transmitted to a system that takes the next character as XON, regardless of the actual character.) fEof If this member is TRUE, the end-of-file (EOF) character has been received..(ANSI) CheckNameLegalDOS8Dot3W Determines whether the specified name can be used to create a file on a FAT file system. (Unicode) ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports....libloader mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h ntenclv.h powerbase.h powersetting.h powrprof.h processenv.h processtopologyapi.h profileapi.h pwm.h realtimeapiset.h rtworkq.h secext.h storprop.h synchapi.h sysinfoapi.h systemtopologyapi.h threadpoolapiset.h threadpoollegacyapiset.h timeprov.h.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
872,LoadIconW,"Microsoft Build · May 19 – 22, 2025The LoadIconW function is used to load a specified icon resource from the executable (.exe) file associated with an application instance. It is a Unicode version of the LoadIcon function, which allows applications to retrieve the handle of an icon resource for use in their user interface.To use LoadIconW, you typically provide the handle to the instance of the application and the resource identifier or name of the icon you want to load. Once loaded, the icon can be displayed in the application's client area or used in other UI elements.Here is a basic example of how it might be used in code:In this example, IDI_MYICON would be the identifier for the icon resource defined in the application's resource file.References:LoadIconW function (winuser.h) Loads the specified icon resource from the executable (.exe) file associated with an application instance. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_SHARED flags set). Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module of either....(Unicode) LoadCursorW Loads the specified cursor resource from the executable (.EXE) file associated with an appl... (Unicode) LoadIconA Loads the specified icon resource from the executable (.exe) file associated with an application instance. (ANSI) LoadIconW Loads the specified icon resource from the executable (.exe) file associated with an.Issue description I am creating an abstr... For example, using LoadIconW with the icon resource name or (upper case o umlaut) works fine, but (lower case o umlaut) fails to load. For example, using LoadIconW with the icon resource name or (upper case o umlaut) works fine, but (lower case o umlaut) fails to load. The argument passed to LoadIconW.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
873,SetWindowsHookExA,"Microsoft Build · May 19 – 22, 2025To use the SetWindowsHookExA function in Windows, you need to follow these steps:Make sure to adhere to the bitness of the application and the hook DLL, as a 32-bit DLL cannot be injected into a 64-bit process and vice versa.References:SetWindowsHookExA function (winuser.h) Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread. Syntax Parameters [in] idHook Type:.Block external window maximizer messages to prevent it from being maximized. External Windows may be folders (or other)| Use for example a WH_CBT Hook, in a DLL to intercept external applications (tested on Windows 10 in x64 by intercepting HCBT_SYSCOMMAND with SC_MAXIMIZE : I could not maximiz... You could try to use SetWindowsHookExA function.CallWndProc callback function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. An application installs the hook procedure by specifying the WH_CALLWNDPROC hook type and a pointer to the hook procedure in a call to the SetWindowsHookExA/SetWindowsHookExW function. Requirements.LowLevelMouseProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function every time a new mouse input event is about to be posted into a thread input queue. Remarks An application installs the hook procedure by specifying the.ForegroundIdleProc callback function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. An application installs this hook procedure by specifying the WH_FOREGROUNDIDLE hook type and the pointer to the hook procedure in a call to the SetWindowsHookExA/SetWindowsHookExW function..MessageProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. MessageProc is a.ShellProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The function receives notifications of Shell events from the system. The HOOKPROC type defines a pointer to this callback function. ShellProc is a placeholder for the application-defined or.LowLevelKeyboardProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function every time a new ke... LowLevelKeyboardProc is a placeholder for the application-defined or library-defined function name. Remarks An application installs.SysMsgProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. SysMsgProc is a.DebugProc function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. Remarks An application installs this hook procedure by specifying the WH_DEBUG hook type and the pointer to the hook procedure in a call to the SetWindowsHookExA/SetWindowsHookExW function. Requirements Minimum."
874,CreateColorSpaceA,"Microsoft Build · May 19 – 22, 2025CreateColorSpaceA function (wingdi.h) The CreateColorSpace function creates a logical color space. Syntax Parameters lplcs Pointer to the LOGCOLORSPACE data structure. Return value If this function succeeds, the return value is a handle that identifies a color space. Windows 95/98/Me: CreateColorSpaceW is supported by the Microsoft Layer for.CreateBitmapIndirect The CreateBitmapIndirect ... CreateBrushIndirect The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern. CreateColorSpaceA The CreateColorSpace function creates a logical color space. (ANSI) CreateColorSpaceW The CreateColorSpace function creates a logical color space..ConvertColorNameToIndex Converts color names in a named color space to index numbers in an Inter... ConvertIndexToColorName Transforms indices in a color space to an array of names in a named color space. (ConvertIndexToColorName) CreateColorSpaceA The CreateColorSpace function creates a logical color space. (ANSI) CreateColorSpaceW The."
875,OleSetMenuDescriptor,"Microsoft Build · May 19 – 22, 2025OleSetMenuDescriptor function (ole2.h) Installs or removes OLE dispatching code from the container's frame window. Syntax Parameters [in] holemenu Handle to the composite menu descriptor returned by the OleCreateMenuDescriptor function. installed.Remarks The container should call OleSetMenuDescriptor to install the dispatching code on hwndFrame.OleCreateMenuDescriptor Creates and returns an OLE menu descriptor (that is, an OLE-provided data structure that describes the menus) for OLE to use when dispatching menu messages and commands. OleCreateStaticFromData Creates a static object, that contains only a representation, with no native data, from a data transfer object..Syntax Parameters [in] hmenuShared A handle to the composite menu constructe... The container should call OleSetMenuDescriptor to install the OLE dispatching code. The container should also call OleSetMenuDescriptor, specifying NULL to unhook the dispatching code. Finally, the object application calls OleDestroyMenuDescriptor to free the data....kToFileEx OleCreateMenuDescriptor OleCreatePictureIndirect OleCreateStaticFr OleDestroyMenuDescriptor OleDraw OleDuplicateData OleFlushClipboard OleGetClipboard OleInitialize OleIsCurrentClipboard OleIsRunning OleLoad OleLoadFromStream OleLoadPicture OleLoadPictureEx OleLockRunning OleMetafilePictFromIconAndLabel OleNoteObjectVisible.If a container application is to support context-sensitive help on menu items, it must either provide its own message filter so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing valid, non-NULL values for the lpFrame and lpActiveObj parameters. Requirements Re... Determines.The container then uses this pointer in processing IOleInPlaceFrame::SetMenu and to pass to OleSetMenuDescriptor. Notes to Implementers The Microsoft Windows User Interface Design Guide recommends that an in-place container ignore the pszObjName parameter passed in this method. Requirements Requirement Value Minimum support... Provides a direct.Component Object Model (COM) Overview of the Component Object Model (COM) technology. To develop Component Object Model (COM), you need these headers: accctrl.h callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h.COleClientItem Class Defines the container interface to OLE items. Public Methods Name Description COleClientItem::Activate Opens the OLE item for an operation and then executes the specified verb. COleClientItem::AttachDataObject Accesses the data in the OLE object. COleClientItem::CanPaste Indicates whether the Clipboard contains an embeddable."
876,GetBoundsRect,"Microsoft Build · May 19 – 22, 2025GetBoundsRect function (wingdi.h) The GetBoundsRect function obtains the current accumulated bounding rectangle for a specified device context. ...dc A handle to the device context whose bounding rectangle the function will [out] lprect A pointer to the RECT structure that will receive the current bounding rectangleThe application's rectangle is.GetBkColor The GetBkColor function returns the current backg... GetBkMode The GetBkMode function returns the current background mix mode for a specified device context. GetBoundsRect The GetBoundsRect function obtains the current accumulated bounding rectangle for a specified device context. This function replaces the GetBrushOrg function..NSTextBlock.GetBoundsRect(CGRect, CGRect, NSTextContainer, NSRange) Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters contentRect CGRect rect CGRect textContainer NSTextContainer charRange NSRange Returns CGRect Attributes ExportAttribute Applies to. Learn more about the AppKit.NSTextBlock.GetBoundsRect in the AppKit.NSTextTable.GetBoundsRect Method Definition Namespace: AppKit Assembly:Xamarin.Mac.dll Parameters block NSTextTableBlock contentRect CGRect rect CGRect textContainer NSTextContainer charRange NSRange Returns CGRect Attributes ExportAttribute Applies to. Learn more about the AppKit.NSTextTable.GetBoundsRect in the AppKit namespace...GetBkColor The GetBkColor function returns the current backg... GetBkMode The GetBkMode function returns the current background mix mode for a specified device context. GetBoundsRect The GetBoundsRect function obtains the current accumulated bounding rectangle for a specified device context. This function replaces the GetBrushOrg function..Painting and Drawing Functions The following functions are used with painting and drawing. GetBkMode Returns the background mix mode for a device context. GetBoundsRect Gets the accumulated bounding rectangle for a device context. GetROP2 Gets the foreground mix mode of a device context. SetBoundsRect Controls the accumulation of bounding.IDWriteBitmapRenderTarget::DrawGlyphRun has an optional RECT out parameter that contains the bounds of the area where the text was drawn. You can use this information to set the bounding... You can retrieve the bounding rectangle by using the GetBoundsRect function, then use the bounding rectangle with the BitBlt function to copy the rendered.Accumulated Bounding Rectangle The accumulated bounding rectangle is the smallest rectangle enclosing the portion of a window or client area affected by recent drawing operations. An application ... The application can retrieve the current bounding rectangle at any time by using the GetBoundsRect function. The accumulated bounding rectangle is the.CDC::GetArcDirection Returns the current arc direction for the device context. CDC::GetBoundsRect Returns the current accumulated bounding rectangle for the specified device context. CDC::GetCharABCWidths Retrieves the widths, in logical units, of consecutive characters in a given range from the current font. CDC::SetBoundsRect Controls the....ground(CGRect, NSView, NSRange, NSLayoutManager) (Inherited from NSTextBlock) EncodeTo(NSCoder) (Inherited from NSTextBlock) Equals(NSObject) (Inherited from NSObject) Equals(Object) (Inherited from NSObject) ExposedBindings() (Inherited from NSObject) GetBindingInfo(NSString) (Inherited from NSObject) GetBindingOptionDescriptions(NSString)."
877,ChangeDisplaySettingsExW,"Microsoft Build · May 19 – 22, 2025ChangeDisplaySettingsExW function (winuser.h) The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. Note  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. Windows 8.ChangeDisplaySettingsA The ChangeDisplaySettin... (ANSI) ChangeDisplaySettingsExA The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExW The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified.ChangeDisplaySettingsA The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExA The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode. (ANSI) ChangeDisplaySettingsExW The....&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_Rel 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_ChangeDisplaySettingsExW referenced in function _glfwPlatformGetVideoModes 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol."
878,TrackPopupMenuEx,"Microsoft Build · May 19 – 22, 2025TrackPopupMenuEx function (winuser.h) Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen. Syntax Parameters [in] hMenu Type: HMENU A handle to the shortcut menu to be displayed. This is essential for creating an optimal user experience,.TPMPARAMS structure (winuser.h) Contains extended parameters for the TrackPopupMenuEx function. Syntax Members cbSize Type: UINT The size of structure, in bytes. rcExclude Type: RECT The rectangle to be excluded when positioning the window, in screen coordinates. Requirements Requirement Value Minimum supported client Windows 2000 Professional.Remarks A window can process this message by displaying a shortcut menu using the TrackPopupMenu or TrackPopupMenuEx functions. To obtain the horizontal and vertica... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.CMenu::SetMenuItemBit... CMenu::SetMenuItemInfo Changes information about a menu item. CMenu::TrackPopupMenu Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu. CMenu::TrackPopupMenuEx Displays a floating pop-up menu at the specified location and tracks the selection of items on the.(StringCchCopyExW) StringCchCopyNA Copies the specified number of characters from one string to another. (StringCchVPrintfW) TrackPopupMenu Displays a shortcut menu at the specified location and tracks the selection of items on the menu. TrackPopupMenuEx Displays a shortcut menu at the specified location and tracks the selection of items on the.CreatePopupMenu function (winuser.h) Creates a drop-down menu, submenu, or shortcut menu. Remarks The application can add the new menu to an existing menu, or it can display a shortcut menu by calling the TrackPopupMenuEx or TrackPopupMenu functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.Pa... Remarks The WM_MENURBUTTONUP message allows applications to provide a context-sensitive menu also known as a shortcut menu for the menu item specified in this message. To display a context-sensitive menu for a menu item, call the TrackPopupMenuEx function with TPM_RECURSE. Requirements Requirement Value Minimum supported client Windows 2000.The Window Menu The Window menu (also known as the System menu or Control menu) is a pop-up menu defined and managed almost exclusively by the operating system. To display a shortcut menu use the TrackPopupMenuEx function. Shortcut menus, also called floating pop-up menus or context menus, are typically displayed when the WM_CONTEXTMENU message is.SetMenuItemInfo Changes information about a menu item. TrackPopupMenu Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen. TrackPopupMenuEx Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The.In addition to the pop-up menu handle, TrackPopupMenuEx requires that you specify a handle to the owner window, the position of the shortcut menu (in screen coordinates), and the mouse button that the user can use to choose an item. ...The TrackPopupMenu function is still supported, but new applications should use the TrackPopupMenuEx."
879,IsCharUpperA,"Microsoft Build · May 19 – 22, 2025IsCharUpperA function (winuser.h) Determines whether a character is uppercase. ... semantics of the language selected by the user during setup or through ContrSyntax Parameters [in] ch Type: CHAR The character to be tested. Return value Type: BOOL If the character is uppercase, the return value is nonzero. Remarks Note The winuser.h header.This determination is based on the semantics of the language selected by the user during setup or through Control Panel. (Unicode) IsCharLowerA Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel. IsCharUpperA Determines whether a.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
880,GetFullPathNameW,"Microsoft Build · May 19 – 22, 2025GetFullPathNameW function (fileapi.h) Retrieves the full path and file name of the specified file. To perform this operation as a transacted operation, use the GetFullPathNameTransacted function. For more information about file and path names, see File Names, Paths, and Namespaces. Note See the Remarks section for discussion of the use of relative.GetFinalPathNameByHandleA Retrieves the final path for the s... (ANSI) GetFinalPathNameByHandleW Retrieves the final path for the specified file. (Unicode) GetFullPathNameA Retrieves the full path and file name of the specified file. (ANSI) GetFullPathNameW Retrieves the full path and file name of the specified file. (Unicode) GetLogicalDrives.GetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileType Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFullPathNameW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586..I am trying to get an absolute path from the GetFullPathName API by passing the relative path as argument to the function. But, th... Or any other API is available to deal with long paths?| According to maximum-file-path-limitation GetFullPathNameW will not have the MAX_PATH restriction if you have opted into long path behavior. If you have not....PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttrib GetFullPathNameW, GetLongPathNameW, MoveFileW, MoveFileExW,....PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttrib GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW, MoveFileW, MoveFileExW,....Accept it as an answer--| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW,.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
881,CreateDialogParamW,"Microsoft Build · May 19 – 22, 2025CreateDialogParamW function (winuser.h) Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. Note The winuser.h header defines CreateDialogParam as an alias that.To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for this technology, see: Dialog Boxes Functions AddRef The IPrintDialogCallback::AddRef method (commdlg.h) is IUnknown's AddRef method, which decrements the reference count for an interface on a COM object. AddRef The IPrintDialogServices::AddRef method.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
882,DoDragDrop,"Microsoft Build · May 19 – 22, 2025DragDrop.DoDragDrop(DependencyObject, Object, DragDropEffects) Method Definition Namespace: System.Windows Assembly:PresentationCore.dll Initiates a drag-and-drop operation. Parameters dragSource DependencyObject A reference to the dependency object that is the source of the data being dragged. data Object A data object that contains the data.Drag and Drop Drag and dro... In a typical drag and drop operation, a user selects the object to be transferred by moving the mouse pointer to it and holding down either the left button or some other button designated for this purpose. The OLE function DoDragDrop implements a loop that tracks mouse and keyboard movement until such time as the drag.ToolStripItem.DoDragDrop Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Overloads DoDragDrop(Object, DragDropEffects) Begins a drag-and-drop operation. DoDragDrop(Object, DragDropEffects, Bitmap, Point, Boolean) Begins a drag operation. DoDragDrop(Object, DragDropEffects) Source:ToolStripItem.cs.Syntax Parameters [in] pDataObj Pointer to the IDataObject interface on a data object that contains the data being dragged. [in] pDropSource Pointer to an implementation of the... Remarks If you are developing an application that can act as a data source for an OLE drag-and-drop operation, you must call DoDragDrop when you detect that the user has.Control.DoDragDrop Method Definition Namespace: System.Windows.Forms Assembly:System.Windows.Forms.dll Overloads DoDragDrop(Object, DragDropEffects, Bitmap, Point, Boolean) Begins a drag operation. DoDragDrop(Object, DragDropEffects) Begins a drag-and-drop operation. DoDragDrop(Object, DragDropEffects, Bitmap, Point, Boolean) Source:Control.cs.ActionsPane.DoDragDrop(Object, DragDropEffects) Method Definition Namespace: Microsoft.Office.Tools Assembly:Microsoft.Office.Tools.Common.dll Begins a drag-and-drop operation. Parameters data Object The data to drag. allowedEffects DragDropEffects One of the DragDropEffects values. Returns DragDropEffects A value that represents the final effect.Parameters index UInt32 [in] Specifies the index of the list item of interest. pDataObject IDataObject [in] Pointer to an IDataObject being dropped. grfKeyState UInt32 [in] Current state of the keyboard and the mouse modifier keys. pdwEffect UInt32 [in, out] On input, the effect being requested. ...bject list su drag-drop operationIf you return.IDropTarget::DragOver method (oleidl.h) Provides target feedback to the user and communicates the drop's effect to the DoDragDrop function so it can communicate the effect of the drop back to the source. Notes to Implementers This function is called frequently during the DoDragDrop loop so it makes sense to optimize your implementation of the.Drag and Drop Overview This topic provides an overview of drag-and-drop support in Windows Presentation Foundation (WPF) applications. Drag-and-drop commonly refers to a method of data transfer that involves using a mouse (or some other pointing device) to select one or more objects, dragging these objects over some desired drop target in the user.IVsObjectList2.DoDragDrop(UInt32, IDataObject, UInt32, UInt32) Method Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Asks the given list item to handle a drag-and-drop operation. ... you."
883,LocalUnlock,"Microsoft Build · May 19 – 22, 2025LocalLock function (winbase.h) Locks a local memory object and returns a pointer to the first byte of the object's memory block. Note  The local functions have greater overhead and provide fewer features than other memory management functions. Remarks The... For movable memory objects, LocalLock increments the count by one, and the LocalUnlock.LocalUnlock function (winbase.h) Decrements the lock count associated with a memory object that was allocated with LMEM_MOVEABLE. For movable memory objects, the LocalLock function increments the count by one, and LocalUnlock decrements the count by one. For each call that a process makes to LocalLock for an object, it must eventually call.LocalFree function (winbase.h) Frees the specified local memory object and invalidates its handle. The LocalLock function locks a local memory object and increments the lock count by one. The LocalUnlock function unlocks it and decrements the lock count by one. To get the lock count of a local memory object, use the LocalFlags function..LocalFlags function (winbase.h) Retrieves information about the specified local memory object. ...ibility with 16-bit verRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library.LocalLock returns a pointer to a buffer that is a null-terminated array of CHARs or WCHARs, depending on whether an ANSI or Unicode function created the control. To unlock the buffer, the application calls LocalUnlock before allowing the edit control to receive new messages. Requirements Requirement Value Minimum supported client Windows Vista.VirtualUnlock Unlocks a specified range of pages in the virtual address space of a process. Global and local functions Also see global and local functions. These functions are provided for compatibility with 16-bit Windows and are used with Dynamic Data Exchange (DDE), the clipboard functions, and OLE data objects. GlobalLock, LocalLock Locks a.LocalH... LocalLock Locks a local memory object and returns a pointer to the first byte of the object's memory block. LocalReAlloc Changes the size or the attributes of a specified local memory object. LocalSize Retrieves the current size of the specified local memory object, in bytes. LocalUnlock Decrements the lock count associated with a memory.Set windows_hook_legacy_allocators to false to disable legacy allocator interception. set ASAN_OPTIONS=windows_hook_legacy_allocators=false GlobalAlloc GlobalFree GlobalHandle GlobalLock GlobalReAlloc GlobalSize GlobalUnlock LocalAlloc LocalFree LocalHandle LocalLock LocalReAlloc LocalSize LocalUnlock See also AddressSanitizer overview.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h."
884,GetTapeParameters,"Microsoft Build · May 19 – 22, 2025GetTapeParameters function (winbase.h) The GetTapeParameters function retrieves information that describes the tape or the tape drive. Syntax Parameters [in] hDevice Handle to the device about which information is sought. This handle is created by using the CreateFile function. [in] dwOperation Type of information requested. Value Meaning.WriteTapemark Writes a sp... The GetLogicalProcessorInformationEx function uses this structure. TAPE_GET_DRIVE_PARAMETERS Describes the tape drive. It is used by the GetTapeParameters function. TAPE_GET_MEDIA_PARAMETERS Describes the tape in the tape drive. It is used by the GetTapeParametersfunction. TAPE_SET_DRIVE_PARAMETERS Describes the tape.Backup Functions The following functions are used with tape backup. Function Description BackupRead Reads data associated with a specified file or directory into a buffer. EraseTape Erases all or part of a tape. GetTapeParameters Retrieves information that describes the tape or the tape drive. GetTapePosition Retrieves the current address of the.Tape Input and Output There are several functions that applications can use to perform input and output (I/O) on a tape drive. More specific information on this su... To read or write file data to or from a tape in variable-length block mode, perform the following steps: Determine whether the tape drive supports variable-length block mode by.TAPE_GET_MEDIA_PARAMETERS structure (winnt.... Syntax Members Capacity Total number of bytes on the current tape partition. Remaining Number of bytes between the current position and the end of the current tape partition. BlockSize Number of bytes per block. PartitionCount Number of partitions on the tape. Remarks The GetTapeParameters function.TAPE_SET_MEDIA_PARAMETERS structure (winnt.h) The TAPE_SET_MEDIA_PARAMETERS structure describes the tape in the tape drive. Maximum and minimum block sizes can be obtained by calling the GetTapeParameters function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003.TAPE_GET_DRIVE_PARAMETERS structure (winnt.h) The TAPE_GET_DRIVE_PARAMETERS structure describes the tape drive. It is used by the GetTapeParameters function. ... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header winnt.h (include Windows.h).To retrieve and set information about a tape and tape drive, an application uses the GetTapeParameters, SetTapeParameters, and GetTapeStatus functions. GetTapeParameters retrieves information that describes a tape or a tape drive. The tape information includes the tape's type, density, and bl... SetTapeParameters either sets the tape block size or.(Unicode) GetProfileSectionA Retrieves all the keys and values for the specified section of the Win.ini file. (ANSI) GetProfileSectionW Retrieves all the keys and values for the specified section of the Win.ini file. GetTapeParameters Retrieves information that describes the tape or the tape drive. GetTapePosition Retrieves the current address of.For more information, see: Application Installation and Servicing Backup Data Access and Storage Developer Notes DXGI Hardware Counter Profiling Internationalization for Windows Applications Kernel-Mode Driver Reference Menus and Other Resources Security and Identity System Services The Windows Shell Windows Management Instrumentation Windows."
885,AdjustWindowRectEx,"Microsoft Build · May 19 – 22, 2025AdjustWindowRectEx function (winuser.h) Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. Syntax Parameters [in, out] lpRect Type: LPRECT A pointer to a RECT.Window Functions Name Description AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx Calculates the required size of the window rectangle,.For programming guidance for this technology, see: Windows and Messages Functions AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx.The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. AdjustWindowRectEx Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose.AdjustWindowRect function (winuser.h) Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. To specify an extended window style, use the AdjustWindowRectEx function. Requirements.AdjustWindowRectExForDpi function (winuser.h) Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI. This window rectangle can then be passed to the CreateWindowEx function to create a window with a client area of the desired size. Syntax Parameters [in, out] lpRect A pointer.Windows and messages The Microsoft Game Develop... AdjustWindowRect AdjustWindowRectEx CallWindowProc CreateWindowEx DefWindowProc DestroyCursor DestroyWindow DispatchMessage GetClientRect GetCursorInfo GetCursorPos GetMessage GetWindowLong GetWindowLongPtr KillTimer LoadCursor MoveWindow PeekMessage PostMessage PostQuitMessage PostThreadMessage.Describes how the GDK uses the Win32 programming style, including windows and messages. Although much of this is identical to what you might encounter on Windows PC, this topic describes what's supported on console and the differences from Windows PC.High DPI Reference Functions Topic Description AdjustWindowRectExForDpi A variant of AdjustWindowRectEx that returns values scaled to a specific DPI. AreDpiAwarenessContextsEqual Determines whether two DPI_AWARENESS_CONTEXT values are equivalent. EnableNonClientDpiScaling Enables automatic scaling of the non-client area of the specified.About Windows This topic describes the programming elements that applications use to create and use windows; manage relationships between windows; and size, move, and display windows. The overview i... An application may need to create a window with a client area of a particular size. The AdjustWindowRect and AdjustWindowRectEx functions calculate."
886,SetPropA,"Microsoft Build · May 19 – 22, 2025SetPropA function (winuser.h) Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Syntax Parameters [in] hWnd Type: HWND A handle to the window.ContentIsland.CustomProperties Property Definition Namespace: Microsoft.UI.Content Edit Gets the set of custom properties for the ContentIsland. Property Value IPropertySet The set of custom properties for the Conte... This is similar to Windows.UI.Core.CoreWindow.CustomProperties (or the Win32 GetPropA function (winuser.h) and SetPropA function.ITaskbarList2::MarkFullscreenWindow... Since Windows 7, call SetProp(hwnd, L”NonRudeHWND”, reinterpret_cast(TRUE)) before showing a window to indicate to the Shell that the window should not be treated as full-screen. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003.SetPropA Adds a new entry or changes ... (ANSI) SetPropW Adds a new entry or changes an existing entry in the property list of the specified window. SetWindowDisplayAffinity Stores the display affinity setting in kernel mode on the hWnd associated with the window. SetWindowLongA Changes an attribute of the specified window. (Unicode).winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
887,CompareStringW,"Microsoft Build · May 19 – 22, 2025MNLS_CompareStringW Applies to: Outlook 2013 | Outlook 2016 Compares two Unicode strings. ...CompareStringEx. pstr1 [in] Pointer to the first Unicode string to compare. cch1 [in] Length in characters of the first Unicode string, excluding the terminating null cIn this case, the MNLS_CompareStringW function determines the length automatically..CompareStringW function (stringapiset.h) Compares two character strings, for a locale specified by identifier. Caution  Using CompareString incorrectly can compromise the security of your application. Strings that are not compared correctly can produce invalid input. For example, the function can raise security issues when used for a.stringapiset.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications stringapiset.h contains the following programming interfaces: Functions CompareStringEx Compares two Unicode (wide character) strings, for a locale specified by name.Caution  Using.CompareString The CompareString function (winnls.h) compares two character strings for a locale specified by an identifier. CompareStringA Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application. CompareStringW The CompareStringW (Unicode).CompareStringWrapW function [CompareStringWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use CompareStringW in its place.]. Compares two Unicode character strings, using a specified locale. Note CompareStringWrapW is a wrapper for the CompareStringW function. See the CompareString page for.You should use CharUpperBuffW in its place.] [CompareStringWrapW is available for use in Windows XP. You should use CompareStringW in its place.] [This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.] [This function is available through Windows XP with SP2 and.MNLS_lstrcmpW Applies to: Outlook 2013 | Outlook 2016 Compares two Unicode strings. Parameters lpString1 [in] Pointer to the first Unicode string to compare. lpString2 [in] Pointer to the second Unicode string to compare. Return value Returns the values described for an equivalent call to MNLS_CompareStringW except for CSTR_EQUAL. Remarks....ror: undefined symbol: GlobalizationNative_GetDefaultLocal (fatal) 3139: /usr/lib64/dotnet/shared/Microsoft.NETCore.App/3.1.11/System.Globalization.Native.so: error: symbol lookup error: undefined symbol: GlobalizationNative_GetLocaleNameW (fatal) 3139: /usr/lib64/dotnet/shared/Microsoft.NETCore.App/3.1.11/System.Globalization.Native.so: error:.MAPI Functions, Callbacks, and Macros Applies to: Outlook 2013 | Outlook 2016 | Outlook 2019 The following alphabetic entries contain documentation for the MAPI functions, callbacks, and macros. Entry Entry ABProviderInit ACCELERATEABSDI BuildDisplayTable CALLERRELEASE ChangeIdleRoutine CheckParameters CheckParms CloseIMsgSes... The following."
888,DdeCmpStringHandles,"Microsoft Build · May 19 – 22, 2025DdeCmpStringHandles function (ddeml.h) Compares the values of two string handles. The value of a string handle is not related to the case of the associated string. Syntax Parameters [in] hsz1 Type: HSZ A handle to the first string. [in] hsz2 Type: HSZ A handle to the second string. ...he followinReturn value Description -1 The value of hsz1 is.Basic Concepts (DDE) These concepts are key to understanding Dynamic Data Exchange (DDE) and the Dynamic Data Exchange Management Library (DDEML). For instance, although DdeQueryString creates a string from a string handle and then DdeCreateStringHandle creates a string handle from that string, the two h... To compare the values of two string.DdeAddData Adds data to the specified Dynamic Data Exchange (DDE) object. DdeClientTransaction Begins a data transaction between a client and a server. DdeCmpStringHandles Compares the values of two string handles. DdeConnect Establishes a conversation with a server application that supports the specified service name and topic name pair. If more.ddeml.h header This header is used by Data Exchange. For more information, see: Data Exchange ddeml.h contains the following programming interfaces: Functions DdeAbandonTransaction Abandons the specified asynchronous transaction and releases all resources associated with the transaction. Only a Dynamic Data Exchange (DDE) client application can.Dynamic Data Exchange Management Library Dynamic Data Exchange (DDE) is a form of interprocess communication that uses shared memory to exchange data between applications. Applications can use DDE for one-time data transfers and for ongoi... DdeClientTransaction Begins a data transaction between a client and a server. DdeCmpStringHandles Compares.Remarks An application can free string handles it create... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include Windows.h) Library User32.lib DLL User32.dll See also CONVINFO Conceptual.DDEML Functions In this section DdeAbandonTransaction DdeAccessData DdeAddData DdeCallback DdeClientTransaction DdeCmpStringHandles DdeConnect DdeConnectList DdeCreateDataHandle DdeCreateStringHandle DdeDisconnect DdeDisconnectList DdeEnableCallback DdeFreeDataHandle DdeFreeStringHandle DdeGetData DdeGetLastError DdeImpersonateClient DdeInitialize.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include Windows.h) Library User32.lib DLL User32.dll See also Conceptual DdeCmpStringHandles DdeCreateStringHandle DdeFreeStringHandle.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include Windows.h) Library User32.lib DLL User32.dll See also Conceptual DdeCmpStringHandles DdeCreateStringHandle DdeFreeStringHandle.... function (ddeml.h) Creates a handle that identifies the specified stringRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ddeml.h (include Windows.h) Library User32.lib DLL User32.dll See also."
889,GetKBCodePage,"Microsoft Build · May 19 – 22, 2025GetKBCodePage function (winuser.h) Retrieves the current code page. Applications should use the GetOEMCP function to retrieve the OEM code-page identifier for the system. Syntax Return value Type: UINT The return value is an OEM code-page identifier, or it is the default identifier if the registry value is not readable. Requirements Requirement.Keyboard Input This section describes how the system generates keyboard input and how an application receives and processes. In This ... The function translates the character using the input language and physical keyboard layout identified by the input locale identifier. The following functions are obsolete. Function Description GetKBCodePage.Keyboard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey.GetDoubleClickTime Retrieves the current double-cl... GetFocus Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue. GetKBCodePage Retrieves the current code page. GetKeyboardLayout Retrieves the active input locale identifier (formerly called the keyboard layout)..DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. (DispatchMessageA) DispatchMessageW."
890,OpenInputDesktop,"Microsoft Build · May 19 – 22, 2025OpenInputDesktop function (winuser.h) Opens the desktop that receives user input. Syntax Parameters [in] dwFlags This parameter can be zero or the following value. Value Meaning DF_ALLOWOTHERACCOUNTHOOK 0x0001 Allows processes running in other accounts on the desktop to set hooks in this process. [in] fInherit If this value is TRUE, processes.Window Station and Desktop Functions Applications can use the following functions with window station objects. OpenDesktop Opens the specified desktop object. OpenInputDesktop Opens the desktop that receives user input. SetThreadDesktop Assigns the specified desktop to the calling thread. SwitchDesktop Makes... This enables the desktop to receive.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any headers. (ANSI) OpenDesktopW Opens the specified desktop object. (Unicode) OpenInputDesktop Opens the desktop that receives user input. OpenWindowStationA Opens the specified window station..This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop, or OpenInputDesktop function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library.The input desktop must be the current desktop when you call GetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. Requirements Requirement Value Minimum supported client Windows 2000 Professional.This can be a handle returned by the CreateDesktop, OpenDesktop, or OpenInputDesktop functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.EnumDesktopWindows function (winuser.h) Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an applicat... Syntax Parameters [in, optional] hDesktop A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the CreateDesktop,.Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.... struc (winuser.h) Contains information about a window station or desktop handleRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include Windows.h) See also CreateDesktop GetUserObjectInformation OpenDesktop.I created a new desktop for some user-registration program which requires user text info input via edit box. Thanks!!!| According to Desktops , The desktops associated with the interactive window station, Winsta0, can be made to display a user interface and receive user input, but o... This active desktop, also known as the input desktop, is the."
891,CreateEventA,"Microsoft Build · May 19 – 22, 2025CreateEventA is a function in the Windows API that is used to create an event object. This function allows you to specify whether the event is a manual-reset or auto-reset event and can also set the initial state of the event (signaled or non-signaled).To use CreateEventA, you typically follow these steps:The event object created by CreateEventA can be signaled using the SetEvent function and can be reset using the ResetEvent function. It is important to close the event handle using CloseHandle when it is no longer needed.References:CreateEventA function (synchapi.h) Creates or opens a named or unnamed event object. To specify an access mask for the object, use the CreateEventEx function. Syntax Parameters [in, optional] lpEventAttributes A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle cannot be inherited by child processes. The.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. Acqui... CancelWaitableTimer Sets the specified waitable timer to the inactive state..APIs from api-ms-win-core-file-ansi-l2-1-0.dll API Requirements ReplaceFileA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.10240. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll.VDS_VOLUME_TY... VSS_ALTERNATE_WRITER_STATE Used to indicate whether a given writer has an associated alternate writer. VSS_APPLICATION_LEVEL Indicates the application level, the point in the course of the creation of a shadow copy that a writer is notified of a freeze. VSS_BACKUP_SCHEMA Used by a writer to indicate the types of backup operations."
892,FindFirstFileExA,"Microsoft Build · May 19 – 22, 2025FindFirstFileExA function (fileapi.h) Searches a directory for a file or subdirectory with a name and attributes that match those specified. For the most basic version of this function, see FindFirstFile. To perform this operation as a transacted operation, use the FindFirstFileTransacted function. Syntax Parameters [in] lpFileName The directory.FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code started with Windows 10. FINDEX_INFO_LEVELS Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data. FINDEX_SEARCH_OPS Defines values that are used.(ANSI) FindFirstFileExA Searches a directory for a file or subdirectory with a name and attributes that match those specified. (FindFirstFileExA) FindFirstFileExW Searches a directory for a file or subdirectory with a name and attributes that match those specified. FindNextFileA Continues a file search from a previous call to the FindFirstFile,.CopyFileExA Introduced into api-ms-win-core... DeleteFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindClose Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. FindFirstFileExW Introduced into api-ms-win-core-file-l1-2-1.dll in."
893,CreateMetaFileA,"Microsoft Build · May 19 – 22, 2025CreateMetaFileA function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format metafile. Note  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. CreateMetaFile is a Windows-format metafile.CloseEnhMetaFile The CloseEnhMetaFile function closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile. CreateEllipticRg... CreateEnhMetaFileA The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. (ANSI) CreateEnhMetaFileW The CreateEnhMetaFile function creates.CreateEllipticRgnI... CreateEnhMetaFileA The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. (ANSI) CreateEnhMetaFileW The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. (Unicode) CreateFontW The CreateFont function. (Unicode) CreateMetaFileA The CreateMetaFile function....s Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW, CreateICA, CreateICW, GetDC, GetDCEx,."
894,GetDeviceGammaRamp,"Microsoft Build · May 19 – 22, 2025GetDeviceGammaRamp function (wingdi.h) The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware. Syntax Parameters hdc Specifies the device context of the direct color display board in question. lpRamp Points to a buffer where the function can place the.GetCValue The GetCValue macro retrieves the cyan color value from a CMYK color value. GetDeviceGammaRamp The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware. GetGamutBoundaryMesh Returns the triangular mesh from the plug-in. SetDeviceGammaRamp The.GetDeviceCaps The GetDeviceCaps function retrieves device-specific information for the specified device. GetDeviceGammaRamp The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware. GetEnhMetaFileDescriptionA The GetEnhMetaFileDescription function retrieves.The APIs in Windows that control gamma have followed an evolution as display formats have become more complex. The first Windows APIs to offer gamma control are Windows Graphics Device Interface (GDI)’s SetDeviceGammaRamp and GetDeviceGammaRamp. These APIs work with three 256-entry arrays of WORDs, with each WORD encoding zero up to one,....teDC referenced in fu _glfwPlatformGetGammaRamp 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_GetDeviceCaps referenced in function _glfwGetMonitorContentScaleWin32 1&gt;glfw3.lib(win32_monitor.obj) : error LNK2019: unresolved external symbol __imp_GetDeviceGammaRamp referenced in function.Alphabetical List of All WCS Functions The following is a complete alphabetical list of the WCS 1.0 API functions provided by Windows 98 and later and Windows 2000 and later. Function or Structure Description PCMSCALLBACKW *PCMSCALLBACKW* (or ApplyCallbackFunction... GetCountColorProfileElements.Profile Management Functions Profile Management Functions The following API functions are useful in profile management. GetColorDirectoryW Retrieves the path of the Windows COLOR directory on a specified machine. GetDeviceGammaRamp Gets the gamma ramp from direct color display boards. GetStandardColorSpaceProfileW.GetDeviceCaps function (wingdi.h) The GetDeviceCaps function retrieves device-specific information for the specified device. Syntax Parameters [in] hdc A handle to the DC. [in] index The item to be returned. CM_DEVICE_ICM Device can perform ICM on either the device driver or the device itself. CM_GAMMA_RAMP Device supports GetDeviceGammaRamp and.I want to get the gamma value of the monitor, my code is below, but bget keeps FALSE, how can I tell where the problem is?| I want to get the gamma value of the monitor You can use GetVCPFeatureAndVCPFeatureReply with VCP code = 0x72 for Gamma (details : https://milek7.pl/ddcbacklight/mccs.pdf ) (works on my monitor, Philips 247ELH). I want to get.I'm trying to add a functionality to my app with which you can change gamma and brightness of any monitor connected. For gamma I was looking at GetDeviceGammaRamp / SetDeviceGammaRamp , but on that page it says: &quot;We strongly recommend that you don't use this API.&quot. I'll post parts of the code again as I don't have the full code I."
895,GlobalHandle,"Microsoft Build · May 19 – 22, 2025GlobalHandle function (winbase.h) Retrieves the handle associated with the specified pointer to a global memory block. Remarks When the GlobalAlloc function allocates a memory object with GMEM_MOVEABLE, it returns a handle to the object. The GlobalLock function converts this handle into a pointer to the memory block, and GlobalHandle converts the.Global and Local Functions The global and local functions are supported for porting from 16-bit code, or for maintaining source code compa... To return a handle to the memory object associated with a specified pointer, use the GlobalHandle or LocalHandle function. Related topics Comparing Memory Allocation Methods. The global and local functions.Not appl... Use HeapValidate to validate the heap. GlobalFree, LocalFree Frees the specified global memory object. HeapFree GlobalHandle, LocalHandle Retrieves the handle associated with the specified pointer to a global memory block. This function should be used only with OLE and clipboard functions that require it. Not applicable. Instead, use.winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes eventlogprov Hardware Counter Profiling Internationalization for Windows Applications Menus and Other Resources Operation.Set windows_hook_legacy_allocators to false to disable legacy allocator interception. set ASAN_OPTIONS=windows_hook_legacy_allocators=false GlobalAlloc GlobalFree GlobalHandle GlobalLock GlobalReAlloc GlobalSize GlobalUnlock LocalAlloc LocalFree LocalHandle LocalLock LocalReAlloc LocalSize LocalUnlock See also AddressSanitizer overview.This placeholder topic is provided as an example of documentation that may be included in a later release. Syntax Parameters GlobalHandle Requirements Requirement Value Minimum supported client Windows 10 Minimum supported server Windows Server 2016 Target Platform Windows Header wdm.h (include Wdm.h, Wdm.h). This VslDeleteSecureS... This.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology."
896,SetDlgItemTextA,"Microsoft Build · May 19 – 22, 2025SetDlgItemTextA function (winuser.h) Sets the title or text of a control in a dialog box. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box that contains the control. [in] nIDDlgItem Type: int The control with a title or text to be set. [in] lpString Type: LPCTSTR The text to be copied to the control. ... winuser.h header defines.(ANSI) SendDlgItemMessageW Sends a message to the specified control in a dialog box. (Unicode) SetDlgItemInt Sets the text of a control in a dialog box to the string representation of a specified integer value. SetDlgItemTextA Sets the title or text of a control in a dialog box. (ANSI) SetDlgItemTextW Sets the title or text of a control in a.(ANSI) GetClassInfoExA Retrieve... (Unicode) GetClassLongA Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. GetDialogDpiChangeBehavior Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior. GetDlgItem Retrieves a handle to a."
897,WSACleanup,"Microsoft Build · May 19 – 22, 2025WSACleanup is a function used in network programming to terminate the use of the WS2_32.dll, which is the Windows Sockets API. It is called when an application is done using the network services provided by the Windows Sockets API. The function is responsible for cleaning up resources that were allocated during the use of the sockets.When WSACleanup is invoked, it decrements a per-process reference counter. If this counter reaches zero, the service provider prepares to be unloaded from memory. This involves finishing any unsent data transmission on sockets configured for a graceful close and freeing all resources held by the provider, ensuring that it can be reinitialized by a subsequent call to WSPStartup.In summary, WSACleanup is essential for proper resource management in network applications, ensuring that all allocated resources are released when they are no longer needed.References:WSACleanup function (winsock.h) The WSACleanup function terminates use of the Winsock 2 DLL (Ws2_32.dll). Syntax Return value The return value is zero if the operation was successful. In a multithreaded environment, WSACleanup terminates Windows Sockets operations for all threads. Windows Phone 8: This function is supported for Windows Phone Store.WSACleanup function (winsock2.h) The WSACleanup function terminates use of the Winsock 2 DLL (Ws2_32.dll). Syntax Return value The return value is zero if the operation was successful. In a multithreaded environment, WSACleanup terminates Windows Sockets operations for all threads. Windows Phone 8: This function is supported for Windows Phone.... WSACancelBlockingCall The WSACancelBlockingCall function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0. WSACleanup The WSACleanup function (winsock2.h) terminates use of the WS2_32.dll. WSACloseEvent The WSACloseEvent function closes an open event object handle. WSAConnect The WSAConnect function.WSACancelBlockingCall The WSACancelBlockingCall function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0. WSACleanup The WSACleanup function (winsock2.h) terminates use of the WS2_32.dll. WSACleanup The WSACleanup function (winsock.h) terminates use of the WS2_32.dll. WSACloseEvent The WSACloseEvent function.When the client application is done receiving data, the closesocket function is called to close the socket. When the client application is completed using the Windows Sockets DLL, the WSACleanup function is called to release resources. Complete Client Source Code Complete Client Code Related topics Getting Started With Winsock Winsock Client.Winsock NSP Reference Links This topic provides you with useful links to topics about the Windows Sockets Functions and Windows Sockets Structures. The following list identifies links to topics about the Windows Sockets Functions: WSACleanup WSAGetLastError WSANSPIoctl WSALookupServiceBegin WSALookupServiceEnd WSALookupServiceNext WSASetService.WSAStartup function (winsock.h) The WSAStartup function initiates use of the Winsock DLL by a process. ... An application must call the WSACleanup function for every successful time the WSAStartup function is called. This means, for example, that if an application calls WSAStartup three times, it must call WSACleanup three times. The first two.WSAStartup function (winsock2.h) The WSAStartup function initiates use of the Winsock DLL by a process. ... An application must call the WSACleanup function for every successful time the WSAStartup function is called. This means, for example, that if an application calls WSAStartup three times, it must call WSACleanup three times. The first two.winsock.h header This header is used by Windows Sockets 2. WSAAsyncSelect The WSAAsyncSelect function (winsock.h) requests Windows message-based notification of network events... WSACancelAsyncRequest The WSACancelAsyncRequest function (winsock.h) cancels an incomplete asynchronous operation. WSACleanup The WSACleanup function (winsock.h).When the client application is done receiving data, the closesocket function is called to close the socket. When the client application is completed using the Windows Sockets DLL, the WSACleanup function is called to release resources. Complete Server Source Code Complete Server Code Related topics Getting Started With Winsock Winsock Server."
898,IsBadReadPtr,"Microsoft Build · May 19 – 22, 2025IsBadReadPtr function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes eve... InterlockedExchangeSubtract Performs an atomic subtraction of two values. IsBadCodePtr Determines whether the calling.AtlThunk_FreeData Frees memory associated with an A... AtlThunk_InitData Initializes an ATL thunk. Obsolete Functions These functions are provided only for compatibility with 16-bit versions of Windows: IsBadCodePtr IsBadReadPtr IsBadStringPtr IsBadWritePtr The function below can return incorrect information, and should not be used. Instead, use.Warning C28720 Banned API Usage: '*function-name' is insecure and has been marked deprecated. Remarks Using one of these APIs indicates that you are testing to see if memory is mapped, which implies that you either don'... Code analysis name: ISBADXXXPTR_API_USAGE Banned Functions Banned API IsBadCodePtr IsBadHugeReadPtr IsBadHugeWritePtr.Happy 10th Anniversary, Windows Matt Pietrek A s I write this, MicrosoftÂ® WindowsÂ® is approaching a major anniversary, one most people have overlooked. No __try and __catch blocks. IsBadReadPtr and IsBadWritePtr didn't make an appearance until Windows 3.1 in 1992. Even then, Windows didn't have anything like the frame-based structured exception.IsBadCodePtr function (winbase.h) Determines whether the calling process has read access to the memory at the specified address. Important  This function is obsolete and should not be used. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target.IsBadStringPtrW function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Note The winbase.h header defines IsBadStringPtr as an alias that automatically sel... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop.IsBadWritePtr function (winbase.h) Verifies that the calling process has write access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.IsBadStringPtrA function (winbase.h) Verifies that the calling process has read access to the specified range of memory. ...hould notRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).Probable causeThis stop is generated if the application is trying to run code from an address that is non-executable or free. To debug this stop: $ u parameter2 - to unassemble the culprit code $ .exr parameter3 - to display the exception information; $ .cxr parameter4 followed by kb - to display the exception context information and the stack."
899,GetPrivateProfileStringA,"Microsoft Build · May 19 – 22, 2025GetPrivateProfileStringA function (winbase.h) Retrieves a string from the specified section in an initialization file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer. [in].GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (... GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA Retrieves a string from the specified section in an initialization file..GetPrivateProfileSectionW The GetPrivateProfileSectionW (Unicode) function (... GetPrivateProfileString The GetPrivateProfileString function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStringA Retrieves a string from the specified section in an initialization file.."
900,SetClassLongW,"Microsoft Build · May 19 – 22, 2025SetClassLongW function (winuser.h) Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. Note  This function has been superseded by the SetClassLongPtr function. To write code that is compatible with both 32-bit and 64-bit.(RegisterClassW) RegisterShellHookWindow Registers a specified Shell window to receive certain messages for events or notifications... SetClassLongA Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs. (ANSI) SetClassLongPtrA.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
901,DeleteDC,"Microsoft Build · May 19 – 22, 2025DeleteDC function (wingdi.h) The DeleteDC function deletes the specified device context (DC). Syntax Parameters [in] hdc A handle to the device context. Return value If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Remarks An application must not delete a DC whose handle was obtained by.The CreateCompatibleDC function can only be used with de... An application can determine whether a device supports these operations by calling the GetDeviceCaps function. When you no longer need the memory DC, call the DeleteDC function. We recommend that you call DeleteDC to delete the DC. However, you can also call DeleteObject with the HDC to.(Unicode) CreateHalftonePalette The... DeleteDC The DeleteDC function deletes the specified device context (DC). DeleteEnhMetaFile The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle. DeleteMetaFile The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle..Printer Device Contexts (Windows GDI) The printer DC can be used when printing on a dot-matrix printer, ink-jet printer, laser printer, or plotter. When an application has finished printing, it deletes the printer DC by calling the DeleteDC function. An application must delete (rather than release) a printer DC; the ReleaseDC function fails when.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::CreateIC Creates an information context for a specific device. CDC::DeleteDC Deletes the Windows device context associated with this CDC object. CDC::DeleteTempMap Called by the CWinApp idle-time handler.wglDeleteContext function (wingdi.h) The wglDeleteContext function deletes a specified OpenGL rendering context. After calling wglDeleteContext, you must call DeleteDC to delete the associated device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.Device Context Functions The following functions are used with device contexts. Function Description CancelDC Cancels any pending operation on the specified ... CreateIC Creates an information context for the specified device. DeleteDC Deletes the specified device context. DeleteObject Deletes a logical pen, brush, font, bitmap, region, or.An application cannot use the ReleaseDC function to release a DC that was created by calling the CreateDC function; instead, it must use the DeleteDC function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.CreateICW function (wingdi.h) The CreateIC function creates an information context for the specified device. Remarks When you no longer need the information DC, call the DeleteDC function. Note The wingdi.h header defines CreateIC as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the."
902,MoveWindow,"Microsoft Build · May 19 – 22, 2025To use the MoveWindow function in your application, you need to call it with the appropriate parameters to set the size and position of a window. The function has the following signature:When you call MoveWindow, it will change the size and position of the specified window and, if bRepaint is set to TRUE, it will also repaint the window.For example, to move a window to the coordinates (100, 100) and resize it to 800x600 pixels, you would use:This function is useful for dynamically adjusting the layout of your application's windows.References:MoveWindow function (winuser.h) Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. Syntax Parameters [in] hWnd Type: HWND A handle to the window. [in] X Type: int The new position of the left side of the window. [in] Y Type: int The.Window handles are returned by the functions that create windows: CreateWindow and CreateWi... To perform an operation on a window, you will typically call some function that takes an HWND value as a parameter. For example, to reposition a window on the screen, call the MoveWindow function: The first parameter is the handle to the window that you.NativeMethods.MoveWindow(IntPtr, Int32, Int32, Int32, Int32, Boolean) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd left Int32 top Int32 nWidth Int32 nHeight Int32 bRepaint Boolean Returns Int32 Applies to. Learn more about the.For this reason, the application should use the adjusted rectangle returned by ABM_SETPOS to set th... The application can use the MoveWindow function to move the appbar into position. By using a two-step process to set the size and position, the system enables the application to provide intermediate feedback to the user during the move operation..COleContr... COleControlSite::ModifyStyle Modifies the current extended styles of the control site. COleControlSite::ModifyStyleEx Modifies the current styles of the control site. COleControlSite::MoveWindow Changes the position of the control site. COleControlSite::QuickActivate Quick activates the hosted control. COleControlSite::SafeSetProperty.Size and Position Functions After creating a window, an application can set the window's size or position by calling one of several different... SetWindowPlacement sets a window's minimized position, maximized position, restored size and position, and show state. The MoveWindow and SetWindowPos functions are similar; both set the size or position.PhysicalToLogicalPoint function (winuser.h) Converts the physical coordinates of a point in a window to logical coordinates. On all platforms, PhysicalToLogicalPoint will fail on a window that has either 0 width or height; an application must first establish a non-0 width and height by calling, for example, MoveWindow. On some versions of Windows.Adding Controls to a Property Sheet By default, a property sheet allocates window area for the property pages, the tab index, and the OK, Cancel, an... After calling the base class CPropertySheet::OnCreate, call GetWindowRect to get the width and height of the currently allocated property sheet window, expand the rectangle's dimensions, and call.You can create a PowerShell script to invoke the function and add the script to the login task. https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-movewindow As MoveWindow is a Win32 function it can be used like this I used the Get-ChildWindow funtion from the below link to get the window handle..ABN_POSCHANGED message Notifies an appbar when an event has occurred that may affect the appbar's size and ... Remarks An appbar should respond to this notification message by sending the ABM_QUERYPOS and ABM_SETPOS messages. If its position has changed, the appbar should call the MoveWindow function to move itself to the new position.."
903,CreateMenu,"Microsoft Build · May 19 – 22, 2025CreateMenu function (winuser.h) Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. Syntax Return value Type: HMENU If the function succeeds, the return value is a handle to the newly created menu. Requirements Requirement Value Minimum supported.UserMenuList.createMenu Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Overloads createMenu() createMenu(String) createMenu() Applies to createMenu(String) Parameters _name String Applies to. Learn more about the Dynamics.AX.Application.UserMenuList.createMenu in the Dynamics.AX.Application.CreateMDIWindowA Creates a multiple-document interface (MDI) child window. (ANSI) CreateMDIWindowW Creates a multiple-document interface (MDI) child window. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Res... CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. CMenu::CreateMenu Creates an empty menu and attaches it to a CMenu object. CMenu::CreatePopupMenu Creates an empty po... Example CMenu. Remarks The menu is not created until you call one of the create or.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. To create an access key for a menu item, precede any character in the item's text string with an ampersand. Menu Creation You can create a menu using either a menu template or menu creation functions. You can also create menu-template.CheckMenuItem Sets the state of the ... CheckMenuRadioItem Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items. CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by.IMenuContainer Interface Manager and container for IMenu objects Methods createMenu getMenu createMenu createMenu(props: IMenuCreationParams): IMenu Create a top level item in the container. Parameters props: IMenuCreationParams Configuration for the menu to create Returns IMenu getMenu getMenu(id: string): Promise Search for a menu item, if it's.CMFCTasksPane::AddWindow Adds a... CMFCTasksPane::CollapseAllGroups CMFCTasksPane::CollapseGroup Programmatically collapses a group. CMFCTasksPane::CreateDefaultMiniframe (Overrides CPane::CreateDefaultMiniframe.). CMFCTasksPane::CreateMenu Called by the framework to create a menu for the Other Tasks Panes menu button..Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu."
904,AllocConsole,"Microsoft Build · May 19 – 22, 2025To use the AllocConsole function in a Windows application, you can follow these steps:Here is a simple example in C:This example demonstrates how to allocate a console and redirect standard input and output to it.References:AllocConsole function Allocates a new console for the calling process. A process can use the FreeConsole function to detach itself from its current console, then it can call AllocConsole to create a new console or AttachConsole to attach to another console. AllocConsole initializes standard input, standard output, and standard error handles for.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias for the specified executable. AllocConsole Allocates a new console for the calling process. AttachConsole Attaches the calling process to the console of the specified process. WriteConsoleOutputCharacter Copies a.A GUI or console process that is not currently attached to a console can use the AllocConsole function to create a new console. Typically, a process uses AllocConsole to create a console when an error occurs requiring interaction with the user. A process can use the FreeConsole function to detach itself from an inherited console or from a console.Closing a Console A process can use the FreeConsole function to detach itself from its console. If other processes share the console, the console is not destroyed, but t... After calling FreeConsole, the process can use AllocConsole to create a new console or AttachConsole to attach to another console. A console is closed when the last process.Classic Console APIs versus Virtual Terminal Sequences Our recommendation is to replace th... Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. Declaration of code page or UTF-8 support is conducted with SetConsoleOutputCP and SetConsoleCP.If the process has an open handle to it as a result of inheritance or duplication, it can ... The calling process must be attached to an inherited console or one allocated by the AllocConsole function. For console handles, set the CreateFile3 parameters as follows: Parameters Value lpFileName Use the CONIN$ value to specify console input.Use the.Consoles The CreateFile function can create a handle to console input (CONIN$). If the process has an open handle to it as a result of inheritance or duplication, it can also create a handle to the active screen buffer (CONOUT$). The calling process must be attached to an inherited console or one allocated by the AllocConsole function. For console.Consoles The CreateFile function can create a handle to console input (CONIN$). If the process has an open handle to it as a result of inheritance or duplication, it can also create a handle to the active screen buffer (CONOUT$). The calling process must be attached to an inherited console or one allocated by the AllocConsole function. For console.Affected Software CSRSS Local EOP AllocConsole Vulnerability - CVE-2011-1281 CSRSS Local EOP SrvSetConsoleLocalEUDC Vulnerability - CVE-2011-1282 CSRSS Local EOP SrvSetConsoleNumberOfCommand Vulnerability - CVE-2011-1283 CSRSS Local EOP SrvWriteConsoleOutput Vulnerability - CVE-2011-1284 CSRSS ... CSRSS Local EOP AllocConsole Vulnerability -.After a process calls FreeConsole, it can call the AllocConsole function to create a new console or AttachConsole to attach to another console. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h)."
905,SubtractRect,"Microsoft Build · May 19 – 22, 2025SubtractRect function (winuser.h) The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another. Syntax Parameters [out] lprcDst A pointer to a RECT structure that receives the coordinates of the rectangle determined by subtracting the rectangle pointed to by lprcSrc2 from the rectangle.OffsetRect Moves the specified rectang... PtInRect Determines whether the specified point lies within the specified rectangle. SetRect Sets the coordinates of the specified rectangle. SetRectEmpty Creates an empty rectangle in which all coordinates are set to zero. SubtractRect Determines the coordinates of a rectangle formed by subtracting one.CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::SetRect Sets the dimensions of CRect. CRect::SubtractRect Subtracts one rectangle from another. CRect::UnionRect Sets CRect equal to the union of two rectangles. Public Operators Name Description.The system flushes the current batch whenever this limit is exceeded. GdiTransparentBlt The GdiTransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. GetArcDirection The GetArcDirection function retrieves the current....ndows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows."
906,GetWindowExtEx,"Microsoft Build · May 19 – 22, 2025GetWindowExtEx function (wingdi.h) This function retrieves the x-extent and y-extent of the window for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [out] lpsize A pointer to a SIZE structure that receives the x- and y-extents in page-space units, that is, logical units. ... function succeeds, the return.(ANSI) GetTextExtentP... (Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of the specified string of text. (ANSI) GetTextExtentPointI The GetTextExtentPointI function computes the width and height of the specified array of glyph indices. GetTextExtentPointW The GetTextExtentPoint function computes the.(ANSI) GetTextExtentP... (Unicode) GetTextExtentPointA The GetTextExtentPoint function computes the width and height of the specified string of text. (ANSI) GetTextExtentPointI The GetTextExtentPointI function computes the width and height of the specified array of glyph indices. GetTextExtentPointW The GetTextExtentPoint function computes the.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. GetWindowExtEx Retrieves the x-extent and y-extent of the window for the specified device context. ScaleWindowExtEx Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors..GetViewportExtEx function (wingdi.h) The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform.ScaleWindowExtEx function (wingdi.h) The ScaleWindowExtEx function modifies the window for a device context using the ratios formed by the specified multiplicands and divisors. ... Gdi32.lib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations GetWindowExtExThe ScaleWindowExtEx function.SetWindowExtEx function (wingdi.h) The SetWindowExtEx function sets the horizontal and vertical extents of the window for a device context by using the specified values. ...ib DLL Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations GetWindowExtEx SIZE SetViewportExtExThe SetWindowExtEx function.An overlapped window used as a main window typically includes all of these components. By specifying the WS_OVERLAPPED or WS_OVERLAPPEDWINDOW style in the CreateWindowEx function, an application creates an overlapped window. If you use the WS_OVERLAPPED style, the window has a title bar and border. Title bars are optional for pop-up windows;."
907,SetConsoleTitleA,"Microsoft Build · May 19 – 22, 2025SetConsoleTitle function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. ...m supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL Kernel32.dll Unicode and AN SetConsoleTitleW (Unicode) and.We'll refer to those versions here as ""Windows"", calling out any exceptions where... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft."
908,SetVolumeLabelA,"Microsoft Build · May 19 – 22, 2025SetVolumeLabelA function (winbase.h) Sets the label of a file system volume. Syntax Parameters [in, optional] lpRootPathName A pointer to a string that contains the volume's drive letter (for example, X:) or the path of a mounted folder that is associated with the volume (for example, Y:\MountX). The string must end with a trailing backslash ('').....rmation, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes eventlogprov Hardware Counter Profiling Internationalization for Windows Applications Menus and Other Resources Operation Recorder Remote Desktop Services Security and Identity System Services Window.FSCTL_DUPLICATE_EXTENTS_TO_FILE Instructs the file system to copy a range of file bytes on behalf of an application. FSCTL_EXTEND_VOLUME Increases the size of a mounted volume. FSCTL_FILE_LEVEL_TRIM Indicates ranges within the specified file that do not need to be stored by the storage system. (FSCTL_GET_INTEGRITY_INFORMATION).APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
909,CreateMailslotA,"Microsoft Build · May 19 – 22, 2025CreateMailslotA function (winbase.h) Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. The mailslot is local to the computer that creates it. An error occurs if a mailslot with the specified name already exists. Syntax Parameters [in] lpName The name of the.(Unicode) CreateJobObjectA Creates or opens a job object. (CreateJobObjectA) CreateMailslotA Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot. (ANSI) CreateMailslotW Creates a mailslot with the specified name and returns a handle that a mailslot server can use to.VSS_SOURCE_TYPE Specifies the type of data that a writer manages. VSS_SUBSCRIBE_MASK Indicates the events that the writer is willing to receive. VSS_USAGE_TYPE Specifies how the host system uses the data managed by a writer involved in a VSS operation. VSS_VOLUME_SNAPSHOT_ATTRIBUTES Allows additional attributes to be specified for a shadow copy.."
910,RestoreDC,"Microsoft Build · May 19 – 22, 2025RestoreDC function (wingdi.h) The RestoreDC function restores a device context (DC) to the specified state. The DC is restored by popping state information off a stack created by earlier calls to the SaveDC function. Syntax Parameters [in] hdc A handle to the DC. [in] nSavedDC The saved state to be restored. Requirements Requirement Value Minimum.Saving, Restoring, and Resetting a Device Context The following functions enable an application to save, restore, and reset a device context: SaveDC, RestoreDC, and ResetDC. ResetDC is provided to reset printer DC data. Typically, an application calls this function after a user has changed one of the printer options and the system has issued a.GetStockObject Retrieves a handle to one of the stock pens... ReleaseDC Releases a device context, freeing it for use by other applications. ResetDC Updates the specified printer or plotter device context using the specified information. RestoreDC Restores a device context to the specified state. SaveDC Saves the current state of the specified.EMRRESTOREDC structure (wingdi.h) The EMRRESTOREDC structure contains members for the RestoreDC enhanced metafile record. Syntax Members emr The base structure for all record types. iRelative Relative instance to restore. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Also, when ... The StartPage function calls the RestoreDC and SaveDC functions, which result in WCS being turned off for the printer's DC. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. Public Methods Name Description CDC::AbortDoc Terminates the current print job, erasing everything the ap... CDC::GetLayout Retrieves the layout of a device context (DC). The layout can be either left to right.2.3.5 State Record Types This section defines the State Record Types, which define and manage the graphics properties specified in the Playback Device Context (section 3.1.5). The following are the State Record ... META_RESIZEPALETTE 2.3.5.9 Redefines the size of the logical palette that is defined in the playback device context. META_RESTOREDC.A saved state can be restored by using the RestoreDC function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Device Context.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt.2.3.11 State Record Types The State record types specify graphics properties that define the playback device context during the processing of EMF metafile records. This record ... EMR_RESTOREDC 2.3.11.6 Restores the playback device context to the specified state, which was saved by a preceding EMR_SAVEDC record. EMR_SAVEDC 2.3.11 Saves the current."
911,LoadLibraryA,"Microsoft Build · May 19 – 22, 2025The LoadLibraryA function is used to load a specified module (DLL) into the address space of the calling process. When this function is called, it attempts to locate the DLL using the same search sequence that is used for implicit linking. If the function succeeds, it returns a handle to the DLL, which is required for other functions used for explicit linking, such as GetProcAddress and FreeLibrary.The LoadLibraryA function is particularly useful for dynamic linking, allowing a module to call exported functions from a DLL at runtime. If the DLL is already loaded, LoadLibraryA returns a handle to the existing instance and increments the reference count of the module. If the DLL cannot be found or if the entry-point function returns FALSE, LoadLibraryA returns NULL.References:LoadLibraryA function (libloaderapi.h) Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded. For additional load options, use the LoadLibraryEx function. Syntax Parameters [in] lpLibFileName The name of the module. This can be either a library module (a .dll file) or.libloaderapi.h header This header is used by multiple technologies. For more i... (Unicode) GetProcAddress Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL). LoadLibraryA Loads the specified module into the address space of the calling process. (LoadLibraryA) LoadLibraryExA Loads the specified.From the March 2002 issue of MSDN Magazine Wind... The two most familiar routes to LoadLibraryExW are LoadLibraryA and LoadLibraryW. But if you examine a disassembly of LoadLibraryA and LoadLibraryW, you will discover that they are merely thin wrappers around the more versatile LoadLibraryExA and LoadLibraryExW APIs, respectively. With.This mitigation protects the following Windows APIs: GetProcAddress GetProcAddressForCaller LoadLibraryA LoadLibraryExA LoadLibraryW LoadLibraryExW LdrGetProcedureAddress LdrGetProcedureAddressEx LdrGetProcedureAddressForCaller LdrLoadDll VirtualProtect VirtualProtectEx VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory NtProtectVirtualMemory.In a macro, you can use the LoadLibrary function in the Windows API to load wininet.dll dynamically. Here is an example in VBA: Declare Function LoadLibrary Lib &quot;kernel32&quot; Alias &quot;LoadLibraryA&quot; (ByVal lpLibFileName As String) As Long Sub LoadWininet() LoadLibrary &quot;wininet.dll&quot; End Sub In PowerShell, you can use the.To demonstrate vectored exception handling, I created a small project that uses breakpoints to monitor when a program calls LoadLibrary. You may be wondering why I chose to monitor the LoadLi... There's a good reason. Because LoadLibrary takes a string parameter, there are both ANSI and Unicode versions of it. The most commonly used form of.Fatal error at thread exit if FLS callback isn't freed This article helps you resolve the problem where a C++ DLL statically linked to C Run-time Library (CRT) causes a fatal error at t... A process may crash at thread exit with an Access Violation exception (0xC0000005, EXCEPTION_ACCESS_VIOLATION) if it had dynamically loaded (such as by calling.Hi, I am trying to load an executable (.exe) file called main2.exe into the address space of another executable file. I used the Win32 LoadLibraryA function but it only works when I convert main2.exe into a Dynamic Linked Library called main2.dll. Read Darran Rowe's detailed explanations of why exporting functions from an .exe is problematic here.Loading unicows.dll The MSLU loader has a very simple method for loading unicows.dll: it makes a single call to LoadLibraryA. It does so without any path, so t... You need to make sure that the loader can find the DLL, usually by having it in your own application's process directory or by calling LoadLibraryA yourself. Place the following line of.Hello, First, sorry for my poor english. I use windbg, procmon, ida. And i see that LoadLibraryA returns &quot;ERROR_INVALID_IMAGE_HASH 577 (0x241) : Windows cannot verify the digital signature for this file&quot. And it returns that because CI.dll detects a &quot;wrong&quot; certificat (I think that). And i see that LoadLibraryA returns."
912,IsCharAlphaNumericA,"Microsoft Build · May 19 – 22, 2025IsCharAlphaNumericA function (winuser.h) Determines whether a character is either an alphabetical or a numeric character. ...on is based on the semantics of the language selected by the user during setup or through ContrRemarks Note The winuser.h header defines IsCharAlphaNumeric as an alias that automatically selects the ANSI or Unicode version.IsCharAlphaA Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup... (ANSI) IsCharAlphaNumericA Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
913,GetNumberFormatW,"Microsoft Build · May 19 – 22, 2025GetNumberFormatW function (winnls.h) Formats a number string as a number string customized for a locale specified by identifier. Note  For interoperability reasons, the application should prefer the GetNumberFormatEx function to GetNumberFormat because Microsoft is migrating toward the use of locale names instead of locale identifiers for new.GetNumberFormatA Formats a number string as a number string customized for a locale specified by identifier. (ANSI) GetNumberFormatEx Formats a number string as a number string customized for a locale specified by name.Note  The application should call this function in preference to GetNumberFormat if designed to run only on Windows Vista and.GetNLSVersionEx Retrieves information about ... GetNumberFormatA Formats a number string as a number string customized for a locale specified by identifier. (ANSI) GetNumberFormatEx Formats a number string as a number string customized for a locale specified by name.Note  The application should call this function in preference to GetNumberFormat....mSystemLocalesW DEPRECATED EnumSystemLocalesEx FindNLSString DEPRECATED FindNLSStringEx GetCPInfo DEPRECATED Use Unicode GetCPInfoExA DEPRECATED Use Unicode GetCPInfoExW DEPRECATED Use Unicode GetCurrencyFormatA DEPRECATED GetCurrencyFormatEx GetCurrencyFormatW DEPRECATED GetCurrencyFormatEx GetGeoInfoA DEPRECATED GetGeoInfoEx GetGeoInfoW.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`."
914,TranslateAcceleratorW,"Microsoft Build · May 19 – 22, 2025TranslateAcceleratorW function (winuser.h) Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window.(StringCbCatExA) StringCbCatExW Concatenates one string to another string. (StringCbCatExW) StringCbCatNA Concatenates the specified number of bytes from one string to another string. (StringCbCatNExA) StringCbCatNExW Concatenates the specified number of bytes from one string to another string. (StringCbCatNExW) StringCbCatNW Concatenates the.A Walkthrough of Win32 Inside Windows Presentation Framework (HwndHost) To reuse Win32 content inside WPF applications, use HwndHost, which is a control that makes HWNDs look like WPF content. You should now override the TranslateAccelerator implementation (wh... First, the code using C++ and C++ macros; you need to be aware that there is already.CopyAcceleratorTableA Copies the specified accelerator table. (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. CreateAcceleratorTableA Creates an accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (ANSI) CreateDesktopExW Creates a new desktop with the specified heap, associates it with the current."
915,SetFocus,"Microsoft Build · May 19 – 22, 2025The SetFocus method is used in various Microsoft products to move the focus to a specific object or control. Here are some examples of how to use the SetFocus method in different contexts:References:Attachment.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents an Attachment object. Remarks Use the SetFocus method when you want a particular field or control.Page.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents a Page object. Return value Nothing Remarks Use the SetFocus method when you want a particular field or.OptionGroup.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents an OptionGroup object. Return value Nothing Remarks Use the SetFocus method when you want a.Image.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents an Image object. Return value Nothing Remarks Use the SetFocus method when you want a particular field.TextBox.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents a TextBox object. Return value Nothing Remarks Use the SetFocus method when you want a particular.Form.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents a Form object. Remarks Use the SetFocus method when you want a particular field or control to have the.CheckBox.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents a CheckBox object. Return value Nothing Remarks Use the SetFocus method when you want a particular.ObjectFrame.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents an ObjectFrame object. Return value Nothing Remarks Use the SetFocus method when you want a.CustomControl.SetFocus method (Access) The SetFocus method moves the focus to the specified form, the specified control on the active form, or the specified field on the active datasheet. Syntax expression.SetFocus expression A variable that represents a CustomControl object. Return value Nothing Remarks Use the SetFocus method when you want a.SetFocus Method (Outlook Controls) Moves the focus to this instance of an object. Syntax expression. SetFocus expression A variable that represents an Outlook control object. Remarks If setting the focus fails, the focus reverts to the previous object and an error is generated. By default, setting the focus to a control does not activate the."
916,GetDiskFreeSpaceA,"Microsoft Build · May 19 – 22, 2025GetDiskFreeSpaceA function (fileapi.h) Retrieves information about the specified disk, including the amount of free space on the disk. Syntax Parameters [in] lpRootPathName The root directory of the disk for which information is to be returned. If this parameter is NULL, the function uses the root of the current disk. If this parameter is a UNC.Mov... GetDiskFreeSpaceExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceA Introduced into.(ANSI) GetC... (Unicode) GetDiskFreeSpaceA Retrieves information about the specified disk, including the amount of free space on the disk. (ANSI) GetDiskFreeSpaceExA Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
917,EnumResourceTypesW,"Microsoft Build · May 19 – 22, 2025EnumResourceTypesW function (winbase.h) Enumerates resource types within a binary module. Starting with Windows Vista, this is typically a language-neutral Portable Executable (LN file), and the enumeration also includes resources from one of the corresponding language-specific resource files (.mui files)—if one exists—that contain localizable.(AN... EnumResourceLanguagesA Enumerates language-specific resources, of the specified type and name, associated with a binary module. (ANSI) EnumResourceLanguagesW Enumerates language-specific resources, of the specified type and name, associated with a binary module. (Unicode) EnumResourceTypesA Enumerates resource types within a binary module..(ANSI) EnumResourceTypesExW Enumerates resource types associated with a specified binary module. (Unicode) EnumResourceTypesW Enumerates resource types within a binary module. (Unicode) ENUMRESTYPEPROCA An application-defined callback function used with the EnumResourceTypes and EnumResourceTypesEx functions. (ANSI) ENUMRESTYPEPROCW An."
918,Arc,"Microsoft Build · May 19 – 22, 2025Azure Arc is a cloud-based service that extends the Azure Resource Manager-based management model to non-Azure resources, such as virtual machines, Kubernetes clusters, and containerized databases. It simplifies governance and management by providing a consistent multicloud and on-premises management platform. With Azure Arc, organizations can manage their entire environment together, using familiar Azure services and management capabilities, regardless of where their resources are located.Azure Arc enables the management of Windows and Linux physical servers and virtual machines hosted outside of Azure, as well as Kubernetes clusters and Azure data services. It allows for a unified management experience, making it easier to implement DevOps practices alongside traditional IT operations.References:Configure trusted ARC sealers Email authentication helps validate mail sent to and from your Microsoft 365 organization to prevent spoofed senders that are used in business email compromise (BEC), ransomware, and other phishing attacks. Authenticated Received Chain (ARC) helps reduce inbound email authentication failures from message modification.What are Azure Arc-enabled data services. Azure Arc makes it possible to run Azure data services on-premises, at the edge, and in public clouds using Kubernetes and the infrastructure of your choice. Currently, the following Azure Arc-enabled data services are available: SQL Managed Instance Azure Arc-enabled PostgreSQL (preview) For an.Windows Server Management enabled by Azure Arc Windows Server Management enabled by Azure Arc offers customers with Windows Server licenses that have active Software Assurances or Windows Server licenses that are active subscription licenses the following key benefits: Benefit Supported Operating Systems Description Azure Update Manager Windows.What is Azure Arc-enabled servers. Azure Arc-enabled servers lets you manage Windows and Linux physical servers and virtual machines hosted outside of Azure, on your corporate network, or other cloud provider. For the purposes of Azure Arc, these machines hosted outside of Azure are considered hybrid machines. The management of hybrid machines in.Modernize server management from Configuration Manager to Azure Arc Azure Arc delivers a modern server management experience for Microsoft Endpoint Configuration Manager (MECM) and Systems Center Configuration Manager (SCCM) customers. ... client endpoint delivers the next iteration of Microsoft’s server management capabilitiesThis article.Azure Arc resource bridge is a Microsoft managed product that is part of the core Azure Arc platform. ...agement fro for virtualized Windows and Linux virtual machines hosted in an on-premises environment on Azure Local (Azure Arc VM management), VMware (Arc-enabled VMware vSphere), and System Center Virtual Machine Manager (Arc-enabledAzure Arc.Azure Arc documentation Simplify complex and distributed environments across on-premises, edge, and multicloud. Overview About Azure Arc sample Azure Arc Jumpstart Overview Azure Arc-enabled servers Overview Azure Arc-enabled Kubernetes Overview Azure Arc-enabled data services Overview SQL Server enabled by Azure Arc Azure Arc-enabled servers.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Register your machines and assign permissions for Azure Local deployment Applies to: Azure Local 2311.2 and later This article describes how to register your Azure Local machines and then set up the required permissions to deploy Azure.License provisioning guidelines for Extended Security Updates for Windows Server 2012 Flexibility is critical when enrolling end of support infrastructure in Extended Security Updates (ESUs) through Azure Arc to receive critical patches. ...on Windows Server 2012 Arc ESU and then link those licenses to your Azure Arc-enabledTo assist with the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Connected Machine agent network requirements This topic describes the networking requirements for using the Connected Machine agent to onboard a physical server or virtual machine to Azure Arc-enabled servers. ...zure public cloud,."
919,GetFileInformationByHandle,"Microsoft Build · May 19 – 22, 2025GetFileInformationByHandle function (fileapi.h) Retrieves file information for the specified file. For a more advanced version of this function, see GetFileInformationByHandleEx. To set file information using a file handle, see SetFileInformationByHandle. Syntax Parameters [in] hFile A handle to the file that contains the information to be.BY_HANDLE_FILE_INFORMATION structure (fileapi.h) Contains information that the GetFileInformationByHandle function retrieves. The ReFS file system, introduced with Windows Server 2012, includes 128-bit f... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop.Directory Handles Whenever a process creates or opens a directory object, it receives a handle to the object. To obtain a handle to an existing directory, call the CreateFile function with the FILE_FLAG_BACKUP_SEMANTICS flag. You can pass a directory handle to the following functions. BackupWrite Restore a file or directory that was backed up.Note  In rare cases or on a heavily loade... To be assured of getting the current NTFS file system file attributes, call the GetFileInformationByHandle function. The order in which this function returns the file names is dependent on the file system type. With the NTFS file system and CDFS file systems, the names are usually returned in.Note  In rare cases or on a heavily loade... To be assured of getting the current NTFS file system file attributes, call the GetFileInformationByHandle function. The order in which this function returns the file names is dependent on the file system type. With the NTFS file system and CDFS file systems, the names are usually returned in.DispatchQueryInformation Routines A driver's DispatchQueryInformation routine handles IRPs for the IRP_MJ_QUERY_INFORMATION I/O functio... This request is sent by the I/O manager and other operating system components, as well as other kernel-mode drivers. For example, it is sent when a user-mode application calls GetFileInformationByHandle, and.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Management Structures The following structures are used in file management. In this section Structure Description BY_HANDLE_FILE_INFORMATION Contains information that the GetFileInformationByHandle function retrieves..COPYFILE2_MESSAGE_TYPE Indicates the type of message passed in the COPYFILE2_MESSAGE structure to the CopyFile2ProgressRoutine callback function. FILE_INFO_BY_HANDLE_CLASS Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set. FILE_INFO_BY_NAME_CLASS Identifies the type.FSCTL_SET_COMPRESSION You cannot change the compression state of a file opened by CreateFileTransacted. GetFileInformationByHandle and GetFileInformationByHandleEx If there is a transaction bound to the file handle, then the function returns information for the isolated file view. SetFileInformationByHandle If there is a transaction bound to the.FindFirstFileW function (fileapi.h) Searches a directory for a file or subdirectory with a name that matches a specific name (or partial nam... To be assured of getting the current NTFS file system file attributes, call the GetFileInformationByHandle function. After the search handle is established, you can use it to search for other files that."
920,LocalReAlloc,"Microsoft Build · May 19 – 22, 2025LocalReAlloc function (winbase.h) Changes the size or the attributes of a specified local memory object. Syntax Parameters [in] hMem A handle to the local memory object to be reallocated. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP.The GlobalReAlloc and LocalReAlloc functions change the size or the attributes of a memory object allocated by GlobalAlloc and LocalAlloc. The GlobalFree and LocalFree functions release memory allocated by GlobalAlloc, LocalAlloc, GlobalReAlloc, or LocalReAlloc. The handle can be used later by GlobalReAlloc or LocalReAlloc to allocate a new block.Return value None Remarks Although LocalDiscard discards the object's memory block, the handle to the object remains valid. A process can subsequently pass the handle to the LocalReAlloc function to allocate another local memory object identified by the same handle. ... Minimum supported client Windows XP [desktop apps only] Minimum supported.LocalLock function (winbase.h) Locks a local memory object and returns a pointer to the first byte of the object's memory block. This handle is returned by either the LocalAlloc or LocalReAlloc function. Each successful call that a process makes to LocalLock for an object must be matched by a corresponding call to LocalUnlock. Locked memory will.LocalFlags function (winbase.h) Retrieves information about the specified local memory object. Note  This function is provided only for compatibility with 16-bit versions of Windows. This handle is returned by either the LocalAlloc or LocalReAlloc function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only].LocalSize function (winbase.h) Retrieves the current size of the specified local memory object, in bytes. This handle is returned by the LocalAlloc, LocalReAlloc, or LocalHandle function. ...nts Requirement Value Minimum supported client Windows XP [desktop apps only] supported server Windows Server 2003 [desktop apps only] Target Platform.This handle is returned by either the LocalAlloc or LocalReAlloc function. For each call that a process makes to LocalLock for an object, it must eventually call LocalUnlock. Locked memory will not be moved or discarded unless the memory object is reallocated by using the LocalReAlloc function. Requirements Requirement Value Minimum supported.LocalFree function (winbase.h) Fre... This handle is returned by either the LocalAlloc or LocalReAlloc function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h) Library.The ATL-provided memory managers simply wrap existing memory allocation facilities: CCRTHeap Wraps the standard CRT heap functions (malloc, free, and realloc) CWin32Heap Wraps a Win32 heap handle, using HeapAlloc, HeapFree, and HeapRealloc CLocalHeap Wraps the Win32 APIs: LocalAlloc, LocalFree, and LocalRealloc CGlobalHeap Wraps the Win32 APIs:.Not applicable. GlobalLock, LocalLock Locks a global memory object and returns a pointer to the first byte of the object's memory block. Not applicable. GlobalReAlloc, LocalReAlloc Changes the size or attributes of a specified global memory object. HeapReAlloc GlobalSize, LocalSize Retrieves the current size of the specified global memory object.."
921,MessageBoxExW,"Microsoft Build · May 19 – 22, 2025MessageBoxExW function (winuser.h) Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface. Currently MessageBoxEx and MessageBox work the same way. Syntax Parameters [in,.IsDialogMessageA Determines whether a message is intended for the specified di... (ANSI) IsDialogMessageW Determines whether a message is intended for the specified dialog box and, if it is, processes the message. MessageBox The MessageBox function displays a modal dialog box that contains a system icon, a set of buttons, and a brief.(BroadcastSystemMessageA) BroadcastSystemMessageExA Sends a message to the specified recipients. (BroadcastSystemMessageExA) BroadcastSystemMessageExW Sends a message to the specified recipients. (BroadcastSystemMessageExW) BroadcastSystemMessageW The BroadcastSystemMessageW (Unicode) function sends a message to the specified recipients.."
922,AddFontResourceA,"Microsoft Build · May 19 – 22, 2025AddFontResourceA function (wingdi.h) The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application. To mark a font as private or not enumerable, use the AddFontResourceEx function. Syntax Parameters [in] unnamedParam1 A pointer to a.AbortPath The AbortPath function closes and discards any paths in the specified devi... AddFontMemResourceEx The AddFontMemResourceEx function adds the font resource from a memory image to the system. AddFontResourceA The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context... AddFontResourceA The.Changes: Uncomment line 71: support .pfm files Add the if in line 125 according to the information found here: https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-addfontresourcea Convert-path at line 459 so it supports internal network paths Add the if in line 468 for .pfm files. Changes: Uncomment line 71: support .pfm files Add."
923,SendMessageW,"Microsoft Build · May 19 – 22, 2025SendMessageW function (winuser.h) Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum.InSendMessage Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function. SendMessage The SendMessage function sends the specified message to a window or windows. (ANSI) SendMess... (Unicode) SendMessageW The.On native ANSI platforms, this string ... When it is passed to the ANSI FormatMessage function, it is interpreted as an ANSI string rather than a Unicode string. (PeekMessage and PostMessage) On native ANSI platforms, no translation is performed on the transmitted or retrieved message. (SendMessage) On native Unicode platforms, the.I've tried with &quot;SendMessageW(hWnd, WM_GETTEXT, length, (WPARAM)buffer)&quot; and GetWindowTextW(hWnd, buffer, length) when HCBT_ACTIVATE fired. Only works with the first one, the second one is always null. https://youtu.be/uv0wFnftWgY| Hello @Mai Co Zo Xop , My ques... Detours is most commonly used to intercept Win32 APIs calls within an.... msg As Integer, ByVal wParam As Integer, ByRef lParam As Point) As Integer Private Sub RichTextBox1_VScroll(sender As Object, e As EventArgs) Handles RichTextBox1.VScroll Dim pt As SendMessage(RichTextBox1.Handle, EM_GETSCROLLPOS, 0, pt) SendMessage(RichTextBox2.Handle, EM_SETSCROLLPOS, 0, pt) End Sub Private Sub RichTextBox2_VScroll(sender As....essageW+0x3dc USER32!PostMessageW ntdll!KiUserCallbackDispatcher+0x24 win32u!NtUserMessageCall+0x14 USER32!SendMessageW+0x295 USER32!SendMessageW+0x10f Comctl32!TaskDialog+0xe7a3 Comctl32!GetMUILanguage+0x21ee9 USER32!CallWindowProcW+0x419 USER32!CallWindowProcW+0x8e MFC42u!Ordinal2399+0x3e MFC42u!Ordinal6812+0x78 MFC42u!Ordinal1407+0x144....e 000000ba 3cbd3bf9 : 00000223 000b02f0 00007ffa 00000000 : Procmon64+0x7cb97 000000ba 3cbd2357 : 00000000 00000002 00007ffa 000002ac : Procmon64+0x83bf9 000000ba a389e7e8 : 00000000 001102e4 00000000 00000000 : Procmon64+0x82357 000000ba a389e229 : 00000000 3cbd2310 00000000 00000204 : user32!UserCallWinProcCheckWow+0x2f8 000000ba a389bfe0 :....0000 4361a77a : shell32!SHELL32_RefreshOverlayImages+0x44b3 00000000 29924697 : 00000000 f6010718 00000000 00000000 : comctl32!CallNextSubclassProc+0xa8 00000000 43611a6c : 00000000 00000001 00000000 00000000 : comctl32!MasterSubclassProc+0xa7 00000000 43610803 : 00000000 299245f0 00000000 00000014 : user32!UserCallWinProcCheckWow+0x33c.(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients. (BroadcastSystemMessage) BroadcastSystemMessageA Sends a message to the specified recipients. (BroadcastSystemMessageA)....ed external __imp_TranslateMessage 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_DispatchMessageW referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_DispatchMessageW 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external."
924,CallWindowProcW,"Microsoft Build · May 19 – 22, 2025CallWindowProcW function (winuser.h) Passes message information to the specified window procedure. The SetWindowLong function creates the subclass by changing the window procedure associated with a particular window, causing the system to call the new window procedure instead of the previous one. Requirements Requirement Value Minimum supported.CWPSTRUCT structure (winuser.h) Defines the message parameters passed to a WH_CALLWNDPROC hook procedure, CallWindowProcW function/CallWindowProcA function. The exact meaning depends on the message value. message Type: UINT The message. hwnd Type: HWND A handle to the window to receive the message. Requirements Requirement Value Minimum supported.(ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. CallWindowProcA Passes message information to the specified window procedure. (ANSI) CallWindowProcW Passes message information to the specified window procedure. ChangeWindowMessageFilter Adds or.A hook procedure can call this function either before or after processing the hook information. CallWindowProcA Passes message information to the specified window procedure. (ANSI) CallWindowProcW Passes message information to the specified window procedure. (ANSI) ChangeDisplaySettingsExW The ChangeDisplaySettingsEx function changes the settings.HOOKPROC callback function (winuser.h) An application-defined or library-defined callback function used with the SetWindowsHookEx function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h....essageW+0x3dc USER32!PostMessageW+0x10d ntdll!KiUserCallbackDispatcher+0x24 win32u!NtUserMessageCall+0x14 USER32!SendMessageW+0x295 USER32!SendMessageW Comctl32!TaskDialog+0xe7a3 Comctl32!GetMUILanguage+0x21ee9 USER32!CallWindowProcW+0x419 USER32!CallWindowProcW+0x8e MFC42u!Ordinal2399+0x3e MFC42u!Ordinal6812+0x78 MFC42u!Ordinal1407+0x144....sterSubclassProc+0xa7 00000000 436115bc : 00000000 299245f0 00000000 0000 user32!UserCallWinProcCheckWow+0x33c 00000000 4362496d : 00000000 00000000 00000000 43695000 : user32!DispatchClientMessage+0x9c 00000000 43e66fc4 : 00007ffa 0199caa0 00000000 43613d5f : user32!_fnDWORD+0x3d 00000000 415ac6d4 : 00007ffa 04944ca0 00007ffa 03d54360 :.WNDPROC callback function (winuser.h) A callback function, which you define ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include windows.h) See also CallWindowProcW DefWindowProcW RegisterClassExW Window.Golly-plops &amp; turtle tops. I’ve sub-classed a ListView with the intent of making i... I’m only using for testing.| In your code, you replace the default drawing with your Button To draw above the default drawing, you can use Custom Draw +/- is drawn with DrawThemeBackground when themed (TVP_GLYPH, ...) or manually with PatBlt when not themed."
925,OleUninitialize,"Microsoft Build · May 19 – 22, 2025OleUninitialize function (ole2.h) Closes the COM library on the apartment, releases any class factories, other COM objects, or servers held by the apartment, disables RPC on the apartment, and frees any resources the apartment maintains. ...eturn value None Remarks Call OleUninitialize on application s as the last COM library call, if the.The CoUninitialize and OleUninitialize functions call CoFreeAllLibraries internally, so applications usually have no need to call this function directly. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows.If you called OleInitialize during session startup to initialize the OLE libraries, uninitialize them now by calling OleUninitialize. Only clients that have called OleInitialize must call OleUninitialize. Uninitialize the MAPI libraries by calling MAPIUninitialize. If you called OleInitialize at some point, make sure that a call to OleUninitialize.OleInitialize function (ole2.h) Initializes the COM library on the current apartment, identifies the concurrency model as single-thread apartment (STA), and enables additional functionality described in the Remarks section below. To close the COM library grac... Initializes the COM library on the current apartment, identifies the concurrency model.For detailed information on threading issues in in-process s... It is also important to uninitialize the library. For each call to CoInitialize or CoInitializeEx, there must be a corresponding call to CoUninitialize. For each call to OleInitialize, there must be a corresponding call to OleUninitialize. In-process servers can assume that the....dPicture OleLoadPictureEx OleLockRunning OleMetafilePictFromIconAndLabel OleNoteObjectVisible OleQueryCreateFromData OleQueryLinkFromData OleRegEnumFormatEtc OleRegEnumVerbs OleRun OleSave OleSaveToStream OleSetClipboard OleSetContainedObject OleSetMenuDescriptor OleTranslateAccelerator OleUIAddVerbMenu OleUIBusy OleUICanConvertOrActivateAs.ListView_SetBkImage macro (commctrl.h) Sets the background image in a list-view control. Remarks Because the list-view control uses OLE COM to manipulate the background images, the calling application must call CoInitialize or OleInitialize before using this macro. It is best to call one of these functions when the application is initialized and.Calls to OleInitialize must be balanced by calls to OleUninitialize. The OleUninitialize function calls CoUninitialize internally, so applications that call OleUninitialize do not also need to call CoUninitialize. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.Remarks Because the list-view control uses OLE COM to manipulate the background images, the calling application must call CoInitialize or OleInitialize before sending this message. It is best to call one of these functions when the application is initialized and call either CoUninitialize or OleUninitialize when the application is terminating..SHAutoComplete function (shlwapi.h) Instructs system edit controls to use AutoComplete to help complete URLs or file system paths. To retrieve a handle to an edit control embedded in a ComboBoxEx control, send the ComboBoxEx control a CBEM_GETEDITCONTROL message. An application must have invoked either CoInitialize or OleInitialize prior to."
926,FillRgn,"Microsoft Build · May 19 – 22, 2025FillRgn function (wingdi.h) The FillRgn function fills a region by using the specified brush. Syntax Parameters [in] hdc Handle to the device context. [in] hrgn Handle to the region to be filled. The region's coordinates are presumed to be in logical units. [in] hbr Handle to the brush to be used to fill the region. Return value If the function.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.Filling Regions An application fills the interior of a region by calling the FillRgn function and supplying a handle that identifies a specific brush. When an application calls FillRgn , the system fills the region with the brush by using the current fill mode for the specified device context. There are two fill modes: alternate an... An.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. FillRect The FillRect.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. ExtCreateRegion Creates a region from the specified region and transformation data. FillRgn Fills a region by using the specified brush. FrameRgn Draws a border around the.For example, there are no functions... Using PathToRegion , an application can create the effect of animating a complex shape by creating a path that defines the shape, converting the path into a region (by calling PathToRegion), and then repeatedly painting, moving, and erasing the region (by calling functions in a sequence, such as FillRgn,.EMRFILLRGN structure (wingdi.h) The EMRFILLRGN structure contains members for the FillRgn enhanced metafile record. Syntax Members emr The base structure for all record types. rclBounds Bounding rectangle, in device units. cbRgnData Size of region data, in bytes. ihBrush Index of brush, in handle table. Requirements Requirement Value Minimum.CDC::FillPath Closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode. CDC::FillRect Fills a given rectangle by using a specific brush. CDC::FillRgn Fills a specific region with the specified brush. CDC::FillSolidRect Fills a rectangle with a solid color. CDC::FlattenPath.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt.2.3.5.10 EMR_FILLRGN Record The EMR_FILLRGN record fills the specified region by using the specified brush. The current clipping regions used by this record are maintained in a Regions state element (section 3.1.1.2.1) in t... Type (4 bytes): An unsigned integer that identifies this record type as EMR_FILLRGN. The EMR_FILLRGN record fills the."
927,GetFileAttributesExA,"Microsoft Build · May 19 – 22, 2025GetFileAttributesExA function (fileapi.h) Retrieves attributes for a specified file or directory. To perform this operation as a transacted operation, use the GetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file or directory. Note The fileapi.h header defines GetFileAttributesEx as an alias that.FindNextFileA Intro... GetDiskFreeSpaceExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. GetFileAttributesExW Introduced into api-ms-win-core-file-l1-2-1.dll in.FINDEX... FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. NVME_ASYNC_EVENT_ERROR_STATUS_CODES.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (ANSI) GetFileAttributesExA Retrieves attributes for a specified file or directory. (ANSI)...."
928,ToUnicode,"Microsoft Build · May 19 – 22, 2025ToUnicode function (winuser.h) Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. Syntax Parameters [in] wVirtKey Type: UINT The virtual-key code to be translated. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported.IOleCvt::ToUnicode method The ToUnicode property enables an ASP Web page to convert one Unicode string to another using a specified code page. Syntax Parameters bstrString [in] Caller-supplied string to be converted. lCodePage [in] Caller-supplied code page to use for the conversion. For more information, see the following Remarks sec... The.IDN.ToUnicode Method Definition Namespace: Java.Net Assembly:Mono.Android.dll Overloads ToUnicode(String) Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490. ToUnicode(String, IDNFlags) Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the.LCMapString Maps a character string by locale. ToUnicode Translates a virtual key code into a Unicode character. MultiByteToWideChar Maps a multibyte string to a Unicode string. The WideCharToMultiByte and MultiByteToWideChar functions are particularly useful for applications that support several str... ANSI C also defines the conversion functions.ACE is an encoding of Unicode strings that uses only ASCII characters and can be used with software (such as the Domain Name System) that o... RFC 3490 defines two operations: ToASCII and ToUnicode. (Inherited from Object) ToUnicode(String, IDNFlags) Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode....nput and output of ToASC ToUnicode operations are Unicode and are designed to be chainable, i.e., applying ToASCII or ToUnicodeToUnicode(ToUnicode(ToUnicode...(ToUnicode(string)))) == ToUnicode(string) ToASCII(ToASCII(ToASCII...(ToASCII(string))) == ToASCII(string).Java documentation for android.icu.text.IDNA.Portions of this page are.The function translates the code using the input language and physical keyboard layout identified by the input locale identifier. ToUnicode Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. To specify a handle to the keyboard layout to use to translate the specified code, use the.If the Unicode version of the RegisterClass function was used to register the window class, the system provides Unicode c... These functions include MapVirtualKey, ToAscii, ToUnicode, and VkKeyScan. In addition, Microsoft Rich Edit 3.0 supports the HexToUnicode IME, which allows a user to convert between hexadecimal and Unicode characters by using.The function translates the code using the input language and physical keyboard layout identified by the input locale identifier. ToUnicode Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters. (ToUnicode) ToUnicodeEx Translates the specified virtual-key code and keyboard state to the.In this case, use the ToUnicode or ToUnicodeEx methods to get the character for the corresponding key press. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library."
929,GetKeyboardLayoutNameA,"Microsoft Build · May 19 – 22, 2025GetKeyboardLayoutNameA function (winuser.h) Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread. Syntax Parameters [out] pwszKLID Type: LPTSTR The buffer (of at least KL_NAMELENGTH characters in length) that receives the name of the input locale identifier, including the terminating.GetKeyboardLayoutList Retrieves the input locale identifier... The function copies the identifiers to the specified buffer. GetKeyboardLayoutNameA Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread. (ANSI) GetKeyboardLayoutNameW Retrieves the name of the active input locale....and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows Accessibility Features Windows."
930,SetMessageExtraInfo,"Microsoft Build · May 19 – 22, 2025SetMessageExtraInfo function (winuser.h) Sets the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. An application can use the GetMessageExtraInfo function to retrieve a thread's extra message information. Syntax Parameters [in].Messages and Message Queues This section describes messages and message queues and how to use them in your applications. In This Section Name Description About Messages and Message Queues This section discusses Windows messages and message queues. If the window was created by a different thread, SendNoti... SetMessageExtraInfo Sets the extra.Remarks To set a thread's extra message information, use the SetMessageExtraInfo function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.The function suspends the thread and does not return until a new message is placed in the thread's message queue. You can call the SetMessageExtraInfo function to associate a value with the current thread's message queue. Then call the GetMessageExtraInfo function to get the value associated with the last message retrieved by the GetMessage or.(GetMessageA) GetMessageExtraInfo Retrieves the extra message information for the current thread. (SendNotifyMessageW) SetAdditionalForegroundBoostProcesses SetAdditionalForegroundBoostProcesses is a performance assist API to help applications with a multi-process application model where multiple processes contribute to a foreground experience,.Message Functions (Windows and Messages) BroadcastSystemMessage BroadcastSystemMessageEx DispatchMessage GetInputState GetMessage GetMessageExtraInfo GetMessagePos GetMessageTime GetQueueStatus InSendMessage InSendMessageEx PeekMessage PostMessage PostQuitMessage PostThreadMessage RegisterWindowMessage ReplyMessage SendAsyncProc SendMessage.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
931,GetProcAddress,"Microsoft Build · May 19 – 22, 2025GetProcAddress is a function used in Windows programming to obtain the address of an exported function from a Dynamic-Link Library (DLL). It requires the handle of the DLL module, which can be obtained through functions like LoadLibrary or GetModuleHandle. The function can be called using either the name of the function or its export ordinal.When using GetProcAddress, it's important to ensure that the parameters passed to the function are correct, as there is no compile-time type checking. To enhance type safety, developers often create matching typedefs for the function pointers based on the function prototypes of the exported functions.GetProcAddress is particularly useful in run-time dynamic linking, allowing a program to call DLL functions without needing an import library. This method provides flexibility, as the application can handle cases where the DLL is not available without terminating immediately.References:GetProcAddress function (libloaderapi.h) Retrieves the address of an exported function (also known as a procedure) or variable from the specified dynamic-link library (DLL). Syntax Parameters [in] hModule A handle to the DLL module that contains the function or variable. The GetProcAddress function does not retrieve addresses from modules that.GetProcAddress Processes explicitly linking to a DLL call GetProcAddress to obtain the address of an exported function in the DLL. GetProcAddress takes as parameters the DLL module handle (returned by either LoadLibrary, AfxLoadLibrary, or GetModuleHandle) and takes either the name of the function you want to call or the function's export ordinal.._GetProcAddress_ function [This function is a wrapper over the GetProcAddress function. This function may be altered or unavailable in the future. Applications should call GetProcAddress directly.]. Gets the address of a function from a DLL. See GetProcAddress. Syntax Parameters. Requirements Requirement Value DLL Msmdun80.dll; Sqlunirl.dll See.Alc.GetProcAddress(IntPtr, String) Method Definition Namespace: OpenTK.Audio.OpenAL Assembly:OpenTK-1.0.dll This function retrieves the address of a specified context extension function. Parameters device IntPtr a pointer to the device to be queried for the function. funcname String a null-terminated string describing the function. ...ss of the.AL.GetProcAddress(String) Method Definition Namespace: OpenTK.Audio.OpenAL Assembly:OpenTK-1.0.dll This function returns the address of an OpenAL extension function. Handle with care. Parameters fname String A string containing the function name. Returns IntPtr The return value is a pointer to the specified function. The return value will be.ICLRRuntimeInfo::GetProcAddress Method Gets the address of a specified function that was exported from the common language runtime (CLR) associated with this interface. This method supersedes the GetRealProcAddress function. Syntax Parameters pszProcName [in] The name of the exported function. ppProc [out] The address of the exported function..Calling Ac... Server applications use the GetProcAddress function to retrieve the address of an Microsoft Active Accessibility function and then make the call through a function pointer. If calling a function that was implemented in Oleacc.dll, server applications use the handle returned from LoadLibrary in the call to GetProcAddress. If calling a.DxcCreateInstance2Proc callback function (dxcapi.h) The DxcCreateInstance2Proc typedef is provided to make it more convenient for you to use GetProcAddress to call DxcCreateInstance2. Syntax Parameters pMalloc rclsid riid ppv Requirements Requirement Value Header dxc... The **DxcCreateInstance2Proc** typedef is provided to make it more convenient.DxcCreateInstanceProc callback function (dxcapi.h) The DxcCreateInstanceProc typedef is provided to make it more convenient for you to use GetProcAddress to call DxcCreateInstance. Syntax Parameters rclsid riid ppv Requirements Requirement Value Header dxcapi.h. The **DxcCreateInstanceProc** typedef is provided to make it more convenient for you.Operating System Version The Version API Helper functions are used to determine the version of the operating system that is currently running. To test for the presence of a function in a system DLL, call the LoadLibrary function ... Then call the GetProcAddress function to determine whether the function of interest is present in the DLL. Use the."
932,CallNextHookEx,"Microsoft Build · May 19 – 22, 2025CallNextHookEx function (winuser.h) Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information. Syntax Parameters [in, optional] hhk Type: HHOOK This parameter is ignored. [in] nCode Type: int The hook code passed to the current.If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and return the value returned by CallNextHookEx. ...llNeIf code is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call CallNextHookEx and return the.Hook Functions CallMsgFilter CallNextHookEx CallWndProc CallWndRetProc CBTProc DebugProc ForegroundIdleProc GetMsgProc JournalPlaybackProc JournalRecordProc KeyboardProc LowLevelKeyboardProc LowLevelMouseProc MessageProc MouseProc SetWindowsHookEx ShellProc SysMsgProc UnhookWindowsHookEx. Hook Functions. /windows/win32/winmsg/hook-functions.If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. wParam Type: DWORD This parameter is not used. lParam Type: LONG This parameter is not used. If code is greater than or equal to zero, it is highly recommended that.If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. If nCode is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call CallNextHookEx and return the.If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and must return the value returned by CallNextHookEx. wParam [in] Type: WPARAM Specifies whether the message was sent by the current thread. If nCode is greater than or equal to zero, it is highly recommended that you call.If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. If nCode is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call CallNextHookEx and return the.ShellProc function Description An application-defined or library-defined callback fu... If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. Remarks Install this hook procedure by specifying the WH_SHELL hook type and a.HOOKPROC callback function (winuser.h) An application-defined or library-defined ca... Return value Type: LRESULT If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx function. If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx function and return the value it.CallMsgFilterA Passes the specified message and hook code to the hook proced... (ANSI) CallMsgFilterW Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. (Unicode) CallNextHookEx Passes the hook information to the next hook procedure in the current hook chain. A hook."
933,CopyImage,"Microsoft Build · May 19 – 22, 2025CopyImage function (winuser.h) Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image. Syntax Parameters [in] h Type: HANDLE A handle to the image to be copied. [in] type Type: UINT The type of image to be.Image.copyImage(Image) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Copies the current image object. Parameters _image Image The image to be copied. Returns Int32 0 indicates success; otherwise, failure. Remarks The following example creates two new images and then overwrites the contents of....deo.CopyImage [The feature associated with this page, DirectShow, is a legacyCreates a memory copy of an image. Syntax Parameters pMediaSample Pointer to the sample containing the video image. pVideoInfo Pointer to the format representing the video image. pBufferSize Pointer to the size of the output buffer. pVideoImage Pointer to the output.This function is used to obtain the accelerator-table... (Unicode) CopyCursor Copies the specified cursor. CopyIcon Copies the specified icon from another module to the current module. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the....r list. captureWindow(Int32) Captures a window as an image, using the handle that is supplied as a para clipboardCopy() Copies an image to the clipboard. clipboardPaste() Overwrites an existing image with the content of the system clipboard. compressLZ77(Int32) (Inherited from BinData) copyData(BinData, Int32, Int32) (Inherited from BinData).(Unicode) CopyCursor Copies the specified cursor. CopyIcon Copies the specified icon from another module to the current module. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image. CopyRect The.CopyCursor macro (winuser.h) Copies the specified cursor. Instead, use the CopyImage function. CopyCursor is implemented as a call to the CopyIcon function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows....following functions obtain a shared cursor: LoadCursor LoadCursorFromFile LoadImage (if you use the LR_SHARED CopyImage (if you use the LR_COPYRETURNORG flag and the hImage parameter is a shared cursor) Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.CBaseControlVideo.GetStaticImage method [The feature associated with this page, DirectShow, is a legacy feature. Remarks Through the IBasicVideo in... This is also called by the CBaseControlVideo::GetCurrentImage member function. The class provides a helper member function, CBaseControlVideo::CopyImage, that can be given a sample that contains an.... you use the LR_COPYRETURNORG flag and the hImage parameter is a shared icon) CreateIconFromResource CreateIconFromResourceEx (if you use the LR_SHARED flag) Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform."
934,send,"Microsoft Build · May 19 – 22, 2025SmtpClient.Send Method Definition Namespace: System.Net.Mail Assemblies:netstandard.dll, System.Net.Mail.dll Assembly:System.Net.Mail.dll Assembly:System.dll Assembly:netstandard.dll Sends an email message to an SMTP server for delivery. Overloads Send(MailMessage) Sends the specified message to an SMTP server for delivery. Send(String, String,.Parameters buffer ReadOnlySpan A span of bytes that contains the data to be sent. socketFlags SocketFlags A bitwise combination of the enumeration values that specifies send and receive behaviors. errorCode SocketError When this method returns, contains one of the enumeration values that defines error codes for the socket. Remarks Send.Send documents and emails You can easily share information and documents, such as sales and purchase orders and invoices, by email directly from Business Central, without having to open an email app. You can send almost all types of documents as PDF attach... You cannot also receive replies from within the app. To send documents by email This.send function (winsock2.h) The send function sends data on a connected socket. Syntax Parameters [in] s A descriptor identifying a connected socket. [in] buf A pointer to a buffer containing the data to be transmitted. [in] len The length, in bytes, of the data... Windows Phone 8: This function is supported for Windows Phone Store apps on.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Send an email using Azure Communication Services This quickstart describes how to send email using our Email SDKs. ...ation Services using the Communication Serv Email to send Email messagesSend an Email using Try Email Try Email helps.Manage permissions for recipients in Exchange Online In Exchange Online, you can use the Exchange admin center (EAC) or Exchange Online PowerShell to assign permissions to a mailbox or group so that other users can access the mailbox (the Full Access permission), or send email messages that appear to come from the mailbox or group (the Send as or.Send an email when a new item is created in a SharePoint list Using Power Automate, you can easily automate day-to-day tasks or build repetitive tasks in SharePoint that help you stay productive. In this tutorial, you will create a flow that sends an email when a new item is added in a SharePoint list. Required setup Before proceeding with these.Fix issues with printers, scanners, and LOB apps that send email using Microsoft 365 Email clients provide actionable error messages when something goes wrong. Sending email from devices and applications is less easy to fix, and you might not get clear information to help you. As a first step to fixing any problems, check your configuration. See.Send an email with an Azure Data Factory or Azure Synapse pipeline APPLIES TO: Azure Data Factory Azure Synapse Analytics Tip Try out Data Factory in Microsoft Fabric, an all-in-one analytics solution for enterprises. Microsoft Fabric covers everything from data movement to... This article shows how to configure email notifications from an Azure.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Send Outlook messages from another user Exchange Online provides mailbox permissions that allow a user to send mail that appears to be sent from another user, distribution list, group, resource, or shared mailbox. Microsoft Graph."
935,GetConsoleMode,"Microsoft Build · May 19 – 22, 2025Console Modes Associated with each console input buffer is a set of input modes that affects input operations. The output modes only affec... The GetConsoleMode function reports the current input mode of a console's input buffer or the current output mode of a screen buffer. The SetConsoleMode function sets the current mode of either a console.GetConsoleMode function Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer. Syntax Parameters hConsoleHandle [in] A handle to the console input buffer or the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security.Console Functions The following functions are used to access a console. Function Descr... GetConsoleHistoryInfo Retrieves the history settings for the calling process's console. GetConsoleMode Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer. GetConsoleOriginalTitle Retrieves the.When all are enabled, the application is said to be in ""cooked"" mode, which means that most of the processing is handled for the a... When all are disabled, the application is in ""raw"" mode, which means that input is unfiltered and any processing is left to the application. An application can use the GetConsoleMode function to determine the.Classic Console APIs versus Virtual Terminal Sequences Our recommendation is to replace the c... Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. Configuration of the console modes on a handle to opt in to Virtual Terminal Sequence support.Low-Level Console Modes Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite future. Our preferred modern solution focuses on virtual terminal se... To set or.Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. To retrieve the current values of the various properties associated with the console screen buffer, use the GetConsoleScreenBufferInfo, GetConsoleCursorInfo, and GetConsoleMode functions. Applications that change any of the.You can use GetConsoleMode and SetConsoleMode functions to configure this behavior. A sample of the suggested way to enable virtual terminal behaviors is included at the end of this document. More information about terminal sequences can be found at http://vt100.net and at http://invisible-island.net/xterm/ctlseqs/ctlseqs.html. Output Sequences.To retrieve and set the input modes of a console input buffer, use the GetConsoleMode and SetConsoleMode functions. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL.To retrieve and set the output modes of a console screen buffer, use the GetConsoleMode and SetConsoleMode functions. If an application processes multilingual output that can be redirected, determine whether the output handle is a console handle (one method is to call the GetConsoleMode function and check whether it succeeds). Requirements Minimum."
936,CountClipboardFormats,"Microsoft Build · May 19 – 22, 2025CountClipboardFormats function (winuser.h) Retrieves the number of different data formats currently on the clipboard. Syntax Return value Type: int If the function succeeds, the return value is the number of different data formats currently on the clipboard. If the function fails, the return value is zero. Requirements Requirement Value Minimum.CountClipboardFormats Retrieves the number of different data formats currently on the clipboard. (DrawTextW function) EmptyClipboard Empties the clipboard and fre... The function then assigns ownership of the clipboard to the window that currently has the clipboard open. EnumClipboardFormats Enumerates the data formats currently available on the.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. Because all applications have access to the clipboard, data can be easily tr... CloseClipboard Closes the clipboard..To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. CloseClipboa... CountClipboardFormats Retrieves the number of different data.Clipboard Functions In this section AddClipboardFormatListener ChangeClipboardChain CloseClipboard CountClipboardFormats EmptyClipboard EnumClipboardFormats GetClipboardData GetClipboardFormatName GetClipboardOwner GetClipboardSequenceNumber GetClipboardViewer GetOpenClipboardWindow GetPriorityClipboardFormat GetUpdatedClipboardFormats.... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-5-1 (introduced in Windows 10, version.IsClipboardFo... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-misc-l1-2-0 (introduced in Windows 8.1) See.When placing information on the clipboard, the window should provide data in as many formats as possible. To find out how many formats are currently used on the clipboard, call the CountClipboardFormats function. Clipboard formats that contain the most information should be placed on the clipboard first, followed by less descriptive formats. A.There is process that run under service and has SYSTEM authority. This process creates window and calls AddClipboardFormatListener to get clipboard notification. But when try to copy file (press Ctral+C) CountClipboardFormats() returns 0. There is proce... This process creates window and calls AddClipboardFormatListener to get clipboard.EnumClipboardFormats function (winuser.h) Enumerates the data formats currently available on the clipboard. ...ported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set."
937,CreateICW,"Microsoft Build · May 19 – 22, 2025CreateICW function (wingdi.h) The CreateIC function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context. Note The wingdi.h header defines.CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC function creates an information context for the specified device. (ANSI) CreateICW The CreateIC function creates an information context for the specified device. (Unicode) CreateMetaFileA The CreateMetaFile.CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC function creates an information context for the specified device. (ANSI) CreateICW The CreateIC function creates an information context for the specified device. (Unicode) CreateMetaFileA The CreateMetaFile.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,."
938,PulseEvent,"Microsoft Build · May 19 – 22, 2025PulseEvent function (winbase.h) Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads. Note  This function is unreliable and should not be used. It exists mainly for backward compatibility. For more information, see Remarks. Syntax Parameters [in].C28648 warning C28648: PulseEvent is an unreliable function A thread waiting on a synchronization object can be momentarily removed from the wait state by a kernel-mode APC, and then returned to the wait state after the APC is complete. ...ad will not be released and will ""hang""Some of the ways to fix the use of PulseEvent: If only one of the.CreateEventEx Creates or opens a named or unnamed event object and returns a handle to the object. OpenEvent Opens an existing named event object. PulseEvent Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads. ResetEvent Sets the specified.CEvent Class Represents an event, which is a synchronization objec... Public Methods Name Description CEvent::PulseEvent Sets the event to available (signaled), releases waiting threads, and sets the event to unavailable (nonsignaled). CEvent::PulseEvent Sets the state of the event to signaled (available), releases any waiting threads, and resets.We also have to make sure we don’t mistakenly use PulseEvent in the producer thread to signal the not-empty event because this would introduce a race condition. The problem occurs if the consumer thread is preempted immediately after it releases the critical section but before it calls WaitForSingleObject and then the producer thread calls.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Synchronization Object Security and Access Rights The Windows security model enables you to control access to event, mutex, semaphore, and waitable timer objects. Using this access right incre... EVENT_MODIFY_STATE (0x0002) Modify state.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib DLL....Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2) Library Kernel32.lib DLL.Waking one thread is similar to setting an auto-reset event, while waking all threads is similar to pulsing a manual reset event but more reliable (see PulseEvent for details). Requirements Requirement Value Minimum supported client Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2008 [desktop apps | UWP apps].SignalObjectAndWait function (synchapi.h) Signals one object and waits on another object as a single operation. Use extreme caution when using SignalObjectAndWait and PulseEvent with Windows 7, since using these APIs among multiple threads can cause an application to deadlock. Threads that are signaled by SignalObjectAndWait call PulseEvent to."
939,_hwrite,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
940,DestroyAcceleratorTable,"Microsoft Build · May 19 – 22, 2025DestroyAcceleratorTable function... Syntax Parameters [in] hAccel Type: HACCEL A handle to the accelerator table to be destroyed. This handle must have been created by a call to the CreateAcceleratorTable or LoadAccelerators function. Return value Type: BOOL If the function succeeds, the return value is nonzero. However, if the table has been.If the menu item opens a menu or submenu, this function destroys the handle to the menu ... DeregisterShellHookWindow Unregisters a specified Shell window that is registered to receive Shell hook messages. DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's current shape, frees the caret from the window, and.Keyboard Accelerators A keyboard accelerator (or, simply, accelerator) is a keystroke or combination of keystrokes that generates a WM_COMMAND or WM_SYSCOMMAND message for an application. In This Section Name Description About Keyboard Accelerators Discusses keyboard accelerators. CreateAcceleratorTable Creates an accelerator table..Destroying the Accelerator Table Resource The system automatically destroys accelerator-table resources loaded by the LoadAccelerators function, removing the resource from memory after the application closes. ...n-Time Accelerator Table The system automatically destroys accelerator tables created at run time, removing the resources from memory.FreeResource function (libloaderapi.h) Note This function is obsolete and is only supported for backw... Remarks For resources loaded with other functions, FreeResource has been replaced by the following functions: Resource type FreeResource replacement Accelerator DestroyAcceleratorTable Bitmap DeleteObject Cursor DestroyCursor Icon DestroyIcon.CreateAcceleratorTableA Creates an accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerato... If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu. DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's.Finding and Loading Resources Before using a resource, an application must load it into memory. Whenever possible, an application should instead use one of the following resource-specific functions to find and load resources in one call: Function Action To remove resource FormatMessage Lo... LoadAccelerators Loads an accelerator table..An accelerator table is a data resource that maps keyboard combinations, such as CTRL+O, to application commands. Before we see how to use an... If the function fails, it returns NULL. You can release an accelerator table by calling DestroyAcceleratorTable. However, the system automatically releases the table when the program exits, so you only.Like the LoadAccelerators function, CreateAcceleratorTable returns an accelerator-table handle that can be passed to TranslateAccelerator to activate the accelerator table. The system automatically destroys accelerator tables loaded by LoadAccelerators or created by CreateAcceleratorTable. However, an application can free resources while it is.User object Creator function Destroyer function Accelerator table CreateAcceleratorTable DestroyAcceleratorTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect,."
941,GetStockObject,"Microsoft Build · May 19 – 22, 2025The GetStockObject function in the Windows API retrieves a handle to one of the stock pens, brushes, fonts, or palettes. It is defined in the wingdi.h header and is used primarily in graphics programming within the Windows environment. The function takes an integer parameter that specifies the type of stock object to retrieve, such as a black brush, white pen, or system font.If the function succeeds, it returns a handle to the requested logical object. If it fails, the return value is NULL. It is important to note that using this function to obtain the current font used by dialogs and windows is not recommended; instead, the SystemParametersInfo function should be used for that purpose.References:GetStockObject function (wingdi.h) The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes. Syntax Parameters [in] i The type of stock object. This parameter can be one of the following values. Value Meaning BLACK_BRUSH Black brush. DKGRAY_BRUSH Dark gray brush. DC_BRUSH Solid color brush. The default.GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics objectGetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The GetObjectType retrieves the type of the specified object. GetObjectW The GetObjectW (Unicode) function (wingdi.h) retrieves.GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics objectGetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The GetObjectType retrieves the type of the specified object. GetObjectW The GetObjectW (Unicode) function (wingdi.h) retrieves.Syntax Members emr The base structure for all re... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also EMR GetStockObject Metafile Structures Metafiles Overview. The EMRSELECTOBJECT and.Device Context Functions The following functions are used with device contexts. Function Description CancelDC Cancels any pending operation on the specified device context. GetObjectType Retrieves the type of the specified object. GetStockObject Retrieves a handle to one of the stock pens, brushes, fonts, or palettes. ReleaseDC Releases a device.For more information about these attributes, see Pen Attributes. To create a cosmetic pen, use the CreatePen, CreatePenIndirect, or ExtCreatePen function. To retrieve one of the three stock cosmetic pens managed by the system, use the GetStockObject function. After you create a pen (or obtain a handle to one of the stock pens), select the pen into.Using a Stock Font to Draw T... A stock font is a logical font that an application can obtain by calling the GetStockObject function and specifying the requested font. The following example retrieves a handle to the variable stock font, selects it into a device context, and then writes a string using that font: If other stock fonts are not.Stock Brush There are seven predefined logical stock brushes maintained by the graphics device interface (GDI). The following illustration shows rectangles painted by using the seven predefined stock brushes. An application can retrieve a handle identifying one of the seven stock brushes by calling the GetStockObject function, specifying the brush.Setting the Pen or Brush Color The following example shows how an application can change the DC pen color by using the GetStockObject function or SetDCPenColor and the SetDCBrushColor functions. The following example shows how an application can change the DC pen color by using the GetStockObject function or SetDCPenColor and the SetDCBrushColor.Remarks The UnrealizeObject function should not be us... For example, the default palette, obtained by calling GetStockObject (DEFAULT_PALETTE), is a stock object. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform."
942,LoadCursorW,"Microsoft Build · May 19 – 22, 2025LoadCursorW function (winuser.h) Loads the specified cursor resource from the executable (.exe) file associated with an application instance. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_SHARED flags set). Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module of either a.interface ICoreWebView2ExperimentalCompositionController2 Note This reference is no longer being maintained. Note This an experimental API that is shipped with our prerelease SDK. This interface is continuation of the ICoreWebView2ExperimentalCompositionController interface to manage system cursor ID. Navigate to.(Unicode) LoadCursorA Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. (ANSI) LoadCursorFromFileA Creates a cursor based on data contained in a file. (ANSI) LoadCursorFromFileW Creates a cursor based on data contained in a file. (Unicode) LoadCursorW Loads the specified cursor resource.Add a single line of code to ""set the hook"" for the override: For example, if you wanted to override MSLU's LoadCursorW API, you could create your own function, as shown in Figure 2. Now that you have the MyLoadCursorW function, you can force MSLU to use it by adding the following line immediately after it: The MSLU loader will only call your.To actually use systemCursorId in LoadCursor or LoadImage, MAKEINTRESOURCE must be called on it first. put_RootVisualTarget Set the RootVisualTarget property. public HRESULT put_RootVisualTarget(IUnknown * target) remove_CursorChanged Remove an event handler previously added with add_CursorChanged. public HRESULT.(ANSI) EnumPropsExW ... (Unicode) EnumPropsW Enumerates all entries in the property list. (ANSI) GetClassLongPtrW Retrieves the specified value from the WNDCLASSEX structure associated with the specified window. GetClipCursor Retrieves the screen coordinates of the rectangular area to which the cursor is confined. GetCursor Retrieves a handle to.Hello, I have been creating a project using OpenGL, namely glfw3.lib. Here is the Command Line in the &quot;Linker&quot; section of the project properties: /OUT:&quot;D:\Users\Alex Kent\source\repos\MimicWizard\MimicWizard\x64\Debug\NovaForge.exe&quot; /MANIFEST /NXCOMPAT /PDB:&quot;D:\Users\Alex."
943,GetNumberOfConsoleMouseButtons,"Microsoft Build · May 19 – 22, 2025GetNumberOfConsoleMouseButtons function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the ... Our preferred modern solution focuses on virtual terminal sequences for.Console Functions The following functions are used to access a console. GetNumberOfConsoleInputEvents Retrieves the number of unread input records in the console's input buffer. GetNumberOfConsoleMouseButtons Retrieves the number of buttons on the mouse used by the current console. GetStdHandle Retrieves a handle for the standard input, standard.A button-release event is detected by a 0 value for the dwEventFlags member of MOUSE_EVENT_RECORD and a change in a button's bit from 1 to 0. The GetNumberOfConsoleMouseButtons function retrieves the number of buttons on the mouse. Buffer-Resizing Events A console window's menu enables the user to change the size of the active screen buffer; this.CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoGetObjectContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoSwitchCallContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg."
944,_lopen,"Microsoft Build · May 19 – 22, 2025The _lopen function opens an existing file and sets the file pointer to the beginning of the file._lopen The _lopen function opens an existing file and sets the file pointer to the beginning of the file.Dit is mij vies tegengevallen, momenteel lopen er volgens mij 2 of 3 verschillende accounts door elkaar, fysieke inlogkeys liggen verspreid door de kamer onbruikbaar.Wat is vanaf dit moment (naast dat ik zelf niet nooit meer ga lopen knoeien) de eerste stap?Van zodra ik deze opstartte en de verkenner liet lopen werden zowel de desktop PC, de twee NAS-servers als de nieuwe laptocht zichtbaar onder netwerk.Enforcing more on it is as we have a saying in Dutch (I am from the Netherlands): &quot;Elkaar voor de voeten lopen._lopen The _lopen function opens an existing file and sets the file pointer to the beginning of the file._lopen The _lopen function opens an existing file and sets the file pointer to the beginning of the file."
945,GetMenuCheckMarkDimensions,"Microsoft Build · May 19 – 22, 2025...e the default check-mark bitmap for a menu item, an application must determine the correct bitmap s calling GetMenuCheckMarkDimensionsNote  The GetMenuCheckMarkDimensions function is included only for compatibility with 16-bit versions of Windows. Applications should use the GetSystemMetrics function with the CXMENUCHECK and CYMENUCHECK values.Menus and Other Resources Overview of the Menus and Other Resources technology. The ... (Unicode) CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a radio item. GetMenuBarInfo Retrieves information about the specified menu bar..CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. GetMenuBarInfo Retrieves information about the speci... GetMenuCheckMarkDimensions Retrieves the dimensions of the default check-mark bitmap. The system displays this bitmap next to selected menu items. Before calling the SetMenuItemBitmaps.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. CMenu::Attach Attaches a Windows menu handle to a CMenu object. CMenu::CheckMenuItem Places a check mark next to or removes a check mark from a menu item in the pop-up menu. CMenu::CheckMenuRadioItem Places.(ANSI) CharLowerBuffA Converts uppercase. CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a radio item. CheckRadioButton Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears)."
946,DrawCaption,"Microsoft Build · May 19 – 22, 2025DrawCaption function (winuser.h) The DrawCaption function draws a window caption. Syntax Parameters [in] hwnd A handle to a window that supplies text and an icon for the window caption. [in] hdc A handle to a device context. The function draws the window caption into this device context. [in] lprect A pointer to a RECT structure that specifies the.(Unicode) DragDetect Captures the mouse and tracks its movement until the user releases the left button, presses the ESC ... DrawAnimatedRects Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window. DrawCaption The DrawCaption function draws a window caption. DrawEdge The DrawEdge function.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a window for painting. DrawAnimatedRects Draws a rectangle and animates it to indicate icon or window activity. DrawCaption Draws a window caption. DrawEdge Draws one or more edges of rectangle. WindowFromDC Returns a.The conversion depends on the mapping mode of the device context, the s... DrawAnimatedRects Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window. DrawCaption The DrawCaption function draws a window caption. DrawEdge The DrawEdge function draws one or more edges of rectangle. DrawEscape.CWnd::DragDetect Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. CWnd::DrawAnimatedRects Draws a wire-frame rectangle and animates it to indicate the opening of an icon or the minimizing or maximizing of a window..CDockablePane::DrawCaption Draws the docking pane caption (gripper). CDockablePane::OnPress... Remarks Call this method to dock one pane to another pane with the alignment specified by dwAlignment. CDockablePane::DrawCaption Draws the caption (also called the gripper) of a docking pane. Parameters pDC [in] Represents the device context used for."
947,CopyIcon,"Microsoft Build · May 19 – 22, 2025CopyIcon function (winuser.h) Copies the specified icon from another module to the current module. Remarks The CopyIcon function enables an application or DLL to get its own handle to an icon owned by another module. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.About Icons The system uses icons throughout the user interface to represent objects such as files, folders, shortcuts, applications, and documents. Applications should use this... Icon Duplication The CopyIcon function copies an icon handle. This enables an application or DLL to get its own handle to an icon owned by another module. Then, if the.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification In... (Unicode) CopyCursor Copies the specified cursor. CopyIcon Copies the specified icon from.Icons (Menus and Other Resources) An icon is a picture that consists of a bitmap image combined with a mask to create transparent areas in the picture. The term icon can refer to either of the following: A single icon image. Icon Reference Contains the API reference. Icon Functions Name Description CopyIcon Copies the specified icon from another.This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. (Unicode) CopyCursor Copies the specified cursor. CopyIcon Copies the specified icon from another module to the current module. CopyImage Creates a new image (icon, cursor, or bitmap).Icon Functions In This Section CopyIcon CreateIcon CreateIconFromResource CreateIconFromResourceEx CreateIconIndirect DestroyIcon DrawIcon DrawIconEx DuplicateIcon ExtractAssociatedIcon ExtractIcon ExtractIconEx GetIconInfo GetIconInfoEx LoadIcon LookupIconIdFromDirectory LookupIconIdFromDirectoryEx PrivateExtractIcons. Icon Functions..DestroyIcon function (winuser.h) Destroys an icon and frees any memory the icon occupied. Remarks It is only necessary to call DestroyIcon for icons and cursors created with the following functions: CreateIconFromResourceEx (if called without the LR_SHARED flag), CreateIconIndirect, and CopyIcon. LoadIcon LoadImage (if you use the LR_SHARED flag).Instead, use the CopyImage function... CopyCursor is implemented as a call to the CopyIcon function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) See also Conceptual.lineGetIconA function (tapi.h) The lineGetIcon function allows an application to retrieve a service line device-specific (or provider-specific) icon for display to the user. The icon handle is f... The application must use CopyIcon if it wants to reference the icon after the provider is unloaded, which is unlikely to happen as long as the.It says that in the case of accelerators, bitmaps, cursors, icons, or menus, you can use the appropriate Destroy/Delete function to destroy the object: But elsewhere the documentation says: It is only necessary to call DestroyIcon for icons and cursors created with the CreateIconIndirect and the CopyIcon functions. ...The following functions."
948,DeleteFileA,"Microsoft Build · May 19 – 22, 2025DeleteFileA function (fileapi.h) Deletes an existing file. To perform this operation as a transacted operation, use the DeleteFileTransacted function. Syntax Parameters [in] lpFileName The name of the file to be deleted. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend ""\\?\"" to the.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (ANSI) DeleteFile2W Deletes an existing file. (Unicode) DeleteFileA Deletes an existing file..(DefineDosDeviceW) DeleteFile The DeleteFile function (winbase.h) deletes an existing file. DeleteFile2A Deletes an existing file. (ANSI) DeleteFile2W Deletes an existing file. (Unicode) DeleteFileA Deletes an existing file. (DeleteFileA) DeleteFileFromAppW Deletes an existing file. The behavior of this function is identical to DeleteFile, except.This article is an overview of hard links and junctions. The following references aren't permitted: C:\dira linked to C:\dirb C:\dira\ethel.txt linked to D:\dirb\lucy.txt C:\dira\ethel.txt linked to Z:\dirb\lucy.txt To delete a hard link, use the DeleteFileA function. You can delete hard links in any order regardless of the order in which they're.CreateF... Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-2-0.dll in 10.0.16299. DeleteFileA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into."
949,CharLowerBuffW,"Microsoft Build · May 19 – 22, 2025CharLowerBuffW function (winuser.h) Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place. Syntax Parameters [in, out] lpsz Type: LPTSTR A buffer containing one or more characters to be processed. [in] cchLength Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) CharLowerBuffA Converts uppercase.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Displ... CharLowerA Converts a character string or a single character to lowercase. (ANSI) CharLowerBuffA Converts uppercase characters in a buffer to lowercase characters. (ANSI)."
950,OpenEventW,"Microsoft Build · May 19 – 22, 2025OpenEventW function (synchapi.h) Opens an existing named event object. Syntax Parameters [in] dwDesiredAccess The access to the event object. Remarks The OpenEvent function enables multiple processes to open handles of the same event object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. LeaveCriticalSection Releases ownership of the specified critical section object. OpenEventA.AtlThunk_InitData Initializes an ATL thunk. Attach Attaches a virtual disk. BackupComplete The BackupComplete method causes VSS to generate a BackupComplete event, which signals writers that the backup process has completed. BackupEventLogA Saves the specified event log to a backup file. (ANSI) BackupEventLogW Saves the specified event log to a.This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library."
951,GetObjectW,"Microsoft Build · May 19 – 22, 2025GetObjectW function (wingdi.h) The GetObject function retrieves information for the specified graphics object. Syntax Parameters h c pv Return value If the function succeeds, and lpvObject is a valid pointer, the return value is the number of bytes stored into the buffer. Requirements Requirement Value Minimum supported client Windows 2000.Get... GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics object. GetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The GetObjectType retrieves the type of the specified object. GetObjectW The GetObjectW (Unicode) function (wingdi.h).(ANSI) GetMonitorInfoW The GetMonitorInfo function retrieves information about a display monitor. GetObject The GetObject function (wingdi.h) retrieves information for the specified graphics object. GetObjectA The GetObject function retrieves information for the specified graphics object. (GetObjectA) GetObjectType The GetObjectType retrieves the....hen bui Error LNK2019 unresolved external symbol __imp_GetObjectW referenced in function &quot;public: void __cdecl winrt::LoadBmpTest::implementation::MainWindow::myButton_Click(struct winrt::Windows::Foundation::IInspectable const &amp;,struct winrt::Microsoft::UI::Xaml::RoutedEventArgs const &amp;)&quot;.Stack Tags In the Windows® Performance Analyzer (WPA), stack tags is a feature that lets you create labels (tags) to help you bett... In this example, there are 4 RPC functions called in WbemCore.dll: CWbemLevel1Login::NTLMLogin CWbemNamespace::GetObjectW CWbemNamespace::PutInstance CWbemNamespace::ExecMethod Being able to consolidate the cost of."
952,GetHandleInformation,"Microsoft Build · May 19 – 22, 2025GetHandleInformation function (handleapi.h) Retrieves certain properties of an object handle. Syntax Parameters [in] hObject A handle to an object whose information is to be retrieved. You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job,.Handle and Object Functions The fo... Function Description CloseHandle Closes an open object handle. CompareObjectHandles Compares two object handles to determine if they refer to the same underlying kernel object. DuplicateHandle Duplicates an object handle. GetHandleInformation Retrieves certain properties of an object handle..handleapi.h header This header is used by System Services. For more information, see: System Services handleapi.h contains the following programming interfaces: Functions CloseHandle Closes an open object handle. CompareObjectHandles Compares two object handles to determine if they refer to... DuplicateHandle Duplicates an object handle..Mailslot Operations When working with mailslots, clients and servers should use only the functions discussed in the following tables. Do not use other functions, even if they accept file handles or file names as parameters, as they are not designed to work with mailslots. SetFileTime Sets the date and time a mailslot was created..The GetHandleInformation function can be used to determine if a socket handle was created with the WSA_FLAG_NO_HANDLE_INHERIT flag set. The GetHandleInformation function will return that the HANDLE_FLAG_INHERIT value is set. This flag is supported on Windows 7 with SP1, Windows Server 2008 R2 with SP1, and later Important  For multipoint sockets,.The GetHandleInformation function can be used to determine if a socket handle was created with the WSA_FLAG_NO_HANDLE_INHERIT flag set. The GetHandleInformation function will return that the HANDLE_FLAG_INHERIT value is set. This flag is supported on Windows 7 with SP1, Windows Server 2008 R2 with SP1, and later Important  For multipoint sockets,.SetHandleInformation function (handleapi.h) Sets certain properties of an object handle. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header handleapi.h (include Windows.h) Library Kernel32.lib DLL."
953,PostMessageW,"Microsoft Build · May 19 – 22, 2025PostMessageW function (winuser.h) Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. To post a message in the message queue associated with a thread, use the PostThreadMessage function. Syntax Parameters [in, optional] hWnd.PostMessageA Places (posts) a message in the message queue associated with the thread that created the specified window and returns without wa... (ANSI) PostMessageW Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.....essageW+0x3dc USER32!PostMessageW ntdll!KiUserCallbackDispatcher+0x24 win32u!NtUserMessageCall+0x14 USER32!SendMessageW+0x295 USER32!SendMessageW+0x10f Comctl32!TaskDialog+0xe7a3 Comctl32!GetMUILanguage+0x21ee9 USER32!CallWindowProcW+0x419 USER32!CallWindowProcW+0x8e MFC42u!Ordinal2399+0x3e MFC42u!Ordinal6812+0x78 MFC42u!Ordinal1407+0x144.(Unicode) DialogBoxW Creates a modal dialog box from a dialog box template resource. DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to a window procedure. It is typically used to dispatch....ed external __imp_TranslateMessage 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_DispatchMessageW referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_DispatchMessageW 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external."
954,PtInRect,"Microsoft Build · May 19 – 22, 2025PtInRect function (winuser.h) The PtInRect function determines whether the specified point lies within the specified rectangle. A point is within a rectangle if it lies on the left or top side or is within all four sides. A point on the right or bottom side is considered outside the rectangle. Syntax Parameters [in] lprc A pointer to a RECT.IsRectEmpty Determines whether the specified rectangle is empty. OffsetRect Moves the specified rectangle by the specified offsets. PtInRect Determines whether the specified point lies within the specified rectangle. SetRect Sets the coordinates of the specified rectangle. SetRectEmpty Creates an empty rectangle in which all coordinates are set to.It moves the rectangle by adding the given x-amount, y-amount, or x- and y-amounts to the corner coordi... The PtInRect function determines whether a given point lies within a given rectangle. The point is in the rectangle if it lies on the left or top side or is completely within the rectangle. The point is not in the rectangle if it lies on the.CRect Class Similar to a Windows RECT structure. Syntax Members Public Constructors Name Description CRect::CRect Constructs a CRect object. CRect::PtInRect Determines whether the specified point lies within CRect. Note This class ... Note The following CRect member functions require normalized rectangles in order to work properly: Height, Width,.This provides an easy way of calling an unmanaged API that has structure arguments. For example, the POINT and RECT structures can be passed to the Microsoft Windows API PtInRect function as follows: You can pass structures using the following platform invoke definition: The Rect value type must be passed by reference because the unmanaged API is.Use a class passed by reference when the unmanaged function demands two levels of indirection. Declaring and Passing Structures The following example shows how to define the Point and Rect structures in managed code, and pass the types as parameter to the PtInRect function in the User32.dll file. PtInRect has the following unmanaged signature:....mines whether the specified rectangle isRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also EqualRect PtInRect RECT Rectangle.Hi, I have a window. I would like the drawing to be attached to its screen position, and I would like it to disappear when it goes outside of the window area (i.e. w... PtInRect is what you need. Determine whether the four coordinates of the drawing window are in the main window, if not, use ShowWindow to hide the drawing window. ---------- If the.LayoutKind Enum Definition Namespace: System.Runtime.InteropServices Assemblies:mscorlib.dll, System.Runtime.dll Assemblies:netstandard.dll, System.Runtime.dll Assembly:System.Runtime.dll Assembly:mscorlib.dll Assembly:netstandard.dll Controls the layout of an object ... Examples The following example shows the managed declaration of the PtInRect.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also IsRectEmpty PtInRect RECT Rectangle Functions Rectangles Overview. The."
955,getsockname,"Microsoft Build · May 19 – 22, 2025getsockname function (winsock2.h) The getsockname function retrieves the local name for a socket. Syntax Parameters [in] s Descriptor identifying a socket. [out] name Pointer to a SOCKADDR str... Remarks The getsockname function retrieves the current name for the specified socket descriptor in name. This call is especially useful when a connect.getsockname function (winsock.h) The getsockname function retrieves the local name for a socket. Syntax Parameters [in] s Descriptor identifying a socket. [out] name Pointer to a SOCKADDR structure that receives the address (name) of the socket. [in, out] namelen Size of ... Remarks The getsockname function retrieves the current name for the.Bluetooth and getsockname Bluetooth uses the getsockname function to retrieve the server device address and port number allocated to a socket through a previous call to the bind function. For more information, see Windows Sockets. Related topics Windows Sockets getsockname bind. Bluetooth uses the getsockname function to retrieve the server device.(Unicode) getsockname The getsockname function (winsock2.h) retrieves the local name for the specified socket descriptor. getsockname The getsockname function (winsock.h) retrieves the local name for a socket. getsockopt The getsockopt function retrieves the current value for a socket option associated with a socket of any type, in any state, and....col name. getprotobynumber The getprotobynumber function (winsock2.h) retrieves protocol information corresponding to a protocol number. getservbyname The getservbyname function (winsock2.h) retrieves service information corresponding to a service name and protocol. getservbyport The getservbyport function (winsock2.h) retrieves service.Bluetooth Programming with Windows Sockets This section describes how to use Windows Sockets functions and structures to program a Bluetooth application. Complete reference information for the Windows Sockets API elements can be found in Windows Sockets; this section provides only Bluetooth-specific information for ... Bluetooth and getsockname.Os.Getsockname(FileDescriptor) Method Definition Namespace: Android.Systems Assembly:Mono.Android.dll See getsockname(2). Parameters fd FileDescriptor Returns SocketAddress Attributes RegisterAttribute Exceptions ErrnoException Remarks See getsockname(2).Java documentation for android.system.Os.getsockname(java.io.FileDescriptor).Portions of this....ction (winsock.h) retrieves the protocol information corresponding to a protocol name. getprotobynumber The getprotobynumber function (winsock.h) retrieves protocol information corresponding to a protocol number. getservbyname The getservbyname function (winsock.h) retrieves service information corresponding to a service name and protocol..The socket group ID for a socket can be retrieved by using the getsockopt function with level parameter set to SOL_SOCKET and the optname parameter set to SO_GROUP_ID. Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps].CAsyncSocket::GetLastError G... CAsyncSocket::GetPeerName Gets the address of the peer socket to which the socket is connected. CAsyncSocket::GetPeerNameEx Gets the address of the peer socket to which the socket is connected (handles IPv6 addresses). CAsyncSocket::GetSockName Gets the local name for a socket. CAsyncSocket::GetSockNameEx Gets the."
956,SetConsoleScreenBufferSize,"Microsoft Build · May 19 – 22, 2025Changes the size of the specified console screen buffer. ...OORD structure that specifies the new size of the console screen in character rowsThe specified width and height cannot be less than the width and height of the console screen buffer's window. The specified dimensions also cannot be less than the minimum size allowed by the system. This.Window and Screen Buffer Size The size of a screen buffer is expressed in terms of a coordinate grid based on character cells. Associated with each screen buffer is a window that determines the size and location of the rectangular portion of the console screen buffer displayed in the console window. To change a screen buffer's size, use the.A process cannot change the location of its console window on the screen, but the following console functions are available to set or retrieve the other properties specified in the STARTUPINFO structure. Function Description GetConsoleScreenBufferInfo Retrieves the window size, screen buffer size, and color attributes. SetConsoleWindowInfo Changes.Console Functions The following functions are used to access a console. F... SetConsoleActiveScreenBuffer Sets the specified screen buffer to be the currently displayed console screen buffer. SetConsoleScreenBufferInfoEx Sets extended information about the specified console screen buffer. SetConsoleScreenBufferSize Changes the size of the.Enhanced keys for the IBM® 101-key and 102-key keyboards are the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, a... If the user reduces the size of the console screen buffer, any data in the discarded portion of the buffer is lost. Changes to the console screen buffer size as a result of application calls to the SetConsoleScreenBufferSize function are.CreateConsoleScreenBuffer function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include....al [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header WinConTypes.h (via WinCon.h, include Windows.h) See also CONSOLE_FONT_INFO CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SELECTION_INFO FillConsoleOutputAttribute FillConsoleOutputCharacter GetConsoleFontSize GetLargestConsoleWindowSize MOUSE_EVENT_RECORD.Remarks The rectangle returned in the srWindow member of the CONSOLE_SCREEN_BUFFER_INFO structure can be modified and then passed to the SetConsoleWindowInfo function to scroll the console screen buffer in the window, to change the size of the window, or both. Requirements Minimum supported client Windows 2000 Professional [desktop apps only].Tip For important background info, see Windows API sets and Windows umbrella libraries. That umbrella library provides the exports for the set of Win32 APIs in question. This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. For delay load or LoadLibrary, use the module name (whether."
957,SetFileApisToANSI,"Microsoft Build · May 19 – 22, 2025SetFileApisToANSI function (fileapi.h) Causes the file I/O functions to use the ANSI character set code page for the current process. This function is useful for 8-bit console input and output operations. Syntax Return value None Remarks The file I/O fu... SetFileApisToANSI sets the code page per process, rather than per thread or per computer..The SetFileApisToANSI function causes the functions to use the ANSI code page. The S... Functions exported by Kernel32.dll that accept or return file names are affected by the file code page setting. Both SetFileApisToANSI and SetFileApisToOEM set the code page per process, rather than per thread or per computer. The AreFileApisANSI function.For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. (Unicode) SetEndOfFile Sets the physical file sizeSetFileApisToANSI Causes the file I/O functions to use.AreFileApisANSI function (fileapi.h) Determines whether the file I/O functions are using the ANSI or OEM character set code page. The SetFileApisToANSI function causes the same set of file I/O functions to use the ANSI code page. The file I/O functions whose code page is ascertained by AreFileApisANSI are those functions exported by KE... The.AreFileApisANSI Determines whether the file I/O functions are using the ANSI or OEM character set code page. CloseEncryptedFileRaw Closes an encrypted file after... ReOpenFile Reopens the specified file system object with different access rights, sharing mode, and flags. ReplaceFile Replace. SetFileApisToANSI Causes the file I/O functions to use.SetFileApisToOEM function (fileapi.h) Causes the file I/O functions for the process to use the OEM character set code page. SetFileApisToOEM sets the code page per process, rather than pe... The SetFileApisToOEM function is complemented by the SetFileApisToANSI function, which causes the same set of file I/O functions to use the ANSI character set.Before Windows 11, it appears that a CMD.EXE created in this way used the SetFileApisToANSI() and SetFileApisToOEM() setting to determine whether the command line should be treated as containing OEM or ANSI characters. With this in effect, on Windows 10: SetFileApisToANSI: SetFileApisToOEM: On Windows 11, same program: SetFileApisToANSI:.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
958,GlobalMemoryStatus,"Microsoft Build · May 19 – 22, 2025The GlobalMemoryStatus function stores information about current memory availability into this structure. Return value None Remarks On computers with more than 4 GB of memory, the GlobalMemoryStatus function can return incorrect information, reporting a value of –1 to indicate an overflow. On Intel x86 computers with more than 2 GB and less than 4.The GlobalMemoryStatus function stores information in a MEMORYSTATUS structure. Syntax Members dwLength The size of the MEMORYSTATUS data structure, in bytes. You do not need to set this member before calling the GlobalMemoryStatus function; the function sets it. dwMemoryLoad A number between 0 and 100 that specifies the approximate percentage of.(ANSI) GlobalGetAtomNameW Retrieves a ... (Unicode) GlobalHandle Retrieves the handle associated with the specified pointer to a global memory block. GlobalLock Locks a global memory object and returns a pointer to the first byte of the object's memory block. GlobalMemoryStatus Retrieves information about the system's current usage of both.I use the GlobalMemoryStatus function to retrieve the amount of currently available memory so I can determine how much memory to attempt to allocate with the GlobalAlloc function. The Win32 signature for GlobalMemoryStatus is: You pass a pointer/reference to a struct into GlobalMemoryStatus and it populates the struct with memory information. .GlobalMemoryStatusEx Obtains information about the system's current usage of both physical and virtual memory. Obsolete Functions These functions are provided only for compatibility with 16-bit versions of Windows: IsBadCodePtr IsBadReadPtr IsBadStringPtr IsBadWritePtr The function below can return incorrect information, and shou... Instead, use.IHostMemoryManager::GetMemoryLoad Method Gets the amount of physical memory that is currently in use, and therefore unavailable, as reported by the host. Remarks GetMemoryLoad wraps the Win32 GlobalMemoryStatus function. The value of pMemoryLoad is the equivalent of the dwMemoryLoad field in the MEMORYSTATUS structure returned from.VSS_RECOVERY_OPTIONS Used by a requester to specify how a resynchronization operation is to be performed. AddRestoreSubcomponent Indicates that a subcomponent member of a component set, which had been marked as nonselectable for backup but is marked selectable for... AddSecureMemoryCacheCallback Registers a callback function to be called when a."
959,MessageBoxExA,"Microsoft Build · May 19 – 22, 2025MessageBoxExA function (winuser.h) Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface. Currently MessageBoxEx and MessageBox work the same way. Syntax Parameters [in,.MessageBox The MessageBox functi... MessageBoxA Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked. (MessageBoxA) MessageBoxExA Creates, displays, and operates.DialogBox does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function. DispatchMessage The DispatchMessage function dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function. DispatchMessageA Dispatches a message to."
960,GetProfileSectionW,"Microsoft Build · May 19 – 22, 2025GetProfileSectionW function (winbase.h) Retrieves all the keys and values for the specified section of the Win.ini file. Note  This function is provided only for compatibility with 16-bit Windows-based applications. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section in the.To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplaunch....Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. GetPrivateProfileSection The GetPrivateProfileSection function (winbase.h) retrieves all the keys and values for the specified section of an initialization file. GetPrivateProfileSectionA Retrieves all the keys... (GetPrivateProfileSectionNamesA)."
961,RegisterHotKey,"Microsoft Build · May 19 – 22, 2025To use RegisterHotKey in a Microsoft product or development environment, you need to follow these steps:Here is a simple example in C++:This process allows you to effectively use hot keys in your application for quick user interactions.References:RegisterHotKey function (winuser.h) Defines a system-wide hot key. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the window that will receive WM_HOTKEY messages generated by the hot key. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop.Win32.RegisterHotKey(IntPtr, Int32, ModifierKeys, Int32) Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Utilities Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters hWnd id Int32 fsModifiers ModifierKeys vk Int32 Returns Boolean Applies to. Learn more about the.Hot-Key Support A hot key is a key combination that generates a WM_HOTKEY message, a message the system places at the top of a th... To define a hot key, an application calls the RegisterHotKey function, specifying the combination of keys that generates the WM_HOTKEY message, the handle to the window to receive the message, and the identifier of.Thread-Specific Hot Keys An application sets a thread-specific hot key (CHotKeyCtrl) by using the Windows RegisterHotKey function. When the user presses a thread-spe... For more information on this method, see RegisterHotKey. Note that the shift state flags used in the call to RegisterHotKey are not the same as those returned by the GetHotKey.The function provides information that allows a program to send OEM text to another program by simulatin... RegisterForTooltipDismissNotification Lets apps or UI frameworks register and unregister windows to receive notification to dismiss their tooltip windows. RegisterHotKey Defines a system-wide hot key. RegisterRawInputDevices Registers the.The function provides information that allows a program to send OEM text to another program by simulating keyboard input. RegisterHotKey Defines a system-wide hot key. SendInput Synthesizes keystrokes, mouse motions, and butt... UnregisterHotKey Frees a hot key previously registered by the calling thread. WM_HOTKEY Posted when the user presses a.Setting a Hot Key Your application can use the information provided by a hot key (CHotKeyCtrl) control in one of two ways: Set up a global hot key for activating a nonchild window by sending a WM_SETHOTKEY message to the window to be activated. Set up a thread-specific hot key by calling the Windows function RegisterHotKey. See also Using.In my December 2000 column, I showed how to use RegisterHotKey to register a hot key for your app (see C++ Q&A: Sending Messages in Windows, Adding Hot Keys to your Application). To disable these functions all you have to do is register the hotkeys, which causes Windows to send your app a WM_HOTKEY message whe... The OnCreate/OnDestroy handlers.WM_HOTKEY message Posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. The ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server....oard Input Functions In This Section ActivateKeyboardLayout BlockInput EnableWindow GetActiveWindow GetAsyncKeyState GetFocus GetKBCodePage GetKeyboardLayout GetKeyboardLayoutList GetKeyboardLayoutName GetKeyboardState GetKeyboardType GetKeyNameText GetKeyState GetLastInputInfo IsWindowEnabled keybd_event LoadKeyboardLayout MapVirtualKey."
962,SetScrollRange,"Microsoft Build · May 19 – 22, 2025SetScrollRange function (winuser.h) The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar. Note  The SetScrollRange function is provided for backward compatibility. Syntax Parameters [in] hWnd Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the.FlatSB_SetScrollRange function (commctrl.h) Sets the scroll range of a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard SetScrollRange function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. It can be one of the following values: Value.ScrollBar_SetRange macro (windowsx.h) Sets the range of a scroll bar. Note  This macro expands to a call to the SetScrollRange function, which is deprecated. Syntax Parameters hwndCtl Type: HWND A handle to the control. posMin Type: int The minimum value of the scroll bar. posMax Type: int The maximum value of the scroll bar. fRedraw Type: BOOL.SBM_SETRANGE message The SBM_SETRANGE message is sent to set the minimum and maximum position values for the scroll bar control. A window receives this message through its WindowProc function. Applications which implement a custom scroll bar control must respond to these messages for the SetScrollRange function to work properly. Parameters wParam.CScrollBar Class Provides the functionality of a Windows scroll-bar control. Syntax Members Public Constructors Name Description CScrollBar::CScrollBar Constructs a CScrollBar object. Public Methods Name Description CScrollBar::Crea... CScrollBar::SetScrollPos Sets the current position of a scroll box. CScrollBar::SetScrollRange Sets minimum and.Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.SetScrollPos The SetScrollPos function set... Note: The SetScrollPos function is provided for backward compatibility. New applications should use the SetScrollInfo function. SetScrollRange The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar. Note: The SetScrollRange function is provided for.Flat Scroll Bar This section contains information about the programming elements used to control flat scroll bars. Overviews Topic Contents Flat Scroll Bars Microsoft Internet Explorer 4.0 introduced a new visual technology called flat scroll bars. FlatSB_SetScrollRange Sets the scroll range of a flat scroll bar. If flat scroll bars are not.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. ... supported client Windows Vista [desktop apps only] Minimum supported server Windows.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only]."
963,GetTextCharsetInfo,"Microsoft Build · May 19 – 22, 2025GetTextCharsetInfo function (wingdi.h) Retrieves information about the character set of the font that is currently selected into a specified device context. Syntax Parameters [in] hdc Handle to a device context. The function obtains information about the font that is selected into this device context. [out, optional] lpSig Pointer to a.GetTextCharset function (wingdi.h) Retrieves a character set identifier for the font that is currently selected into a specified device context. Syntax Parameters [in] hdc Handle to a device context. The function obtains a character set identifier for the font that is selected into this device context. Return value If successful, returns a value.Unicode and Character Set Functions The following functions are used with character sets. Function Description GetTextCharset Retrieves a character set identifier for the font that is currently selected into a specified device context. GetTextCharsetInfo Retrieves information about the character set of the font that is currently selected into a.Any application that runs only on Windows Vista and later should use GetNLSVersionEx or at least pass the NLSVERSIONINFOEX structure when calling GetNLSVersion to obtain additional sorting versioning data. GetTextCharset Retrieves a character set identifier for the font that is currently selected into a specified device context. GetTextCharsetInfo.G... GetTextCharacterExtra The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context. GetTextCharset Retrieves a character set identifier for the font that is currently selected into a specified device context. GetTextCharsetInfo Retrieves information about the character set of the font that."
964,GetTimeFormatW,"Microsoft Build · May 19 – 22, 2025GetTimeFormatW function (datetimeapi.h) Formats time as a time string for a locale specified by identifier. The function formats either a specified time or the local system time. Note  For interoperability reasons, the application should prefer the GetTimeFormatEx function to GetTimeFormat because Microsoft is migrating toward the use of locale.GetTimeFormatWrapW function [GetTimeFormatWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use GetTimeFormatW in its place.]. Formats time as a time string for a specified locale. The function formats either a specified time or the local system time. Note GetTimeFormatWrapW is a wrapper for the.datetimeapi.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications datetimeapi.h contains the following programming interfaces: Functions GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. (ANSI).It will not be available in subsequent versions. You should use GetDateFormatW in its place.] [This function is available through Windows XP SP2 and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.] [GetTimeFormatWrapW is available for use in Windows XP. It may not be available in subsequent versions. You.(GetStringTypeA) GetStringTypeExW Retrieves character type information for the characters in the specified source string. GetStringTypeW Retrieves character type information for the characters in the specified Unicode source string. GetTimeFormatA Formats time as a time string for a locale specified by identifier. (ANSI) GetTimeFormatEx Formats."
965,CharToOemA,"Microsoft Build · May 19 – 22, 2025CharToOemA function (winuser.h) Translates a string into the OEM-defined character set. Remarks Note The winuser.h header defines CharToOem as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Requirements Requirement Value Minimum supported client.CharPrevW Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters. (Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharToOemBuffA Translates a specified number of characters in a string into the.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming g... This function can handle strings consisting of either single- or multi-byte characters. (Unicode) CharToOemA Translates a string into the.NOTE: This list is actively being updated and improved Banned API Replacement(s) Rationale / Notes _itoa _itoa_s Does not NULL-terminate _i64toa _i64toa_s Does not NULL-terminate _i64tow _i64tow_s Does not NULL-terminate _mbccpy _mbccpy_s _mbscpy _mbscpy_s _mbsnbcpy _mbsnbcpy_s _mbsnbcat _mbsnbcat_s _mbsncat _mbsncat_s _mbsncpy _mbsncpy_s _mbstok."
966,CharToOemBuffA,"Microsoft Build · May 19 – 22, 2025CharToOemBuffA function (winuser.h) Translates a specified number of characters in a string into the OEM-defined character set. Syntax Parameters [in] lpszSrc Type: LPCTSTR The null-terminated string to be translated. [out] lpszDst Type: LPSTR The buffer for the translated string. Requirements Requirement Value Minimum supported client.This function can handle strings consisting of either single- or multi-byte characters... (Unicode) CharToOemA Translates a string into the OEM-defined character set.Warning  Do not use. (ANSI) CharToOemBuffA Translates a specified number of characters in a string into the OEM-defined character set. (ANSI) CharToOemBuffW Translates a specified.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) CharToOemBuffA Translates a.Warning C28726 Banned API Usage: '*function-name' is insecure and has been marked deprecated. ...cpy _mbccpy_s _mbscpy _mbscpy_s _mbsnbcpy _mbsnbcpy_s _mbsnbcat _mbsnbcat_s _mbsncat _mbsncat_s _mbsncpy _mbsncpy_s _mbstok _mbstok_s _snscanf _snscanf_s _snwscanf _snwscanf_s _ui64toa ui64toa_s _ui64tow _ui64tow_s _ultoa CharToOemA CharToOemBuffA."
967,SetRect,"Microsoft Build · May 19 – 22, 2025SetRect function (winuser.h) The SetRect function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the RECT structure. Syntax Parameters [out] lprc Pointer to the RECT structure that contains the rectangle to be set. [in] xLeft Specifies the.SKRoundRect.SetRect Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads SetRect(SKRect) Set this rectangle to be a simple rectangle. SetRect(SKRect, Single, Single) Set this rectangle to be a simple rounded rectangle. ...a simple rApplies to SetRect(SKRect, Single, Single) Set this rectangle to be a simple rounded rectangle..Rectangle Functions The following functions are used with rectangles. Function Description CopyRect Copies the coordinates of one rectangle to ... PtInRect Determines whether the specified point lies within the specified rectangle. SetRect Sets the coordinates of the specified rectangle. SetRectEmpty Creates an empty rectangle in which all.Outline.SetRect Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Overloads SetRect(Rect) Convenience for #setRect(int, int, int, int) SetRect(Int32, Int32, Int32, Int32) Sets the Outline to the rect defined by the input coordinates. SetRect(Rect) Convenience for #setRect(int, int, int, int) Parameters rect Rect Attributes.Rectangle Operations The SetRect function creates a rectangle, the CopyRect function makes a copy of a given rectangle, and the SetRectEmpty function creates an empty rectangle. An empty rectangle is any rectangle that has zero width, zero height, or both. For information about functions that draw ellipse... The SetRect function creates a.IPreviewHandler::SetRect method (shobjidl_core.h) Directs the preview handler to change the area within the parent hwnd that it draws into. Syntax Parameters [in] prc Type: const RECT* A pointer to a RECT to be used for the preview. Requirements Requirement Value Minimum supported client Windows Vista, Windows XP [desktop apps only] Mini....IOleDocumentView.SetRect(RECT[]) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters prcView RECT[] Remarks For information on the COM interface, see IOleDocumentView::SetRect.IOleDocumentView::SetRect method (docobj.h) Sets the rectangular coordinates of the viewport in which the view is to be activated or resets the coordinates of the viewport in which a view is currently activated. Syntax Parameters [in] prcView A pointer to a RECT structure containing the coordinates of the viewport. Return value This method returns.SKRegion.SetRect(SKRectI) Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Set this region to the specified rectangle. Parameters rect SKRectI The replacement rectangle. Returns Boolean Returns true if the resulting region is non-empty. Applies to. Set this region to the specified rectangle. . /dotnet/api/skiasharp.skregion.setrect.CEdit::SetReadOnly Sets the read-only state of an edit control. CEdit::SetRect Sets the formatting rectangle of a multiple-line edit control and updates the control. CEdit::SetRectNP Sets the formatting rectangle of a multiple-line edit control without redrawing the control window. Parameters lpRect Points to the RECT structur... The formatting."
968,GlobalGetAtomNameA,"Microsoft Build · May 19 – 22, 2025GlobalGetAtomNameA function (winbase.h) Retrieves a copy of the character string associated with the specified global atom. Syntax Parameters [in] nAtom Type: ATOM The global atom associated with the character string to be retrieved. [out] lpBuffer Type: LPTSTR The buffer for the character string. [in] nSize Type: int The size, in characters, of.If the atom's reference count reaches zero, GlobalDeleteAtom ... (ANSI) GlobalFindAtomW Searches the global atom table for the specified character string and retrieves the global atom associated with that string. GlobalGetAtomNameA Retrieves a copy of the character string associated with the specified global atom. (ANSI) GlobalGetAtomNameW.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. (Unicode)."
969,GetPropA,"Microsoft Build · May 19 – 22, 2025GetPropA function (winuser.h) Retrieves a data handle from the property list of the specified window. ...erty list by a previous call to the SetProp Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be searched. [in] lpString Type: LPCTSTR An atom that identifies a string. Remarks Note The winuser.h header.ContentIsland.CustomProperties Property Definition Namespace: Microsoft.UI.Content Edit Gets the set of custom properties for the ContentIsland. Remarks Unlike AppData, objects stored in CustomProperties... This is similar to Windows.UI.Core.CoreWindow.CustomProperties (or the Win32 GetPropA function (winuser.h) and SetPropA function (winuser.h))..(ANSI) GetWindowModuleFileNameW Retrieves the full path an... (Unicode) GetWindowPlacement Retrieves the show state and the restored, minimized, and maximized positions of the specified window. GetWindowRect Retrieves the. GetWindowTextA Copies the text of the specified window's title bar (if it has one) into a buffer. (Unicode) RemovePropA.AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) AreDpiAwarenessContextsEqual Determines whether two DPI_AWARENESS_CONTEXT values are identical. (BroadcastSystemMessage) BroadcastSystemMessageA Sends a message to the specified recipients. (BroadcastSystemMessageA)."
970,GetTextExtentPoint32W,"Microsoft Build · May 19 – 22, 2025GetTextExtentPoint32W function (wingdi.h) The GetTextExtentPoint32 function computes the width and height of the specified string of text.(ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text.(ANSI) GetTextExtentPoint32W The GetTextExtentPoint32 function computes the width and height of the specified string of text."
971,LoadStringA,"Microsoft Build · May 19 – 22, 2025LoadStringA function (winuser.h) Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself. Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to an instance of the.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) LoadMenuA Loads... LoadStringA.When I go to &quot;LoadString(...)&quot; definition, it's a macro chosing between : LoadStringW for Unicode LoadStringA for others # ifdef UNICODE define LoadString LoadStringW else define LoadString LoadStringA endif // !UNICODE (libloaderapi.h) LoadStringW should be used as all of my projects are in unicode but it is actually LoadStringA....000\120\127D\142\141\163e&quot;, '\000\000' &lt;repeats 11 times&gt;&quot;\000, \155\100\164\162\151\170\061\062\063\000\137\163\165\160\160\157\162t\123\121\114\040\123\145\162\166\145r&quot;, '\000\000' &lt;repeats 497 times&gt;&quot;\xbf0a,.The function searches the entire screen, not just the calling application's client area. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. You can use this function to specify the content,."
972,IsBadCodePtr,"Microsoft Build · May 19 – 22, 2025IsBadCodePtr function (winbase.h) Determines whether the calling process has read access to the memory at the specified address. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page..IsBadReadPtr function (winbase.h) Verifies that the calling process has read access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.winbase.h header This header is used by multiple technologies. For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes eve... InterlockedExchangeSubtract Performs an atomic subtraction of two values. IsBadCodePtr Determines whether the calling.AtlThunk_FreeData Frees memory associated with an A... AtlThunk_InitData Initializes an ATL thunk. Obsolete Functions These functions are provided only for compatibility with 16-bit versions of Windows: IsBadCodePtr IsBadReadPtr IsBadStringPtr IsBadWritePtr The function below can return incorrect information, and should not be used. Instead, use.Warning C28720 Banned API Usage: '*function-name' is insecure and has been marked deprecated. Remarks Using one of these APIs indicates that you are testing to see if memory is mapped, which implies that you either don'... Code analysis name: ISBADXXXPTR_API_USAGE Banned Functions Banned API IsBadCodePtr IsBadHugeReadPtr IsBadHugeWritePtr.IsBadStringPtrA function (winbase.h) Verifies that the calling process has read access to the specified range of memory. ...hould notRequirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).IsBadStringPtrW function (winbase.h) Verifies that the calling process has read access to the specified range of memory. ...rocessor Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h).IsBadWritePtr function (winbase.h) Verifies that the calling process has write access to the specified range of memory. Important  This function is obsolete and should not be used. Despite its name, it does not guarantee that the pointer is valid or that the memory pointed to is safe to use. For more information, see Remarks on this page. Syntax.To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h heapapi.h imagehlp.h interlockedapi.h ioapiset.h jobapi.h jobapi2.h libloaderapi.h libloaderapi2.h mcx.h memoryapi.h minidumpapiset.h minwinbase.h namedpipeapi.h namespaceapi.h."
973,ExtTextOutW,"Microsoft Build · May 19 – 22, 2025ExtTextOutW function (wingdi.h) The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical coordinates, of the reference point.ExtSelectClipRgn The ExtSelectClipRgn function combines the specified region with the current clipping region u... ExtTextOutA The ExtTextOut function draws text using the currently selected font, background color, and text color. (ANSI) ExtTextOutW The ExtTextOut function draws text using the currently selected font, background color, and text.ExtSelectClipRgn The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode. ExtTextOutA The ExtTextOut function draws text using the currently selected font, background color, and text color. (ANSI) ExtTextOutW The ExtTextOut function draws text using the currently selected font,.The code examples on this page all seem to have errors, some of which I don't have a clue how to fix. There is a &quot;W&quot; version when... For example, when building for UNICODE the compiler sees a function named ExtTextOutW which expects wide-character strings. However, the example code declares some variables as LPSTR which means it is a.3.2.10 EMR_EXTTEXTOUTW Example This section provides an example of an EMR_EXTTEXTOUTW record (section 2.3.5.8). 00003290:                        54 00 00 00 A0 00 00 00 000032A0:00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF 000032B0:01 00 00 00 AB 0A 0D 42 00 00 0D 42 12 00 00 00 000032C0:05 00 00 00 0E 00 00 00 4C 00 00 00 00 00 00 00.2.3.5.8 EMR_EXTTEXTOUTW Record The EMR_EXTTEXTOUTW record draws a Unicode text string using the current font and text colors. Type (4 bytes): An unsigned integer that identifies the record type as EMR_EXTTEXTOUTW from the RecordType enumeration (section 2.1.1). Bounds (16 bytes): A RectL object ([MS-WMF] section 2.2.2.19). The EMR_EXTTEXTOUTW.3.2.6.25 EMR_EXTTEXTOUTW Example 6 This section provides an example of an EMF EMR_EXTTEXTOUTW record ([MS-EMF] section 2.3.5.8). 00065030:                                    54 00 00 00 00065040:54 00 00 00 B0 02 00 00 AD 01 00 00 C9 02 00 00 00065050:F0 01 00 00 01 00 00 00 76 84 E1 40 47 A2 E1 40 00065060:B0 02 00 00 E3 01 00 00 01 00 00 00 4C.Function Ordinal Forwards To DLL Remarks AppendMenuWrapW 36 AppendMenu US... (DateTime) On Shlwapi.dll version 5.0, which shipped with Windows 2000, the code page of the locale identifier that you pass as the first parameter of GetDateFormatWrapW and GetTimeFormatWrapW must match the current ANSI codepage. (ExtTextOut) Native ANSI platforms.3.2.6.27 EMR_EXTTEXTOUTW Example 8 This section provides an example of an EMF EMR_EXTTEXTOUTW record ([MS-EMF] section 2.3.5.8). 000651A0:                        54 00 00 00 54 00 00 00 000651B0:34 04 00 00 F2 01 00 00 4D 04 00 00 35 02 00 00 000651C0:01 00 00 00 76 84 E1 40 47 A2 E1 40 34 04 00 00 000651D0:28 02 00 00 01 00 00 00 4C 00 00 00 04.3.2.6.20 EMR_EXTTEXTOUTW Example 2 This section provides an example of an EMF EMR_EXTTEXTOUTW record ([MS-EMF] section 2.3.5.8). 00064E90:54 00 00 00 54 00 00 00 9B 02 00 00 68 01 00 00 00064EA0:B5 02 00 00 AB 01 00 00 01 00 00 00 76 84 E1 40 00064EB0:47 A2 E1 40 9B 02 00 00 9E 01 00 00 01 00 00 00 00064EC0:4C 00 00 00 04 10 00 00 00 00 00 00 00."
974,GetWindow,"Microsoft Build · May 19 – 22, 2025The GetWindow function is part of the Windows API and is used to retrieve a handle to a window based on specific criteria. It allows you to obtain a handle to a window that is related to a specified window. The function can be used to navigate through the window hierarchy.Here is a basic syntax for the GetWindow function:The function returns a handle to the specified window or NULL if there is no such window.You typically use GetWindow to find a specific window in relation to another window, which can be useful for managing window focus, visibility, or other properties in a Windows application.References:GetWindow function (winuser.h) Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window. Syntax Parameters [in] hWnd Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter. [in] uCmd Type: UINT The relationship between.Window.GetWindow(DependencyObject) Method Definition Namespace: System.Windows Assembly:PresentationFramework.dll Returns a reference to the Window object that hosts the content tree within which the dependency object is located. Parameters dependencyObject DependencyObject The dependency object. Returns Window A Window referenc... Applies to..SQLWorkbenchToolsOptionsPage.GetWindow Method Definition Namespace: Microsoft.SqlServer.Management.UI.VSIntegration Assembly:SQLEditors.dll Returns Control Applies to. Learn more about the Microsoft.SqlServer.Management.UI.VSIntegration.SQLWorkbenchToolsOptionsPage.GetWindow in the Microsoft.SqlServer.Management.UI.VSIntegration namespace...SQLWBToolsOptionsPage.GetWindow Method Definition Namespace: Microsoft.SqlServer.Management.UI.VSIntegration.Editors Assembly:SQLEditors.dll Retrieves the window that this options page uses. Returns Control A Control object. Applies to. Retrieves the window that this options page uses. ..IOleWindow::GetWindow method (oleidl.h) Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window). Syntax Parameters [out] phwnd A pointer to a variable that receives the window handle. Return value This method returns S_OK on success. Other possible return values include the.ShareableApplication.GetWindows Method Definition Namespace: Microsoft.Rtc.Internal.Collaboration.ApplicationSharing.Media Assembly:Microsoft.Rtc.Collaboration.dll Returns Collection Applies to. Learn more about the Microsoft.Rtc.Internal.Collaboration.ApplicationSharing.Media.ShareableApplication.GetWindows in the.EnumWindows function (winuser.h) Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. This function is more reliable than calling the GetWindow function in a loop. An application that calls GetWindow to perform this task risks being caught in an infinite loop or.PropertyGridToolsOptionPage.GetWindow Method Definition Namespace: Microsoft.SqlServer.Management.UI.VSIntegration Assembly:SQLEditors.dll Returns Control Applies to. Learn more about the Microsoft.SqlServer.Management.UI.VSIntegration.PropertyGridToolsOptionPage.GetWindow in the Microsoft.SqlServer.Management.UI.VSIntegration namespace...ITextDocument2::GetWindow method (tom.h) Gets the handle of the window that the Text Object Model (TOM) engine is using to display output. Requirements Requirement Value Minimum supported client Windows 8 [desktop apps only] Minimum supported server Windows Server 2012 [desktop apps only] Target Platform Windows Header tom.h DLL Msftedit.dll See.GetNextWindow macro (winuser.h) Retrieves a handle to the next or previous window in the Z-Order. The next window is below the specified wind... Remarks This function is implemented as a call to the GetWindow function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server."
975,GlobalCompact,"Microsoft Build · May 19 – 22, 2025"
976,WSACreateEvent,"Microsoft Build · May 19 – 22, 2025WSACreateEvent function (winsock2.h) The WSACreateEvent function creates a new event object. Syntax Return value If no error occurs, WSACreateEvent returns the handle of the event object. Therefore, if a Windows application wants to use an auto-reset event rather than a manual-reset event, the application can call the CreateEvent function.Event Objects... Applications use WSACreateEvent to obtain an event object handle that can then be supplied as a required parameter to the overlapped versions of send and receive calls ( WSASend, WSASendTo, WSARecv, WSARecvFrom). In 32-bit environments, event object–related functions, including WSACreateEvent, WSACloseEvent, WSASetEvent,.To develop Windows Sockets 2, you need these headers: af_irda.h in6addr.h mstcpip.h mswsock.h mswsockdef.h nsemail.h nspapi.h socketapi.h sporder.h transportsettingcommon.h winsock.h ws2atm.h ws2spi.h ws2tcpip.h wsipv6ok.h wsnwlink.h wsrm.h For programming guidance for this technology, see: Windows Sockets 2 Enumerations.WSAConnectByNam... (ANSI) WSAConnectByNameW Establishes a connection to a specified host and port. (Unicode) WSACreateEvent The WSACreateEvent function creates a new event object. WSADuplicateSocketA The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. (ANSI).WSAConnectByList Establishes a connection to one out of a collection of possible endpoints represented by a set of destination addresses (host names and ports). WSAConnectByName Establishes a connection to another socket application on a specified host and port WSACreateEvent Creates a new event object. WSADeleteSocketPeerTargetName Removes the.Transport Mapping Between API and SPI Functions The Winsock Transport SPI is similar to the Winsock API in that all of the basic socket functions appear. This is illustrated in the following list. connect and WSAConnect both map to WSPConnect accept and WSAAccept map to WS... The event object manipulation and wait functions, including.RIO_CQ The RIO_CQ typedef specifies a completion queue descriptor used for I/O completion notification by send and receive requests with the Winsock registered I/O extensions. For a completion queue that uses an event, the Type m... The Event.EventHandle member should contain the handle for an event created by the WSACreateEvent or CreateEvent.LPFN_RIONOTIFY callback function (mswsock.h) The RIONotify function registers the method to use for notification behavior with an I/O completion queue for use with the Winsock registered I/O extensions. For a completion queue tha... The Event.EventHandle member should contain the handle for an event created by the WSACreateEvent or CreateEvent.When using WSAWaitForMultipleEvents, all waiting completion routines are called before the... Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winsock2.h Library Ws2_32.lib DLL Ws2_32.dll....d ntohf ntohl ntohll ntohs recv recvfrom RIOCloseCompletionQueue RIOCreateCompletionQueue RIOCreateRequestQueue RIODequeueCompletion RIODeregisterBuffer RIONotify RIOReceive RIOReceiveEx RIORegisterBuffer RIOResizeCompletionQueue RIOResizeRequestQueue RIOSend RIOSendEx select send sendto SetAddrInfoExW setipv4sourcefilter setsockopt."
977,CLSIDFromString,"Microsoft Build · May 19 – 22, 2025CLSIDFromString function (combaseapi.h) Converts a string generated by the StringFromCLSID function back into the original CLSID. Syntax Parameters [in] lpsz The zero terminated string representation of the CLSID or the ProgID or NULL. [out] pclsid A pointer to the CLSID. Return value This function can return the standard return value.StringFromCLSID function (combaseapi.h) Converts a CLSID into a string of printable characters. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header combaseapi.h (include Objbase.h) Library.Takes the string form of a class identifier (CLSID) and creates the corresponding CLSID. Syntax Parameters [in] psz Type: PCWSTR A Unicode string that contains the CLSID in the format, {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}. [out] pclsid Type: CLSID* A pointer to a CLSID value that, when this function returns successfully, receives the converted.Functions (COM) The following functions are provided by COM. Function Description BindMoniker Locates an object by means of its moniker, activates the object if it is inactive, and retrieves a pointer to the specified interface on that objectCLSIDFromProgIDEx Triggers automatic installation if the COMClassStore policy is enabled. CLSIDFromString.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (COM) Structured Storage The Windows Shell Windows Multimedia Windows Runtime C++ reference combaseapi.h contains the following programming interfaces: Functions CLSIDFromProgID Looks up a CLSID in the.Compiler Error C2778 improperly formed GUID in __declspec(uuid()) An incorrect GUID is supplied to the uuid extended attribute. The GUID must be a string of hexadecimal numbers with the following format: The uuid extended attribute accepts strings recognized by CLSIDFromString, with or without brace delimiters. The following sample generates.GUIDFromString function [GUIDFromString is available through Windows XP with Service Pack 2 (SP2) or Windows Vista. It might be altered or unavailable in subsequent versions. Applications should use CLSIDFromString or IIDFromString in place of this function.]. Converts a string to a GUID. Syntax Parameters psz [in] Type: LPCTSTR A pointer to the.CLSIDFromProgID Looks up a CLSID in the registry, given a ProgID. CLSIDFromProgIDEx The CLSIDFromProgIDEx function (objbase.h) triggers automatic installation if the COMClassStore policy is enabled. CLSIDFromProgIDEx The CLSIDFromProgIDEx function (combaseapi.h) triggers automatic installation if the COMClassStore policy is enabled..Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into.Applications should use CLSIDFromString or IIDFromString in place of this function.] [This function is available through Windows XP SP2 and Windows Server 2003. It might be altered ... It might be altered or unavailable in subsequent versions of Windows. Use CLSIDFromString instead.] [SHCreateProcessAsUserW is not implemented under Windows XP or."
978,CreateAcceleratorTableW,"Microsoft Build · May 19 – 22, 2025CreateAcceleratorTableW function (winuser.h) Creates an accelerator table. Syntax Parameters [in] paccel Type: LPACCEL An array of ACCEL structures that describes the accelerator table. [in] cAccel Type: int The number of ACCEL structures in the array. Return value Type: HACCEL If the function succeeds, the return value is the handle to the.This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. (ANSI) CopyAcceleratorTableW Copies the specified accelerator ... This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to.This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data. (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to."
979,ExtSelectClipRgn,"Microsoft Build · May 19 – 22, 2025ExtSelectClipRgn function (wingdi.h) The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode. Syntax Parameters [in] hdc A handle to the device context. [in] hrgn A handle to the region to be selected. Value Meaning RGN_AND The new clipping region combines the overlapping areas of the.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the.SelectClipRgn function (wingdi.h) The SelectClipRgn function selects a region as the current clipping region for the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header win....wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.Clipping Functions The following functions are used with clipping. Function Description ExcludeClipRect Creates a new clipping region that consists of the existing clipping re... ExtSelectClipRgn Combines the specified region with the current clipping region using the specified mode. GetClipBox Retrieves the dimensions of the tightest bounding.EMREXTSELECTCLIPRGN structure (wingdi.h) The EMREXTSELECTCLIPRGN structure contains members for the ExtSelectClipRgn enhanced metafile record. Syntax Members emr The base structure for all record types. cbRgnData Size of region data, in bytes. iMode Operation to be performed. This member must be one of the following values: RGN_AND, RGN_COPY,.2.3.2.2 EMR_EXTSELECTCLIPRGN Record The EMR_EXTSELECTCLIPRGN record combines the specified region with the current clipping region using the specified mode. Type (4 bytes): An unsigned integer that identifies this record type as EMR_EXTSELECTCLIPRGN. RgnData ... See section 2.3.2 for more clipping record types. The EMR_EXTSELECTCLIPRGN record.2.3.2 Clipping Record Types The Clipping record types define and manage clipping regions. The clipping regions used by clipping record types are part of the Regions state element (section 3.1.1.2.1) in the playback device context (section 3.1). Name S... EMR_EXTSELECTCLIPRGN 2.3.2.2 Combines the specified region with the current clipping region,...._ELLIPSE packet EMR_ELLIPSE Record EMR_EOF example EMR_EOF packet EMR_EOF Record EMR_EXCLUDECLIPRECT packet EMR_EXCLUDECLIPRECT Record EMR_EXTCREATEFONTINDIRECTW example (section 3.2.8, section 3.2.11, section 3.2.13, section 3.2.16) EMR_EXTCREATEFONTINDIRECTW packet EMR_EXTCREATEFONTINDIRECTW Record EMR_EXTCREATEPEN packet EMR_EXTCREATEPEN.2.1.29 RegionMode Enumeration The RegionMode enumeration defines values that are used with EMR_SELECTCLIPPATH and EMR_EXTSELECTCLIPRGN, specifying the current path bracket or a new region that is being combined with the current clipping region. typedef  enum { RGN_AND = 0x01, RGN_OR = 0x02, RGN_XOR = 0x03, RGN_DIFF = 0x04, RGN_COPY = 0x05 }."
980,CoMarshalHresult,"Microsoft Build · May 19 – 22, 2025CoMarshalHresult function (combaseapi.h) Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. ...Return value This function can return the standard return values E_OUTOFMEMORY and E_UNEIf you are writing your own implementation of IMarshal and need to marshal an HRESULT from one.combaseapi.h header This header is used by multiple technologies. For more information, see: COM+ (Component Services) Component Object Model (CO... CoLockObjectExternal Called either to lock an object to ensure that it stays in memory, or to release such a lock. CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be.CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream the data required to initialize a proxy object in some client process. CoUnmarshalHresult Unmarshals an HRESULT type from the specified stream. CoUnmarshalInterface.CoInitializeEx Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required. CoMarshalHresult Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function. CoMarshalInterface Writes into a stream....rshalHresult function (combaseapi.h) Unmarshals an HRESULT type from the specified You must use CoUnmarshalHresult to unmarshal HRESULT values previously marshaled by a call to the CoMarshalHresult function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server."
981,LoadKeyboardLayoutA,"Microsoft Build · May 19 – 22, 2025LoadKeyboardLayoutA function (winuser.h) Loads a new input locale identifier (formerly called the keyboard layout) into the system. Prior to Windows 8: Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them..IsWindowEnabled Determines whether the specified window is enabled for mouse and keyboard input. keybd_event Synthesizes a keystroke. LoadKeyboardLayoutA Loads a new input locale identifier (formerly called the keyboard layout) into the system. (ANSI) LoadKeyboardLayoutW Loads a new input locale identifier (formerly called the keyboard layout).winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
982,DragObject,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
983,shutdown,"Microsoft Build · May 19 – 22, 2025To shut down a computer, you can use the Stop-Computer command in PowerShell:If you want to restart the computer, you can use the Restart-Computer command:For a forced immediate restart, you can add the -Force parameter:To shut down or restart a specific Microsoft service, you would typically use the Stop-Service command for stopping a service and Start-Service for starting it again. For example:Replace ""ServiceName"" with the actual name of the service you want to stop.References:shut down, shutdown Two words as a verb, one word as a noun. Use shut down to describe exiting the operating system and turning off the device in a single action. Don't use shut down to describe turning off a device or as a synonym for close. Use the Shut down command to safely close open apps, shut down Windows, and turn off the device. Describes.shutdown Enables you to shut down or restart local or remote computers, one at a time. Syntax Parameters Parameter Description /i Displays the Remote Shutdown box. Reason type Major Minor Description U 0 0 Other (Unplanned) E 0 0 Other (Unplanned) E or P 0 0 Other (Planned) U 0 5 Other Failure: System Unresponsive E ... Reference article for the.Shutting Down There are three ways for an application to shut down local or remote computers: shut down the system shut down the system and restart it shut down the application, shut down and restart the system, and restart any applications that have been registered for restart To shut down the system, use the ExitWindowsEx function with the.Shutdown method of the Win32_OperatingSystem class The Shutdown WMI class method unloads programs and DLLs until it is safe to turn off the computer. This topic uses Managed Object Format (MOF) syntax. For more information about using this method, see Calling a Method. Syntax Parameters This method has no parameters. Return value Returns zero (0).Application.Shutdown Method Definition Namespace: System.Windows Assembly:PresentationFramework.dll Shuts down an application. Overloads Shutdown() Shuts down an application. Shutdown(Int32) Shuts down an application that returns the specified exit code to the operating system. Shutdown() Shuts down an application. Shutdown is implicitly called by.SHUTDOWN (Transact-SQL) Applies to: SQL Server Immediately stops SQL Server. Transact-SQL syntax conventions Syntax Arguments WITH NOWAIT Optional. Shuts down SQL Server without performing checkpoints in every database. SQL Server exits after attempting to terminate all user processes. When the server restarts, a rollback operation occurs for.About System Shutdown System shutdown brings the system to a condition in which it is safe to turn off the computer. All file-system buffers are flushed to the disk, then a message box is displayed informing the user that the computer can be turned off. Logging off stops all processes associated with the security context of the process that called.3.6.4.13 Shutdown Operation The Shutdown method requests that the server operating system shut down. This operation MUST be authenticated by using either the Server Management Credentials or the Server Control Credentials (section 3.4.1).. The Shutdown method requests that the server operating system shut down. This operation MUST be authenticated.shutdown function (winsock2.h) The shutdown function disables sends or receives on a socket. Syntax Parameters [in] s A descriptor identifying a socket. [in] how A flag that describes what types of operation will no longer be allowed. Possible values for this flag are listed in the Winsock2.h header file. Value Meaning SD_RECEIVE 0 Shutdown.System Shutdown The system shutdown functions and messages allow applications to log off the current user, shut down the system, or lock the workstation: Shutdown Changes for Windows Vista About System Shutdown Using System Shutdown System Shutdown Reference. System shutdown brings the system to a safe condition for a shut down and auto restart of."
984,SetParent,"Microsoft Build · May 19 – 22, 2025SetParent function (winuser.h) Changes the parent window of the specified child window. Syntax Parameters [in] hWndChild Type: HWND A handle to the child window. [in, optional] hWndNewParent Type: HWND A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window. If this parameter is HWND_MESSAGE,.Win32Methods.SetParent(IntPtr, IntPtr) Method Definition Namespace: Microsoft.VisualStudio Assembly:Microsoft.VisualStudio.Shell.14.0.dll Assembly:Microsoft.VisualStudio.Shell.15.0.dll Assemblies:Microsoft.VisualStudio.Shell.15.0.dll, Microsoft.VisualStudio.Shell.Framework.... Parameters hWnd Handle to the child window. hWndParent Handle to the.ContentOperations.SetParent(ContentElement, DependencyObject) Method Definition Namespace: System.Windows Assembly:PresentationCore.dll Sets the parent element of the provided ContentElement. Parameters reference ContentElement The ContentElement to reparent. parent DependencyObject The new parent element. The DocumentViewerBase class uses this.CKRecord.SetParent Method Definition Namespace: CloudKit Assembly:Xamarin.iOS.dll Assembly:Xamarin.Mac.dll Overloads SetParent(CKRecord) Creates a parent-child relationship between this and the specified parentRecord. SetParent(CKRecordID) Creates a parent-child relationship between this and that specified by parentRecordID. SetParent(CKRecord).TB_SETPARENT message Sets the window to which the toolbar control sends notification messages. ...ers wParam Handle to the window to receive notification messages. lParam MustReturn value The return value is a handle to the previous notification window, or NULL if there is no previous notification window. Calling the GetParent function for a.AutomationPeer.SetParent(AutomationPeer) Method Definition Namespace: Microsoft.UI.Xaml.Automation.Peers Edit Sets the AutomationPeer that is the parent of this AutomationPeer. Parameters peer AutomationPeer The parent automation peer. Applies to. Sets the AutomationPeer that is the parent of this AutomationPeer. ..SetParent(View, Int32) Sets the parent to be a virtual descendant of the given root. This class is made immutable before being delivered to an AccessibilityService.Java documentation for android.view.accessibility.AccessibilityNodeInfo.setParent(android.view.View).Portions of this page are modifications based on work created and shared by the.....Runtime v6.1.0 Package:Microsoft.WSMan.Runtime v6.2.0 Ove SetParent(Debugger, IEnumerable, Nullable, PSHost, PathInfo) Sets the parent debugger, breakpoints and other debugging context informationSetParent(Debugger, IEnumerable, Nullable, PSHost, PathInfo, Dictionary) Sets the parent debugger, breakpoints, function source and other debugging.AutomationPeer.SetParent(AutomationPeer) Method Definition Namespace: Windows.UI.Xaml.Automation.Peers Edit Sets the AutomationPeer that is the parent of this AutomationPeer. Parameters peer AutomationPeer The parent automation peer. Remarks You can't re-parent an AutomationPeer for a UWP app... This functionality is only available for a Windows.ResourceBundle.SetParent(ResourceBundle) Method Definition Namespace: Java.Util Assembly:Mono.Android.dll Sets the parent bundle of this bundle. The parent bundle is searched by #getObject getObject when this bundle does not contain a particular resource.Java documentation for java.util.ResourceBundle.setParent(java.util.ResourceBundle).Portions."
985,AngleArc,"Microsoft Build · May 19 – 22, 2025AngleArc function (wingdi.h) The AngleArc function draws a line segment and an arc. The line segment is drawn from the current position to the beginning of the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is defined by the given start and sweep angles. Syntax Parameters [in] hdc.For example, an application can draw the outline of a pie chart by calling t... The AngleArc function draws an arc along a circle's perimeter and draws a line connecting the starting point of the arc to the circle's center. In addition to using the AngleArc function, an application can also combine line and irregular curve output by using the.The font can subsequently be used for text output by any application. (Unicode) AlphaBlend The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels. AngleArc The AngleArc function draws a line segment and an arc. AnimatePalette The AnimatePalette function replaces entries in the specified logical palette. Arc The.Drawing a Pie Chart You can use the line and curve functions to draw a pie chart. The primary function used to draw pie charts is the AngleArc function, which requires you to supply the coordinates of the center of the pie, the radius of the pie, a start angle, and a sweep angle. The following screen shot shows a dialog box that the user can use.(Unicode) AlphaBlend The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels. AngleArc The AngleArc function draws a line segment and an arc. AnimatePalette The AnimatePalette function replaces entries in the specified logical palette. BitBlt The BitBlt function performs a bit-block transfer of the color data.CDC Class Defines a class of device-context objects. CDC::AlphaBlend Displays bitmaps that have transparent or semitransparent pixels. CDC::AngleArc Draws a line segment and an arc, and moves the current position to the ending point of the arc. CDC::Arc Draws an elliptical arc. CDC::AngleArc Draws a line segment and an arc. AngleArc moves the.Line and Curve Functions The following functions are used with lines and curves. Function Description AngleArc Draws a line segment and an arc. Arc Draws an elliptical arc. ArcTo Draws an elliptical arc. GetArcDirection Retrieves the current arc direction for the specified device context. LineDDA Determines which pixels should be highlighted for a.Path Creation To create a path and select it into a DC, it is first necessary to define the points that describe it. The following is the list of drawing functions that can be used. AngleArc Arc ArcTo Chord CloseFigure Ellipse ExtTextOut LineTo MoveToEx Pie PolyBezier PolyBezierTo PolyDraw Polygon Polyline PolylineTo PolyPolygon PolyPolyline.BeginPath function (wingdi.h) The BeginPath function opens a path bracket in the specified device context. The following list shows which drawing functions can be used. AngleArc Arc ArcTo Chord CloseFigure Ellipse ExtTextOut LineTo MoveToEx Pie PolyBezier PolyBezierTo PolyDraw Polygon Polyline PolylineTo PolyPolygon PolyPolyline Rectangle.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also AngleArc Line and Curve Functions LineTo Lines and Curves Overview POINT."
986,CoGetStandardMarshal,"Microsoft Build · May 19 – 22, 2025CoGetStandardMarshal function (combaseapi.h) Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. Remarks The CoGetStandardMarshal function creates a default, or standard, marshaling object in either the client.CoGetPSClsid Returns the CLSID of the DLL that implements the proxy and stub for the specified interface. CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. CoGetStdMarshalEx Creates an.The Lightweight Client-Side Handler Lightweight client-side handlers allow you to create general client-side handlers of any size, to help you do any kind of standard task. If you use standard marshaling, the system creates it for you when you call CoGetStandardMarshal (or CoGetStdMarshalEx, for creating an aggregated marshaler for lightweight.MSHCTX enumeration (wtypesbase.h) Specifies the destination context, which is the process in which the unmarshaling is to be done. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wtypesbase.h (include WTypes.h) See also.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).Marshaling Your Data: Efficient Data Transfer Techniques Using COM and Windows 2000 Richard Grimes This article assumes youï¿½re familiar with COM, IDL, C++, and Visual Basic Level of Difficulty    1   2   3 Code for this article: Grimes0900.exe (108KB) SUMMARY The way you choose to transfer data is vitally important in a distribut... This means.CoGetPSClsid Returns the CLSID of the DLL that implements the proxy and stub for the specified interface. CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation. CoGetStdMarshalEx Creates an.CoGetObjectContext Returns the context for the current object. CoGetPSClsid Returns the CLSID of the DLL that implements the proxy and stub for the specified interface. CoGetStandardMarshal Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that.MSHLFLAGS_NOPI... MSHLFLAGS_RESERVED1Value: 8 MSHLFLAGS_RESERVED2Value: 16 MSHLFLAGS_RESERVED3Value: 32 MSHLFLAGS_RESERVED4Value: 64 Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wtypesbase.h (include WTypes.h) See also.MarshalingType Enum Definition Namespace: Windows.Foundation.Metadata Edit Specifies the marshaling type for the class. Inheritance Enum MarshalingTy... Agile 2 The class marshals and unmarshals to the same pointer value on all interfaces. Standard 3 The class does not implement IMarshal or forwards to CoGetStandardMarshal on all interfaces.."
987,DisableThreadLibraryCalls,"Microsoft Build · May 19 – 22, 2025DisableThreadLibraryCalls function (libloaderapi.h) Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified dynamic-link library (DLL). Remarks The DisableThreadLibraryCalls function lets a DLL disable the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notification calls. Requirements Requirement Value Minimum supported.Dynamic-Link Library Functions The following functions are used in dynamic linking. Function Description AddDllDirectory Adds a directory to the process DLL search path. DisableThreadLibraryCalls Disables thread attach and thread detach notifications for the specified DLL. DllMain An optional entry point into a DLL. FreeLibrary Decrements the.libloaderapi.h header This header is used by multiple technologies. For more information, see: Internationalization for Windows Applications Menus and Other Resources System Services libloaderapi.h contains the following programming interfaces: Functions AddDllDirectory Adds a directory to the process DLL search path. DisableThreadLibraryCalls.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Dynamic-Link Library Entry-Point Function A DLL can optionally specify an entry-point function. You can use the DisableThreadLibraryCalls function to disable notification when threads are created. A thread of a process that has loaded.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development K... APIs.FreeLibraryAndExitThread function (libloaderapi.h) Decrements the reference count of a loaded dynamic-link library (DLL) b... Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header libloaderapi.h (include.The exit code for a thread is either the value specified in the call to ExitThread, ExitProcess, TerminateThread, or TerminateProcess, or the value returned by the thread function. If a thread is terminated by ExitThread, the system calls the entry-point function of each attached DLL with a value indicating that the thread is detaching from the.Initialize a print monitor When the spooler calls LoadLibrary to load a print monitor DLL, the system immediately calls the DLL's DllEntryPoint function. It is generally a good idea for the entry point function to call DisableThreadLibraryCalls, so the DLL is not unnecessarily notified when threads are created and deleted. Each DLL exports an.If your DLL is linked with... Consider calling DisableThreadLibraryCalls when receiving DLL_PROCESS_ATTACH, unless your DLL is linked with static C run-time library (CRT). Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header Process.h See also.Vertdll APIs available in VBS enclaves Applies to: ✅ Windows 11 Build 26100.2314 or later ✅ Windows Server 2025 or later Enclaves are used to create trusted execution environments. ... DisableThreadLibraryCalls libloaderapi.h Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified DLL. GetModuleHandleExW libloaderapi.h."
988,TranslateMDISysAccel,"Microsoft Build · May 19 – 22, 2025The function translates WM_KEYUP and WM_KEYDOWN messages to WM_SYSCOMMAND messages and sends them to the appropriate MDI child windows. Syntax Parameters [in] hWndClient Type: HWND A handle to the MDI client window. [in] lpMsg Type: LPMSG A pointer to a message retrieved by using the GetMessage or PeekMessage function. ... apps only] Target.IOleInPlaceFrame::TranslateAccelerator method (oleidl.h) Translates accelerator keystrokes intended for the container's frame while an object is active in place. If the container is an MDI application and the TranslateAccelerator function fails, the container can call the TranslateMDISysAccel function, just as it does for its usual message.The multiple-document interface (MDI) is a specification that defines a user interface for applications that enable the user to work with more than one document at the same time. In This Section Topic Description Abo... TranslateMDISysAccel Processes accelerator keystrokes for window menu commands of the MDI child windows associated with the.MDI Functions CreateMDIWindow DefFrameProc DefMDIChildProc TranslateMDISysAccel. MDI Functions. /windows/win32/winmsg/multiple-document-interface-functions.In an MDI application, control passes from the application's window menu to the window menu of the act... Multiple Document Accelerators To receive and process accelerator keys for its child windows, an MDI application must include the TranslateMDISysAccel function in its message loop. The loop must call TranslateMDISysAccel before calling the.The TIMERPROC type defines a pointer to this callback function. TimerProc is a placeholder for the application-defined function name. TranslateMDISysAccel Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window. TranslateMessage Translates.The difference is that the MDI message loop calls the TranslateMDISysAccel function before checking for application-defined accelerator keys or before dispatching the message. The TranslateMDISysAccel function translates WM_KEYDOWN messages into WM_SYSCOMMAND messages and sends them to the active MDI child window. If the message is not an MDI.TN021: Command and Message Routing Note The following technical note has not been updated since it was first included in the online documentation. This note describes the command routing and dispatch architecture as well as advanced topics in general window message routing... The default PreTranslateMessage functions handle accelerator tables for.For more information, see Remarks later in this topic. AnimateWindow Enables you to produce special effects when showing or hiding windows. There are four types of animation:_roll, slide, collapse or expand, and alpha-blended fade. AnyPopup Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The."
989,GetOutlineTextMetricsA,"Microsoft Build · May 19 – 22, 2025GetOutlineTextMetricsA function (wingdi.h) The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. Syntax Parameters [in] hdc A handle to the device context. [in] cjCopy The size, in bytes, of the array that receives the text metrics. [out, optional] potm A pointer to an OUTLINETEXTMETRIC structure. ...ingdi.h header defines.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. (Unicode) GetLayout The.(Unicode) GetKerningPairsA The GetKerningPairs function retrieves the character-kerning pairs for the currently selected font for the specified device context. GetLayout The GetLayout function returns the layout of a device context (DC). GetOutlineTextMetricsA The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts. (ANSI)."
990,OpenWindowStationW,"Microsoft Build · May 19 – 22, 2025OpenWindowStationW function (winuser.h) Opens the specified window station. Syntax Parameters [in] lpszWinSta The name of the window station to be opened. Note The winuser.h header defines OpenWindowStation as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor.Window Stations and Desktops Overview of the Window Stations and Desktops technology. The Window Stations and Desktops technology is not associated with any headers. OpenWindowStationA Opens the specified window station. (ANSI) OpenWindowStationW Opens the specified window station. (Unicode) SetProcessWindowStation Assigns the specified window.... (Unicode) CharUpperW Converts a character string or a single character to uppercase. CloseDesktop Closes an open handle to a desktop object. CloseWindowStation Closes an open window station handle. (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (ANSI)."
991,FlushViewOfFile,"Microsoft Build · May 19 – 22, 2025FlushViewOfFile function (memoryapi.h) Writes to the disk a byte range within a mapped view of a file. The FlushViewOfFile function does not flush the file metadata, and it does not wait to return until the changes are flushed from the underlying hardware disk cache and physically written to disk. To flush all the dirty pages plus the metadata.Closing a File Mapping Object When a process has finished with the file mapping object, it should destroy all file views in its address space by using the UnmapViewOfFile function for each file view. To minimize the risk of data loss in the event of a power failure or a system crash, applications should explicitly flush modified pages using the.Read... The following example uses the pointer returned by MapViewOfFile to read from the file view: The following example uses the pointer returned by MapViewOfFile to write to the file view: The FlushViewOfFile function copies the specified number of bytes of the file view to the physical file, without waiting for the cached write operation to.Scope of Allocated Memory All memory a process allocates by using the memory allocation functions ( HeapAlloc, VirtualAlloc, GlobalAlloc, or LocalAlloc) is accessible only to the process. However, memory allocated by a DLL is allocated in the address space of the process that called the D... At this time, the specified file (if any) associated.FSCTL_QUERY_ALLOCATED_RANGES IOCTL (winioctl.h) Scans a file or alternate stream looking for ranges that may contain nonzero data. However, a call to FSCTL_QUERY_ALLOCATED_RANGES thereafter would not necessarily return a correct list of allocated regions. To ensure coherency between the view memory and the file handle, flush the data to the file.Even then, the modified pages are written ""lazily"" to disk; that is, modifications may be cached in memory and written to disk at a later time. To minimize the risk of data loss in the event of a power failure or a system crash, applications should explicitly flush modified pages using the FlushViewOfFile function. Although an application may.CreateFileMappingFromApp Creates or opens a named or unnamed file-mapping object for a specified file from a Windows Store app. CreateFileMappingNuma Creates or opens a named or unnamed file-mapping object for a specified file, and specifies the NUMA node for the physical memory. FlushViewOfFile Writes to the disk a byte range within a mapped view.Memory-Mapped Files The client must call the FlushViewOfFile function, close the file-mapping object, and close the file handle before committing the associated transaction on a memory-mapped file. Applications must call FlushViewOfFile, unmap all views, and close all handles to the file-mapping object... If the view is used to make transacted.So I was starting to use my own - lets call it MMF GC - the continously watches of the memory and advises the memory manager to unmap by calling FlushViewOfFile. ...ise to the memory no real flusing occurs until I call FlushFileBuffersSo I was starting to use my own - lets call it MMF GC - the continously watches of the memory and advises the.The MapViewOfFile and MapViewOfFileEx functions use the file mapping object handle returned by CreateFileMapping to create a view of the file or a portion of the file in the process's virtual address space. Applications can override this behavior by calling the FlushViewOfFile function to force the system to perform disk transactions immediately.."
992,SetRectRgn,"Microsoft Build · May 19 – 22, 2025SetRectRgn function (wingdi.h) The SetRectRgn function converts a region into a rectangular region with the specified coordinates. Syntax Parameters [in] hrgn Handle to the region. [in] left Specifies the x-coordinate of the upper-left corner of the rectangular region in logical units. [in] top Specifies the y-coordinate of the upper-left corner.CRgn::PtInRegion Determines whether a specified point is in the region. CRgn::RectInRegion Determines whether any part of a specified rectangle is within the boundaries of the region. CRgn::SetRectRgn Sets the CRgn object to the specified rectangular region. Public Operators Name Description CRgn::operator HRGN Returns the Windows handle contained.Region Creation and Selection An application creates a region by calling a function associated with a specific shape. Shape Function Rectangular region CreateRectRgn, CreateRectRgnIndirect, SetRectRgn Rectangular region with rounded corners CreateRoundRectRgn Elliptical region CreateEllipticRgn, CreateEllipticRgnIndirect Polygonal region.To calculate the intersections between the dirty rectangles of the previous frame and the dirty rectangles of the current... In this code snippet, we call the GDI SetRectRgn function to convert each dirty rectangle into a rectangular region and then we call the GDI CombineRgn function to combine all the dirty rectangular regions into a group. You.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. RectInRegion Determines whether any part of the specified rectangle is within the bo... SetPolyFillMode Sets the polygon fill mode for functions that fill polygons. SetRectRgn.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. AddFontMem. CloseMetaFile."
993,SetMapperFlags,"Microsoft Build · May 19 – 22, 2025SetMapperFlags function (wingdi.h) The SetMapperFlags function alters the algorithm the font mapper uses when it maps logical fonts to physical fonts. Syntax Parameters [in] hdc A handle to the device context that contains the font-mapper flag. [in] flags Specifies whether the font mapper should attempt to match a font's aspect ratio to the.EMRSETMAPPERFLAGS structure (wingdi.h) The EMRSETMAPPERFLAGS structure contains members for the SetMapperFlags enhanced metafile record. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See also.2.3.5.18 META_SETMAPPERFLAGS Record The META_SETMAPPERFLAGS Record defines the algorithm that the font mapper uses when it maps logical fonts to physical fonts. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction MapperValues. The lower byte MUST match the lower byte of ... The META_SETMAPPERFLAGS Record.2.3.11.20 EMR_SETMAPPERFLAGS Record The EMR_SETMAPPERFLAGS record specifies parameters for the process of matching logical fonts to physical fonts, which is performed by the font mapper. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Flags Type (4 bytes): An unsigned integer that identifies this record type as.When the font mapper algorithm completes its search and determines the closest possible match, the SelectObject function returns and the application can begin drawing text with the new font. The SetMapperFlags function specifies whether the font mapper algorithm searches only for physical fonts with aspect ratios that match the physical device..An application can specify that the system should only retrieve fonts matching the specified aspect ratio by calling the SetMapperFlags function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. RemoveFontResource Removes the f... RemoveFontResourceEx Removes a private or non-enumerable font from the system font table. SetMapperFlags Alters the algorithm used....s (section 2.3). typedef  enum { EMR_HEADER = 0x00000001, EMR_POLYBEZIER = 0x00000002, EMR_POLYGON = 0x00000003, EMR_POLYLINE = 0x00000004, EMR_POLYBEZIERTO = 0x00000005, EMR_POLYLINETO = 0x00000006, EMR_POLYPOLYLINE = 0x00000007, EMR_POLYPOLYGON = 0x00000008, EMR_SETWINDOWEXTEX = 0x00000009, EMR_SETWINDOWORGEX = 0x0000000A,....atePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt Pie Polygon Polyline PolyPolygon RealizePalette Rectangle ResizePalette RestoreDC RoundRect....rd META_SETBKCOLOR packet META_SETBKCOLOR Record META_SETBKMODE packet META_SETBKMODE Record META_SETDIBTODEV packet META_SETDIBTODEV Record META_SETLAYOUT packet META_SETLAYOUT Record META_SETMAPMODE META_SETMAPMODE Record META_SETMAPPERFLAGS packet META_SETMAPPERFLAGS Record META_SETPALENTRIES packet META_SETPALENTRIES Record META_SETPIXEL."
994,lstrcpynA,"Microsoft Build · May 19 – 22, 2025lstrcpynA function (winbase.h) Copies a specified number of characters from a source string into a buffer. Warning  Do not use. Syntax Parameters [out] lpString1 Type: LPTSTR The destination buffer, which receives the copied characters. The buffer must be lar... Note The winbase.h header defines lstrcpyn as an alias that automatically selects the.(Unicode) lstrcmpW Compares two character strings. The comparison is case-sensitive. (Unicode) lstrcpyA Copies a string to a buffer. (ANSI) lstrcpynA Copies a specified number of characters from a source string into a buffer.Warning  Do not use. (ANSI) lstrcpynW Copies a specified number of characters from a source string into a buffer.Warning  Do.(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA....ringCchCopy, StringCchCopyEx No bounds ch StrCpyA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx No bounds checking StrCpyN StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNA StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx Does not NULL-terminate StrCpyNW StringCbCopy,."
995,EnumDisplaySettingsA,"Microsoft Build · May 19 – 22, 2025EnumDisplaySettingsA function (winuser.h) The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function. Note  Apps that you design to target Windows 8 and later can no longer query or set.CFP_FREEPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to free memory. EnumDisplayDevicesA The EnumDisplayDevices function lets you obtain information about the display devices in the current session. EnumDisplaySettingsA The EnumDisplaySettings function retrieves information about one of the graphics modes.EnumDisplayDevicesA The EnumDisplayDevices function lets you obtain information about the display devices in the current session. (ANSI) EnumDisplayDevicesW The EnumDisplayDevices functi... Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors. EnumDisplaySettingsA The EnumDisplaySettings function retrieves information about."
996,CopyMetaFileA,"Microsoft Build · May 19 – 22, 2025CopyMetaFileA function (wingdi.h) The CopyMetaFile function copies the content of a Windows-format metafile to the specified file. Note  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. Note The wingdi.h header defines.CombineTransform The Co... CopyEnhMetaFileA The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (ANSI) CopyEnhMetaFileW The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a.CombineTransform The Co... CopyEnhMetaFileA The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (ANSI) CopyEnhMetaFileW The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file. (Unicode) CopyMetaFileA The CopyMetaFile function copies the content of a."
997,lstrcatA,"Microsoft Build · May 19 – 22, 2025lstrcatA function (winbase.h) Appends one string to another. Syntax Parameters [in, out] lpString1 Type: LPTSTR The first null-terminated string. Remarks Note The winbase.h header defines lstrcat as an alias that automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant..(ANSI) Lo... (Unicode) LookupPrivilegeValueA Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (ANSI) LookupPrivilegeValueW Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name. (Unicode) lstrcatA.LookupIconIdFromDirectory Searches through icon or cursor data for the icon or cursor that best fits the... (LookupIconIdFromDirectory) LookupIconIdFromDirectoryEx Searches through icon or cursor data for the icon or cursor that best fits the current display device. (LookupIconIdFromDirectoryEx) lstrcatA Appends one string to another.Warning  Do....chCopy, StringCchCopyEx Limited error checking strcpyW StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx No bounds checking StrCpyW StringCbCopy, StringCbCopyEx, StringCchCopy, StringCchCopyEx No bounds ch StrNCat StringCbCatN, StringCbCatNEx, StringCchCatN, StringCchCatNEx Limited error detection StrNCatA StringCbCatN,."
998,LoadCursorA,"Microsoft Build · May 19 – 22, 2025LoadCursorA function (winuser.h) Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. Note This function has been superseded by the LoadImage function (with LR_DEFAULTSIZE and LR_SHARED flags set). Syntax Parameters [in, optional] hInstance Type: HINSTANCE A handle to the module o... Loads.LoadAcceleratorsA Loads the specified accelerator table. (ANSI) LoadAcceleratorsW Loads the specified accelerator table. (Unicode) LoadCursorA Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. (ANSI) LoadCursorFromFileA Creates a cursor based on data contained in a file. (ANSI).ChildWindowFromPointEx Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. ClientToScreen The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates. ClipCursor Confines the cursor to a rectangular area on the screen. CloseClipboard."
999,BringWindowToTop,"Microsoft Build · May 19 – 22, 2025BringWindowToTop function (winuser.h) Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated. Syntax Parameters [in] hWnd Type: HWND A handle to the window to bring to the top of the Z.CWnd::AnimateWindow Animates the asso... CWnd::ArrangeIconicWindows Arranges all the minimized (iconic) child windows. CWnd::BindProperty Binds a cursor-bound property on a data-bound control to a data-source control and registers that relationship with the MFC binding manager. CWnd::BringWindowToTop Brings CWnd to the top of a stack of.BeginPaint The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting. BlockInput Blocks keyboard and mouse input events from reaching applications. BringWindowToTop Brings the specified window to the top of the Z order. If the window is a top-level window, it is.For programming guidance for this technology, see: Windows and Messages Functions AdjustWindowRect Calculates the required size of the window rectangle, based on the desired client-rectangle size. BeginDeferWindowPos Allocates memor... BringWindowToTop Brings the specified window to the top of the Z order. (BroadcastSystemMessageW).CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Des... CWindow::BeginPaint Prepares the window for painting. CWindow::BringWindowToTop Brings the window to the top of the Z order. CWindow::CenterWindow Centers the window against a given window. CWindow::ScreenToClient Converts screen.By specifying the WS_OVERLAPPED or WS_OVERLAPPEDWINDOW style in the CreateWindowEx function, an application creates an overlapped window. An application can use the GetWindow function with the GW_OWNER flag to retrieve a handle to a window's owner. You can use the BringWindowToTop function to bring a window to the top of the z-order for windows of.BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BringWindowToTop Brings the specified window to the top of the Z order. CalculatePopupWindowPosition Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional.Window functions AdjustWindowRect AdjustWindowRectEx AllowSetForegroundWindow AnimateWindow AnyPopup ArrangeIconicWindows BeginDeferWindowPos BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx....19: unresolved external symbol __imp_DestroyWindow referenced in function _glfwPlatformTerminate 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_DestroyWindow 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_ShowWindow referenced in function _glfwPlatformInit."
1000,CheckColorsInGamut,"Microsoft Build · May 19 – 22, 2025CheckColorsInGamut function (wingdi.h) The CheckColorsInGamut function determines whether a specified set of RGB triples lies in the output gamut of a specified device. The RGB triples are interpreted in the input logical color space. Syntax Parameters hdc Handle to the device context whose output gamut to be checked. lpRGBTriple Pointer to an.(Unicode) CheckBitmapBits Checks whether the pixels in a specified bitmap lie within the output gam... CheckColors Determines whether the colors in an array lie within the output gamut of a specified transform. CheckColorsInGamut The CheckColorsInGamut function determines whether a specified set of RGB triples lies in the output gamut of a.CancelDC The CancelDC function cancels any pending operation on the specified device context (DC). CheckColorsInGamut The CheckColorsInGamut function determines whether a specified set of RGB triples lies in the output gamut of a specified device. The RGB triples are interpreted in the input logical color space. ChoosePixelFormat The.Basic Functions for Use Within a Device Context The following WCS functions deliver basic color mapping capabilities within device contexts. They are useful to all applications that need to implement color management with l... Function Description CheckColorsInGamut Checks if given colors are in a device's gamut. They are useful to all.Alphabetical List of All WCS Functions The following is a complete alphabetical list of the WCS 1.0 API functions provided by Windows 98 and later and Windows 2000 and later. Function or Structure Description PCMSCALLBACKW *PCMSCALLBACKW* (or ApplyCallbackFunction) is a callback f... CheckColors."
1001,DestroyMenu,"Microsoft Build · May 19 – 22, 2025DestroyMenu function (winuser.h) Destroys the specified menu and frees any memory that the menu occupies. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu to be destroyed. Remarks Before closing, an application must use the DestroyMenu function to destroy a menu not assigned to a window. DestroyMenu is recursive, that is, it will.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. This section provides information on the following topics: Menu Bars and Menus Shortcut Menus The Windo... Menu Destruction If a menu is assigned to a window and that window is destroyed, the system automatically destroys the menu and.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. If the menu item has an associated pop-up menu, destroys the handle to the pop-up menu and frees the memory used by it. CMenu::DeleteTempMap Deletes any temporary C... CMenu::DestroyMenu Destroys the menu.(ANSI) DefWindowProcW Calls the default window procedure to provide default processing for any window messages that an applic... (Unicode) DeleteMenu Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu..Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Menus (Menus and Other Resources) This section describes menus and explains how to use them. DeleteMe... If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the.An application should call the DestroyMenu function to accomplish this task. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar,.Remarks For resources loaded with other functions, FreeResource has been replaced by the following functions: Resource type FreeResource replacement Accelerator DestroyAcceleratorTable Bitmap DeleteObject Cursor DestroyCursor Icon DestroyIcon Menu DestroyMenu The reference count for a resource is incremented (increased by one) each time an.LoadMenuA function (winuser.h) Loads the specified menu resource from the executable (.exe) file associated with an application instance. Remarks The DestroyMenu function is used, before an application closes, to destroy the menu and free memory that the loaded menu occupied. Examples For an example, see Displaying a Shortcut Menu Note The.LoadMenuW function (winuser.h) Loads the specified menu resource from the executable (.exe) file associated with an application instance. Remarks The DestroyMenu function is used, before an application closes, to destroy the menu and free memory that the loaded menu occupied. Examples For an example, see Displaying a Shortcut Menu Note The."
1002,CreateMetaFileW,"Microsoft Build · May 19 – 22, 2025CreateMetaFileW function (wingdi.h) The CreateMetaFile function creates a device context for a Windows-format metafile. Note  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. Where text arguments must use charact....(ANSI) CreateICW The CreateIC function ... (Unicode) CreateMetaFileA The CreateMetaFile function creates a device context for a Windows-format metafile. (ANSI) CreateMetaFileW The CreateMetaFile function creates a device context for a Windows-format metafile. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font.(ANSI) CreateEnhMetaFileW The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. (Unicode) CreateFontA The CreateFont function cr... (Unicode) CreateMetaFileA The CreateMetaFile function creates a device context for a Windows-format metafile. (ANSI) CreateMetaFileW The CreateMetaFile function creates a device.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitma... Figure 7 Functions that Free GDI Objects Object Type API Functions to Free Handles Display context DeleteDC Metafile DeleteMetaFile CloseMetaFile Enhanced Metafile DeleteEnhMetaFile."
1003,PolyBezierTo,"Microsoft Build · May 19 – 22, 2025PolyBezierTo function (wingdi.h) The PolyBezierTo function draws one or more Bézier curves. Syntax Parameters [in] hdc A handle to a device context. [in] apt A pointer to an array of POINT structures that contains the endpoints and control points, in logical units. [in] cpt The number of points in the lppt array... Remarks This function draws.StreamGeometryContext.PolyBezierTo Method Definition Namespace: System.Windows.Media Assembly:PresentationCore.dll Draws one or more connected Bezier curves. Parameters points IList The list of points that specify control points and destination points for one or more Bezier curves. Examples The following example shows how to draw multiple.EMRPOLYLINE16 structure (wingdi.h) The EMRPOLYLINE16, EMRPOLYBEZIER16, EMRPOLYGON16, EMRPOLYBEZIERTO16, and EMRPOLYLINETO16 structures contain members for the Polyline, PolyBezier, Polygon, PolyBezierTo, and PolylineTo enhanced metafile records... The EMRPOLYLINE16, EMRPOLYBEZIER16, EMRPOLYGON16, EMRPOLYBEZIERTO16, and EMRPOLYLINETO16 structures.EMRPOLYLINE structure (wingdi.h) The EMRPOLYLINE, EMRPOLYBEZIER, EMRPOLYGON, EMRPOLYBEZIERTO, and EMRPOLYLINETO structures contain members for the Polyline, PolyBezier, Polygon, PolyBezierTo, and PolylineTo enhanced metafile records. Syntax Members emr ... The EMRPOLYLINE, EMRPOLYBEZIER, EMRPOLYGON, EMRPOLYBEZIERTO, and EMRPOLYLINETO structures.PolyDraw function (wingdi.h) The PolyDraw function draws a set of line segments and Bézier curves. Remarks The PolyDraw function can be used in place of consecutive calls to MoveToEx, LineTo, and PolyBezierTo functions to draw disjoint figures. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only].PlayMetaFileRecord The PlayMetaFileRecord function plays a Windows-format metaf... PlgBlt The PlgBlt function performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the destination device context. PolyBezier The PolyBezier function draws one or more Bézier.2.3.5 Drawing Record Types The Drawing record types perform graphics drawing and painting functions. EMR_POLYBEZIERTO 2.3.5.18 Draws one or more Bezier curves based on the current position. EMR_POLYBEZIERTO16 2.3.5.19 Draws one or more Bezier curves based on the current position. Name Value EMR_POLYBEZIER 0x00000002 EMR_POLYGON 0x00000003.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also AngleArc Line and Curve Functions LineTo Lines and Curves Overview POINT.CDC::PlgBlt Performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the given device context. CDC::PolyBezier Draws one or more Bzier splines. The current position isn't used or updated. CDC::PolyBezierTo Draws one or more Bzier splines, and moves the.2.3.5.18 EMR_POLYBEZIERTO Record The EMR_POLYBEZIERTO record specifies one or more Bezier curves based upon the current drawing position. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Bounds ... .... Type (4 bytes): An unsigned integer that identifies this record type as EMR_POLYBEZIERTO. The EMR_POLYBEZIERTO record."
1004,CoCreateFreeThreadedMarshaler,"Microsoft Build · May 19 – 22, 2025CoCreateFreeThreadedMarshaler function (combaseapi.h) Creates an aggregatable object capable of context-dependent marshaling. Remarks The CoCreateFreeThreadedMarshaler function enables an object to efficiently marshal interface pointers between threads in the same process. ...rs that must be accessed directly by all threads in a process, even.CoCancelCall Requests cancellation of an outbound DCOM method call pending on a specified thread. CoCopyProxy Makes a private copy of the specified proxy. CoCreateFreeThreadedMarshaler Creates an aggregatable object capable of context-dependent marshaling. CoCreateGuid Creates a GUID, a unique 128-bit integer used for CLSIDs and interface.C++ Event Sinks Sample This program demonstrates how you can build an application that captures InkCollector events using only C++. Of particular importance is using Windows APIs, which may cause a switch to another thread as the event handler is not guaranteed to be running on the same thread as the window connected with the ink collector. The.Objects instantiated from the CServiceConfig class aggregate the free-threaded marshaler so that they can be stored by system runtimes and reused in different apartments. Requirements Requirement Value Minimum supported client Windows XP with SP1 [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header ComSvcs.h.CoCancelCall Requests cancellation of an outbound DCOM method call pending on a specified thread. CoCopyProxy Makes a private copy of the specified proxy. CoCreateFreeThreadedMarshaler Creates an aggregatable object capable of context-dependent marshaling. CoCreateGuid Creates a GUID, a unique 128-bit integer used for CLSIDs and interface.Syntax Parameters [in] dwThreadI... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header ctfutb.h DLL Msctf.dll Redistributable TSF 1.0 on Windows 2000 Professional See also CoCreateFreeThreadedMarshaler.To speed performance for free-threaded access to in-process DLL objects, COM provides the CoCreateFreeThreadedMarshaler function. This function creates a free-threaded marshaling object that can be aggregated with an in-process server object. When a client apartment in the same process needs access to an object in another apartment, aggregating.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299..Implementing Pluggable Terminals The general requirements for pluggable terminal implementation are: A pluggable terminal's underlying streaming code should match the capabilities of the desired MSPs. Audio terminals must support 8 kH... The terminal should enable free threaded marshalling by implementing IMarshal. The terminal can do this by.This concurrency model can be either apartment-threaded or multithreaded. CoCopyProxy Makes a private copy of the specified proxy. CoCreateFreeThreadedMarshaler Creates an aggregatable object capable of context-dependent marshaling. CoCreateGuid Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers. CoFreeLibrary Frees."
1005,ExpandEnvironmentStringsA,"Microsoft Build · May 19 – 22, 2025ExpandEnvironmentStringsA function (processenv.h) Expands environment-variable strings and replaces them with the values defined for the current user. To specify the environment block for a particular user or the system, use the ExpandEnvironmentStringsForUser function. Requirements Requirement Value Minimum supported client Windows 2000.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the values defined for the current user. (ANSI).... binary to our customers via Omaha, because of some reason (unknown to us as of ExpandEnvironmentStringsA (windows api in our binary) wasn't able to expand the path containing the %PROGRAMDATA% environment variable,Context: Recently, when we released the binary to our customers via Omaha, because of some reason (unknown to us as of now),.This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library."
1006,CreateWaitableTimerA,"Microsoft Build · May 19 – 22, 2025CreateWaitableTimerW function (synchapi.h) Creates or opens a waitable timer object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll.DeleteFiber Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240Moved into api-ms. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API Requirements CreateDirectoryA Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into."
1007,GetDIBColorTable,"Microsoft Build · May 19 – 22, 2025GetDIBColorTable function (wingdi.h) The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context. A DIB section bitmap must be selected into this device context. [in] iStart A zero-based color table index.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-b... ExtFloodFill Fills an area of the display surface with the current brush. GetBitmapDimensionEx Gets the dimensions of a bitmap. GetDIBColorTable.GetDeviceGammaRamp The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support... GetDIBColorTable The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device.GetDeviceCaps The GetDeviceCaps function retrieves device-specific information for the specified device. GetDIBColorTable The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context. GetDIBits The.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also BITMAPINFO Bitmap Functions Bitmaps Overview CreateFileMapping DIBSECTION.DIBSECTION structure (wingdi.h) The DIBSECTION structure contains information about a DIB created by calling the CreateDIBSection function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header wingdi.h (include Windows.h) See.SetDIBColorTable function (wingdi.h) The SetDIBColorTable function sets RGB (red, green, blue) color values in a range of entries in the color table of the DIB that is currently selected into a specified device context. ... only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include."
1008,PostThreadMessageW,"Microsoft Build · May 19 – 22, 2025PostThreadMessageW function (winuser.h) Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message. Syntax Parameters [in] idThread Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message.(ANSI) PostMessageW Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message. (Unicode) PostQuitMessage Indicates... PostThreadMessageA Posts a message to the message queue of the specified thread. (ANSI) PostThreadMessageW Posts a.PostThreadMessageA function (winuser.h) Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message. Syntax Parameters [in] idThread Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message.(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. AttachThreadInput Attaches or detaches the input processing mechanism of one thread to that of another thread. BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients.."
1009,GetRunningObjectTable,"Microsoft Build · May 19 – 22, 2025GetRunningObjectTable function (objbase.h) Returns a pointer to the IRunningObjectTable interface on the local running object table (ROT). Syntax Parameters [... Moniker providers, which hand out monikers that identify objects so they are accessible to others, should call GetRunningObjectTable. Use the interface pointer returned by this function.IBindCtx::GetRunningObjectTable method (objidl.h) Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running. Remarks The running object table is a globally accessible table on each computer. It keeps track of all the objects that are currently running on the computer. Notes to Callers.UCOMIBindCtx.GetRunningObjectTable(UCOMIRunningObjectTable) Method Definition Namespace: System.Runtime.InteropServices Assembly:mscorlib.dll Return access to the Running Object Table (ROT) relevant to this binding process. Remarks For more information, please see the existing documentation for IBindCtx::GetRunningObjectTable in the MSDN library..IBindCtx.GetRunningObjectTable(IRunningObjectTable) Method Definition Namespace: System.Runtime.InteropServices.ComTypes Assemblies:mscorlib.dll, System.Runtime.InteropServices.dll Assemblies:netstandard.dll, System.Runtime.InteropServices.dll Assembly:System.Runtime.InteropServices.dll Assembly:mscorlib.dll Assembly:netstandard.dll Returns access.IRunningObjectTable Interface Definition Namespace: System.Runtime.InteropServices.ComTypes Assemblies:mscorlib.dll, System.Runtime.InteropServices.dll Assemblies:netstandard.dll, System.Runtime.InteropServices.dll Assembly:System.Runtime.InteropServices.dll Assembly:mscorlib.dll Assembly:netstandard.dll Provides the managed definition of....IBindCtx.GetRunningObjectTable(IRunningObjectTable) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Parameters pprot IRunningObjectTable Applies to. Learn more about the.DllRegisterServer... DllUnregisterServer Instructs an in-process server to remove only those entries created through DllRegisterServer. GetClassFile Returns the CLSID associated with the specified filename. GetRunningObjectTable Returns a pointer to the IRunningObjectTable interface on the local running object table (ROT). IIDFromString Converts a.UCOMIBindCtx Interface Definition Namespace: System.Runtime.InteropServices Assembly:mscorlib.dll Caution Use System.Runtime.InteropServices.ComTypes.IBindCtx instead. http://go.microsoft.com/fwlink/?linkid=14202 Use BIND_OPTS instead. Attributes GuidAttribute InterfaceTypeAttribute ObsoleteAttribute Remarks For more information, please see the.IFileIsInUse interface (shobjidl_core.h) Exposes methods that can be called to get information on or close a file that is in use by another application. The Running Object Table When an application opens a file, that application registers the file by inserting the instantiated IFileIsInUse object into the running object table (ROT). Perform these.IBindCtx interface (objidl.h) Provides access to a bind context, which is an object that stores information about a particular moniker binding operation. Moniker implementations that need to access the ROT should use the IBindCtx::GetRunningObjectTable method rather than using the GetRunningObjectTable function. Requirements Requirement Value."
1010,CombineRgn,"Microsoft Build · May 19 – 22, 2025CombineRgn function (wingdi.h) The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode. Syntax Parameters [in] hrgnDst A handle to a new region with dimensions defined by combining two other regions. (This region must exist before CombineRgn is called.) [in].Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows... CombineRgn The CombineRgn function combines two regions and stores the result in a third region. The two.Region Functions (Windows GDI) The following functions are used with regions. Function Description CombineRgn Combines two regions and stores the result in a third region. CreateEllipticRgn Creates an elliptical region. CreateEllipticRgnIndirect Creates an elliptical region. CreatePolygonRgn Creates a polygonal region. CreatePolyPolygonRgn Creates.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color Sy... CombineRgn The CombineRgn function combines two regions and stores the result in a third region. The two.Combining Regions An application combines two regions by calling the CombineRgn function. Using this function, an application can combine the intersecting parts of two regions, all but the intersecting parts of two regions, the two original regions in their entirety, and so on. The following illustration shows the five possible combinations of a.CRgn Class Encapsulates a Windows graphics device interface (GDI) region. Public Methods Name Description CRgn::CombineRgn Sets a CRgn object so that it is equivalent to the union of two specified CRgn objects. CRgn::CopyRgn Sets a CRgn object so that i... Remarks The regions are combined as specified by nCombineMode. The two specified regions are.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). After obtaining a handle identifying the clipping region, an application can perform any operation that is common with regions, such as: Combining a copy of the current clipping region with a second region by calling the.To calculate the intersections between the dirty rectangles of the previous frame and the dirty rectangles of the current... In this code snippet, we call the GDI SetRectRgn function to convert each dirty rectangle into a rectangular region and then we call the GDI CombineRgn function to combine all the dirty rectangular regions into a group. You.SelectObject function (wingdi.h) The SelectObjec... Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Font CreateFont, CreateFontIndirect Pen CreatePen, CreatePenIndirect Region CombineRgn, CreateEllipticRgn, CreateEllipticRgnIndirect, CreatePolygonRgn, CreateRectRgn,....h, CreatePatternBrush, CreateSolidBrush DeleteObject DC CreateDC DeleteDC, ReleaseDC Enhanced metafile CreateEnhMetaFile DeleteEnhMetaFile Enhanced-metafile DC CreateEnhMetaFile CloseEnhMetaFile Font CreateFont, CreateFontIndirect DeleteObject Memory DC CreateCompatibleDC DeleteDC Metafile CreateMetaFile DeleteMetaFile Metafile DC."
1011,WSASocketA,"Microsoft Build · May 19 – 22, 2025WSASocketA function (winsock2.h) The WSASocket function creates a socket that is bound to a specific transport-service provider. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the possible values for the address family are defined in the Ws2def.h header file. Note that the Ws2def.h header.SIO_ADDRESS_LIST_QUERY Control Code Description The SIO_ADDRESS_LIST_QUERY control code obtains a list of local transport addresses of the socket's protocol family to which the application can bind. See also GetAdaptersAddresses IP_ADAPTER_ADDRESSES IP_ADAPTER_UNICAST_ADDRESS IP_DAD_STATE MIB_IF_ROW2 MIB_UNICASTIPADDRESS_ROW SCOPE_... Control code.SIO_RCVALL Control Code Description The SIO_RCVALL control code enables a socket to receive all IPv4 or IPv6 packets passing through a network interface. To perform this operation, call the WSAIoctl or WSPIoctl function with the following parameters... See also socket TCP/IP Raw Sockets WSAGetLastError WSAGetOverlappedResult WSAIoctl WSAOVERLAPPED.SIO_KEEPALIVE_VALS Control Code Description The SIO_KEEPALIVE_VALS control code enables or disables the per-connection setting of the TCP keep-alive option which specifies the TCP keep-alive timeout and interval. See also KeepAliveTime KeepAliveInterval PPTPTcpMaxDataRetransmissions socket SO_KEEPALIVE WSAGetLastError WSAGetOverlappedResult.SIO_SET_WFP_CONNECTION_REDIRECT_RECORDS Control Code Description The SIO_SET_WFP_CONNECTION_REDIRECT_RECORDS control code sets the redirect record to the new TCP socket used for connecting to the final destination for use by a Windows Filtering Platform (WFP) redirect service. See also IPPROTO_IP Socket Options SIO_QUERY_WFP_CONNECTION_REDI....(Unicode) WSAEnumNetworkEvents Th... WSAEnumProtocolsA The WSAEnumProtocols function retrieves information about available transport protocols. (ANSI) WSAEnumProtocolsW The WSAEnumProtocols function retrieves information about available transport protocols. (Unicode) WSAEventSelect The WSAEventSelect function specifi. (Unicode) WSAIoctl The.SIO_TCP_INITIAL_RTO control code Description The SIO_TCP_INITIAL_RTO control code configures initial retransmission timeout (RTO) parameters on a socket. To perform this operation, call the WSAIoctl or WSPIoctl function with the following p... See also socket TCP_INITIAL_RTO_PARAMETERS WSAGetLastError WSAGetOverlappedResult WSAIoctl WSAOVERLAPPED.SIO_QUERY_WFP_CONNECTION_REDIRECT_CONTEXT Control Code Description The SIO_QUERY_WFP_CONNECTION_REDIRECT_CONTEXT control code retrieves the redirect context for a redirect record used by a Windows Filtering Platform (WFP) redirect service. See also IPPROTO_IP Socket Options SIO_QUERY_WFP_CONNECTION_REDIRECT_RECORDS ... Control code retrieves the.SIO_ACQUIRE_PORT_RESERVATION control code Description The SIO_ACQUIRE_PORT_RESERVATION control code acquires a runtime reservation for a block of TCP or UDP ports. See also accept bind CreatePersistentTcpPortReservation CreatePersistentUdpPortReservation DeletePersistentTcpPortReservation DeletePersistentUdpPortReservation INET_PORT_RANGE.SIO_RELEASE_PORT_RESERVATION Control Code Description The SIO_RELEASE_PORT_RESERVATION control code releases a runtime reservation for a block of TCP or UDP ports. See also CreatePersistentTcpPortReservation CreatePersistentUdpPortReservation DeletePersistentTcpPortReservation DeletePersistentUdpPortReservation INET_PORT_RESERVATION_TOKEN."
1012,EnableWindow,"Microsoft Build · May 19 – 22, 2025EnableWindow function (winuser.h) Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. Syntax Parameters [in] hWnd Type: HWND A handle to the window to be enabled or disabled. [in] bEnable Type: BOOL Indicates whether to.The Keyboard and Mouse Input technology is not associated with any headers. For programming guidance for this technology, see: Keyboard and Mouse Input Enumerations TOOLTIP_DISMISS_FLAGS The TOOLTIP_DISMISS_FLAGS enumeration defines constants that indicate whet... EnableWindow Enables or disables mouse and keyboard input to the specified window or.COleControlSite::EnableDSC Enables data sourcing for a control site. COleControlSite::EnableWindow Enables the control site. COleControlSite::FreezeEvents Specifies if the control site is accepting events. COleControlSite::GetDe... Override this function to provide customized behavior. COleControlSite::EnableWindow Enables or disables mouse and.WM_ENABLE message Sent when an application changes the enabled state of a window. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the w... Parameters wParam Indicates whether the window has been enabled or disabled. This parameter is TRUE if the window has been enabled or FALSE.CWnd::EnableScrollBarCtrl Enables or disables a sibling scroll-bar control. CWnd::EnableToolTips Enables the tooltip control. CWnd::EnableTrackingToolTips Enables the tooltip control in tracking mode. CWnd::EnableWindow Enables or disables mouse and keyboard input. CWnd::FindWindow Returns the handle of the window, which is identified by its.Keyboard Input This section describes how the system generates keyboard input and how an application receives and processes that input. In This Section Name Description About Keyboard Input Discusses keyboard input. BlockInput Blocks keyboard and mouse input ev... EnableWindow Enables or disables mouse and keyboard input to the specified window or.The width and hei... EnableMouseInPointer Enables the mouse to act as a pointing device. EnableWindow Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input. This section.The only exception is if the child window has been disabled by the EnableWindow function. This permits the parent window to examine the input messages and enable the child window, if necessary. An application can enable a disabled window at any time; enabling a window restores normal input. An application enables or disables an existing window by.CWindow Class This class provides methods for manipulating a window. Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. CWindow::EnableScrollBar Enables or disables the scroll bar arrows. CWindow::EnableWindow Enables or disables input. CWindow::EndPaint Marks the end of painting. Example CWindow::IsWindowEnabled.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Window Styles This topic provides a list of the various styles that can be applied to a window (after the window has been created, these styles cannot be modified, except as noted). To change this after a window has been created, use the."
1013,GetEnvironmentVariableW,"Microsoft Build · May 19 – 22, 2025GetEnvironmentVariableW function (processenv.h) Retrieves the contents of the specified variable from the environment block of the calling process. Syntax Parameters [in, optional] lpName The name of the environment variable. [out, optional] lpBuffer A pointer to a buffer that receives the contents of the specified environment variable as a.processenv.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services processenv.h contains the following programming interfaces: Functions ExpandEnvironmentStringsA Expands environment-variable strings and replaces them with the ... (GetEnvironmentVariableA) GetEnvironmentVariableW.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). CoGetApartmentType Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
1014,CreateBitmap,"Microsoft Build · May 19 – 22, 2025CreateBitmap function (wingdi.h) The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). Syntax Parameters [in] nWidth The bitmap width, in pixels. [in] nHeight The bitmap height, in pixels. [in] nPlanes The number of color planes used by the device. [in] nBitCount The number....hat will draw with the specified CreateBitmap(SKBitmap, SKShaderTileMode, SKShaderTileMode) Creates a new shader that will draw with the specified bitmap. CreateBitmap(SKBitmap, SKShaderTileMode, SKShaderTileMode, SKMatrix) Creates a new shader that will draw with the specified bitmap. CreateBitmap(SKBitmap) Creates a new shader that will draw.Bitmap Creation To create a bitmap, use the CreateBitmap, CreateBitmapIndirect, or CreateCompatibleBitmap function, CreateDIBitmap, and CreateDiscardableBitmap. These functions allow you to specify the width and height, in pixels, of the bitmap. The CreateBitmap and CreateBitmapIndirect function also allow you to specify the number of color planes.Bitmap.CreateBitmap Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Overloads CreateBitmap(DisplayMetrics, Int32[], Int32, Int32, Int32, Int32, Bitmap+Config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. CreateBitmap(Bitmap, Int32,.ID2D1DeviceContext::CreateBitmap methods Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the DrawBitmap and ID2D1BitmapBrush APIs. In addition, color context information can be passed to the bitmap.CreateBitmapCreateBitmap Overload list Method Description CreateBitmap (D2D1_SIZE_U, void*,.ID2D1DeviceContext::CreateBitmap(D2D1_SIZE_U,constvoid*,UINT32,constD2D1_BITMAP_PROPERTIES1*,ID2D1Bitmap1**) method (d2d1_1.h) Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the DrawBitmap and ID2D1BitmapBrush APIs. ...ype: const void* The initial data that will be loaded into the bitmap..ID2D1DeviceContext::CreateBitmap(D2D1_SIZE_U,constvoid*,UINT32,constD2D1_BITMAP_PROPERTIES1&,ID2D1Bitmap1**) method (d2d1_1.h) Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the DrawBitmap and ID2D1BitmapBrush APIs. ...itmap to be [in, optional] sourceData Type: const void* The initial data.Diagram.CreateBitmap(ICollection, Diagram+CreateBitmapPreference) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Constructs a bitmap.ID2D1RenderTarget::CreateBitmap methods Creates a Direct2D bitmap. Overload list Method Description CreateBitmap(D2D1_SIZE_U,D2D1_BITMAP_PROPERTIES&,ID2D1Bitmap**) Creates an uninitialized Direct2D bitmap. CreateBitmap(D2D1_SIZE_U,void*,UINT32,D2D1_BITMAP_PROPERTIES*,ID2D1Bitmap**) Creates a Direct2D bitmap from a pointer to in-memory source data..IImageFactory.CreateBitmap(Int32, Int32, PixelFormat) Method Definition Namespace: Iot.Device.Graphics Assembly:Iot.Device.Bindings.dll Package:Iot.Device.Bindings v3.0.0 Creates a bitmap with the given size and format Parameters width Int32 Width of the bitmap, in pixels height Int32 Height of the bitmap in pixels pixelFormat PixelFormat The."
1015,WritePrivateProfileSectionA,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileSectionA function (winbase.h) Replaces the keys and values for the specified section in an initialization file. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section in.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. AuxUlibIsDLLSynchron... GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file. (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function.GetPrivateProfileSectionA Retrieves all the keys and values for the specified section of an initialization file. (GetPrivateProfileSectionA) GetPrivateProfileSectionNames The GetPrivateProfileSectionNames function (winbase.h) retrieves the names of all sections in an initialization file. GetPrivateProfileSectionNamesA Retrieves the names of all."
1016,htons,"Microsoft Build · May 19 – 22, 2025The htons() function in network programming is used to convert a 16-bit unsigned integer from host byte order to TCP/IP network byte order, which is big-endian. This conversion is essential because different systems may represent integers in different byte orders. For example, Intel processors use little-endian format, while network protocols typically use big-endian format. Therefore, using htons() ensures that the data is correctly formatted for transmission over the network.References:htons function (winsock2.h) The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian). ...eturn value The htons function returns the value in TCP/IP network byRemarks The htons function takes a 16-bit number in host byte order and returns a 16-bit number in network byte order used in TCP/IP networks (the.htons function (winsock.h) The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian). Remarks The htons function takes a 16-bit number in host byte order and returns a 16-bit number in network byte order used in TCP/IP networks (the AF_INET or AF_INET6 address family). The htons function can be used to..../IP network byte order (which is big-en htonl The htonl function (winsock2.h) converts a u_long from host to TCP/IP network byte order, which is big-endian. htonl The htonl function (winsock.h) converts a u_long from host to TCP/IP network byte order (which is big-endian). htonll Converts an unsigned __int64 from host to TCP/IP network byte....stores the result in o htond Converts a double from host to TCP/IP network byte order (which is big-endian). htonf Converts a float from host to TCP/IP network byte order (which is big-endian). htonl The htonl function (winsock2.h) converts a u_long from host to TCP/IP network byte order, which is big-endian. htonll Converts an unsigned __int64.Extended Byte-Order Conversion Routines Windows Sockets 2 does not assume that the network byte order for all protocols is the same. The NetworkByteOrder member of the WSAPROTOCOL_INFO structure specifies the desired network byte order (currently either big-endian or little-endian). Related topics htonl htons ntohl ntohs Porting Socket.The port number returned by getservbyname is already in network order, which is the format requi... However, if the user elects to use a different port, entered as an integer, the application must convert this from host to TCP/IP network order (using the htons or WSAHtons function) before using it to construct an address. Related topics.If you are writing an application that will communicate with non-MFC applications, such as an FTP server, you will probably need to manage byte-swapping yourself before you pass data to the archive object, using the Windows Sockets conversion routines ntohs, ntohl, htons, and htonl. Windows Sockets Byte-Order Conversion Functions Function Purpose.Transport Mapping Between API and SPI Functions The Winsock Transport SPI is similar ... This is illustrated in the following list. connect and WSAConnect both map to WSPConnect accept and WSAAccept map to WSPAccept socket and WSASocket map to WSPSocket Other API functions that are collapsed into the enhanced versions in SPI include: send sendto.htonll function (winsock2.h) The htonll inline function converts an unsigned __int64 from host to TCP/IP network byte order (which is big-endian). W... Requirements Requirement Value Minimum supported client Windows 8.1, Windows 8 [desktop apps | UWP apps] Minimum supported server Windows Server 2012 [desktop apps | UWP apps] Target Platform.ntohf function (winsock2.h) The ntohf inline function converts an unsigned __int32 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a float. Windows 8.1 and Windows Server 2012 R2: This function is supported for Windows Store apps on Windows 8.1, Windows Server 2012 R2, and later. Converts an."
1017,GetCaretBlinkTime,learn.microsoft.com took too long to respond.Try:
1018,CreateICA,"Microsoft Build · May 19 – 22, 2025CreateICA function (wingdi.h) The CreateIC function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context. Syntax Parameters [in] pszDriver A.CreateDCA The CreateDC function creates a device context (DC) for a device using the specified name. (ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device using the specifie... CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC.CreateDCA The CreateDC function creates a device context (DC) for a device using the specified name. (ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device using the specifie... CreateHatchBrush The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color. CreateICA The CreateIC.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,."
1019,DdeSetQualityOfService,"Microsoft Build · May 19 – 22, 2025DdeSetQualityOfService function (dde.h) Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates. The specified QOS applies to any conversations started while those settings are in place. A DDE conversation's quality of service lasts for the duration of the conversation;.Dynamic Data Exchange This section provides guidelines for implementing dynamic data exchange for applications that cannot us... DDE Functions Name Description DdeSetQualityOfService Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates. A DDE conversation's quality.dde.h header This header is used by Data Exchange. For more information, see: Data Exchange dde.h contains the following programming interfaces: Functions DdeSetQualityOfService Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates. FreeDDElParam Frees the memory.DDE Functions In this section DdeSetQualityOfService FreeDDElParam ImpersonateDdeClientWindow PackDDElParam ReuseDDElParam UnpackDDElParam. . | DDE Functions. /windows/win32/dataxchg/dynamic-data-exchange-functions.Data Exchange Overview of the Data Exchange technology. (Unicode) DdeReconnect Enables a client Dynamic Data Exchange Management Library (DDEML) application to attempt to reestablish a conversation with a service that has terminated a conversation with the client. DdeSetQualityOfService Specifies the quality of service (QOS) a raw Dynamic Data.Impersonation Levels (Authorization) The SECURITY_IMPERSONATION_LEVEL enumeration defines four impersonation levels that determine the operations a server can perform in the client's context. For example, if the server is enabled for delegation, the client's impersonation level will a... DDE clients use the DdeSetQualityOfService function with the.An application can use FreeDDElParam to free the memory associated with a data handle received during a DDE conversation. Dynamic Data Exchange and Impersonation To allow a server to impersonate a client, the client calls the DdeSetQualityOfService function. The SECURITY_IMPERSONATION_LEVEL structure is used to control the level of impersonation.SECURITY_QUALITY_OF_SERVICE structure (winnt.h) The SECURITY_QUALITY_OF_SERVICE data structure contains information used to support client impersonation. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Header winnt.h (include Windows.h) See also."
1020,GetMenuItemID,"Microsoft Build · May 19 – 22, 2025GetMenuItemID function (winuser.h) Retrieves the menu item identifier of a menu item located at the specified position in a menu. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu that contains the item whose identifier is to be retrieved. [in] nPos Type: int The zero-based relative position of the menu item whose identifier is to be.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. ... CMenu::GetMenuItemCount Determines the number of items in a pop-up or top-level menu. CMenu::GetMenuItemID Obtains the menu-item identifier for a menu item located at the specified position..Menus and Other Resources Overview of the Menus and Other Resources technology. To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources F... GetMenuItemCount Determines the number of items in the specified menu..About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. Clicking a menu item opens a submenu or causes the applic... Instead, the system opens the submenu associated with the menu item. To retrieve the identifier of the menu item at a specified position, use the GetMenuItemID or.GetMenuDefaultItem Determines the default menu item on... GetMenuInfo Retrieves information about a specified menu. GetMenuItemCount Retrieves the number of items in the specified menu. GetMenuItemID Retrieves the menu item identifier of a menu item located at the specified position in a menu. GetMenuItemInfo Retrieves information about a menu....ms in the specifieRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-0 (introduced in Windows 8).Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-3 (introduced in Windows 10, version 10.0.14393).Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-0 (introduced in Windows 8) See also Conceptual.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-3 (introduced in Windows 10, version 10.0.14393)."
1021,GetClipCursor,"Microsoft Build · May 19 – 22, 2025GetClipCursor function (winuser.h) Retrieves the screen coordinates of the rectangular area to which the cursor is confined. Syntax Parameters [out] lpRect Type: LPRECT A pointer to a RECT structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to.ClipCursor function (winuser.h) Confines the cursor to a rectangular area on the screen. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Cursors A cursor is a small picture whose location on the screen is controlled by a pointing device, such as a mouse, pen, or trackball. GetClipCursor Retrieves the screen coordinates of the rectangular area to which the cursor is.Cursor Confinement You can confine the cursor to a rectangular area on the screen by using the ClipCursor function. For example, you might use ClipCursor to confine the cursor to a modal dialog box, preventing the user from interacting with other windows until the dialog box is closed. The GetClipCursor function retrieves the screen coordinates of.Cursor Functions In This Section ClipCursor CopyCursor CreateCursor DestroyCursor GetClipCursor GetCursor GetCursorInfo GetCursorPos GetPhysicalCursorPos LoadCursor LoadCursorFromFile SetCursor SetCursorPos SetPhysicalCursorPos SetSystemCursor ShowCursor. Cursor Functions. /windows/win32/menurc/cursor-functions.AddClipboardFormatListener Places the given window in the system-maintained clipboard format listener list. ChangeClipboardChain Removes a specified window from the chain of clipboard viewers. ClipCursor Confines the cursor to a rectangular area on the screen. CloseClipboard Closes the clipboard. (Unicode) CopyCursor Copies the specified cursor..The example uses the GetClipCursor function to record the area in which the cursor can move and the ClipCursor function to confine and restore the cursor. Because there is only one cursor at a time available in the system, an application that confines the cursor must restore the cursor before relinquishing control to another window. Using Cursor.At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items. ClipCursor Confines the cursor to a rectangular area on the screen. CopyAcceleratorTableA Copies the specified accelerator table. GetCaretPos Copies the caret's position to the specified POINT structure.."
1022,SetFileAttributesA,"Microsoft Build · May 19 – 22, 2025SetFileAttributesA function (fileapi.h) Sets the attributes for a file or directory. To perform this operation as a transacted operation, use the SetFileAttributesTransacted function. Syntax Parameters [in] lpFileName The name of the file whose attributes are to be set. By default, the name is limited to MAX_PATH characters. To extend this limit.That umbrella library provides the exports for the set of Win32 APIs in question. This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. For delay load or LoadLibrary, use the module name (whether the ... SetEndOfFile Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240..Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. SetFileApisToOEM C... SetFileAttributesA Sets the attributes for a file or directory. (ANSI) SetFileAttributesW Sets the attributes for a file or directory. (Unicode).FINDEX_INFO_LEVELS... FINDEX_SEARCH_OPS Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform. GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. NVME_ADMIN_COMMANDS."
1023,TextOutA,"Microsoft Build · May 19 – 22, 2025TextOutA function (wingdi.h) The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string. [in].wingdi.h header This header is used by multiple technologies.Windows GDI Overview of the Windows GDI technology."
1024,WritePrivateProfileStringW,"Microsoft Build · May 19 – 22, 2025WritePrivateProfileStringW function (winbase.h) Copies a string into the specified section of an initialization file. Note  This function is provided only for compatibility with 16-bit versions of Windows. Applications should store initialization information in the registry. Syntax Parameters [in] lpAppName The name of the section to which the.GetPrivateProfileStringA Retrieves a string from the specified section in an initialization file. (GetPrivateProfileStringA) GetPrivateProfileStringW The GetPrivateProfileStringW (Unicode) function (winbase.h) retrieves a string from the specified section in an initialization file. GetPrivateProfileStruct The GetPrivateProfileStruct function.To develop Developer Notes, you need these headers: advpub.h apiquery2.h appcompatapi.h aux_ulib.h avrfsdk.h camerauicontrol.h capi.h comppkgsup.h dciman.h ddrawgdi.h editionupgradehelper.h exdisp.h exposeenums2managed.h fci.h fdi.h fdi_fci_types.h featurestagingapi.h fhcfg.h fhsvcctl.h filehc.h icwcfg.h ime.h isolatedapplauncher.h iwscapi.h."
1025,CopyFileExW,"Microsoft Build · May 19 – 22, 2025CopyFileExW function (winbase.h) Copies an existing file to a new file, notifying the application of its progress through a callback function. To perform this operation as a transacted operation, use the CopyFileTransacted function. Syntax Parameters [in] lpExistingFileName The name of an existing file. By default, the name is limited to MAX_PATH.CopyFile The CopyFile function (winbase.h) copies an existing file to a new file. (CopyFileA) CopyFileExA Copies an existing file to a new file, notifying the application of its progress through a ca... (CopyFileExA) CopyFileExW Copies an existing file to a new file, notifying the application of its progress through a callback function..FSCTL_FILESYSTEM_GET_STATISTICS_EX Retrieves the information from various file system performance counters.Support for this control code started with Windows 10. (CopyFileExA) CopyFileExW Copies an existing file to a new file, notifying the application of its progress through a callback fun... (CopyFileExW) CopyFileFromAppW Copies an existing file.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,.These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW,....| I tested on Windows 10 and I got the same error (3) But it worked by using :| from the documentation: &quot;These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path beh CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW,.CreateFiberEx Introduced into api-ms-win-core-fibers-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-file-ansi-l2-1-0.dll API Requirements ReplaceFileA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.10240. CopyFileExA Introduced into api-ms-win-core-file-ansi-l2-1-0.dll in 10.0.16299. APIs from api-ms-win-core-file-l1-2-1.dll API."
1026,SetEnhMetaFileBits,"Microsoft Build · May 19 – 22, 2025SetEnhMetaFileBits function (wingdi.h) The SetEnhMetaFileBits function creates a memory-based enhanced-format metafile from the specified data. ...meters [in] nSize Specifies the size, in bytes, of the data provided. [in] pb Pointer to a buffer that contains enhanced-metafTo import Windows-format metafiles, use the SetWinMetaFileBits function..SetMetaFileBitsEx function (wingdi.h) The SetMetaFileBitsEx function creates a memory-based Windows-format metafile from the supplied data. Note  This function is provided only for compatibility with Windows-format metafiles. The corresponding function for an enhanced-format metafile is SetEnhMetaFileBits. Requirements Requirement Value Minimum.PlayEnhMetaFi... PlayEnhMetaFileRecord Plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record. SetEnhMetaFileBits Creates a memory-based enhanced-format metafile from the specified data. SetWinMetaFileBits Converts a metafile from the older Windows format to the new enhanced format..GetEnhMetaFileBits function (wingdi.h) The GetEnhMetaFileBits function retrieves the contents of the specified enhanced-format metafile and copies them into a buffer. Remarks After the enhanced-metafile bits are retrieved, they can be used to create a memory-based metafile by calling the SetEnhMetaFileBits function. Th... The GetEnhMetaFileBits....name corresponds with return values of the GetClipboardFormatName function [MSDN-CLIPBOARD]. Section 2.2.3.1: In Windows environments, these structure fields map to the METAFILEPICT structure [MSDN-METAFILEPICT]. Section 2.2.3.1: In Windows environments, this is the data used SetMetaFileBitsEx function and returned by the GetMetaFileBitsEx.In the case of CF_METAFILEPCT, what follows is a variation on the METAFILEPICT structure (it uses WORD, rather than DWORD da... That is, this data is in the following form: After the METAFILEPICT structure is the metafile data, suitable to be passed to the SetMetaFileBitsEx function. This function creates a memory-based, Windows-format metafile.An application can create a backup copy of an enhanced metafile by calling the CopyEnhMetaFile function, supplying a handle that identifies the enhanced metafile, and supplying a pointer to the name of the new file. To create a memory-based enhanced-format metafile, call the SetEnhMetaFileBits function. Edit an Enhanced Metafile Most drawing,.That is, this data is in the following form: After the METAFILEPICT structure is the metafile data, suitable to be passed to the SetMetaFileBitsEx function. This function creates a memory-based, Windows-format metafile from the supplied data. This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes and discards any paths in the specified device context. ... enhanced-metFlattenPath."
1027,GetNearestPaletteIndex,"Microsoft Build · May 19 – 22, 2025GetNearestPaletteIndex function (wingdi.h) The GetNearestPaletteIndex function retrieves the index for the entry in the specified logical palette most closely matching a specified color value. Syntax Parameters [in] h A handle to a logical palette. [in] color A color to be matched. Requirement... The GetNearestPaletteIndex function retrieves the.GetEnhMe... (Unicode) GetNearestColor The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. GetNearestPaletteIndex The GetNearestPaletteIndex function retrieves the index for the entry in the specified logical palette most closely matching a.Color Functions The following functions are used with color. GetNearestColor Retrieves a color value identifying a color from the system palette that will be displayed when the specified co... GetNearestPaletteIndex Retrieves the index for the entry in the specified logical palette most closely matching a specified color value. GetPaletteEntries.CPalette::GetEntryCount Retrieves the number of palette entries in a logical palette. CPalette::GetNearestPaletteIndex Returns the index of the entry in the logical palette that most closely matches a color value. CPalette::GetPaletteEntries Retrieves a range of palette entries in a logical palette. Return Val... CPalette::GetNearestPaletteIndex.GetEnhMetaFilePale... GetNearestColor The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used. GetNearestPaletteIndex The GetNearestPaletteIndex function retrieves the index for the entry in the specified logical palette most closely matching a.Logical Palette A logical palette is a color palette that an application creates and associates with a given device context. Logical palettes let applications define and use colors tha... An application can retrieve the index for the entry in a given logical palette that most closely matches a specified color value by using the.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also COLORREF Color Functions Colors Overview GetDeviceCaps GetNearestPaletteIndex."
1028,GetCurrentPositionEx,"Microsoft Build · May 19 – 22, 2025GetCurrentPositionEx function (wingdi.h) The GetCurrentPositionEx function retrieves the current position in logical coordinates. Syntax Parameters [in] hdc A handle to the device context. [out] lppt A pointer to a POINT structure that receives the logical coordinates of the current position. Return value If the function succeeds, the return value.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Function Descripti... DPtoLP Converts device coordinates into logical coordinates. GetCurrentPositionEx Retrieves the current position in logical coordinates. GetDisplayAutoRotationPreferences Gets the orientation preferences.GetColorSpace The GetColorSpace function retrieves the handle to the input color space from a specified device context. GetCurrentObject The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC). GetCurrentPositionEx The GetCurrentPositionEx function retrieves.GetColorAdjustment The GetColorAdjustment function retrieves the color adjustment values for t... GetCurrentObject The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC). GetCurrentPositionEx The GetCurrentPositionEx function retrieves the current position."
1029,GetNextDlgGroupItem,"Microsoft Build · May 19 – 22, 2025GetNextDlgGroupItem function (winuser.h) Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box to be searched. [in, optional] hCtl Type: HWND A handle to the control to be used as the starting point for the.The system sends a WM_GETDLGCODE me... Otherwise, the system uses the GetNextDlgGroupItem function to determine the next control in the group. GetNextDlgGroupItem searches controls in the order (or reverse order) they were created. If the user presses the RIGHT or DOWN key, GetNextDlgGroupItem returns the next control if that control does not have.... (ANSI) GetFileTitleW Retrieves the name of the specified file. (Unicode) GetNextDlgGroupItem Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box. GetNextDlgTabItem Retrieves a handle to the first control that has the WS_TABSTOP style that precedes (or follows) the.CWindow::GetDlgItemText Retrieves a control's text. CWindow::GetNextDlgGroupItem Retrieves the previous or next control within a group of controls. CWindow::GetNextDlgTabItem Retrieves the previous or next control having the WS_TABSTOP style. CWindow::GetWindowDC Retrieves a device conte... Remarks For more information, see GetDlgItemText in the.Dialog box functions In this section CreateDialog CreateDialogIndirect CreateDialogIndirectParam CreateDialogParam DefDlgProc DialogBox DialogBoxIndirect DialogBoxIndirectParam DialogBoxParam DLGPROC EndDialog GetDialogBaseUnits GetDlgCtrlID GetDlgItem GetDlgItemInt GetDlgItemText GetNextDlgGroupItem GetNextDlgTabItem IsDialogMessage MapDialogRect.GetDlgIt... GetDlgItemText Retrieves the title or text associated with a control in a dialog box. GetNextDlgGroupItem Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box. GetNextDlgTabItem Retrieves a handle to the first control that has the WS_TABSTOP style that precedes.... function (winuser.h) Ret a handle to the first control that has the WS_TABSTOPRequirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a C... CWnd::GetDlgCtrlID If the CWnd is a child window, calling this function returns its ID value. CWnd::GetNextDlgGroupItem Searches for the next (or previous).If necessary, the functi... The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. (Unicode) DefDlgProcA Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process. It."
1030,ScaleViewportExtEx,"Microsoft Build · May 19 – 22, 2025ScaleViewportExtEx function (wingdi.h) The ScaleViewportExtEx function modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors. ...The amount by which to divide the current horizontal exte yn The amount by which to multiply the current vertical extent.The ScaleViewportExtEx function modifies.EMRSCALEVIEWPORTEXTEX structure (wingdi.h) The EMRSCALEVIEWPORTEXTEX and EMRSCALEWINDOWEXTEX structures contain members for the ScaleViewportExtEx and ScaleWindowExtEx enhanced metafile records. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps on... The EMRSCALEVIEWPORTEXTEX and EMRSCALEWINDOWEXTEX.2.3.11.7 EMR_SCALEVIEWPORTEXTEX Record The EMR_SCALEVIEWPORTEXTEX record specifies the current viewport in the playback device context by using ratios formed by the specified multiplicands and divisors. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size xNum xDenom yNum yDenom Type (4 bytes): An unsigned integer that.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. Funct... OffsetWindowOrgEx Modifies the window origin for a device context using the specified horizontal and vertical offsets. ScaleViewportExtEx Modifies the viewport for a device context using the ratios formed by the.AnimatePaletteArc BitBlt Chord CreateBrushIndirect CreateDIBPatternBrush CreateFontIndirect CreatePalette CreatePatternBrush CreatePenIndirect DeleteObject Ellipse Escape ExcludeClipRect ExtFloodFill ExtTextOut FillRgn FloodFill FrameRgn IntersectClipRect InvertRgn LineToMoveToEx OffsetClipRgn OffsetViewportOrgEx OffsetWindowOrgEx PaintRgn PatBlt....VEDC EMR_SCALEVIEWPORTEXTEX EMR_SCALEWINDO EMR_SELECTCLIPPATH EMR_SELECTOBJECT EMR_SELECTPALETTE EMR_SETARCDIRECTION EMR_SETBKCOLOR EMR_SETBKMODE EMR_SETBRUSHORGEX EMR_SETCOLORADJUSTMENT EMR_SETCOLORSPACE EMR_SETDIBITSTODEVICE EMR_SETICMMODE EMR_SETICMPROFILEA EMR_SETICMPROFILEW EMR_SETLAYOUT EMR_SETMAPMODE EMR_SETMAPPERFLAGS EMR_SETMETARGN.Element name Type Set by Clipping RegionData (section 2.2.24) EMR_EXCLUDECLIPRECT (section 2.3.2.1) EMR_EXTSELECTCLIPRGN (section 2.3.2.2) EMR_INTERSECTCLIPRECT (section 2.3.2.3) EMR_OFFSETCIPRGN (section 2.3.2.4) MetaClipping RegionData EMR_SETMETARGN (section 2.3.2) Viewport UINT8[16] EMR_SCALEVIEWPORTEXTEX (section 2.3.11.7)....N Record EMR_POLYPOLYGON16 packet EMR_POLYPOLYGON16 Record EMR_POLYPOLYLINE packet EMR_POLYPOLYLINE Record EMR_POLYPOLYLINE16 packet EMR_POLYPOLYLINE16 Record EMR_POLYTEXTOUTA packet EMR_POLYTEXTOUTA record EMR_POLYTEXTOUTW packet EMR_POLYTEXTOUTW record EMR_RECTANGLE packet EMR_RECTANGLE Record EMR_RESIZEPALETTE packet EMR_RESIZEPALETTE Record.... = 0x0000005A, EMR_POLYPOLYGON16 = 0x0000005B, EMR_POLYDRAW16 = 0x0000005C, EMR_CREATEMONOBRUSH = 0x0000005D, EMR_CREATEDIBPATTERNBRUSHPT = 0x0000005E, EMR_EXTCREATEPEN = 0x0000005F, EMR_POLYTEXTOUTA = 0x00000060, EMR_POLYTEXTOUTW = 0x00000061, EMR_SETICMMODE = 0x00000062, EMR_CREATECOLORSPACE = 0x00000063, EMR_SETCOLORSPACE = 0x00000064,.2.3.11 State Record Types The State record types specify graphics properties that define the playback device context during the processing of EMF metafile records. EMR_SCALEVIEWPORTEXTEX 2.3.11.7 Specifies the viewport by using the ratios formed by the specified multiplicands and divisors. Name Value EMR_SETWINDOWORGEX 0x0000000A."
1031,WSAStringToAddressA,"Microsoft Build · May 19 – 22, 2025WSAStringToAddressA function (winsock2.h) The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure. Syntax Parameters [in] AddressString A pointer to the zero-terminated string.... WSAStringToAddressA The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure. (ANSI) WSAStringToAddressW The WSAStringToAddress function converts a network address in its.LPWSPADDRESSTOSTRING The LPWSPAddressToString function converts all components of a sockaddr structure into a human-readable numeric string representation of the address. LPWSPSTRINGTOADDRESS The WSPStringToAddress function converts a human-readable numeric string to a socket address structure (sockaddr) suitable to passing to Windows Sockets.GetModuleFileNameA Introduced into api-ms-win-core-librarylo... GetProcAddress Introduced into api-ms-win-core-libraryloader-l1-2-0.dll in 10.0.10240. QueryOptionalDelayLoadedAPI Introduced into api-ms-win-core-libraryloader-l2-1-0.dll in 10.0.10240. APIs from api-ms-win-core-localization-ansi-l1-1-0.dll API Requirements GetStringTypeExA."
1032,bind,"Microsoft Build · May 19 – 22, 2025The BIND function or command is used in various Microsoft products, particularly in the context of integrating with data sources and managing connections. Here are a few ways to use the BIND function:References:bind function (winsock.h) The bind function associates a local address with a socket. Syntax Parameters [in] s A descriptor identifying an unbound socket. addr A pointer to a sockaddr structure of the local address to assign to the bound socket . [in] namelen The length, in bytes, of the value pointed to by addr. The dynamic client port ra... For.Binding features Razor components provide data binding features with the @bind Razor directive attribute with a field, property, or Razor expression value. ...lement value to the C# inputValBind.razor: The text box is updated in the UI only when the component is rendered, not in response to changing the field's or property's value. As a.Binding to Active Directory Domain Services In Active Directory Domain Services, the act of associating a programmatic object with a specific Active Directory Domain Services object is known as binding. Programming technology For more information Active Directory Service Interfaces Binding to an ADSI Object Lightweight Directory Access Protocol.How to: Bind to a Method The following example shows how to bind to a method using ObjectDataProvider. ... Note that BindsDirectlyToSource is set to true because we are binding to the MethodParameters property of the ObjectDataProvider instance and not properties of the object wrapped by the ObjectDataProvider (the TemperatureScale object). Follow.Side-by-side versioning. Tooling that simplifies modern web development. This article describes how Web API binds parameters, and how you can customize the binding process. When Web API calls a method on a controller, it must set values for the parameters, a process called binding. By default, Web API uses the following rules to bind parameters:.Binding a Socket For a server to accept client connections, it must be bound to a network address within the system. The following code demonstrates how to bind a socket that has already been created to an IP address and port. To bind a socket The sockaddr structure holds information regarding the address family, IP address, and port number. Call.Data binding overview (Windows Forms .NET) In Windows Forms, you can bind to not just traditional data sources, but also to almost any structure that contains data. ...y control oStructures to bind To In Windows Forms, you can bind to a wide variety of structures, from simple objects (simple binding) to complex lists such as ADO.NET data tables.Data binding overview (Windows Forms .NET) In Windows Forms, you can bind to not just traditional data sources, but also to almost any structure that contains data. You can bin... Structures to bind To In Windows Forms, you can bind to a wide variety of structures, from simple objects (simple binding) to complex lists such as ADO.NET data tables.EmailMessage.Bind Method Definition Namespace: Microsoft.Exchange.WebServices.Data Assembly:Microsoft.Exchange.WebServices.dll Overloads Bind(ExchangeService, ItemId) Binds to an existing e-mail message and loads its first class properties. Bind(ExchangeService, ItemId, PropertySet) Binds to an existing e-mail message and loads the specified set.You could use the two-way mode to bind a TextBox to a customer's na... Independent of mode, there are two kinds of binding, and they're both typically declared in UI markup. Replace the contents of those new files with the MIDL 3.0 code shown in the listing, build the project to generate HostViewModel.h and .cpp, and then add code to the generated."
1033,CoQueryProxyBlanket,"Microsoft Build · May 19 – 22, 2025CoQueryProxyBlanket function (combaseapi.h) Retrieves the authentication information the client uses to make calls on the specified proxy. This is a helper function for IClientSecurity::QueryBlanket. Syntax Parameters [in] pProxy A pointer indicating the proxy to query. This parameter cannot be NULL. Remarks CoQueryProxyBlanket is called by the.Connect The IRpcProxyBuffer::Connect (objidlbase.h) method initializes a client proxy, binding it to the specified RPC channel. CopyProxy Makes a private copy of the proxy for the specified interface. CoQueryClientBlanket Called by the server to find out about the client that invoked the method executing on the current thread. CoQueryProxyBlanket.Clients using the default implementation of IClientSecurity provided by the proxy manager can call the CoQueryProxyBlanket, CoSetProxyBlanket, and CoCopyProxy helper functions instead of calling IClientSecurity methods directly. The helper functions simplify the code but are slightly less efficient than calling the corresponding IClien....CoQueryAuthen... CoQueryClientBlanket Called by the server to find out about the client that invoked the method executing on the current thread. CoRegisterActivationFilter Registers a process-wide filter to process activation requests. CoRegisterChannelHook Registers a channel hook. CoQueryProxyBlanket Retrieves the authentication information the.IClientSecurity::QueryBlanket method (objidl.h) Retrieves authentication information the client uses to make calls on th... This sequence of calls is encapsulated in the helper function CoQueryProxyBlanket. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.CoSetProxyBlanket function (combaseapi.h) Sets the authentication information that will be used to make calls on the specified proxy. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header combaseapi.h.CoMarshalHresult Marshals an HRESULT... CoQueryAuthenticationServices Retrieves a list of the authentication services registered when the process called CoInitializeSecurity. CoQueryClientBlanket Called by the server to find out about the client that invoked the method executing on the current thread. CoQueryProxyBlanket Retrieves the.Interfaces on client proxies, which enable the client to control the security on calls to individual interfaces. The IClientSecurity interface and the CoQueryProxyBlanket, CoSetProxyBlanket, and CoCopyProxy functions provide call security on a remote object. Server-side functions and call-context interfaces, which enable the server to retrieve.If the client obtains the credentials set on the proxy by calling CoQueryProxyBlanket, it must ensure that the memory remains valid and unchanged until a different identity is set on the proxy or all proxies on the object are released. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps].Snego was standardized by the Internet Engineering Task Force (IETF) in December 1998, in document RFC 2478. Snego is useful when you don't know what... The details of the values of those members are the same as described in the preceding paragraph. If Snego is used, calls to CoQueryProxyBlanket or CoQueryClientBlanket will return Snego as the."
1034,GetStartupInfoA,"Microsoft Build · May 19 – 22, 2025The GetStartupInfoA function retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created. This structure contains information about the process's startup, including window properties and other parameters that affect how the process runs.References:STARTUPINFOA structure (processthreadsapi.h) Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time. Syntax Members cb The size of the structure, in bytes. lpReserved Reserved; must be NULL. lpDesktop The name of the desktop, or the name of both the desktop and window station for.GetStartupInfoW function (processthreadsapi.h) Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created. Syntax Parameters [out] lpStartupInfo A pointer to a STARTUPINFO structure that receives the startup information. Return value None Remarks The STARTUPINFO structure was specified by the."
1035,SelectObject,"Microsoft Build · May 19 – 22, 2025SelectObject function (wingdi.h) The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type. Syntax Parameters [in] hdc A handle to the DC. [in] h A handle to the object to be selected. The specified object must have been created by using one of the following.DoCmd.SelectObject method (Access) The SelectObject method carries out the SelectObject action in Visual Basic. Syntax expression.SelectObject (ObjectType, ObjectName, InNavigationPane) expression A variable that represents a DoCmd object. ...ional Variant A string expression that's the valid name of an object of the type selected by the .SelectObject macro action Applies to: Access 2013, Office 2013 You can use the SelectObject action to select a specified database object. Setting The SelectObject action has the following arguments. Action argument Description Object Typ... To run the SelectObject action in a Visual Basic for Applications (VBA) module, use the SelectObject method....work Assembly:Microsoft.VisualStudio.Data.Framework.dll Package:Microsoft.VisualStudio.Data.Framework v17.10.40170 Ove SelectObjects(String, Object[], String[]) Returns a data reader for the data objects retrieved from the object store, which are filtered by the specified restrictions and propertiesSelectObjects(String, Object[], String[],....dio.Data.Services.dll Package:Microsoft.VisualStudio.Data.Services v17.10.40170 Ove SelectObjects(String) Returns a collection of data objects for the specified type from the object storeSelectObjects(String, Object[]) Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions..KnownImageIds.SelectObject Field Definition Namespace: Microsoft.VisualStudio.Imaging Assembly:Microsoft.VisualStudio.ImageCatalog.dll Package:Microsoft.VisualStudio.ImageCatalog v17.13.40008 Field Value Value = 2724 Int32 Applies to. Learn more about the Microsoft.VisualStudio.Imaging.KnownImageIds.SelectObject in the.KnownMonikers.SelectObject Property Definition Namespace: Microsoft.VisualStudio.Imaging Assembly:Microsoft.VisualStudio.ImageCatalog.dll Package:Microsoft.VisualStudio.ImageCatalog v17.13.40008 Property Value ImageMoniker Applies to. Learn more about the Microsoft.VisualStudio.Imaging.KnownMonikers.SelectObject in the.ImageMoniker.KnownValues.SelectObject Property Definition Namespace: Microsoft.VisualStudio.Extensibility Assembly:Microsoft.VisualStudio.Extensibility.Contracts.dll Package:Microsoft.VisualStudio.Extensibility.Contracts v17.11.350 Property Value ImageMoniker Applies to. Learn more about the.WinAPINative.selectObject(Int64, Int64) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Parameters _hDC Int64 _hGDIObject Int64 Returns Int64 Applies to. Learn more about the Dynamics.AX.Application.WinAPINative.selectObject in the Dynamics.AX.Application namespace...SelectionService.SelectObjects(UInt32, Object[], UInt32) Method Definition Namespace: Microsoft.SqlServer.Management.UI.VSIntegration Assembly:SQLEditors.dll Parameters cSelect UInt32 objects Object[] dwFlags UInt32 Returns Int32 Implements SelectObjects(UInt32, Object[], UInt32) Applies to. Learn more about the."
1036,EnumCalendarInfoA,"Microsoft Build · May 19 – 22, 2025EnumCalendarInfoA function (winnls.h) Enumerates calendar information for a specified locale. Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function. Another reason for preferring this function is that Microsoft is migrating toward the use of locale names instead of.(CompareStringA) ConvertDefaultLocale Converts a default locale value to... EnumCalendarInfoA Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function. (ANSI) EnumCalendarInfoExA Enumerates calendar information for a.(CompareStringA) CompareStringEx Compares two Unicode (wide character) s... EnumCalendarInfoA Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function. (ANSI) EnumCalendarInfoExA Enumerates calendar information for a.Calendar Type Information This topic describes the calendar type information (CALTYPE data type) used in the EnumCalendarInfo, EnumCalendarInfoEx, EnumCalendarInfoExEx, GetCalendarInfo, and GetCalendarInfoEx functions. This is only relevant for ANSI versions of functions, for example, EnumCalendarInfoA. This topic describes the calendar type."
1037,GetBkColor,"Microsoft Build · May 19 – 22, 2025GetBkColor function (wingdi.h) The GetBkColor function returns the current background color for the specified device context. Syntax Parameters [in] hdc Handle to the device context whose background color is to be returned. Return value If the function succeeds, the return value is a COLORREF value for the current background color. If the function.GetBitmapBits The GetBitmapBits function copies the bitmap bits of... GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. GetBkColor The GetBkColor function returns the current background color for the specified device context. GetBkMode The GetBkMode function returns the current background mix.GetBitmapBits The GetBitmapBits function copies the bitmap bits of... GetBitmapDimensionEx The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. GetBkColor The GetBkColor function returns the current background color for the specified device context. GetBkMode The GetBkMode function returns the current background mix.LVM_GETBKCOLOR message Gets the background color of a list-view control. You can send this message explicitly or by using the ListView_GetBkColor macro. Parameters wParam Must be zero. lParam Must be zero. Return value Returns the background color of the list-view control. Requirements Requirement Value Minimum supported client Windows Vista.ImageList_GetBkColor function (commctrl.h) Retrieves the current background color for an image list. Return value Type: COLORREF The return value is the background color. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows.ListView_GetBkColor macro (commctrl.h) Gets the background color of a list-view control. You can use this macro or send the LVM_GETBKCOLOR message explicitly. Return value Type: COLORREF Returns the background color of the list-view control. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported.PGM_GETBKCOLOR message Retrieves the current background color for the pager control. You can send this message explicitly or use the Pager_GetBkColor macro. Return value Returns a COLORREF value that contains the current background color. Remarks By default, the pager control will use the system button face color as the background color..Pager_GetBkColor macro (commctrl.h) Retrieves the current background color for the pager control. You can use this macro or send the PGM_GETBKCOLOR message explicitly. Syntax Parameters hwnd Type: HWND Handle to the pager control. Return value Type: COLORREF Returns the current background color. Remarks By default, the pager control will use the.TVM_GETBKCOLOR message Retrieves the current background color of the control. You can send this message explicitly or by using the TreeView_GetBkColor macro. Return value Returns a COLORREF value that represents the current background color. If this value is -1, the control is using the system color for the background color. Requirements.TreeView_GetBkColor macro (commctrl.h) Retrieves the current background color of the control. You can use this macro or send the TVM_GETBKCOLOR message explicitly. Syntax Parameters hwnd Type: HWND Handle to a tree-view control. Return value Type: COLORREF Returns a COLORREF value that represents the current background color. Requirements."
1038,GetCommModemStatus,"Microsoft Build · May 19 – 22, 2025GetCommModemStatus function (winbase.h) Retrieves the modem control-register values. Remarks The GetCommModemStatus function is useful when you are using the WaitCommEvent function to monitor the CTS, RLSD, DSR, or ring indicator signals. To detect when these signals change state, use WaitCommEvent and then use GetCommModemStatus to determine the.Communications Functions The following functions are used with communications resources. Function Description BuildCommDCB Fills ... GetCommMask Retrieves the value of the event mask for a specified communications device. GetCommModemStatus Retrieves modem control-register values. GetCommProperties Retrieves information about the communications.(Unicode) GetCommConfig Retrieves the current configuration of a communications device. GetCommMask Retrieves the value of the event mask for a specified communications device. GetCommModemStatus Retrieves the modem control-register values. GetCommPorts Gets an array that contains the well-formed COM ports. GetCommProperties Retrieves information.Communications Events A process can monitor a se... To query the current state of the CTS (clear-to-send), DSR (data-set-ready), RLSD (receive-line-signal-detect), and ring indicator signals, a process can use the GetCommModemStatus function. A process can monitor a set of events that occur in a communications resource. For example, an application.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
1039,DuplicateHandle,"Microsoft Build · May 19 – 22, 2025The DuplicateHandle function in Windows is used to create a duplicate handle that can be used by another specified process. This function allows for the sharing of object handles between processes, which is more complex than using named objects or inheritance. It requires communication between the creating process and the process into which the handle is duplicated. The necessary information, such as the handle value and process identifier, can be communicated through various interprocess communication methods, like named pipes or shared memory.However, it's important to note that DuplicateHandle should not be used for certain objects, such as I/O completion ports and sockets, as it may lead to issues with handle recognition and internal reference counting.References:Object Duplication The DuplicateHandle function creates a duplicate handle that can be used by another specified process. This method of sharing object handles is more complex than using named objects or inheritance. It requires communication between the creating process and the process into which the handle is duplicated. The necessary.DuplicateHandle function (handleapi.h) Duplicates an object handle. Syntax Parameters [in] hSourceProcessHandle A handle to the process with the handle to be duplicated. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps].LSA_DUPLICATE_HANDLE callback function (ntsecpkg.h) The DuplicateHandle function creates a duplicate handle. The returned duplicate is in the caller's process space. Syntax Parameters [in] SourceHandle A handle to duplicate. [out] DestionationHandle Pointer that receives the address of a duplicate of the SourceHandle handle. The duplicate handle.This handle can be inherited by child processes, depending on the inheritance flag specified when it is created. The handle can be duplicated by DuplicateHandle, which enables you to create a thread handle with a subset of the access rights. The handle is valid until closed, even after the thread it represents has been terminated. To get the real.2.2.7.8 MILCMD_CHANNEL_DUPLICATEHANDLE The MILCMD_CHANNEL_DUPLICATEHANDLE message indicates that the resource referenced by the Original field (located on the receiving channel) MUST also be associated to the handle in the Duplicate field (located on the channel specified by the TargetChannel field). 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2.The DuplicateHandle function duplicates a handle to be used in the current process or in another process. If an application duplicates one of its handles for another process, the duplicated handle is valid only in the context of the other process. A duplicated or inherited handle is a unique value, but it refers to the same object as the original.SafeEvpPKeyHandle.DuplicateHandle Method Definition Namespace: System.Security.Cryptography Assembly:System.Security.Cryptography.dll Assembly:System.Security.Cryptography.OpenSsl.dll Assemblies:System.Security.Cryptography.dll, System.Security.Cryptography.OpenSsl.dll Package:System.Security.Cryptography.OpenSsl v5.0.0.More information on how access rights are propagated during duplication can be found on the DuplicateHandle documentation. Links to lists of access rights for each type of object can be found in the DuplicateHandle reference as well as in the See also headings of each sh_* parameter page. ...s 10 Anniversary Update (version 1607, build 14393).A process can use the DuplicateHandle function to create a duplicate console handle that has different access or inheritability from the original handle. Note, however, that a process can create a duplicate console handle only for its own use. This differs from other handle types (such as file, pipe, or mutex objects), for which DuplicateHandle.Debuggers typically need to examine or change the contents of a threa... To accomplish this, a debugger must obtain a handle to the thread by using the DuplicateHandle function and specifying the appropriate access to the thread (THREAD_GET_CONTEXT, THREAD_SET_CONTEXT, or both). The OpenThread function enables a debugger to obtain the identifier."
1040,VerLanguageNameW,"Microsoft Build · May 19 – 22, 2025VerLanguageNameW function (winver.h) Retrieves a description string for the language associated with a specified binary Microsoft language identifier. Syntax Parameters [in] wLang Type: DWORD The binary language identifier. Remarks This function works on 16-, 32-, and 64-bit file images. Typically, an installation program uses this function to.VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as ou... (Unicode) VerLanguageNameA Retrieves a description string for the language associated with a specified binary Microsoft language identifier. (ANSI) VerLanguageNameW Retrieves a description string for the language associated with a.(ANSI) VerInstallFileW Installs the specified file based on information returned from the VerFindFil... VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files. (Unicode) VerLanguageNameA Retrieves a description string for the language associated with a specified binary Microsoft.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. APIs from api-ms-win-core-com-l2-1-1.dll API Req...."
1041,OpenFileMappingW,"Microsoft Build · May 19 – 22, 2025OpenFileMappingW function (memoryapi.h) Opens a named file mapping object. Syntax Parameters [in] dwDesiredAccess The access to the file mapping object. This access is checked against any security descriptor on the target file mapping object. For a list of values, see File Mapping Security and Access Rights. [in] bInheritHandle If this parameter.memoryapi.h header This header is used by System Services. For more information, see: System Services memoryapi.h contains the following programming interfaces: Functions AllocateUserPhysicalPages Al... OpenFileMappingFromApp Opens a named file mapping object. (OpenFileMappingFromApp) OpenFileMappingW Opens a named file mapping object..IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned."
1042,GetCompressedFileSizeW,"Microsoft Build · May 19 – 22, 2025GetCompressedFileSizeW function (fileapi.h) Retrieves the actual number of bytes of disk storage used to store a specified file. If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and.FlushFileBuffers Flushes the buffers of a specified file and causes all buffered data to be written to a file. GetCompressedFileSizeA Retrieves the actual number of bytes of disk storage used to store a specified file. (ANSI) GetCompressedFileSizeW Retrieves the actual number of bytes of disk storage used to store a specified file. (Unicode)....s that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW,....meW, MoveFileW, MoveFileExW, MoveFileWithProgressW, ReplaceFileW, SearchPathW, FindFirstFileNameW, FindNextFileNameW, FindFirstStreamW, FindNextSt GetCompressedFileSizeW, GetFinalPathNameByHandleWSee also File Management Functions Directory Management Functions GetVolumeInformation Feedback Was this page helpful. Yes No Provide product feedback....s that no longer have MAX_PATH restrictions if you opt-in to long path behavior: CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW,.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
1043,SetClassWord,"Microsoft Build · May 19 – 22, 2025SetClassWord function (winuser.h) Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs. Note  This function is provided only for compatibility with 16-bit versions of Windows. Syntax Parameters [in] hWnd Type: HWND A handle to the window and, indirectly, the.Window Class Functions GetClassInfo GetClassInfoEx GetClassLong GetClassLongPtr GetClassName GetClassWord GetWindowLong GetWindowLongPtr RegisterClass RegisterClassEx SetClassLong SetClassLongPtr SetClassWord SetWindowLong SetWindowLongPtr UnregisterClass. Window Class Functions. /windows/win32/winmsg/window-class-functions.Window Classes (Windows and Messages) This topic describes the types of window classes, how the system locates them, and the elements that define the default behavior of windows that belong to them. A window class is a set of attributes that the system uses as a template to create a window. SetClassWord Replaces the 16-bit (WORD) value at the.Application Global Classes An application global class is a window class registered by an executable or DLL that is available to all other modules in the process. For example, your ... If an application requires more than 40 bytes, it should allocate its own memory and store a pointer to the memory in the extra class memory. The SetClassWord and.GetClassWord function (winuser.h) Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs. ...um supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other.AllowSetForegroundWindow Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. GetClassInfoA Retrieves information about a window class. (ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the."
1044,GetCurrencyFormatA,"Microsoft Build · May 19 – 22, 2025GetCurrencyFormatA function (winnls.h) Formats a number string as a currency string for a locale specified by identifier. Note  For interoperability reasons, the application should prefer the GetCurrencyFormatEx function to GetCurrencyFormat because Microsoft is migrating toward the use of locale names instead of locale identifiers for new.(GetCPInfoExA) GetCPInfoExW Retrieves informatio... (GetCPInfoExW) GetCurrencyFormatA Formats a number string as a currency string for a locale specified by identifier. (ANSI) GetCurrencyFormatEx Formats a number string as a currency string for a locale specified by name.Note  The application should call this function in preference to.(GetCPInfoExA) GetCPInfoExW Retrieves informatio... (GetCPInfoExW) GetCurrencyFormatA Formats a number string as a currency string for a locale specified by identifier. (ANSI) GetCurrencyFormatEx Formats a number string as a currency string for a locale specified by name.Note  The application should call this function in preference to.... LCIDToLocaleName LCMapStringEx LocaleNameToLCID ResolveLocaleName SetThreadLocale CompareString DEPRECATED CompareStringEx CompareStringA DEPRECATED CompareStringEx EnumSystemLocalesA DEPRECATED EnumSystemLocalesEx EnumSystemLocalesW DEPRECATED EnumSystemLocalesEx FindNLSString DEPRECATED FindNLSStringEx GetCPInfo DEPRECATED Use Unicode.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`."
1045,GetViewportExtEx,"Microsoft Build · May 19 – 22, 2025GetViewportExtEx function (wingdi.h) The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context. Syntax Parameters [in] hdc A handle to the device context. [out] lpsize A pointer to a SIZE structure that receives the x- and y-extents, in device units. Requiremen... The.Coordinate Space and Transformation Functions The following functions are used with coordinate spaces and transformations. GetMapM... GetViewportExtEx Retrieves the x-extent and y-extent of the current viewport for the specified device context. GetViewportOrgEx Retrieves the x-coordinates and y-coordinates of the viewport origin for the specified.(GetTextMetricsA) GetTextMetricsW The GetTextMetricsW (Unicode) function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetViewportExtEx The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context. GetViewportOrgEx The GetViewportOrgEx function.Windows GDI Overview of the Windows GDI technology. A... (GetTextMetricsA) GetTextMetricsW The GetTextMetricsW (Unicode) function (wingdi.h) fills the specified buffer with the metrics for the currently selected font. GetViewportExtEx The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device.GetWindowExtEx function (wingdi.h) This function retrieves the x-extent and y-extent of the window for the specified device context. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include.ScaleViewportExtEx function (wingdi.h) The ScaleViewportExtEx function modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors. ... Gdi32.dll See also Coordinate Space and Transformation Functions Coordinate Spaces and Transformations GetViewportExtExThe ScaleViewportExtEx function modifies.SetViewportExtEx function (wingdi.h) The SetViewportExtEx function sets the horizontal and vertical extents of the viewport for a device context by using the specified values. ...ws 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h).Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Window Features This overview discusses features of windows such as window types, states, size, and position. Window Types Overlapped Windows Pop-up Windows Child Windows Positioning Clipping Relationship to Parent Window Messages."
1046,GetBinaryTypeA,"Microsoft Build · May 19 – 22, 2025GetBinaryTypeA function (winbase.h) Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file. Syntax Parameters [in] lpApplicationName The full path of the file whose executable type is to be determined. By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide.(CreateFileMappingNumaA) CreateFileTransac... (ANSI) CreateFileTransactedW Creates or opens a file. (Unicode) GetBinaryTypeA Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file. (ANSI) GetBinaryTypeW Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:."
1047,EndDeferWindowPos,"Microsoft Build · May 19 – 22, 2025EndDeferWindowPos function (winuser.h) Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle. Syntax Parameters [in] hWinPosInfo Type: HDWP A handle to a multiple-window – position structure that contains size and position information for one or more windows. Requirements Requirement Value Minimum.DeferWindowPos function (winuser.h) Updates the specified multiple-window – position structure for the specified window. The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. This structure is returned.DeferWindowPos Updates the specified multiple-window – position structure for the specified window. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. The BeginDeferWindowPos function creates the structure. EndDeferWindowPos Simultaneously updates the.DeferWindowPos fills the multiple-window-position stru... The EndDeferWindowPos function accepts the handle to this structure and repositions the windows by using the information stored in the structure. If the system must increase the size of the multiple-window- position structure beyond the initial size specified by the nNumWindows parameter.Other functions can cause the system to activate a different top-level window, including SetWindowPos, DeferWindowPos, SetWindowPlacement, and DestroyWindow. The SetWindowPos function ... Use the BeginDeferWindowPos, DeferWindowPos, and EndDeferWindowPos functions to simultaneously set the position of a number of windows, including the size,.WM_WINDOWPOSCHANGED message Sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another windo... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.(Unicode) DeferWindowPos Updates the specified multiple-window � position structure for the specified window. (Unicode) DefWindowProcA Calls the default window procedure to provide default processing for any wi... DestroyWindow Destroys the specified window. EndDeferWindowPos Simultaneously updates the position and size of one or more windows in a.WINDOWPOS structure (winuser.h) Contains information about the size and position of a window. SWP_SHOWWIN... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header winuser.h (include Windows.h) See also Conceptual....orTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect, LoadIcon, LoadImage DestroyIcon Menu CreateMenu, CreatePopupMenu, LoadMenu, LoadMenuIndirect DestroyMenu.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h (include Windows.h) See also Reference DefWindowProc EndDeferWindowPos SetWindowPos WINDOWPOS WM_GETMINMAXINFO WM_MOVE WM_SIZE WM_WINDOWPOSCHANGED Conceptual."
1048,SetTextJustification,"Microsoft Build · May 19 – 22, 2025SetTextJustification function (wingdi.h) The SetTextJustification function specifies the amount of space the system should add to the break characters in a string of text. The space is added when an application calls the TextOut or ExtTextOut functions. Syntax Parameters ... SetTextJustification can be used to justify a line that contains multiple.Text-Formatting Attributes An application can use six functions to set the text-formatting attributes for a ... Text Justification Applications can use the GetTextExtentPoint32 and SetTextJustification functions to justify a line of text. Text justification is a common operation in any desktop publishing and in most word processing applications..2.3.5.27 META_SETTEXTJUSTIFICATION Record The META_SETTEXTJUSTIFICATION Record defines the amount of space to add to break characters in a string of justified text. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction BreakCount BreakExtra RecordSize (4 bytes): A 32-bit unsigned integer that defines the.2.3.11.27 EMR_SETTEXTJUSTIFICATION Record The EMR_SETTEXTJUSTIFICATION record specifies the amount of extra space to add to break characters for text justification. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size nBreakExtra nBreakCount Type (4 bytes): An unsigned integer that identifies this record type as.To acc... The SetTextJustification function adds extra space to the break characters in a line of text. You can use the GetTextExtentPoint function to determine the extent of a string, then subtract that extent from the total amount of space the line should occupy, and use the SetTextJustification function to distribute the extra space among the.CDC Class Defines a class of device-context objects. Syntax Members Public Constructors Name Description CDC::CDC Constructs a CDC object. CDC::DrawState Displays an image and applies a visual effect to indicate a... CDC::SetTextCharacterExtra Sets the amount of intercharacter spacing. CDC::SetTextColor Sets the text color..Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. SetTextCharacterEx... SetTextColor Sets the text color for a device context. SetTextJustification Specifies the amount of space the system should add to the break.GetTextExtentPoint32W function (wingdi.h) The GetTextExtentPoint32 function computes the width and height of the specified st... The calculated string width takes into account the intercharacter spacing set by the SetTextCharacterExtra function and the justification set by SetTextJustification. When dealing with text displayed on a screen, the.GetTextExtentPoint32A function (wingdi.h) The GetTextExtentPoint32 function computes the width and height of the specified st... The calculated string width takes into account the intercharacter spacing set by the SetTextCharacterExtra function and the justification set by SetTextJustification. When dealing with text displayed on a screen, the.... META_SETPALENTRIES packet META_SETPALENTRIES Record META_SETPIXEL packet META_SETPIXEL Record META_SETPOLYFILLMODE packet META_SETPOLYFILLMODE Record META_SETRELABS packet META_SETRELABS Record META_SETROP2 packet META_SETROP2 Record META_SETSTRETCHBLTMODE packet META_SETSTRETCHBLTMODE Record META_SETTEXTALIGN packet META_SETTEXTALIGN Record."
1049,SetProcessAffinityMask,"Microsoft Build · May 19 – 22, 2025SetProcessAffinityMask function (winbase.h) Sets a processor affinity mask for the threads of the specified process. Syntax Parameters [in] hProcess A handle to the process whose affinity mask is to be set. This handle must have the PROCESS_SET_INFORMATION access right. For more information, see Process Security and Access Rights. [in].Multiple Processors Computers with multiple processors are typically designed for one of two architectures: non-uniform memory access (NUMA) or symmetric multiprocessing (SMP). Use the SetProcessAffinityMask function to specify thread affinity for all threads of the process. To set the thread affini... Computers with multiple processors are.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print NUMA Architecture The traditional model for multiprocessor architecture is symmetric multiprocessor (SMP). After you have determined which processors belong to which nodes, you can optimize your application's perfo... To ensure that all.GetLogicalProcessorInformation Retrieves ... GetProcessAffinityMask Retrieves a process affinity mask for the specified process and the system affinity mask for the system. GetProcessGroupAffinity Retrieves the processor group affinity of the specified process. SetPriorityClass Sets the priority class for the specified process..To ensure that all threads for your process run on the same node, use the SetProcessAffinityMask function with a process affinity mask that specifies processors in the same node. Requirements Requirement Value Minimum supported client Windows Vista, Windows XP Professional x64 Edition, Windows XP with SP2 [desktop apps only] Minimum supported.GetNumaNodeProcessorMaskEx function (systemtopologyapi.h) Retrieves the processor mask for a node regardless of the processor group the node belongs to. Synt... Note that this number is not guaranteed to equal the total number of nodes in the system. To ensure that all threads for your process run on the same node, use the SetProcessAffinityMask.Use the SetProcessAffinityMask Function to set the process to run exclusively on the cores which are reserved for the real-time application Configure a Thread for Real-Time Use the NtSetInformationThread function to set the thread’s ThreadBasePriority to a value between 16 and 31 Use the SetThreadAffinityMask function to set the thread to run.GetProcessAffinityMask function (winbase.h) Retrieves the process affinity mask for the specified process and the system affinity mask for the system. The GetProcessAffinityMask function sets the lpProcessAffinityMask and lpSystemAffinityMask to the process and system processor masks over the process' primary group. Requirements Requirement Value.If the process is running in a single group, it can read and modify its affinity using GetProcessAffinityMask and SetProcessAffinityMask while remaining in the same group; if the process affinity is modified, the new affinity is applied to its threads. Affinity APIs that are not group-aware or operate on a single group implicitly use the primary.Access to the list is synchronized on a multiprocessor system. (RtlQueryDepthSList) SetEnvironmentVariable The SetEnvironmentVariable function (winbase.h) sets the contents of the specified environment variable for the current process. SetProcessAffinityMask Sets a processor affinity mask for the threads of the specified process. SetTapeParameters."
1050,CancelDC,"Microsoft Build · May 19 – 22, 2025CancelDC function (wingdi.h) The CancelDC function cancels any pending operation on the specified device context (DC). Syntax Parameters [in] hdc A handle to the DC. Return value If the function succeeds, the return value is nonzero. Remarks The CancelDC function is used by multithreaded applications to cancel lengthy drawing operations. If thread.Cancellation of Drawing Operations When complex drawing applications perform lengthy graphics operations, they consume valuable system resources. By taking advantage of the system's multitasking features, an application can use threads and the CancelDC function to manage these operations. For example, if the graphics operation performed by thread.Device Context Functions The following functions are used with device contexts. Function Description CancelDC Cancels any pending operation on the specified device context. ChangeDisplaySettings Changes the settings of the default display device to the specified graphics mode. ChangeDisplaySettingsEx Changes the settings of the specified display.AngleArc The AngleArc function draws a line segment and an arc. CancelDC The CancelDC function cancels any pending operation on the specified device context (DC). CFP_FREEPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to free memory. CFP_REALLOCPROC Client-provided callback function, used by.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything drawn.PlayMetaFile function (wingdi.h) The PlayMetaFile fun... To stop this function, an application can call the CancelDC function from another thread to terminate the operation. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target.PlayEnhMetaFile f... To stop this function, an application can call the CancelDC function from another thread to terminate the operation. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h.CDC Class Defines a class of device-context objects. For example, the framework uses these two device contexts to implement a CMetaFileDC object that will send output to a metafile while reading attributes from ... If an application encounters a printing error or a canceled print operation, it must not attempt to terminate the operation by using."
1051,RegisterClassExA,"Microsoft Build · May 19 – 22, 2025RegisterClassExA function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Syntax Parameters [in] unnamedParam1 Type: const WNDCLASSEX* A pointer to a WNDCLASSEX structure. Remarks If you register the window class by using RegisterClassExA, the application tells the system that the.(RegisterClassA) RegisterClassExA Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassExA) RegisterClassExW Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassExW) RegisterClassW Registers a window class for subsequent use.Application Global Classes An applicat... If you register the window class using the ANSI version of RegisterClassEx, RegisterClassExA, the application requests that the system pass text parameters of messages to the windows of the created class using the ANSI character set; if you register the class using the Unicode version of RegisterClassEx,.Hi, I working with Win32 application. I was reading about RegisterClassExA , it is mentioned that this function can fail! and to get more info we should call GetLastError. But when can this function fail? going through web I found out that this function can fail when we give wrong parameters and when the window class name is not unique. To get.Parameters wParam Type: **WPARAM** The BYTE ... If you register the window class using the Unicode version of RegisterClassEx (RegisterClassExW), you typically do not need to use this value. If you register the window class using the ANSI version of RegisterClassEx (RegisterClassExA), this value can be used to create fonts that can correctly.I suggest you could try to use RegisterClassExA function . 1,You could try to use DECLARE_WND_CLASS and RegisterClassEx API to register class by name and custom control reference in dialog template to instantiate control through class name. 2,You should implement window class.Inheriting from CWindowImpl, and create control manually, duing.RegisterClassExW function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Remarks If you register the window class by using RegisterClassExA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI.The function searches the entire screen, not just the calling application's client area. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. You can use this function to specify the content,."
1052,LocalFileTimeToFileTime,"Microsoft Build · May 19 – 22, 2025LocalFileTimeToFileTime function (fileapi.h) Converts a local file time to a file time based on the Coordinated Universal Time (UTC). Syntax Parameters [in] lpLocalFileTime A pointer to a FILETIME structure that specifies the local file time to be converted into a UTC-based file time. [out] lpFileTime A pointer to a FILETIME structure to receive.FileTimeToLocalFileTime function (fileapi.h) Converts a file time to a local file time. Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the UTC-based file time to be converted into a local file time. [out] lpLocalFileTime A pointer to a FILETIME structure to receive the converted local file time. Remarks To account.RtlLocalTimeToSystemTime function (winternl.h) [RtlLocalTimeToSystemTime is available for use in Windows 2000 and Windows XP. Applications should use the LocalFileTimeToFileTime function.]. Converts the specified local time to system time. Syntax Parameters [in] LocalTime A pointer to a LARGE_INTEGER structure that specifies the local time. [out].Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. (DeleteVolumeMountPointW) FileTimeToLocalFileTime Converts a file time to a local file time. FindClose Closes a file search handle opened by the FindFirstFile,.FileTimeToLocalFileTime Converts a UTC file time to a local file time. FileTimeToLocalFileTime Converts a UTC file time to a local file time. GetSystemTime... LocalFileTimeToFileTime Converts a local file time to a file time based on UTC. SetFileTime Sets the date and time that the specified file or directory was created, last accessed, or last.... Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.d. GetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240.."
1053,GetMenuContextHelpId,"Microsoft Build · May 19 – 22, 2025GetMenuContextHelpId function (winuser.h) Retrieves the Help context identifier associated with the specified menu. Syntax Parameters unnamedParam1 Type: HMENU A handle to the menu for which the Help context identifier is to be retrieved. Return value Type: DWORD Returns the Help context identifier if the menu has one, or zero otherwise. ...y].The paren... You use the SetWindowContextHelpId function to assign a context identifier to a window or control and the SetMenuContextHelpId function to assign a context identifier to a menu. You can retrieve the context identifier for a window or menu by using the GetWindowContextHelpId or GetMenuContextHelpId function. In an application, you can.MENUINFO structure (winuser.h) Contains information about a menu. This is the same value used in the GetMenuContextHelpId and SetMenuContextHelpId functions. dwMenuData Type: ULONG_PTR An application-defined value. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. ... CMenu::GetMenuContextHelpId Retrieves the help context ID associated with the menu. CMenu::GetMenuInfo Retrieves information on a specific menu. CMenu::GetMenuContextHelpId Retrieves the context help ID.SetMenuContextHelpId function (winuser.h) Associates a Help context identifier with a menu. Syntax Parameters unnamedParam1 Type: HMENU ... Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h Library.... GetMenuContextHelpId Retrieves the Help context identifier associated with the specified menu. This identifier allows an application to group its associated processes and windows under a single taskbar button. SetMenuContextHelpId Associates a Help context identifier with a menu. SetWindowContextHelpId Associates a Help context identifier with.Used by IThumbnailSetti... WTS_FLAGS Values used by IThumbnailCache::GetThumbnail to specify options for the extraction and display of the thumbnail image. Functions _CancelPendingNavigationAsync Deprecated. Gets the ID of the last toolbar or view that had focus. _GetBorderDWHelper Deprecated. A helper method for the implementation of GetBorderDW..(CreateIconFromResource) CreateIconFromResourceEx Creates an icon or cursor from resource bits describing the icon. (CreateIconFromResourceEx) CreateIconIndirect Creates an icon or cursor from an ICONINFO structure. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem,."
1054,IsRectEmpty,"Microsoft Build · May 19 – 22, 2025IsRectEmpty function (winuser.h) The IsRectEmpty function determines whether the specified rectangle is empty. An empty rectangle is one that has no area; that is, the coordinate of the right side is less than or equal to the coordinate of the left side, or the coordinate of the bottom side is less than or equal to the coordinate of the top side..Rectangle Functions The following functions are used with rectangles. Function ... IntersectRect Calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. IsRectEmpty Determines whether the specified rectangle is empty. OffsetRect Moves the specified rectangle by.Rectangle Operations The SetRect function creates a rectangle, the CopyRect function makes a copy of a given rectangle, and the SetRectEmpty ... An empty rectangle is any rectangle that has zero width, zero height, or both. The IsRectEmpty function determines whether a given rectangle is empty. The EqualRect function determines whether two.CRect::IsRectEmpty Determines whether CRect is empty. Note This class is derived from ... Example CRect::IsRectEmpty Determines whether CRect is empty. Remarks Differs from IsRectEmpty, which determines whether the rectangle is empty. Note The following CRect member functions require normalized rectangles in order to work properly: Height, Width,.Examples For ... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also EqualRect IsRectEmpty POINT RECT Rectangle Functions.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also IsRectEmpty PtInRect RECT Rectangle Functions Rectangles Overview. The.KS_ANALOGVIDEOINFO structure (ksmedia.h) The KS_ANALOGVIDEOINFO structure describes an analog video stream. If the sink filter does not support image extraction, and the rectangle is not empty, then it rejects the connection. A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and set IsRectEmpty to later check.KS_VIDEOINFOHEADER structure (ksmedia.h) The KS_VIDEOINFOHEADER structure describes the bitmap and color information for a video stream. A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and set IsRectEmpty to later check the rectangle). The rcTarget member specifies the destination rectangle for t... The.However, if the sink filter does not check for the clipping rectangle on connection, the sink filter simply renders all of the video, e... Ideally, a sink filter checks rcSource and if the sink filter does not support image extraction, and the rectangle is not empty, then it rejects the connection. A filter should use the Win32 function.KS_VIDEOINFO structure (ksmedia.h) The KS_VIDEOINFO structure describes the bitmap and color information for a video stream. Ideally, a sink fi... A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and IsRectEmpty to later check the rectangle). The rcTarget member specifies the destination rectangle for the."
1055,AppendMenuA,"Microsoft Build · May 19 – 22, 2025AppendMenuA function (winuser.h) Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. Syntax Parameters [in] hMenu Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed..To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (ANSI) AppendMenuW Appends a new item to.There are four types of anima... The function searches the entire screen, not. AppendMenuA Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item. (ANSI) AppendMenuW Appends a new item to the end of the specified....bar, MF_POPUP, NULL, &quot;File&quot;);| You passed NULL instead of a valid handle as the uIdNewItem parFrom nf-winuser-appendmenua uIDNewItem Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu.| In a Windows desktop application a handler was added for.For example, AppendMenuWrapW calls AppendMenuA, which is the ANSI version of AppendMenu. For example, AppendMenuWrapW forwards to AppendMenuW, which is the Unicode version of AppendMenu. Function Ordinal Forwards To DLL Remarks AppendMenuWrapW 36 AppendMenu USER32 (a), (f), (Menu) CallWindowProcWrapW 37 CallWindowProc USER32 (i) CharLowerWrapW 38."
1056,SystemTimeToTzSpecificLocalTime,"Microsoft Build · May 19 – 22, 2025SystemTimeToTzSpecificLocalTime function (timezoneapi.h) Converts a time in Coordinated Universal Time (UTC) to a specified time zone's corresponding local time. Syntax Parameters [in, optional] lpTimeZoneInformation A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone of interest. ...e to be convertedThe function converts.SystemTimeToTzSpecificLocalTime Converts a UTC time to a specified time zone's corresponding local time. SystemTimeToTzSpecificLocalTime Converts a UTC time to a specified time zone's corresponding local time. SystemTimeToTzSpecificLocalTimeEx Converts a UTC time with dynamic daylight saving time settings to a specified time zone's corresponding.timezoneapi.h header This header is used by System Services. System time is based on ... SystemTimeToTzSpecificLocalTime Converts a time in Coordinated Universal Time (UTC) to a specified time zone's corresponding local time. SystemTimeToTzSpecificLocalTimeEx Converts a time in Coordinated Universal Time (UTC) with dynamic daylight saving time.TzSpecificLocalTimeToSystemTime function (timezoneapi.h) Converts a local time to a time in Coordinated Universal Time (UTC). Syntax Parameters [in, optional] lpTimeZoneInformation A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone for the time specified in lpLocalTime. Requirements Requirement Value Minimum supported.GetLocalTime converts the system time to a local time based on the current time-zone settings and copies the result to ... To convert a UTC-based time to a local time, use the SystemTimeToTzSpecificLocalTime function. To convert a local time to a UTC-based time, use the TzSpecificLocalTimeToSystemTime function. While the system uses UTC-based time.The following is a list of the functions that this warning covers: FileTimeToSystemTime SystemTimeToFileTime SystemTimeToTzSpecificLocalTime SystemTimeToTzSpecificLocalTimeEx TzSpecificLocalTimeToSystemTime TzSpecificLocalTimeToSystemTimeEx RtlLocalTimeToSystemTime RtlTimeToSecondsSince1970 Code analysis name:.Remarks To account for daylight saving time when converting a file time to a local time, use the following sequence of functions in place of using FileTimeToLocalFileTime: FileTimeToSystemTime SystemTimeToTzSpecificLocalTime SystemTimeToFileTime Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum.Retrieving the Last-Write Time The following example uses the GetFileTime function to retrieve the last-write time for a file. It converts the... Related topics FileTimeToSystemTime SystemTimeToTzSpecificLocalTime. The following example uses the GetFileTime function to retrieve the last-write time for a file. It converts the time to local time.... To account for daylight saving time when converting a file time to a local time, use the following sequence of functions instead of using FileTimeToLocalFileTime: FileTimeToSystemTime SystemTimeToTzSpecificLocalTime SystemTimeToFileTime File Times and CDFS The date and time stamps of files that are located on or originate from media using.Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFinalPathNameByHandleW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. LocalFileTimeToFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299.."
1057,CoResumeClassObjects,"Microsoft Build · May 19 – 22, 2025CoResumeClassObjects function (combaseapi.h) Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. Syntax Return value This function returns S_OK to indicate that the CLSID was retrieved successfully. Remarks Servers that can register.CoRegisterActivationFilter Registers a process-wide filter to process... CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoResumeClassObjects Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those.Out-of-Process Server Implementation Helpers Four helper functions that can be called by out-of-process servers are available to simplify the job of writing server code. The functions are as follows: CoAddRefServerProcess CoReleaseServerProcess CoSuspendClassObjects CoResumeClassObjects To shut down properly, a COM server must keep track of how.CoReleaseMarshalData Destroys a previously marshaled data packet. CoResumeClassObjects Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. CoRevokeClassObject Informs OLE that a class object, previously registered with the.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and that are implemented by all Windows devices. For convenience, in the Microsoft Windows Software Development Kit (SDK).CoRegisterClassObject Registers an EXE class object with OLE so other applications can connect to it. CoResumeClassObjects Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects. CoRevokeClassObject Informs OLE that a class object,.REGCLS enumeration (combaseapi.h) Controls the type of connections to a class object. This value is commonly used for single document interface (SDI) applications. Specifying this value does not affect the responsibility of the object application to call CoRevokeClassObject; it must always call CoRevokeClassObject when it is finished with an.RegistrationConnectionType Enum Definition Namespace: System.Runtime.InteropServices Assembly:mscorlib.dll Defines the types of connections to a class object. Suspended 4 Suspends registration and activation requests for the specified CLSID until there is a call to CoResumeClassObjects. For more information about CoRegisterClassObject and the."
1058,EnumFontFamiliesA,"Microsoft Build · May 19 – 22, 2025EnumFontFamiliesA function (wingdi.h) The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. Note  This function is provided only for compatibility with 16-bit versions of Windows. Remarks For each font having the typeface name specified by the lpszFamily parameter, the.EnumEnhMetaFile The EnumEnhMetaFile function enumerates the records within an enhanced-format metafile by retrieving each record and passing it to the specified callback function. EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (ANSI) EnumFontFamiliesExA The.EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (ANSI) EnumFontFamiliesExA The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. (ANSI) EnumFontFamiliesExW The."
1059,SetPixel,"Microsoft Build · May 19 – 22, 2025SetPixel function (wingdi.h) The SetPixel function sets the pixel at the specified coordinates to the specified color. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical units, of the point to be set. [in] y The y-coordinate, in logical units, of the point to be set. [in] color The color to be used to.Bitmap::SetPixel method (gdiplusheaders.h) The Bitmap::SetPixel method sets the color of a specified pixel in this bitmap. Syntax Parameters [in] x Type: INT int that specifies the x-coordinate (column) of the pixel. [in] y Type: INT int that specifies the y-coordinate (row) of the pixel. [in, ref] color Type: const Color Reference to a Color.Parameters x Int32 The x-coordinate of the pixel to set. y Int32 The y-coordinate of the pixel to set. color Color A Color structure that represents the color to assign to the specified pixel. Examples The following code example is designed for use with Windows Forms, and it requires PaintEventArgs e, which is a parameter of the Paint event.SKBitmap.SetPixel(Int32, Int32, SKColor) Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Sets the color of the pixel at a specified location. Parameters x Int32 The x-coordinate. y Int32 The y-coordinate. color SKColor The color to set. Remarks This method will set the color of the pixel on the bitmap to the specified color.Image.setPixel(Int32, Int32, Int32) Method Definition Namespace: Dynamics.AX.Application Assembly:Microsoft.Dynamics.AX.Xpp.Support.dll Sets the color for the pixel that is specified by the x and y parameters. Parameters _x Int32 The ARGB value of the color that you want to use. _y Int32 The ARGB value of the color that you want to use. _pixel.Bitmap.SetPixels(Int32[], Int32, Int32, Int32, Int32, Int32, Int32) Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Replace pixels in the bitmap with the colors in the array. Parameters pixels Int32[] The colors to write to the bitmap offset Int32 The index of the first color to read from pixels[] stride Int32 The number of.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-block transfer. SetDIBits Sets the pixels in a bitmap using color data from a DIB. SetDIBitsToDevice Sets the pixels in a rectangle using color data from a.Bitmap.SetPixel(Int32, Int32, Color) Method Definition Namespace: Android.Graphics Assembly:Mono.Android.dll Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate. Parameters x Int32 The x coordinate of the pixel to replace (0...width-1) y Int32 The y coordinate of the pixel to replace (0...height-1) color Color.Using a Color Matrix to Set Alpha Values in Images The Bitmap class (which inherits from the Image class) and the ImageAttributes class provide functionality for getting and setting pixel values. You can use the ImageAttributes class to modify the alpha values for an entire image, or you can call the Bitmap::SetPixel method of the Bitmap class to.SKBitmap.SetPixels Method Definition Namespace: SkiaSharp Assembly:SkiaSharp.dll Overloads SetPixels(IntPtr) Replaces the current pixel address for the bitmap. SetPixels(IntPtr, SKColorTable) Obsolete. Developers should not use this obsolete method. SetPixels(IntPtr) Replaces the current pixel address for the bitmap. Parameters pixels IntPtr The."
1060,UnlockFileEx,"Microsoft Build · May 19 – 22, 2025UnlockFileEx function (fileapi.h) Unlocks a region in the specified file. This function can operate either synchronously or asynchronously. Syntax Parameters [in] hFile A handle to the file. The handle must have been created with either the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights..SetFileCompletionNotificationModes Sets the notification modes for a file handle, allowing you to specify how completion notifications work for the. SetFilePointerEx Moves the file pointer of the specified file. UnlockFile Unlocks a region in an open file. UnlockFileEx Unlocks a region in the specified file. WriteFileEx Writes data to the.Locking and Unlocking Byte Ranges in Files Although the system allows more than one application to open a file and write to it, applications must not write over each other's work. The ... An application unlocks the byte range by using the UnlockFile or UnlockFileEx function and should unlock all locked areas before closing a file. Example code.UnlockFile function (fileapi.h) Unlocks a region in an open file. For an alternate way to specify the region, use the UnlockFileEx function. Syntax Parameters [in] hFile A handle to the file that contains a region locked with LockFile. The file handle must have been created with either the GENERIC_READ or GENERIC_WRITE acc... In Windows 8 and.This function can operate either synchronously or asynchronously and can request either an exclusive or a shared lock. If the same range is locked with an exclusive and a shared lock, two unlock operations are necessary to unlock the region; the first unlock operation unlocks the exclusive lock, the second unlock operation unlocks the shared lock..For more information, see the Remarks section. UnlockFile Unlocks a region in an open file. UnlockFileEx Unlocks a region in the specified file. This function can operate either synchronously or asynchronously. WriteFile Writes data to the specified file or input/output (I/O) device. CREATEFILE3_EXTENDED_PARAMETERS DISK_SPACE_INFOR....Using File Management The following samples use the file management functions. In this section Topic Description Adding Users to an Encrypted File Example code that shows how to add a new user to an existing encrypted file by using the AddUsersToEncr... Locking and Unlocking Byte Ranges in Files Example code that shows byte range locking and.GetFileSizeEx Introduced into api-... LockFileEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFilePointerEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. UnlockFileEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. ReadFileEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393..Use this operation to unlock all opportunistic locks on the file but keep the file open. FSCTL_OPLOCK_BREAK_ACKNOWLEDGE Responds to notification ... GET_FILEEX_INFO_LEVELS Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data. Functions."
1061,CoTaskMemAlloc,"Microsoft Build · May 19 – 22, 2025CoTaskMemAlloc function (combaseapi.h) Allocates a block of task memory in the same way that IMalloc::Alloc does. Syntax Parameters [in] cb The size of the memory block to be allocated, in bytes. Return value If the function succeeds, it returns the allocated memory block. Remarks CoTaskMemAlloc uses the default allocator to allocate a memory.Memory Allocation in COM Sometimes a method allocates a memory buffer on the heap and returns the address of the buffer to the caller. COM defines a pair of... The CoTaskMemAlloc function allocates a block of memory. The CoTaskMemFree function frees a block of memory that was allocated with CoTaskMemAlloc. We saw an example of this pattern in the.Whenever ownership of an allocated chun... A call to the API function CoGetMalloc provides a pointer to the OLE allocator, which is an implementation of the IMalloc interface. However, it is more efficient to call the helper functions CoTaskMemAlloc, CoTaskMemRealloc, and CoTaskMemFree, which wrap getting a pointer to the task memory allocator,.NdrOleAllocate function (rpcndr.h) The NdrOleAllocate function is used by RPC to allocate memory for an object interface. This function is a wrapper for the CoTaskMemAlloc function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps.Comparing Memory Allocation Methods The following is a brief comparison of the various memory allocation methods: CoTaskMemAlloc GlobalAlloc HeapAlloc LocalAlloc malloc new VirtualAlloc Although the GlobalAlloc, LocalAlloc, and HeapAlloc functions ultimately allocate memory from the same heap, each provides a slightly different set of.SHStrDupW function (shlwapi.h) Makes a copy of a string in newly allocated memory. SHStrDup allocates memory for this string with CoTaskMemAlloc. Remarks This functio... This function uses CoTaskMemAlloc to allocate memory for the copied string. You must free this memory with CoTaskMemFree when it is no longer needed. Note The shlwapi.h header.SHStrDupA function (shlwapi.h) Makes a copy of a string in newly allocated memory. SHStrDup allocates memory for this string with CoTaskMemAlloc. Remarks This functio... This function uses CoTaskMemAlloc to allocate memory for the copied string. You must free this memory with CoTaskMemFree when it is no longer needed. Note The shlwapi.h header.SHGetMalloc function (shlobj_core.h) [SHGetMalloc is available through Windows Vista and Windows Se... Remarks SHGetMalloc was introduced in Windows 95 and Microsoft Windows NT 4.0, but as of Windows 2000 it is no longer necessary. In its place, programs can call the equivalent (and easier to use) CoTaskMemAlloc and CoTaskMemFree. If you find an.SHAlloc function (shlobj_core.h) [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altere... Use CoTaskMemAlloc instead.]. Allocates memory from the Shell's heap. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.APPLETIDLIST structure (imepad.h) Specifies an IImePadApplet IID list. Syntax Members count The number of the IID's implemented in this applet. pIIDList The IID list. This must be allocated with CoTaskMemAlloc. Requirements Requirement Value Header imepad.h. Specifies an IImePadApplet IID list.. /windows/win32/api/imepad/ns-imepad-appletidlist."
1062,StgCreateDocfile,"Microsoft Build · May 19 – 22, 2025StgCreateDocfile function (coml2api.h) The StgCreateDocfile function creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface. Note  Applications should use the new function, StgCreateStorageEx, instead of StgCreateDocfile, to take advantage of enhanced Structured Storage features..coml2api.h header This header is used by Structured Storage. ReadClassStm Reads the CLSID previously written to a stream object with the WriteClassStm function. StgCreateDocfile Creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface. StgCreateDocfileOnILockBytes Creates and opens a.Save Method - CPapFile When CPapFile is initialized, it can be used to save the current drawing data held in the COPaper object. ...od (PAPF This example is the CPapFile Save methodThe COM standard StgCreateDocfile service function is called to create the compound file in which the drawing data will be saved. When StoClien is compiled for ANSI.... sections: CreateILockBytesOnHGlobal CreateStreamOnHGlobal FmtIdToPropStgName FreePropVariantArray GetConvertStg GetHGlobalFromILockBytes GetHGlobalFromStream OleConvertIStorageToOLESTREAM OleConvertIStorageToOLESTREAMEx OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx PropStgNameToFmtId PropVariantClear PropVariantCopy.FmtIdToPropStgName Intr... GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. ReadClassStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgCreateDocfile Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. StgCreateDocfileOnILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240..IDir... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header objidl.h See also IStorage StgCreateDocfile. The IDirectWriterLock interface enables a single writer to obtain exclusive write.STGM Constants The STGM constants are flags that indicate conditions for creating and deleting the object and access modes for the object. The STGM constants are included in the IStorage, IStream, and IPropertySetStorage interfaces and in the StgCreateDocfile, StgCreateStorageEx, StgCreateDocfileOnILockBytes, StgOpenStorage, and StgOpenStorageEx.IRootStorage interface (objidl.h) The IRoo... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server Windows 2000 Server [desktop apps | UWP apps] Target Platform Windows Header objidl.h See also IStorage StgCreateDocfile. The IRootStorage interface contains a single.IStream - Compound File Implementation The IStream interface supports reading and writing data to stream objects. In a structured storage object, stre... To create a simple stream based on global memory, get an IStream pointer by calling the API function CreateStreamOnHGlobal. To get an IStream pointer within a compound file object, call either.StgCreateDocfileOnILockBytes function (coml2api.h) The StgCreateDocfileOnILockBytes function creates and opens a new compound file storage object on top of a byte-array object provided by the caller. Remarks The StgCreateDocfileOnILockBytes function creates a storage object on top of a byte array object using the COM-provided, compound-file."
1063,PolyBezier,"Microsoft Build · May 19 – 22, 2025PolyBezier function (wingdi.h) The PolyBezier function draws one or more Bézier curves. Syntax Parameters [in] hdc A handle to a device context. [in] apt A pointer to an array of POINT structures that contain the endpoints and control points of the curve(s), in logical units. [in] cpt The number of points in the lppt array. ...es to b because.The metafile can be played any numbe... CDC::PlgBlt Performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the given device context. CDC::PolyBezier Draws one or more Bzier splines. The current position isn't used or updated. CDC::PolyBezierTo Draws one or.PolyBezierTo function (wingdi.h) The PolyBezierTo function draws one or more Bézier curves. Remarks This function draws cubic Bézier curves by using the control points specified by the lppt parameter. PolyBezierTo moves the current position to the ending point of the last Bézier curve. Requirements Requirement Value Minimum supported client.PlgBlt The PlgBlt function performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in th... PolyBezier The PolyBezier function draws one or more Bézier curves. PolyBezierTo The PolyBezierTo function draws one or more Bézier curves. PolyDraw The PolyDraw.MoveToEx Updates the current position to the specified point and optionally returns the previous position. PolyBezier Draws one or more Bézier curves. PolyBezierTo Draws one or more Bézier curves. PolyDraw Draws a set of line segments and Bézier curves. Polyline Draws a series of line segments by connecting the poi... SetArcDirection Sets the.Cubic Bézier Format C (x1 y1 x2 y2 x y)+ Absolute c (x1 y1 x2 y2 x y)+ Relative Draws a cubic Bézier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve. Multiple sets of coordinates may be specified to draw a polybézier. ...t point becomes.EMRPOLYLINE16 structure (wingdi.h) The EMRPOLYLINE16, EMRPOLYBEZIER16, EMRPOLYGON16, EMRPOLYBEZIERTO16, and EMRPOLYLINETO16 structures contain members for the Polyline, PolyBezier, Polygon, PolyBezierTo, and PolylineTo enhanced metafile records. The EMRPOLYLINE16, EMRPOLYBEZIER16, EMRPOLYGON16, EMRPOLYBEZIERTO16, and EMRPOLYLINETO16 structures.2.2.2.4.10.1.23 PolyBezierOrder The PolyBezierOrder packet contains one or more Bezier curves. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 pControlFlags OrderType (optional) FieldBytes Bounds (13 bytes, optional) .... BackMode BackColor (optional). Two bytes for each point follow: one ... The PolyBezierOrder packet contains.EMRPOLYLINE structure (wingdi.h) The EMRPOLYLINE, EMRPOLYBEZIER, EMRPOLYGON, EMRPOLYBEZIERTO, and EMRPOLYLINETO structures contain members for the Polyline, PolyBezier, Polygon, PolyBezierTo, and PolylineTo enhanced metafile records. Syntax Members emr ... The EMRPOLYLINE, EMRPOLYBEZIER, EMRPOLYGON, EMRPOLYBEZIERTO, and EMRPOLYLINETO structures....T = 0x00000046, EMR_FILLRGN = 0x00000047, EMR_FRAMERGN = 0x00000048, EMR_INVERTRGN = 0x00000049, EMR_PAINTRGN = 0x0000004A, EMR_EXTSELECTCLIPRGN = 0x0000004B, EMR_BITBLT = 0x0000004C, EMR_STRETCHBLT = 0x0000004D, EMR_MASKBLT = 0x0000004E, EMR_PLGBLT = 0x0000004F, EMR_SETDIBITSTODEVICE = 0x00000050, EMR_STRETCHDIBITS = 0x00000051,."
1064,BeginUpdateResourceA,"Microsoft Build · May 19 – 22, 2025BeginUpdateResourceA function (winbase.h) Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. Syntax Parameters [in] pFileName Type: LPCTSTR The binary file in which to update resources. An application must be able to obtain write-access to this file; the file referenced by.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h winver.h For programming guidance for this technology, see: Menus and Other Resources Functions Ap... (Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary.A... BackupWrite Restore a file or directory that was backed up using BackupRead. BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace."
1065,Pie,"Microsoft Build · May 19 – 22, 2025About Pies A pie is a region bounded by the intersection of an ellipse curve and two radials. The following illustration shows a pie drawn by using the Pie function. When calling Pie, an application supplies the coordinates of the upper-left and lower-right corners of the ellipse's bounding rectangle, as well as the coordinates of two points.Pie function (wingdi.h) The Pie function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by using the current pen and filled by using the current brush. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical coordinates, of the upper-left corner of.Display percentage values on a pie chart in a Report Builder paginated report Applies to: Microsoft Report Builder (SSRS) Power BI Report Builder Report Designer in SQL Server Data Tools Report Builder lets you create pie charts and other visualizations to represent your data in a report. Display percentage values as labels on a pie chart From the.2.4.194 Pie The Pie record specifies that the chart group is a pie chart group or a doughnut chart group, and specifies the chart group attributes. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 anStart pcDonut A B reserved anStart (2 bytes):  An unsigned integer that specifies the starting angle of the first data point,.Display percentage values on pie charts in Power BI paginated report (Power BI Report Builder) APPLIES TO: Power BI Report Builder Power BI Desktop In Power BI paginated reports, by default the legend shows categories. You may also want percentages ... The Tutorial: Add a Pie Chart to Your Report (Power BI Report Builder) walks you through adding.Pie charts in Power BI paginated reports (Power BI Report Builder) APPLIES TO: Power BI Report Builder Power BI Desktop Pie charts and doughnut charts display data as a proportion of the whole in a paginated report. Pie charts are most commonly used to make comparisons between groups. Pie and doughnut charts, along with pyramid and funnel charts,....mentFormat.OpenXml v2.9.1 Package:DocumentFormat.OpenXml v3.0.0 Package:DocumentFormat.OpenXml Pie of Pie or Bar of Pie Type Inheritance Enum OfPieValues Inheritance ValueType OfPieValues Fields Name Value Description Pie 0 PieEquality(OfPieValues, OfPieValues) Equals(Object) Equals(OfPieValues) GetHashCode() IEnumValue.IsValid.Pie charts in a paginated report (Report Builder) Applies to: Microsoft Report Builder (SSRS) Power BI Report Builder Report Designer in SQL Server Data Tools Pie charts and doughnut charts display data as a proportion of the whole in a paginated report. Pie charts are most commonly used to make comparisons between groups. Pie and doughnut charts,.Track progress with status and trend query-based charts Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019 You can quickly view the status of work in progress by charting the resu... Good examples of pie charts are: Active Bugs Status, group by State User Story Status, group by State User Story Progress, group by.3.7.7 Pie Chart Sheet: Pie The next record in this example, Pie, specifies that this is a pie chart group, and specifies attributes of the chart group. ... 0x0000 0002 USHORT - pcDonut 0x0000 1 bit USHORT - fHasShadow 0x0 1 bit USHORT - fShowLdrLines 0x1 14 bits USHORT - reserved 0x0000 Figure 71: S of Pie anStart: 0x0000 specifies that the."
1066,SetCommState,"Microsoft Build · May 19 – 22, 2025SetCommState function (winbase.h) Configures a communications device according to the specifications in a device-control block (a DCB structure). The function reinitializes all hardware and control settings, but it does not empty output or input queues. Syntax Parameters [in] hFile A handle to the communications device. The CreateFile function.To determine the initial configuration of a serial communications resource, a process calls the GetCommState function, which fills in a serial port DCB structure with the current configuration settings. The SetCommState function reconfigures the communications resource, but it does not affect the internal output and input buffers of the specified.Communications Functions The following functions are used with communications resources. SetCommConfig Sets the current configuration of a communications device. SetComm... SetCommState Configures a communications device according to the specifications in a device-control block. SetCommTimeouts Sets the time-out parameters for all read and write.GetCommProperties function (winbase.h) Retrieves information about the communications properties for a specified communications device. This information can be used in subsequent calls to the SetCommState, SetCommTimeouts, or SetupComm function to configure the communications device. Requirements Requirement Value Minimum supported client.GetCommMask function (winbase.h) Retrieves the value of the event mask for a specified communications device. ...port by u SetCommState functionRequirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h.SetupComm function (winbase.h) Initializes the communications parameters for a specified communications device. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include Windows.h) Library.Serial Comm Use P/Invoke to Develop a .NET Base Class Library for Serial Device Communications John Hind Code download available at:NetSerialComm.exe(89 KB) This article assumes you're familiar with C# and RS232 communications Level of Difficulty123 SUMMARY Out-of-the-box, the only way of coding RS232 serial communications applications in the .NET.The event character is specified in the device's DCB structure, which is applied to a serial port by using the SetCommState function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header winbase.h (include.Communications Events A process can monitor a set of events that occur in a communications resource. A process can monitor events on a given communications resource by using the SetCommMask function to create an event mask. The event character is specified in the device's DCB structure, which is applied to a serial port by using the SetCommState.DCB structure (winbase.h) Defines the control setting for a serial communications device. The use of 5 data bits with 2 stop bits is an invalid combination, as is 6,... Requirements Requirement Value Minimum supported client Windows XP Minimum supported server Windows Server 2003 Header winbase.h (include Windows.h) See also BuildCommDCB."
1067,CreateNamedPipeA,"Microsoft Build · May 19 – 22, 2025CreateNamedPipeA function (winbase.h) Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance of an existing named pipe. Syntax Parameters [in].(Unicode) CallNamedPipeA Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. (ANSI) CreateMailslotW Creates a mailslot with the speci... (Unicode) CreateNamedPipeA The CreateNamedPipeA (ANSI) function (winbase.h) creates an instance of a named pipe.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Named Pipe Operations The first time the pipe server calls the CreateNamedPipe function, it uses the nMaxInstances parameter to specify the maximum number of instances of the pipe that can exist simultaneously. The server can call.Using works for me.| The documentation at https://learn.microsoft.com/en-us/wi... They also grant read access to members of the Everyone group and the anonymous account.&quot; So passing NULL as the lpSecurityAttributes parameter to CreateNamedPipe will create the pipe with the default security descriptor as described above. If an impersonating.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those versions here as ""Windows"", calling out any exceptions where necessary. Tip For important b... This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
1068,InvalidateRgn,"Microsoft Build · May 19 – 22, 2025InvalidateRgn function (winuser.h) The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window. The invalidated region, along with all other areas in the update region, is marked for painting when the next WM_PAINT message occurs. Remarks Invalidated areas accumulate in.Invalidating and Validating the Update Region An application invalidates a portion of a window and sets the update region by using the InvalidateRect or InvalidateRgn function. These functions add the specified rectangle or region (in client coordinates) to the update region, combining the rectangle or reg... An application invalidates a portion.Invalidating the Client Area The system is not the only source of WM_PAINT messages. The InvalidateRect or InvalidateRgn function can indirectly generate WM_PAINT messages for your windows. These functions mark all or part of a client area as invalid (that must be... The InvalidateRect or InvalidateRgn function can indirectly generate WM\_PAINT.IOleInPlaceSiteWindowless::InvalidateRgn method (ocidl.h) Enables an object to invalidate a specified region of its in-place image on the screen. Syntax Parameters [in] hRGN The region to invalidate, in client coordinates of the containing window. If this parameter is NULL, the object's full extent is invalidated. [in] fErase Specifies whether the....op Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13 Enables an object to invalidate a specified region of its in-place image on the screenParameters hRGN [in] Region to invalidate, in client coordinates of the containing window. If this parameter is NULL,.COleControl::InternalGetText Retrieves the stock Caption or T... COleControl::InternalSetReadyState Sets the control's readiness state and fires the ready-state-change event. COleControl::InvalidateControl Invalidates an area of the displayed control, causing it to be redrawn. COleControl::InvalidateRgn Invalidates the container window's client.Painting and Drawing Functions The following functions are used with painting and drawing. Function Description BeginPaint Prepares a win... InvalidateRect Adds a rectangle to a window's update region. InvalidateRgn Invalidates the client area within a region. LockWindowUpdate Disables or enables drawing in a window. WindowFromDC Returns a handle.This calls OnDraw, what repaint the ... So, the caret moved, but the highlighting of the pair of the bracket remains: will be a lot of highlighted characters.| In my opinion, when you want to modify something in your view, you should call InvalidateRect or InvalidateRgn for all of changed areas, store the new data, and let the OnPaint or OnDraw.The update region is set by the InvalidateRect or InvalidateRgn function and by the system after sizing, moving, creating, scrolling, or any other operation that affects the client area. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-draw-l1-1-0 (introduced in Windows 8) See also."
1069,UpdateResourceW,"Microsoft Build · May 19 – 22, 2025UpdateResourceW function (winbase.h) Adds, deletes, or replaces a resource in a portable executable (PE) file. There are some restrictions on resource updates in files that contain Resource Configuration (RC Config) data: language-neutral (LN) files and language-specific resource (.mui) files. Syntax Parameters [in] hUpdate Type: HANDLE A module.Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. BackupWrite Restore a file or directory that was backed up using BackupRead. BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI).(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. (Unicode) BeginUpdateResourceA Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module. (ANSI) BeginUpdateResourceW Retrieves a handle that can be used by the."
1070,GetLogicalDriveStringsW,"Microsoft Build · May 19 – 22, 2025GetLogicalDriveStringsW function (fileapi.h) Fills a buffer with strings that specify valid drives in the system. Syntax Parameters [in] nBufferLength The maximum size of the buffer pointed to by lpBuffer, in TCHARs. Remarks Each string in the buffer may be used wherever a root directory is... This function returns a concatenation of the drives in.(ANSI) GetFullPathNameW Retrieves the full path and file name of the specified file. (Unicode) GetLogicalDrives Retrieves a bitmask representing the currently available disk drives. GetLogicalDriveStringsW Fills a buffer with strings that specify valid drives in the system. (GetLogicalDriveStringsW) GetLongPathNameA Converts the specified path to.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Data Access and Storage Overview of the Data Access and Storage technology. To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h."
1071,GetKeyState,"Microsoft Build · May 19 – 22, 2025The GetKeyState function is used to retrieve the state of a specified virtual key. It can be particularly useful for determining whether a key is currently pressed down or not. The function takes a virtual-key code as an input parameter and returns a set of bit flags. The most relevant flag is 0x8000, which indicates whether the key is currently pressed.Here’s a simple example of how to use GetKeyState:In this example, VK_MENU represents the virtual key code for the ALT key. The function checks if the ALT key is pressed at the time the message is processed.You can also distinguish between different keys, such as the left and right ALT keys, by using their respective virtual key codes, like VK_LMENU for the left ALT key and VK_RMENU for the right ALT key.References:GetKeyState function (winuser.h) Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed). Syntax Parameters [in] nVirtKey Type: int A virtual key. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps.IGameInputReading::GetKeyState (v1) Retrieves the state of active keys on a keyboard input. Syntax Parameters stateArrayCount   _In_ Type: uint32_t Returns the number of keys active on a keyboard. Remarks The IGameInputReading::GetKeyState method retrieves the state of active keys on a game controller input. Requirements Header: GameInput.h.IGameInputReading::GetKeyState Retrieves the state of active keys on a keyboard input. Syntax Parameters stateArrayCount   _In_ Type: uint32_t Returns the number of keys active on a game controller. Requirements Header: GameInput.h Library: xgameruntime.lib Supported platforms: Windows, Xbox One family consoles and Xbox S... Retrieves the state of.InputKeyboardSource.GetKeyState(VirtualKey) Method Definition Namespace: Microsoft.UI.Input Edit Retrieves the state of the supplied virtual-key at the time of the input message currently being processed (which could be in the past, if the input queue contains unprocessed messages). ...ns VirtualKeyStates The flags indicating the state of the.ICoreWindow.GetKeyState(VirtualKey) Method Definition Namespace: Windows.UI.Core Edit Specifies a method that gets the state of a key. Parameters virtualKey VirtualKey The virtual key for which state will be returned. Returns CoreVirtualKeyStates The state of the supplied virtual key when the input event was raised. Applies to See also.Keyboard.GetKeyStates(Key) Method Definition Namespace: System.Windows.Input Assembly:PresentationCore.dll Gets the set of key states for the specified key. Par... Returns KeyStates A bitwise combination of the KeyStates values. Examples The following example shows how to use the GetKeyStates method to determine if the Return key is in the Down.You could track the state of the ALT key by listening for key-stroke messages and storing a flag, but GetKeyState saves you the trouble. When you receive the WM_LBUTTONDOWN message, just call GetKeyState as follows: The GetKeyState message takes a virtual-key code as input and returns a set of bit flags (actually just two flags). You can also use.KeyboardDevice.GetKeyStates(Key) Method Definition Namespace: System.Windows.Input Assembly:PresentationCore.dll Gets the set of key states for the specified Key. Parameters key Key The key to check. Returns KeyStates The set of key states for the specified key. Exceptions InvalidEnumArgumentException key is not a valid key. Applies to. Gets the.CoreWindow.GetKeyState(VirtualKey) Method Definition Namespace: Windows.UI.Core Edit Retrieves the state of a virtual key. Parameters virtualKey VirtualKey The virtual key for which state is returned. Returns CoreVirtualKeyStates The flags indicating the current state of the supplied virtual key when the input event fired. Note For Wi... Use.ExpKeyboardInput.GetKeyState(VirtualKey) Method Definition Namespace: Microsoft.UI.Input.Experimental Parameters virtualKey VirtualKey Returns CoreVirtualKeyStates Applies to. Learn more about the Microsoft.UI.Input.Experimental.ExpKeyboardInput.GetKeyState in the Microsoft.UI.Input.Experimental namespace..."
1072,GetEnhMetaFilePixelFormat,"Microsoft Build · May 19 – 22, 2025GetEnhMetaFilePixelFormat function (wingdi.h) The GetEnhMetaFilePixelFormat function retrieves pixel format information for an enhanced metafile. Syntax Parameters hemf Identifies the enhanced metafile. cbBuffer Specifies the size, in bytes, of the buffer into which the pixel format information is copied. ppfd Pointer to a PIXELFORMATDESCRIPTOR.DescribePixelFormat ... GetEnhMetaFilePixelFormat Retrieves pixel format information for an enhanced metafile. The ChoosePixelFormat function returns a one-based pixel format index that identifies the best match from the device context's supported pixel formats. The GetEnhMetaFilePixelFormat function returns the size of a metafile's pixel format.OpenGL Overview of the OpenGL technology. The OpenGL technology is not associated with any headers. For programming guidance for this technology, see: OpenGL Functions ChoosePixelFormat The ChoosePixelFormat function attempts to match an appropriate pixel format supported by a device context to a given pixel format specification..Windows Functions Following are the Windows functions associated with OpenGL: ChoosePixelFormat DescribePixelFormat GetEnhMetaFilePixelFormat GetPixelFormat SetPixelFormat SwapBuffers. Following are the Windows functions associated with OpenGL. /windows/win32/opengl/win32-functions.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet P... DescribePixelFormat The DescribePixelFormat function obtains information about the pixel format identified by iPixelFormat.WGL and Windows Reference The following are the functions: ChoosePixelFormat DescribePixelFormat GetEnhMetaFilePixelFormat GetPixelFormat SetPixelFormat SwapBuffers wglCreateContext wglCreateLayerContext wglCopyContext wglDeleteContext wglDescribeLayerPlane wglGetCurrentContext wglGetCurrentDC wglGetLayerPaletteEntries wglGetProcAddress."
1073,GetMiterLimit,"Microsoft Build · May 19 – 22, 2025GetMiterLimit function (wingdi.h) The GetMiterLimit function retrieves the miter limit for the specified device context. Syntax Parameters [in] hdc Handle to the device context. [out] plimit Pointer to a floating-point value that receives the current miter limit. Return value If the function succeeds, the return value is nonzero. If the function.Pen::GetMiterLimit method (gdipluspen.h) The Pen::GetMiterLimit method gets the miter length currently set for this Pen object. Syntax Return value Type: REAL This method returns a real number that indicates the miter limit of this Pen object. Remarks The miter length is the distance from the intersection of the line walls on the inside of the.ID2D1StrokeStyle::GetMiterLimit method (d2d1.h) Retrieves the limit on the ratio of the miter length to half the stroke's thickness. Syntax Return value Type: FLOAT A positive number greater than or equal to 1.0f that describes the limit on the ratio of the miter length to half the stroke's thickness. Requirements Requirement Value Minimum.SetMiterLimit function (wingdi.h) The SetMiterLimit function sets the limit for the length of miter joins for the specified device context. Syntax Parameters [in] hdc Handle to the device context. [in] limit Specifies the new miter limit for the device context. [out] old Pointer to a floating-point value that receives the previous miter limit..Path Functions (Windows GDI) The following functions are used to create, alter, or draw paths. Function Description ... FlattenPath Transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines. GetMiterLimit Retrieves the miter limit for the specified device context. GetPath.Applications typically use this information and the GetC... GetFontUnicodeRanges The GetFontUnicodeRanges function returns information about which Unicode characters are supported by a font. GetGlyphIndicesA The GetGlyphIndices function translates a string into an array. GetMiterLimit The GetMiterLimit function retrieves the miter limit for the.GetFontUnicodeRanges The GetFontUnicodeRanges function returns information about which Unicode characters... GetGlyphIndicesA The GetGlyphIndices function translates a string into an array of glyph indices. (ANSI) GetGlyphIndicesW The GetGlyphIndices function translates. GetMiterLimit The GetMiterLimit function retrieves the miter limit for the.ID2D1StrokeStyle interface (d2d1.h) Describes the caps, miter limit, line join, and dash information for a stroke. Inheritance The ID2D1StrokeStyle interface inherits from ID2D1Resource. ID2D1StrokeStyle::GetLineJoin Retrieves the type of joint used at the vertices of a shape's outline. ID2D1StrokeStyle::GetMiterLimit Retrieves the limit on the.GpStatus WINGDIPAPI GdipSetPenCustomEndCap(GpPen *pen, GpCustomLineCap* customCap) Status Pen::SetCustomEndCap(IN const CustomLineCap* customCap) Sets the custom end cap currently set for this Pen object GpStatus WINGDIPAPI GdipGetPenCustomEndCap(GpPen *pen, GpCustomLineCap** customCap) Status Pen::GetCustomEndCap(OUT CustomLineCap* customCap).......gnment GetBrush GetColor GetCompoundArray GetCompoundArrayCount GetCustomEndCap GetCustomStartCap GetDashCap GetDashOffset GetDashPattern GetDashPatternCount GetDashStyle GetEndCap GetLastStatus GetLi GetMiterLimit GetPenType GetStartCap GetTransform GetWidth MultiplyTransform ResetTransform RotateTransform ScaleTransform SetAlignment SetBrush."
1074,MessageBoxA,"Microsoft Build · May 19 – 22, 2025MessageBoxA is a function used in Windows programming to create and display a message box that contains a system icon, a set of buttons, and a brief application-specific message. It is part of the Windows API and is typically used to prompt the user for input or to display information or warnings.To use MessageBoxA, you need to include the appropriate headers and call the function with the required parameters. The parameters typically include a handle to the owner window, the message text, the title of the message box, and the type of buttons to display.Here is a basic example of how to use MessageBoxA in C++:In this example, NULL indicates that there is no owner window, ""Hello, World!"" is the message text, ""Message Box Title"" is the title of the message box, and MB_OK specifies that the message box will have an OK button.References:MessageBoxA function (winuser.h) Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked. Syntax Parameters [in, optional] hWnd Type: HWND A handle to the owner.Specify a ch... This topic describes both behaviors. The Windows API, for instance, includes the following entry-point names for the MessageBox function: MessageBoxA Provides 1-byte character ANSI formatting, distinguished by an ""A"" appended to the entry-point name. Calls to MessageBoxA always marshal strings in ANSI format. Use one of the.Identifying Functions in DLLs The identity of a DLL function consists of the following elements: Function name or ordinal Name of the DLL file in which the implementation can be found For example, specifying the MessageBox function in the User32.dll identifies the function (MessageBox) and its location (User32.dll, User32, or user32). The....alogMe Determines whether a message is intended for the specified dialog box and, if it is, processes the messageMessageBox The MessageBox function displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message. MessageBoxA Displays a modal dialog box that contains a system icon, a set of.MessageBoxExA function (winuser.h) Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface. Currently MessageBoxEx and MessageBox work the same way. Syntax Parameters [in,.The following is a list of possible reasons to rename a DLL function: To avoid using case-sensitive API function names To comply with existing naming standards To accommodate functions that take different data types (by declaring multiple version... You can replace the MessageBox entry point with MsgBox by including the Alias keyword in your.Create a new project named message_box, and open it in VS Code: In VS Code, open the Cargo.toml, and add the Windows dependencies for this project: Now open the project's src/main.rs file, and add the use declarations with the new n... And finally add code to call the MessageBoxA and MessageBoxW functions. The Windows API docs are mainly written.The string literals in the call to MessageBox are invalid - argument of type const char * is incompatible with parameter of type LPCWSTR Even if I replace the MessageBox call with MessageBoxA to workaround that issue I get unresolved external symbol main referenced in function &quot;int__cdecl invoke_main(void)&quot;| Hi, Gavin Williams applies.Incidentally, if you are using an ASCII-base... It should be noted that the choice of Unicode for SQL Server CE was driven by the fact that this is the default character set of Windows CE itself. Unlike Windows NT and Windows 2000, which support both ANSI and Unicode function calls (MessageBoxA and MessageBoxW), on Windows CE only the Unicode.Hello. As in the title when I try to get the text of selected element in ListBox window: `` char z[20]; SendMessage(hWndList, LB_GETTEXT, SelIndex, (LPARAM)z); MessageBoxA(NULL, z , z, NULL); `` all I get is the first letter. Tried to use new, try to use string type and always the mess... As in the title when I try to get the text of selected."
1075,getprotobyname,"Microsoft Build · May 19 – 22, 2025getprotobyname function (winsock.h) The getprotobyname function retrieves the protocol information corresponding to a protocol name. Syntax Parameters [in] name Pointer to a null-terminated protocol name. Remarks The getprotobyname function returns a pointer to the protoent structure containing the name(s) and protocol number that correspond to.getprotobyname function (winsock2.h) The getprotobyname function retrieves the protocol information corresponding to a protocol name. Syntax Parameters [in] name Pointer to a null-terminated protocol name. Return value If no error occurs, getprotobyname returns a pointer to the protoent. Remarks The getprotobyname function returns a pointer to the....esolution from an address to a Unicode host name and from a port number to the Unicode service name. getpeername The getpeername function (winsock2.h) retrieves the address of the peer to which a socket is connected. getpeername The getpeername function (winsock.h) retrieves the address of the peer to which a socket is conn getprotobyname The.getprotobyname and getprotobynumber Functions in the API The getprotobyname and getprotobynumber functions are implemented within the Ws2_32.dll by consulting a local protocols database. Related topics Compatible Name Resolution for TCP/IP in the Windows Sockets 1.1 API Protocol-Independent Name Resolution Registration and Name Resolution. The.GetHostNameW The GetHostNameW function retrieves the standard host name for the local computer as a Unicode string. getpeername The getpeername function (winsock2.h) retrieves the address of the peer to which a socket is connected. getprotobyname The getprotobyname function (winsock2.h) retrieves the protocol information corresponding to a.Compatible Name Resolution for TCP/IP in the Windows Sockets 1.1 API Note All of the Windows Sockets 1.1 functions... The following list describes the topics in this section: Basic Approach for GetXbyY in the API getprotobyname and getprotobynumber Functions in the API getservbyname and getservbyport Functions in the API gethostbyname Function in.WSAAsyncGetProtoByName function (winsock2.h) The WSAAsyncGetProtoByName function asynchronously retrieves protocol information that corresponds to a protocol name. Remarks The WSAAsy... It is used to retrieve the protocol name and number from the Windows Sockets database corresponding to a given protocol name. The WSAAsyncGetProtoByName function.getprotobyname and getprotobynumber Functions in the SPI These functions are implemented within Ws2_32.dll by consulting a local protocols database. They do not result in any name resolution query. These functions are implemented within Ws2\_32.dll by consulting a local protocols database. They do not result in any name resolution query...WSAAsyncGetProtoByName function (winsock.h) The WSAAsyncGetProtoByName function asynchronously retrieves protocol information that corresponds to a protocol name. Remarks The WSAAsyncGe... It is used to retrieve the protocol name and number from the Windows Sockets database corresponding to a given protocol name. The WSAAsyncGetProtoByName.Compatible Name Resolution for TCP/IP in the Windows Sockets 1.1 SPI Windows Sockets 1.1 defined a number of routines that were used for IPv4 name resolution with TCP/IP networks. WSAAsyncGetHostByAddr WSAAsyncGetHostByName WSAAsyncGetProtoByName WSAAsyncGetProtoByNumber WSAAsyncGetServByName WSAAsyncGetServByPort These functions are specific to."
1076,Ellipse,"Microsoft Build · May 19 – 22, 2025About Ellipses An ellipse is a closed curve defined by two fixed points (f1 and f2 ) such that the sum of the distances (d1 +d2 ) from any point on the curve to the two fixed points is constant. When calling Ellipse, an application supplies the coordinates of the upper-left and lower-right corners of the ellipse's bounding rectangle. ...llipse is.2.4.2.2 Ellipse The Ellipse structure is a Row_Type element that specifies the geometric path of an ellipse. An ellipse is specified by its center point and two points on the ellipse. A Geometry Section_Type element t... The Cell_Type child elements of this structure MUST be a value from the following table. The Ellipse structure is a Row_Type.Ellipse function (wingdi.h) The Ellipse function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical coordinates, of.How to: Draw an Ellipse or a Circle This example shows how to draw ellipses and circles by using the Ellipse element. To draw an ellipse, create an Ellipse element and specify its Width and Height. Use its... To draw a circle, make the Width and Height of the Ellipse element equal to each other. Learn how to draw an ellipse or circle with choices.Ellipse Browse the sample The .NET Multi-platform App UI (.NET MAUI) Ellipse class derives from the Shape class, and can be used to draw ellipses and circles. Create an Ellipse To draw an ellipse, create an Ellipse object and set its WidthRequest and HeightRequest properties. The following XAML example shows how to draw a filled ellipse: In this.Ellipses and Arcs An ellipse is specified by its bounding rectangle. The Graphics object provides the DrawEllipse method, and the Pen object stores attributes of the ellipse, such as line width and color. The remaining arguments passed to the DrawEllipse method specify the bounding rectangle for the ellipse. The following example draws an ellipse;.11.1.22.31.1.11.1 Ellipse (usage) (description) Draws an ellipse. [types assignable to] Ellipse Shape FrameworkElement UIElement DependencyObject x:Object [xml lang property] Language. /openspecs/microsoft_domain_specific_languages/ms-slxv/0bf1c037-729b-4e90-bd04-a3f04cb9a6e8.10.1.48.95.2.1.19.1 Ellipse (usage) (description) Draws an ellipse. [types assignable to] Ellipse Shape FrameworkElement UIElement Visual DependencyObject x:Object IInputElement [name property] Name [xml lang property] Language. /openspecs/microsoft_domain_specific_languages/ms-wpfxv/fcf59aad-00a7-4593-93dd-9d1a31745680.Learn how to correctly use ellipses in text and UI elements.Drawing an Ellipse To draw an ellipse, you need a Graphics object and a Pen object. The Graphics object provides the DrawEllipse method, and the Pen object stores attributes, such as width and color, of the line used to render the ellipse. ... ellipseThe following example draws an ellipse; the bounding rectangle has a width of 80, a height of."
1077,OpenFileMappingA,"Microsoft Build · May 19 – 22, 2025OpenFileMappingA function (winbase.h) Opens a named file mapping object. Syntax Parameters [in] dwDesiredAccess The access to the file mapping object. This access is checked against any security descriptor on the target file mapping object. For a list of values, see File Mapping Security and Access Rights. [in] bInheritHandle If this parameter is.(CreateFiberEx) CreateFileMappingA Creates or opens a named or unnamed file mapping object for a specified file. (CreateFileMappingA) CreateFileMappingNumaA Creates or opens a named or unnamed file mapping object for a specified file and specifies the NUMA node for the physical memory. (CreateFileMappingNumaA) CreateFileTransactedA Creates or.CreateFileMappingA function (winbase.h) Creates or opens a named or unnamed file mapping object for a specified file. To specify the NUMA node for the physical memory, see CreateFileMappingNuma. Syntax Parameters [in] hFile A handle to the file from which to create a file mapping object. If hFile is INVALID_HANDLE_VALUE, the calling process must.IVssWMDependency The IVssWMDependency is a C++ (not COM) interface returned by the IVssWMComponent interface and used by applications when backing up or restoring a component that has an explicit writer-component dependency on a component managed by another writer. IVssWMFiledesc The IVssWMFiledesc interface is a C++ (not COM) interface returned."
1078,WSALookupServiceEnd,"Microsoft Build · May 19 – 22, 2025WSALookupServiceEnd function (winsock2.h) The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext. If you call WSALookupServiceEnd from another thread while an existing WSALookupServiceNext is blocked, the end call will have the same effect as a cancel and will cause the.PNRP and WSALookupServiceEnd PNRP uses the WSALookupServiceEnd function to do the following: Terminate a query initiated in a previous call to WSALookupServiceBegin Unblock a call to WSALookupServiceNext to stop the search A call to WSALookupServiceEnd terminates a query and cleans up the context. The handle obtained from a call to.(ANSI) WSALookupServiceBeginW The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a ... (Unicode) WSALookupServiceEnd The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext. WSALookupServiceNextA The.Summary of Name Resolution Functions The name resolution functions can be grouped into three categories: Service installation, client queries, and helper (with macros). Client Query WSAEnumNameSpaceProviders WSALookupServiceBegin WSALookupServiceNext WSALookupServiceEnd The WSAEnumNameSpaceProviders function allows an... Winsock namespace–query.(ANSI) WSALookupServiceBeginW The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a ... (Unicode) WSALookupServiceEnd The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext. WSALookupServiceNextA The.Bluetooth Programming with Windows Sockets This section describes how to use Windows Sockets functions and structures to program a Bluetooth application. Bluetooth and WSALookupServiceEnd Bluetooth uses the WSALookupServiceEnd function to terminate a query initiated in a previous call to WSALookupServiceBegin, and perhaps extended in subsequent.Bluetooth and WSALookupServiceEnd Bluetooth uses the WSALookupServiceEnd function to terminate a query initiated in a previous call to WSALookupServiceBegin, and perhaps extended in subsequent calls to WSALookupServiceNext. The call to WSALookupServiceEnd terminates the query and cleans up the context. Bluetooth uses the WSALookupServiceEnd.Winsock NSP Reference Links This topic provides you with useful links to topics about the Windows Sockets Functions and Windows Sockets Structures. The following list identifies links to topics about the Windows Sockets Functions: WSACleanup WSAGetLastError WSANSPIoctl WSALookupServiceBegin WSALookupServiceEnd WSALookupServiceNext WSASetService.WSAQUERYSET and WSALookupServiceBegin The WSAQUERYSET structure is used extensively with the WSALookupServiceBegin, WSALookupServiceNext, and WSALookupServiceEnd functions. Details about how these functions use the WSAQUERYSET structure are detailed in the following reference pages: PNRP and WSALookupServiceBegin PNRP and WSALookupServiceNext PNRP.... When you resolve a peer name, you must provide the following information: Peer name Resolve criteria Cloud name in which to resolve the peer name IP address, which is optional and is used as a hint Resolving a Peer Name After you provide a peer name, resolve criteria, cloud name, and the optional IP address, the following steps must be taken."
1079,MapDialogRect,"Microsoft Build · May 19 – 22, 2025MapDialogRect function (winuser.h) Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the specified RECT structure with the converted coordinates, which allows the structure to be used to create a dialog box or position a control within a dialog box. To convert these coordinates from dialog.CPropertySheet::MapDialogRect Converts the dialog-box units of a rectangle to screen units. Even though CPropertySheet is not derived from CDialog, managing a CPropertySheet object is like managing ... The MapDialogRect Windows function, described in the Windows SDK, uses the appropriate font for this dialog box. The MapDialogRect member function.GetDialogBaseUnits function (winuser.h) Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For either type of dialog box, it is easier to use the MapDialogRect function to perform the conversion. MapDialogRect takes the font into account and correctly converts a rectangle from dialog.CDialog::MapDialogRect Converts the dialog-box units of a rectangle to screen units. The GetDialogBaseUnits Windows function returns size information for the system font, but you can specify a different font for each dialog box i... The MapDialogRect Windows function uses the appropriate font for this dialog box. The MapDialogRect member function.The measurements in a dialog box template are specified in dialog template units. To convert measurements from dialog template units to screen units (pixels), use the MapDialogRect function, which takes into account the font used by the dialog box and correctly converts a rectangle from dialog template units into pixels. For dialog boxes that use.GetNextDlgTabItem Retrieves a handle to the first control that has the WS_TABSTOP style that pr... IsDialogMessage Determines whether a message is intended for the specified dialog box and, if it is, processes the message. MapDialogRect Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the.CDialogImpl Class This class provides methods for creating a modal or modeless dialog box. CDialogImplBaseT Methods Function Description GetDialogProc Returns the current dialog box procedure. MapDialogRect Maps the dialog-box units of the specified rectangle to screen units (pixels). OnFinalMessage Called after receiving the last message,.To convert measurements from dialog template units to screen units (pixels), use the MapDialogRect function. Windows 95/Windows 98/Windows Millennium Edition (Windows Me) : The buffer pointed to by lParam must reside in writable memory, even though the message does not modify the array. Requirements Requirement Value Minimum supported client.Dialog Boxes Overview of the Dialog Boxes technology. To develop Dialog Boxes, you need these headers: commdlg.h For programming guidance for ... The hook procedure receives messages or notifications intended for the default dialog box procedure of the Print Setup dialog box. MapDialogRect Converts the specified dialog box units to screen units.Dialog box functions In this section CreateDialog CreateDialogIndirect CreateDialogIndirectParam CreateDialogParam DefDlgProc DialogBox DialogBoxIndirect DialogBoxIndirectParam DialogBoxParam DLGPROC EndDialog GetDialogBaseUnits GetDlgCtrlID GetDlgItem GetDlgItemInt GetDlgItemText GetNextDlgGroupItem GetNextDlgTabItem IsDialogMessage MapDialogRect."
1080,GetDCEx,"Microsoft Build · May 19 – 22, 2025GetDCEx function (winuser.h) The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI. This function is an.GetClipboardFormatName. GetDC The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDCEx The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDialogControlDpiChangeBehavior Retrieves and.GetDC The GetDC functio... GetDCBrushColor The GetDCBrushColor function retrieves the current brush color for the specified device context (DC). GetDCEx The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. GetDCOrgEx The GetDCOrgEx function retrieves the final.You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI. The GetDCEx function is an extension to GetDC, which gives an application more control over how and whether clipping occurs in the client area. Syntax Parameters [in] hWnd A handle.Window Update Lock A window update lock is a temporary suspension of drawing in a window. After the lock is set, the application can use the GetDCEx function, with the DCX_LOCKWINDOWUPDATE value, to retrieve a display device context to draw over the locked window. GetDCEx retrieves the display device context from the display device context cache,.Window Regions In addition to the update region, every window has a visible region that defines the window portion vis... When the application retrieves a display device context using the BeginPaint, GetDC, or GetDCEx function, the system sets the clipping region for the device context to the intersection of the visible region and the update.Device Context Functions The following functions are used with device contexts. GetDCBrushColor Retrieves the current brush color for the specified device context. GetDCEx Retrieves a handle to a display device context for the client area of a specified window or for the entire screen. GetDCOrgEx Retrieves the final translation origin for a.Display Device Contexts An application obtains a display DC by calling the BeginPaint, GetDC, or GetDCEx function and identifying the window in which the corresponding output will appear. After creating a window with the CS_OWNDC style, an application can call the GetDC, GetDCEx, or BeginPaint f... An application obtains a display DC by calling.Private Display Device Contexts A private device context enables an application to avoid retrieving and initializing a display device context each time the application must draw in a window. An application can use the GetDCEx function to force the system to return a common device context for the window that has a private device context. A private.Drawing Without the WM_PAINT Message Although applications carry out most drawing operations while the WM_PAINT message is processing, it is sometimes more efficient for an application to draw directly i... To draw in a window without using a WM_PAINT message, the application uses the GetDC or GetDCEx function to retrieve a display device context."
1081,EnumWindows,"Microsoft Build · May 19 – 22, 2025To use the EnumWindows function, follow these steps:This function will enumerate all top-level windows on the screen, calling your callback function for each window.References:EnumWindows function (winuser.h) Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. An application that calls GetWindow to perform this task risks being caught in an infinite loop or referencing a handle to a window that has been destroyed. Note  For Windows 8.NativeMethods.EnumWindows Method Definition Namespace: Microsoft.Crm.UnifiedServiceDesk.Dynamics.Controls Assembly:Microsoft.Crm.UnifiedServiceDesk.Dynamics.dll Parameters callback NativeMethods.EnumThreadWindowsCallback extraData Returns Boolean Applies to. Learn more about the.A window that has no parent, or ... An application can use the EnumWindows function to obtain a handle to each top-level window on the screen. EnumWindows passes the handle to each top-level window, in turn, to an application-defined callback function, EnumWindowsProc. An application can use the EnumThreadWindows function to enumerate the windows.Callback Functions A callback function is code within a ... Another common usage is with enumeration functions, such as EnumFontFamilies, EnumPrinters, and EnumWindows in the Windows API. The EnumWindows function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window. Read about.EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. (Unicode) EnumPropsW Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. (Unicode).How to: Implement callback functions The follow... Specifically, the procedure and example use the EnumWindows function to step through the list of windows and a managed callback function (named CallBack) to print the value of the window handle. To implement a callback function Look at the signature for the EnumWindows function before going.can anyone tell me what is the powershell script to open specific app in secondary monitor| You can automate that using AutoIT cmdlets. check these examples: https://www.autoitconsulting.com/site/scripting/autoit-cmdlets-for-windows-powershell/| Hello, Launch the application: Use FindWindowA function (winuser.h) https://l... Use EnumWindows.EnumChildWindows function (winuser.h) Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000.When input is disabled, the window does not receive input such as mouse clicks... EndTask Forcibly closes the specified window. EnumChildWindows Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumClipboardFormats Enumerates.EnumThreadWindows function (winuser.h) Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. To enumerate child windows of a particular window, use the EnumChildWindows function. Requirements Requirement Value Minimum supported client Windows 2000."
1082,LoadMenuIndirectA,"Microsoft Build · May 19 – 22, 2025LoadMenuIndirectA function (winuser.h) Loads the specified menu template in memory. Syntax Parameters [in] lpMenuTemplate Type: const MENUTEMPLATE* A pointer to a menu template or an extended menu template. Note The winuser.h header defines LoadMenuIndirect as an alias that automatically selects the ANSI or Unicode version of this function based.(ANSI) LoadImageW Loads an icon, cursor, animated cursor, or bitmap. (Unicode) LoadMenuA Loads the specified menu resource from the executable (.exe) file associated with an application instance. (ANSI) LoadMenuIndirectA Loads the specified menu template in memory. (ANSI) LoadMenuIndirectW Loads the specified menu template in memory. (Unicode).(CreateIconFromResourceEx) CreateIconIndirect Creates an icon or cursor from an ICONINFO structure. (Unicode) CreateMenu Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions. CreatePopupMenu Creates a drop-down menu, submenu, or shortcut menu. (Unicode)."
1083,WSADuplicateSocketW,"Microsoft Build · May 19 – 22, 2025WSADuplicateSocketW function (winsock2.h) The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used on a QOS-enabled socket. Syntax Parameters [in] s Descriptor identifying the local socket. [in] dwProcessId Proces....WSAConnect The WSAConnect function establishes a connection to another socket application, exchanges con... WSADuplicateSocketA The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used on a QOS-enabled socket. (ANSI).WSAECOMPARATOR The Windows Sockets WSAECOMPARATOR enumeration type is used for version-comparison semantics in Windows Sockets 2. WSADuplicateSocketA The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used... (ANSI)....CompletionQueue RIOCreateCompletionQueue RIOCreateRequestQueue RIODequeueCompletion RIODeregisterBuffer RIONotify RIOReceive RIOReceiveEx RIORegisterBuffer RIOResizeCompletionQueue RIOResizeRequestQueue RIOSend RIOSendEx select send sendto SetAddrInfoExW setipv4sourcefilter setsockopt setsourcefilter shutdown socket TransmitFile TransmitPackets.WSADuplicateSocketA function (winsock2.h) The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used on a QOS-enabled socket. Windows 8.1 and Windows Server 2012 R2: The WSADuplicateSocketW function is supported for.APIs present on all Windows devices (grouped by module) Important The info in this topic applies to all versions of Windows 10, and later. We'll refer to those ver... Tip For important background info, see Windows API sets and Windows umbrella libraries. This topic lists the Win32 APIs that are part of the Universal Windows Platform (UWP), and."
1084,ExtTextOutA,"Microsoft Build · May 19 – 22, 2025ExtTextOutA function (wingdi.h) The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both. Syntax Parameters [in] hdc A handle to the device context. [in] x The x-coordinate, in logical coordinates, of the reference point.ExtSelectClipRgn The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode. ExtTextOutA The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both. (ANSI).To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for this technology, see: Windows GDI Documents and Printing Functions AbortPath The AbortPath function closes a... ExtTextOutA The ExtTextOut function draws text using the currently selected.2.3.5.7 EMR_EXTTEXTOUTA Record The EMR_EXTTEXTOUTA record draws an ASCII text string using the current font and text colors. Type (4 bytes): An unsigned integer that identifies the record type as EMR_EXTTEXTOUTA from the RecordType enumeration (section 2.1.1). Bounds (16 bytes): A RectL object ([MS-WMF] section... The EMR_EXTTEXTOUTA record draws.These values are specified in the Type fields of EMF records (section 2.3). typedef  enum { EMR_HEADER = 0x00000001, EMR_POLYBEZIER = 0x00000002, EMR_POLYGON = 0x00000003, EMR_POLYLINE = 0x00000004, EMR_POLYBEZIERTO = 0x00000005, EMR_POLYLINETO = 0x00000006, EMR_POLYPOLYLINE = 0x00000007, EMR_POLYPOLYGON = 0x00000008, EMR_SETWINDOWEXTEX =.EMR_EXTTEXTOUTA (section 2.3.5.7) EMR_EXTTEXTOUTW (section 2.3.5.8) EMR_POLYTEXTOUTA (section 2.3.5.32) EMR_POLYTEXTOUTW (section 2.3.5.33) EMR_SMALLTEXTOUT (section 2.3.5.37) Element name Type Set by FontMapperFlags UINT32 EMR_SETMAPPERFLAGS (section 2.3.11.20) ForceUFIMapping UniversalFontId (section 2.2.27) EMR_FORCEUFIMAPPING (section.2.3.11.25 EMR_SETTEXTALIGN Record The EMR_SETTEXTALIGN record specifies text alignment for text drawing. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size TextAlignmentMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETTEXTALIGN. The EMR_SMALLTEXTOUT, EMR_EXTTEXTOUTA, and EMR_EXTTEXTOUTW.2.3.5 Drawing Record Types The Drawing record types perform graphics drawing and painting functions. The clipping regions used by drawing records are maintained in the Regions state element (section 3.1.1.2.1) in the play... The following are EMF drawing record types. EMR_EXTFLOODFILL 2.3.5.1 Draws a line segment of an arc. EMR_EXTTEXTOUTA 2.3.5.7....N Record EMR_POLYGON16 packet EMR_POLYGON16 Record EMR_POLYLINE packet EMR_POLYLINE Record EMR_POLYLINE16 packet EMR_POLYLINE16 Record EMR_POLYLINETO packet EMR_POLYLINETO Record EMR_POLYLINETO16 packet EMR_POLYLINETO16 Record EMR_POLYPOLYGON packet EMR_POLYPOLYGON Record EMR_POLYPOLYGON16 packet EMR_POLYPOLYGON16 Record EMR_POLYPOLYLINE packet.Such objects are ignored. Section 2.2.5: In Windows implementations, this is the clipping and/or opaquing rectangle that is passed to GDI methods ExtTextOutA and ExtTextOutW. Section 2.2.6: Windows does not parse the PostScript data in an EpsData object; the data is handed off to the graphics printer driver if the driver supports PostScript."
1085,ExtFloodFill,"Microsoft Build · May 19 – 22, 2025ExtFloodFill function (wingdi.h) The ExtFloodFill function fills an area of the display surface with the current brush. Syntax Parameters [in] hdc A handle to a device context. [in] x The x-coordinate, in logical units, of the point where filling is to start. [in] y The y-coordinate, in logical units, of the point where filling is to start. [in].FloodFill function (wingdi.h) The FloodFill function fills an area of the display surface with the current brush. Note  The FloodFill function is included only for compatibility with 16-bit versions of Windows. Applications should use the ExtFloodFill function with FLOODFILLBORDER specified. Requirements Requirement Value Minimum supported client.ExtCreateRegion The ExtCreateRe... ExtEscape The ExtEscape function enables an application to access device capabilities that are not available through GDI. ExtFloodFill The ExtFloodFill function fills an area of the display surface with the current brush. ExtSelectClipRgn The ExtSelectClipRgn function combines the specified region with the.ExtCreateRegion The ExtCreateRegion function creates a region from the specified region and transformation data. ExtFloodFill The ExtFloodFill function fills an area of the display surface with the current brush. ExtSelectClipRgn The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode..CDC::BitBlt Co... CDC::DrawEscape Accesses drawing capabilities of a video display that aren't directly available through the graphics device interface (GDI). CDC::Escape Allows applications to access facilities that aren't directly available from a particular device through GDI. CDC::ExtFloodFill Fills an area with the current brush. Provides.EMREXTFLOODFILL structure (wingdi.h) The EMREXTFLOODFILL structure contains members for the ExtFloodFill enhanced metafile record. Syntax Members emr The base structure for all record types. ptlStart Coordinates, in logical units, where filling begins. crColor Color of fill. To make a COLORREF value, use the RGB macro. iMode Type of fill operation.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a... CreateDIBSection Creates a DIB that applications can write to directly. ExtFloodFill Fills an area of the display surface with the current brush. GetBitmapDimensionEx Gets the dimensions of a bitmap. Obsolete Functions The.2.3.5.6 EMR_EXTFLOODFILL Record The EMR_EXTFLOODFILL record fills an area of the display surface with the current brush. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size Start. Color FloodFillMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_EXTFLOODFILL. The EMR_EXTFLOODFILL record fills.2.3.3.4 META_EXTFLOODFILL Record The META_EXTFLOODFILL Record fills an area with the brush that is defined in the playback device context. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Mode ColorRef Y X RecordSize (4 bytes): A 32-bit unsigned integer that defines the number of WORD structures, defined.... META_DIBSTRETCHBLT packet META_DIBSTRETCHBLT Record META_DIBSTRETCHBLT_Bitmap packet META_ELLIPSE packet META_ELLIPSE Record META_EOF Record META_EOF_Record packet META_ESCAPE packet META_ESCAPE Record META_ESCAPE_ENHANCED_METAFILE packet META_ESCAPE_ENHANCED_METAFILE Record META_EXCLUDECLIPRECT packet META_EXCLUDECLIPRECT META_EXTFLOODFILL."
1086,DestroyCursor,"Microsoft Build · May 19 – 22, 2025DestroyCursor function (winuser.h) Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor. Syntax Parameters [in] hCursor Type: HCURSOR A handle to the cursor to be destroyed. The cursor must not be in use. Return value Type: BOOL If the function succeeds, the return value is nonzero. If the.DeregisterShellHookWindow Unregisters a specifie... DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen. DestroyCursor Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared.Cursor Destruction You can destroy the cursor handle and free the memory the cursor used by calling the DestroyCursor function. The following functions obtain a shared cursor: LoadCursor LoadCursorFromFile LoadImage (if you use the LR_SHARED flag) CopyImage (if you use the LR_COPYRETURNORG flag and the hImage is a shared cursor) When you no longer.SetSystemCursor function (winuser.h) Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcu... The system destroys hcur by calling the DestroyCursor function. It replaces the contents of the system cursor specified by.Call the CreateIconIndirect function to create the alpha blended... The following code demonstrates how to create an alpha blended cursor. You can use the same code to create an alpha blended icon by changing the fIcon member of the ICONINFO structure to TRUE: Before closing, you must use the DestroyCursor function to destroy any cursors you.Cursor Functions In This Section ClipCursor CopyCursor CreateCursor DestroyCursor GetClipCursor GetCursor GetCursorInfo GetCursorPos GetPhysicalCursorPos LoadCursor LoadCursorFromFile SetCursor SetCursorPos SetPhysicalCursorPos SetSystemCursor ShowCursor. Cursor Functions. /windows/win32/menurc/cursor-functions.If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the m... DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen. DestroyCursor Destroys a cursor and.If a subsequent cursor position (set by the SetCursorPos function or the mouse) lies outside the ... CopyCursor Copies the specified cursor. CreateCursor Creates a cursor having the specified size, bit patterns, and hot spot. DestroyCursor Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared.FreeResource function (libloaderapi.h) Note This function is obsolete and is only supported for backw... Remarks For resources loaded with other functions, FreeResource has been replaced by the following functions: Resource type FreeResource replacement Accelerator DestroyAcceleratorTable Bitmap DeleteObject Cursor DestroyCursor Icon DestroyIcon.OleIconToCursor function (olectl.h) Converts an icon to a cursor. Return value The function returns a handl... The caller is responsible for deleting this cursor with the DestroyCursor function. If the conversion could not be completed, the return value is NULL. Requirements Requirement Value Minimum supported client Windows 2000 Professional."
1087,UnmapViewOfFile,"Microsoft Build · May 19 – 22, 2025UnmapViewOfFile function (memoryapi.h) Unmaps a mapped view of a file from the calling process's address space. Syntax Parameters [in] lpBaseAddress A pointer to the base address of the mapped view of a file that is to be unmapped. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.Closing a File Mapping Object When a process has finished with the file mapping object, it should destroy all file views in its address space by using the UnmapViewOfFile function for each file view. Unmapping a mapped view of a file invalidates the range occupied by the view in t... When a process has finished with the file mapping object, it.UnmapViewOfFile2 function (memoryapi.h) Unmaps a previously mapped view of a file or a pagefile-backed section. Syntax Parameters [in] Process A HANDLE to the process from which the section will be unmapped. [in] BaseAddress The base address of a previously mapped view that is to be unmapped. Requirements Requirement Value Minimum supported client.UnmapViewOfFileEx function (memoryapi.h) This is an extended version of UnmapViewOfFile that takes an additional flags parameter. Syntax Parameters [in] BaseAddress A pointer to the base address of the mapped view of a file that is t... Value Meaning MEM_UNMAP_WITH_TRANSIENT_BOOST 0x00000001 Specifies that the priority of the pages being unmapped.MapViewOfFile function (memoryapi.h) Maps a view of a file mapping into the address space of a calling process. Reserved and committed pages are released when the view is unmapped and the file mapping object is closed. For details, see the UnmapViewOfFile and CloseHandle functions. Requirements Requirement Value Minimum supported client Windows XP.File mapping functions These functions are used in file mapping. MapViewOfFile Maps a view of a file mapping into the address space of a calling process. MapViewOfFile3FromApp Maps a view of a file mapping into the address space of a calling process from a Windows Store app. MapViewOfFileEx Maps a view of a file mapping into the address space of a.memoryapi.h header This header is used by System Services. For more information, see: System Services memoryapi.h contains the following programming interfaces: Functions AllocateUserPhysicalPages Allocates physic... (SetProcessWorkingSetSizeEx) SetSystemFileCacheSize Limits the size of the working set for the file system cache. UnmapViewOfFile.SetEndOfFile function (fileapi.h) Sets the physical file size for the specified file to the current position of the file pointer. If CreateFileMapping is called to create a file mapping object for hFile, UnmapViewOfFile must be called first to unmap all views and call CloseHandle to close the file mapping object before you can call SetEndOfFile..MapViewOfFile3FromApp function (memoryapi.h) Maps a view of a file mapping into the address space of a calling Windows Store app. After you replace a placeholder with a mapped view, to free that mapped view back to a placeholder, see the UnmapFlags parameter of UnmapViewOfFileEx and UnmapViewOfFile2. Although MapViewOfFile3FromA... Maps a view of.ISearchCrawlScopeManager2::GetVersion does not result in a ... If the method succeeds, then the client must perform the following actions to destroy all file views in its address space, and then close the file mapping object's handle and the file on disk: Call UnmapViewOfFile using the pointer of the memory-mapped file provided by plVersion Call."
1088,FreeConsole,"Microsoft Build · May 19 – 22, 2025FreeConsole is a function in programming that detaches the calling process from its console. It is defined in the Windows API and has the following characteristics:A process can only be attached to one console at a time. When a process calls FreeConsole, it can no longer refer to the console, but if other processes are sharing the console, it remains intact. The console will be closed only when the last process attached to it terminates or calls FreeConsole. After calling this function, a process can create a new console using AllocConsole or attach to another console using AttachConsole.References:FreeConsole function Detaches the calling process from its console. After a process calls FreeConsole, it can call the AllocConsole function to create a new console or AttachConsole to attach to another console. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop.Closing a Console A process can use the FreeConsole function to detach itself from its console. If other processes share the console, the console is not destroyed, but t... After calling FreeConsole, the process can use AllocConsole to create a new console or AttachConsole to attach to another console. A console is closed when the last process.AttachConsole function Attaches the calling process to the consol... A process can use the FreeConsole function to detach itself from its console. If other processes share the console, the console is not destroyed, but the process that called FreeConsole cannot refer to it. A console is closed when the last process attached to it terminates or.The docs describe that the FreeConsole() command should detach a process from it's parent console, and then that console will auto-close if it has no other child processes. This works c... I believe this is a bug with Terminal possible since Terminal is now the default console app in Windows 11.| Hello, Welcome to Microsoft Q&amp;A. You could.Console Functions The following functions are used to access a console. Function Description AddConsoleAlias Defines a console alias fo... FlushConsoleInputBuffer Flushes the console input buffer. FreeConsole Detaches the calling process from its console. GenerateConsoleCtrlEvent Sends a specified signal to a console process group that shares the.Console Control Handlers Each console process has its own list of control handler functions that are called by the system when the process receives... Note that calling AttachConsole, AllocConsole, or FreeConsole will reset the table of control handlers in the client process to its initial state. Each console process has its own list of control.Ge... A process can use the FreeConsole function to detach itself from an inherited console or from a console created by AllocConsole. A process can use the AttachConsole function to attach itself to another existing console session after using FreeConsole to detach from its own session (or if there is otherwise no attached session). The system.Classic Console APIs versus Virtual Terminal Sequences Our recommendation is to replace the classic Windows Console API with virtual terminal sequences. Definitions The classic Windows Console API surface is defined as the series of C language functional interfaces on kernel32.dll with ""Console"" in the name. Some level of overall process.A process can use the FreeConsole function to detach itself from its current console, then it can call AllocConsole to create a new console or AttachConsole to attach to another console. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header.Registering a Control Handler Function Basic Control Handler Example This is an example of the SetConsoleCtrlHandler function that is used to install a control handler. Note Calling AttachConsole, AllocConsole, or FreeConsole will reset the table of control handlers in the client process to its initial state. Handlers must be registered again when."
1089,EnumFontFamiliesExW,"Microsoft Build · May 19 – 22, 2025EnumFontFamiliesExW function (wingdi.h) The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both. Syntax Parameters [in] hdc A handle to the device context from which to.(ANSI) EnumFontFamiliesExA The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. (ANSI) EnumFontFamiliesExW The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the.EnumFontFamiliesA The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device. (ANSI) EnumFontFamiliesExA The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. (ANSI) EnumFontFamiliesExW The.With EnumFontFamiliesExW , we can create a callback to EnumFontFamExProc which let us get an ENUMLOGFONTEXA. Finally, with the ... In brief, I would like to know what is the algorithm behind the creation of the lfFaceName of LOGFONTA. With EnumFontFamiliesExW , we can create a callback to EnumFontFamExProc which let us get an ENUMLOGFONTEXA. In."
1090,UnlockFile,"Microsoft Build · May 19 – 22, 2025UnlockFile function (fileapi.h) Unlocks a region in an open file. Unlocking a region enables other processes to access the region. For an alternate way to specify the region, use the UnlockFileEx function. Syntax Parameters [in] hFile A handle to the file that contains a region locked with LockFile. The file handle must have been created with.UnlockFile Unlocks a region in an open file. UnlockFileEx Unlocks a region in the specified file. The following functions are used with file I/O. CancelIo CancelIoEx CancelSynchronousIo CreateIoCompletionPort FlushFileBuffers GetQueuedCompletionStatus GetQueuedCompletionStatusEx LockFile LockFileEx PostQueuedCompletionStatus ReadFile ReadFileEx.LockFile function (fileapi.h) Locks the specified file for exclusive access by the calling process. The UnlockFile function unlocks a file region locked by LockFile. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform.Locking and Unlocking Byte Ranges in Files Although the system allows more than one application to open a file and write to it, applications must not write over each other's work. The LockFile and LockFileEx functions lock a specified range of bytes in a file. An application unlocks the byte range by using the UnlockFile or UnlockFileEx function.LockFile Locks the specified file for exclusive access by the calling process. LockFileEx Locks the specified file for exc... For more information, see the Remarks section. UnlockFile Unlocks a region in an open file. UnlockFileEx Unlocks a region in the specified file. This function can operate either synchronously or asynchronously..Appending One File to Another File The code example in this topic shows you how to open and close files, read and write to files, and lock and unlock files. This prevents another ... When each write operation is complete, UnlockFile is used to unlock the locked area. Example code that shows how an application can append one file to the end of.UnlockFileEx function (fileapi.h) Unlocks a region in the specified file. This function can operate either synchronously or asynchronously. Syntax Parameters [in] hFile A handle to the file. The handle must have been created with either the GENERIC_READ or GENERIC_WRITE access right. In Windows 8 and Windows Server 2012, this function is supported.LockFileEx function (fileapi.h) Locks the specified file for exclusive access by the calling process. If the same range is locked with an exclusive and a shared lock, two unlock operations are necessary to unlock the region; the first unlock operation unlocks the exclusive lock, the second unlock operation unlocks the shared lock. If a process.CAtlFile Class This class provides a thin wrapper around the Windows file-handling API. CAtlFile::UnlockRange Call this method to unlock a region of the file. You can lock more than one ... When you unlock a region, using CAtlFile::UnlockRange, the byte range must correspond exactly to the region that was previously locked. LockRange does not.GetFileAttributesExA I... Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetFileAttributesExW Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. Moved into api-ms-win-core-file-l1-2-2.dll in 10.0.10586. Moved."
1091,GetVersionExA,"Microsoft Build · May 19 – 22, 2025GetVersionExA function (sysinfoapi.h) GetVersionExA may be altered or unavailable for releases after Windows 8.1. Instead, use the Version Helper functions. For Windows 10 apps, please see Targeting your applications for Windows. With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the.sysinfoapi.h header This head... GetVersion With the release of Windows 8.1, the behavior of the GetVersion API has changed in the value it will return for the operating system version. GetVersionExA With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version..Environment.OSVersion Property Definition Namespace: System Assemblies:netstandard.dll, System.Runtime.dll Assembly:System.Runtime.Extensions.dll Assembly:mscorlib.dll Assembly:netstandard.dll Source:Environment.cs Source:Environment.cs Source:Environment.cs Gets the current platform identifier and version number. For more information, see.Environment.OSVersion return... Change description In previous .NET versions, Environment.OSVersion returns an OS version that may be incorrect when an application runs under Windows compatibility mode. For more information, see GetVersionExA function remarks. On macOS, Environment.OSVersion returns the underlying Darwin kernel version. Starting.Hey, I'm getting Windows Version in a legacy VB6 app using GetVersionExA and this table: https://learn.microsoft.com/en-us/windows/win32/msi/operating-system-property-values?redirectedfrom=MSDN This table does not show VersionNT and WindowsBuild for Windows Server 2022. Hey, I'm getting Windows Version in a legacy VB6 app using GetVersionExA and.CoFreeUnusedLibrariesE... CoInitializeEx Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240. GetHGlobalFromILockBytes Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
1092,GetRasterizerCaps,"Microsoft Build · May 19 – 22, 2025GetRasterizerCaps function (wingdi.h) The GetRasterizerCaps function returns flags indicating whether TrueType fonts are installed in the system. Syntax Parameters [out] lpraststat A pointer to a RASTERIZER_STATUS structure that receives information about the rasterizer. [in] cjBytes The number of bytes to be copied into the structure pointed to.GetPath The GetPath function retrieves... GetRandomRgn The GetRandomRgn function copies the system clipping region of a specified device context to a specific region. GetRasterizerCaps The GetRasterizerCaps function returns flags indicating whether TrueType fonts are installed in the system. GetRegionData The GetRegionData function fills the.RASTERIZER_STATUS structure (wingdi.h) The RASTERIZER_STATUS structure contains information about whether TrueTy... This structure is filled when an application calls the GetRasterizerCaps function. Syntax Members nSize The size, in bytes, of the RASTERIZER_STATUS structure. wFlags Specifies whether at least one TrueType font is installed and.GetPixelFormat The GetPixelFormat func... GetRandomRgn The GetRandomRgn function copies the system clipping region of a specified device context to a specific region. GetRasterizerCaps The GetRasterizerCaps function returns flags indicating whether TrueType fonts are installed in the system. GetRegionData The GetRegionData function fills the.Font and Text Functions (Windows GDI) The following functions are used with fonts and text. Function Description AddFontMemResourceEx Adds an embedded font to the system font table. GetKerningPairs Gets the character-kerning pa... GetOutlineTextMetrics Gets text metrics for TrueType fonts. GetRasterizerCaps Tells whether TrueType fonts are.Win32 Text API Comparison For those developers that are migrating their Win32 application code, the following table lists the Win32 Text APIs and the approximate equivalent in DirectWrite. GDI Text calls Description DirectWrite Equivalent AddFontMemResourceEx Adds an embedded fon... GetOutlineTextMetrics Gets text metrics for TrueType fonts.."
1093,ArrangeIconicWindows,"Microsoft Build · May 19 – 22, 2025ArrangeIconicWindows function (winuser.h) Arranges all the minimized (iconic) child windows of the specified parent window. T... Remarks An application that maintains its own minimized child windows can use the ArrangeIconicWindows function to arrange icons in a parent window. This function can also arrange icons on the desktop. An application.CWnd::accNavigate Called by the framework to traverse to another user in... CWnd::accSelect Called by the framework to modify the selection or move the keyboard focus of the specified object. CWnd::AnimateWindow Animates the associated window object. CWnd::ArrangeIconicWindows Arranges all the minimized (iconic) child windows. CWnd::Attach.You can use this function to specify the content, appearance, and... (Unicode) AreDpiAwarenessContextsEqual Determines whether two DPI_AWARENESS_CONTEXT values are identical. ArrangeIconicWindows Arranges all the minimized (iconic) child windows of the specified parent window. AttachThreadInput Attaches or detaches the input processing mechanism.CWindow Class This class provides methods for manipulating a window. Important This class and its members cannot be... Syntax Members Public Constructors Name Description CWindow::CWindow Constructor. Public Methods Name Description CWindow::ArrangeIconicWindows Arranges all minimized child windows. CWindow::Attach Attaches a window to the CWindow.If an application specifies the WS_MAXIMIZE or WS_MINIMIZE style in the CreateWindowEx function, the windo... After creating a window, an application can use the CloseWindow function to minimize the window. The ArrangeIconicWindows function arranges the icons on the desktop, or it arranges a parent window's minimized child windows in the parent.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Windows (Windows and Messages) In a graphical Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. ArrangeIconicWindows Arranges all the minimized.AnyPopup Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area. ArrangeIconicWindows Arranges all the minimized (iconic) child windows of the specified parent window. BeginDeferWindowPos Allocates memory for a.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-window-l1-1-4 (introduced in Windows 10, version 10.0.14393).Window functions AdjustWindowRect AdjustWindowRectEx AllowSetForegroundWindow AnimateWindow AnyPopup ArrangeIconicWindows BeginDeferWindowPos BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx."
1094,GetTimeFormatA,"Microsoft Build · May 19 – 22, 2025GetTimeFormatA function (datetimeapi.h) Formats time as a time string for a locale specified by identifier. The function formats either a specified time or the local system time. Note  For interoperability reasons, the application should prefer the GetTimeFormatEx function to GetTimeFormat because Microsoft is migrating toward the use of locale.datetimeapi.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications datetimeapi.h contains the following programming interfaces: Functions GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. GetDateFor....GetStringTypeA Deprecated. (GetStringTypeA) GetStringTypeExW Retrieves character type information for the characters in the specified source string. GetTimeFormatA Formats time as a time string for a locale specified by identifier. (ANSI) GetTimeFormatEx Formats time as a time string for a locale specified by name. GetTimeFormatW Formats time as a."
1095,DeleteObject,"Microsoft Build · May 19 – 22, 2025The DeleteObject action in Microsoft products, particularly in Microsoft Access, is used to delete a specified database object. Here are the key points on how to use it:This action is particularly useful for managing database objects effectively within Microsoft Access.References:DeleteObject function (wingdi.h) The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid. Syntax Parameters [in] ho A handle to a logical pen, brush, font, bitmap, region, or palette..DoCmd.DeleteObject method (Access) The DeleteObject method carries out the DeleteObject action in Visual Basic. Syntax expression.DeleteObject (ObjectType, ObjectName) expression A variable that represents a DoCmd object. ...rguments bl default constant, acDefault, is assumed for ObjectType), Access deletes the object selected in the Database.DataServiceContext.DeleteObject Method Definition Namespace: Microsoft.OData.Client Assembly:Microsoft.OData.Client.dll Package:Microsoft.OData.Client v7.9.0 Overloads DeleteObject(Object) Changes the state of the specified object to be deleted in the DataServiceContext. DeleteObject(Object, Object[]) Changes the state of the specified object to.OrganizationServiceContext.DeleteObject Method Definition Namespace: Microsoft.Xrm.Sdk.Client Assembly:Microsoft.Xrm.Sdk.dll Package:Microsoft.PowerPlatform.Dataverse.Client v1.2.3 Overloads DeleteObject(Entity) Changes the state of the specified entity to be deleted in the OrganizationServiceContext. DeleteObject(Entity, Boolean) Changes the.DeleteObject macro action Applies to: Access 2013, Office 2013 You can use the DeleteObject action to delete a specified database object. Setting The DeleteObject action has the following arguments. Click Table, Query, Form, Report, Macro, Module, Data Access Page, Server View, Diagram, Stored Procedure, or Function in the Object Type box in the.File.DeleteObject Method Definition Namespace: Microsoft.SharePoint.Client Assembly:Microsoft.SharePoint.Client.Portable.dll Attributes RemoteAttribute Applies to. Learn more about the Microsoft.SharePoint.Client.File.DeleteObject in the Microsoft.SharePoint.Client namespace.. /dotnet/api/microsoft.sharepoint.client.file.deleteobject.Field.DeleteObject Method Definition Namespace: Microsoft.SharePoint.Client Assembly:Microsoft.SharePoint.Client.Portable.dll Attributes RemoteAttribute Applies to. Learn more about the Microsoft.SharePoint.Client.Field.DeleteObject in the Microsoft.SharePoint.Client namespace.. /dotnet/api/microsoft.sharepoint.client.field.deleteobject.Web.DeleteObject Method Definition Namespace: Microsoft.SharePoint.Client Assembly:Microsoft.SharePoint.Client.Portable.dll Attributes RemoteAttribute Applies to. Learn more about the Microsoft.SharePoint.Client.Web.DeleteObject in the Microsoft.SharePoint.Client namespace.. /dotnet/api/microsoft.sharepoint.client.web.deleteobject.MediaDataServiceContext.DeleteObject(Object) Method Definition Namespace: Microsoft.WindowsAzure.MediaServices.Client Assembly:Microsoft.WindowsAzure.MediaServices.Client.dll Package:windowsazure.mediaservices v4.2.0 Parameters entity Object Implements DeleteObject(Object) Applies to. Learn more about the.Attachment.DeleteObject Method Definition Namespace: Microsoft.SharePoint.Client Assembly:Microsoft.SharePoint.Client.Portable.dll Attributes RemoteAttribute Applies to. Learn more about the Microsoft.SharePoint.Client.Attachment.DeleteObject in the Microsoft.SharePoint.Client namespace..."
1096,GetCharWidth32W,"Microsoft Build · May 19 – 22, 2025GetCharWidth32W function (wingdi.h) The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.(ANSI) GetCharWidth32W The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.(ANSI) GetCharWidth32W The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font."
1097,MapVirtualKeyExW,"Microsoft Build · May 19 – 22, 2025MapVirtualKeyExW function (winuser.h) Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier. Syntax Parameters [in] uCode Type: UINT The virtual key... Note The winuser.h header defines.(ANSI) MapVirtualKeyExA Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. (ANSI) MapVirtualKeyExW Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input.I want to convert Cstring to decima... Please check the document: Virtual-Key Codes The value of the virtual key is defined by macro. You can use map to bind relationship between CString and decimal value. Best regards, Minxin Yu If the answer is the right solution, please click &quot; Accept Answer &quot; and kindly upvote it. However, the....rces Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell Touch Hit Testing Touch Injection Touch Input Window Stations and Desktops Windows Accessibility Features Windows and Messages Windows Controls.APIs from api-ms-win-crt-convert-l1-1-0.dll API Requirements __toascii Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atodbl Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atodbl_l Introduced into api-ms-win-crt-convert-l1-1-0.dll in 10.0.10240. _atof_l Introduced into api-ms-win-crt-convert-l1-1-0.dll in."
1098,AttachThreadInput,"Microsoft Build · May 19 – 22, 2025The AttachThreadInput function is used to attach the input processing mechanism of one thread to that of another thread. This allows the threads to share the same input state, meaning they can share their concept of the active window. By doing this, one thread can activate another thread's window, which is useful for sharing focus state, mouse capture state, keyboard state, and window Z-order state among windows created by different threads.This function is particularly beneficial in scenarios where multiple threads need to coordinate their input handling, ensuring that user interactions are processed correctly across different threads.References:AttachThreadInput function (winuser.h) Attaches or detaches the input processing mechanism of one thread to that of another thread. Syntax Parameters [in] idAttach The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread. [in] idAttachTo The identifier of the thread to which idAttach will.ExternalApplicationAppInitString.AttachThreadInput Property Definition Namespace: Microsoft.Uii.Common Assembly:Microsoft.Uii.Common.dll Gets or sets a Boolean value that specifies whether the thread input is attached. Property Value Boolean True if the input is attached, otherwise, false. Attributes BrowsableAttribute Applies to. Gets or sets a.In addit... Otherwise, the system can become deadlocked when the thread is sent a message while it is waiting. The AttachThreadInput function can be used to allow a set of threads to share the same input state. By sharing input state, the threads share their concept of the active window. By doing this, one thread can always activate another.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Process and Thread Functions This topic describes the process and thread functions. Function Description AttachThreadInput Attaches the input processing mechanism of one thread to that of another thread. CreateRemoteThread Creates a.By using the AttachThreadInput function, a thread can attach its input processing to another thread. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib.(Unicode) AreDpiAwaren... ArrangeIconicWindows Arranges all the minimized (iconic) child windows of the specified parent window. AttachThreadInput Attaches or detaches the input processing mechanism of one thread to that of another thread. BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the.You can associate your thread's message queue with the windows owned by another thread by using the AttachThreadInput function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include.Hi I have a VBA code in my Excel project to grab data from a related program. This is done by calling AttachThreadInput to attach input so I can SendKeys. The AttachThreadInput gives errno 5 (ERROR_ACCESS_DENIED). With kind regards Gerald| Hi GeraldSchaapman-7723, AttachThreadInput is not going to work under WIndows 11 as it's a medium integrity.When I use in the callback of , and use Microsoft Pinyin IME in Chinese mode, and typing really fast, the IME turns buggy. Minimal reproduction code (in rust, minified from rdev ). When I use in the callback of , and use Microsoft Pinyin IME in Chinese mode, and typing really fast, the IME turns buggy. Minimal reproduction code (in rust, minified.Using this approach, you can call LoadCursor to get the handle for a given cursor and then compare this cursor with the actual global cursor based on their handles. One way to get HCURSOR is to call AttachThreadInput from your application to attach the input processing mechanism of the calling thread to that of the thread that created a window."
1099,BeginDeferWindowPos,"Microsoft Build · May 19 – 22, 2025BeginDeferWindowPos function (winuser.h) Allocates memory for a multiple-window- position structure and returns the handle to the structure. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h.EndDeferWindowPos function (winuser.h) Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle. Syntax Parameters [in] hWinPosInfo Type: HDWP A handle to a multiple-window – position structure that contains size and position information for one or more windows. This internal structure is returned by.DeferWindowPos function (winuser.h) Updates the specified multiple-window – posit... The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. The BeginDeferWindowPos function creates the structure. Syntax.AnimateWindow En... BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BringWindowToTop Brings the specified window to the top of the Z order. DeferWindowPos Updates the specified multiple-window – position structure for the specified window. The EndDeferWindowPos function uses.AllowSetForegroundWindow En... AnimateWindow Enables you to produce special effects when showing or hiding windows. BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BringWindowToTop Brings the specified window to the top of the Z order. (BroadcastSystemMessageW).There are four types of animation:_roll, slide, collapse o... (Unicode) AreDpiAwarenessContextsEqual Determines whether two DPI_AWARENESS_CONTEXT values are identical. BeginDeferWindowPos Allocates memory for a multiple-window- position structure and returns the handle to the structure. BeginPaint The BeginPaint function prepares the specified.The SetWindowPos function includes a set of flags that affect the window's show state; MoveWindow does not include these flags. Use the BeginDeferWindowPos, DeferWindowPos, and EndDeferWindowPos functions to simultaneously set the position of a number of windows, including the size, position, position in the z-order, and show state. An application.Window functions AdjustWindowRect AdjustWindowRectEx AllowSetForegroundWindow AnimateWindow AnyPopup ArrangeIconicWindows BeginDeferWindowPos BringWindowToTop CalculatePopupWindowPosition CascadeWindows ChangeWindowMessageFilter ChangeWindowMessageFilterEx ChildWindowFromPoint ChildWindowFromPointEx CloseWindow CreateWindow CreateWindowEx.CBasePane::SetRestoredFromRegistry Us... CBasePane::SetWindowPos Changes the size, position, and Z-order of a pane. CBasePane::ShowPane Shows or hides the pane. Return Value A handle to a deferred window position structure, or NULL. If you pass a handle, this method performs a deferred window move. You can obtain a handle by calling....orTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect, LoadIcon, LoadImage DestroyIcon Menu CreateMenu, CreatePopupMenu, LoadMenu, LoadMenuIndirect DestroyMenu."
1100,FindResourceA,"Microsoft Build · May 19 – 22, 2025FindResourceA function (winbase.h) Determines the location of a resource with the specified type and name in the specified module. To specify a language, use the FindResourceEx function. Syntax Parameters [in, optional] hModule Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If.To develop Menus and Other Resources, you need these headers: resourceindexer.h strsafe.h verrsrc.h w... (Unicode) FindResourceA Determines the location of a resource with the specified type and name in the specified module. (FindResourceA) FindResourceExA Determines the location of the resource with the specified type, name, and language in the.(FindFirst... (FindNextVolumeA) FindNextVolumeMountPointA Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. (Unicode) FindResourceA Determines the location of a resource with the specified type and name in the specified module. (FindResourceA) FindResourceExA Determines the location of the resource with.Do not try to lock a resource by using the handle returned by the FindResourceA function or Fin... Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header libloaderapi.h (include Windows.h) Library.Finding and Loading Resources Before using a resource, an application must load it into memory. The FindResource and FindResourceEx functions find a resource in a module and return a handle to the binary resource data. An application can use FindResource and LoadResource to find and load any type of resource, but these functions should be used."
1101,EnumSystemLocalesW,"Microsoft Build · May 19 – 22, 2025EnumSystemLocalesW function (winnls.h) Enumerates the locales that are either installed on or supported by an operating system. Note  For interoperability reasons, the application should prefer the EnumSystemLocalesEx function to EnumSystemLocales because Microsoft is migrating toward the use of locale names instead of locale identifiers for new.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`....InfoEx GetNumberFormatEx GetStringTypeA GetStringTypeExA GetThreadLocalevoid); GetUserDefaultGeoName GetUserDefaultLocaleName GetUserPreferredUILanguages NOT SUPPORTED Always returns en-US IdnToAscii IdnToUnicode IsValidCodePage IsValidLocaleName LCIDToLocaleName LCMapStringEx LocaleNameToLCID ResolveLocaleName SetThreadLocale CompareString.... either installed on or supported by an operating system.Note  For interoperability reasons, the application should pref EnumSystemLocalesEx function to EnumSystemLocalesEnumSystemLocalesW Enumerates the locales that are either installed on or supported by an operating system.Note  For interoperability reasons, the application should prefer the.EnumSystemGeoNames Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system. (Unicode) EnumSystemLocalesA Enumerates the locales that are either installed on or supported by an."
1102,lstrcmpiW,"Microsoft Build · May 19 – 22, 2025lstrcmpiW function (winbase.h) Compares two character strings. The comparison is not case-sensitive. To perform a comparison that is case-sensitive, use the lstrcmp function. Syntax Parameters [in] lpString1 Type: LPCWSTR The first null-terminated string to be compared. [in] lpString2 Type: LPCWSTR The second null-terminated string to be compared..(ANSI) lstrcatW Appends one string to another.Warning  Do not use. (Unicode) lstrcmpA Compares two character strings. (ANSI) lstrcmpiA Compares two character strings. (ANSI) lstrcmpiW Compares two character strings. (Unicode) lstrcmpW Compares two character strings. (Unicode) lstrcpyA Copies a string to a buffer. (ANSI) lstrcpynA Copies a.(ANSI) GlobalFindAtomW Searches the global atom table for the specified charac... (ANSI) GlobalGetAtomNameW Retrieves a copy of the character string associated with the specified global atom. (IsBadStringPtrA) IsBadStringPtrW Verifies that the calling process has read access to the specified range of memory. (IsBadString. (Unicode) lstrcatA."
1103,WriteConsoleA,"Microsoft Build · May 19 – 22, 2025WriteConsoleA is a function in the Windows API that writes a string of characters to the console screen buffer at the current cursor position. It operates in ANSI mode, meaning it uses characters from the Windows character set. When using WriteConsoleA, the cursor position advances as characters are written, and it can be used only with console handles.This function is similar to WriteConsoleW, which is the Unicode version. WriteConsoleA fails if used with a standard handle that has been redirected to a file. It is important to ensure that the output handle is a console handle before calling WriteConsoleA.To use WriteConsoleA, you typically need to include the appropriate headers and link against the required libraries. The function is part of the Kernel32.dll and requires the ConsoleApi.h header.References:WriteConsole function Writes a character string to a console screen buffer beginning at the current cursor location. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi.h (via WinCon.h, include Windows.h) Library Kernel32.lib DLL.Console Application Issues The 8-bit console functions use the OEM code page. For example, if FindFirstFileA returns a string that contains certain extended ANSI characters, WriteConsoleA will not display the string properly. The best long-term solution for a console application is to use Unicode. ... Review console application issues, such as.... add dl, '0' ; Convert to ASCII mov [edi + ecx], dl ; Store in buffer inc ecx ; Null-terminate the string mov byte ptr [edi + ecx], 0 ret ; Input: esi = address of null-terminated string ; Output: string is displayed on console ; Load argumen WriteConsoleA push -11 ; hConsoleOutput push esi ; lpBuffer mov edx, LENGTHOF.SetFileApisToANSI function (fileapi.h) Causes the file I/O functions to use the ANSI character set code page for the current process. This function is useful for 8-bit console input and output operations. For example, if the FindFirstFileA function returns a string that contains certain extended ANSI characters, and the 8-bit console functions are.SetFileApisToOEM function (fileapi.h) Causes the file I/O functions for the process to use the OEM character set code page. This function is useful for 8-bit console input and output operations. For example, if the FindFirstFileA function returns a string that contains certain extended ANSI characters, and the 8-bit console functions are set to.CoGetApartmentType Introduced into api-ms-win-core-com-l1-1. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetCurrentLogicalThreadId Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240.."
1104,LoadImageW,"Microsoft Build · May 19 – 22, 2025LoadImageW function (winuser.h) Loads an icon, cursor, animated cursor, or bitmap. Syntax Parameters [in, optional] hInst Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of 32-bit Windows, an instance handle (HINSTANCE), such.ImageList_LoadImageW function (commctrl.h) Creates an image list from the specified bitmap. Syntax Parameters hi Type: HINSTANCE A handle to the instance that contains the resource. This parameter can be NULL if you are loading an image from a file or loading an OEM resource. lpbmp Type: LPCTSTR The image to load. Requirements Requirement Value.Is this correct? project.rc resource.h project.cpp debug console :| There are a number of reasons why the call to FindResourceW can fail. Finally, the code should use LoadImageW or LoadBitmapW if it will actually load a bitmap. Its not clear what purpose is served by calling FindResourceW since obtaining an HRSRC handle does not make that resource.The problem is that LoadImageW returns &quot;invalid handle&quot; error code (dw is 0x06): But if I just do this, it works, &quot;result&quot; is 0: So the path is ok, the file can be accessed, it is only LoadImage which doesn't work, and it happens only in Azure, locally everything is ok. ...ror code (dw i But if I just do this, it works,.ImageList_LoadBitmap Calls the ImageList_LoadImage function to create an image list from the specified bitmap resource. ImageList_LoadImageA Creates an image list from the spec... (ANSI) ImageList_LoadImageW Creates an image list from the specified bitmap. InitCommonControls Registers and. InitCommonControlsEx Ensures that the common control DLL.(Unicode) LoadIconA Loads the specified ico... (ANSI) LoadIconW Loads the specified icon resource from the executable (.exe) file associated with an application instance. (Unicode) LoadImageA Loads an icon, cursor, animated cursor, or bitmap. (ANSI) LoadImageW Loads an icon, cursor, animated cursor, or bitmap. (Unicode) LoadMenuA Loads the.DPA_InsertPtr Inserts a new item at a specified position in a dynamic pointer arra... If necessary, the DPA expands to accommodate the new item. DPA_LoadStream Loads the dynamic pointer array (DPA) from a stream by calling the specified callback function to read each element. DPA_Merge Combines the contents of two dynamic pointer arrays (DPAs)..(Unicode) CharUpperW Converts a character string or a single character to u... (ANSI) CopyAcceleratorTableW Copies the specified accelerator table. CopyImage Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. (ANSI) CreateAcceleratorTableW Creates an accelerator table. (ANSI).Hello, I have been creating a project using OpenGL, namely glfw3.lib. I can only guess that there is something wrong with the linker finding opengl code to link glfw3 to. This is where I see all the Linker Errors: Build started... 1&gt;------ Build started: Project: NovaForge, Configuration: Debug x64 ------ 1&gt;glfw3.lib(win32_init.obj) : error."
1105,RegisterDragDrop,"Microsoft Build · May 19 – 22, 2025RegisterDragDrop function (ole2.h) Registers the specified window as one that can be the target of an OLE drag-and-drop operation and specifies the IDropTarget instance to use for drop operations. Syntax Parameters [in] hwnd Handle to a window that can be a target for an OLE drag-and-drop operation. [in] pDropTarget Pointer to the IDropTarget.MSHLFLAGS enumeration (wtypesbase.h) Specifies why the marshaling is to be done. The presence of the data packet in the table counts as a strong referen... When the data packet is removed from the table, the table implementer must call the CoReleaseMarshalData function on the data packet.MSHLFLAGS_TABLESTRONG is used by the RegisterDragDrop.IDropTarget interface (oleidl.h) The IDropTarget interface is one of the interfaces you implement to provide drag-and-drop operations in your application. The IDropTarget interface contains methods that handle all these responsibilities except registering and revoking the application window as a drop target, for which you must call the.This document discusses how applicati... The drop target must register itself with the system by calling RegisterDragDrop. This function provides the system with the handle to a target window and a pointer to the target application's IDropTarget interface. The following procedure outlines the essential steps that are typically used to transfer.IOleInPlaceObjectWindowless::GetDropTarget method (ocidl.h) Retrieves the IDropTarget interface for an in-place active, windowless object that supports drag and drop. Remarks A windowed object registers its IDropTarget interface by calling the RegisterDragDrop function and supplying its window handle as a parameter. Regi... The following events.SVsMainWindowDropTarget Interface Definition Namespace: Microsoft.VisualStudio.Shell.Interop Assembly:Microsoft.VisualStudio.Shell.Interop.8.0.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 This service implements the IDropTarget interface. It is the drag/drop handler for the main window of the.IDropSource interface (oleidl.h) The IDropSource interface is one of the interfaces you implement to provide drag-and-drop operations in your application. It contains methods... IDropSource contains the methods for generating visual feedback to the end user and for canceling or completing the drag-and-drop operation. You also need to call the.Handling Shell Data Transfer Scenarios The Shell Data Object document discussed the general approach that is used to transfer Shell data with drag-and-drop or the Clipboard. Prior to the operation, your application must: Call Regist... Call RegisterDragDrop to register a target window and your application's IDropTarget interface. After the user.ReadFmtUserTypeStg The ReadFmtUserTypeStg function returns the clipboard format and user type previously saved with the WriteFmtUserTypeStg f... RegisterDragDrop Registers the specified window as one that can be the target of an OLE drag-and-drop operation and specifies the IDropTarget instance to use for drop operations. ReleaseStgMedium Frees.... Gets the drop Remarks The host (caller) is responsible for calling RegisterDragDrop or RevokeDragDrop, and for calling Release on the returned drop target when done. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows."
1106,IsAccelerator,"Microsoft Build · May 19 – 22, 2025IsAccelerator function (ole2.h) Determines whether the specified keystroke maps to an accelerator in the specified accelerator table. Syntax Parameters [in] hAccel A handle to the accelerator table. [in] cAccelEntries The number of entries in the accelerator table. [in] lpMsg A pointer to the keystroke message to be translated. [out] lpwCmd A.DoDragDrop Carries out an OLE drag and drop operation. IsAccelerator Determines whether the specified keystroke maps to an accelerator in the specified accelerator table. OleBuildVersion This function is obsolete. OleTranslateAccelerator Called by the object application, allows an object's container to translate accelerators according to the.GetRunningObjectTable Returns a pointer to the IRunningObjectTable interface on the local running o... IIDFromString Converts a string generated by the StringFromIID function back into the original interface identifier (IID). Initialize Initializes a thread to use Windows Runtime APIs. IsAccelerator Determines whether the specified keystroke maps.OleTranslateAccelerator function (ole2.h) Called by the object application, allows an object's container to translate accelerators according to the container's accelerator table. ...et ext-ms-win-com-ole32-l1-1-3 (introduced in Windows 10, version 10.0.10240) IOleInPlaceFrame::TranslateAccelerator IsAcceleratorCalled by the object application,.IPreviewHandler::TranslateAccelerator method (shobjidl_core.h) Directs the preview handler to handle a keystroke passed up from the message pump of the process in which the preview handler is running. The preview handler then has the option to call GetWindowContext to get an accelerator t... The preview can then compare keystrokes against that.Building Preview Handlers This topic discusses the specific interfaces and methods required to create a preview handler. IPreviewHandler::TranslateAccelerator This method is called by the message pump of the preview handler's process (whether prevhost.exe or a custom local server) in response to user keystrokes. ... passed to this method through....c callobj.h combaseapi.h comcat.h ctxtcall.h dmerror.h docobj.h eventsys.h guiddef.h iaccess.h imessagedispatcher.h messagedispatcherapi.h objbase.h objidl.h objidlbase.h ocidl.h ole.h ole2.h oledlg.h oleidl.h roapi.h rpcdce.h servprov.h shobjidl.h txlogpub.h unknwn.h unknwnbase.h urlmon.h vbinterf.h winddi.h winerror.h wtypesbase.h For."
1107,GetSystemTimeAsFileTime,"Microsoft Build · May 19 – 22, 2025The GetSystemTimeAsFileTime function retrieves the current system date and time in UTC format and returns it in a FILETIME structure. This function is useful for obtaining the current time that can be used for file time operations.Here is a simple example of how to use the GetSystemTimeAsFileTime function in C++:In this example, the GetSystemTimeAsFileTime function is called, and the current system time is stored in the ft variable of type FILETIME. You can then use this FILETIME for various purposes, such as setting file times or performing time comparisons.References:GetSystemTimeAsFileTime function (sysinfoapi.h) Retrieves the current system date and time. The information is in Coordinated Universal Time (UTC) format. Syntax Parameters [out] lpSystemTimeAsFileTime A pointer to a FILETIME structure to receive the current system date and time in UTC format. ...er [desktop apps | UWP apps] Target Platform.NtQuerySystemTime function (winternl.h) [NtQuerySystemTime may be altered or unavailable in future versions of Windows. Applications should use the GetSystemTimeAsFileTime function.]. Syntax Parameters [out] SystemTime A pointer to a LARGE_INTEGER structur... Requirements Requirement Value Target Platform Windows Header winternl.h Library.UTC-based time is loosely defined as the current date and time of day in Greenwich, England. It is easy to display this format to a user. You can also obtain the system time in file time format using the GetSystemTimeAsFileTime function. GetSystemTimeAsFileTime copies the time to a FILETIME structure. To set the system time, use the SetSystemTime.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). You can also obtain the system time in a FILETIME.GetSystemTime function (sysinfoapi.h) Retrieves the current system date and time in Coordinated Universal Time (UTC) format. To retrieve the current system date and time in local time, use the GetLocalTime function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum supported server.Date and time data types Date and time functions Functions that return system date and time values Functions that return date and time parts Functions that return date and time values from their parts Functions that return date and time diff... Higher-precision system date and time functions Since SQL Server 2008 (10.0.x), the Database Engine.SystemInformationEvent.StartTime Property Definition Namespace: Microsoft.VisualStudio.IntelliTrace Assembly:Microsoft.IntelliTrace.Core.dll Gets the start time of the recording in UTC format. This value is retrieved from GetSystemTimeAsFileTime. Property Value Int64 Applies to. Gets the start time of the recording in UTC format. This value is.sysinfoapi.h header This header is used by multiple technologies. For more information, see: System Services Windows Sidebar sysinfoapi.h contains the following programming interfaces: Functions EnumSystemFirmwareTables Enumerates all system firmware tables of the specified type. GetSystemTimePreciseAsFileTime GetSystemTimePreciseAsFileTime.ETW_BUFFER_HEADER structure (evntrace.h) The header structure of an ETW buffer. TimeStamp The time when the buffer was flushed. It will be in the raw clock type of the session from which the buffer was collected (for example, QueryPerformanceCounter, CPU timestamp counter, or GetSystemTimeAsFileTime). Requirements Requirement Value Minimum.You might think this would be easy with the GetSystemTime API, which returns a SYSTEMTIME structure containing a wMilliseconds field documented in MSDN as storing the current millisecond. And what about... Member Functions instance Returns a reference to the only instance of this class. systemtime Returns the current system time as a SYSTEMTIME."
1108,GetThreadTimes,"Microsoft Build · May 19 – 22, 2025GetThreadTimes function (processthreadsapi.h) Retrieves timing information for the specified thread. Syntax Parameters [in] hThread A handle to the thread whose timing information is sought. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access.GetThreadPriorityBoost Retrieves the priority boost control state of the specified thread. GetThreadTimes Retrieves timing information for the specified thread. OpenThread Opens an existing thread object. QueryThreadCycleTime Ret... Obsolete Functions NtGetCurrentProcessorNumber NtQueryInformationProcess NtQueryInformationThread WinExec.Processes and threads Provides information about a newly created process and its primary thread. You need these headers: processthreadsapi.h Enumerations MACHINE_ATTRIBUTES Specifies the ways in which an architecture of code can run on a host operating system. GetProcessShutdownParameters Retrieves the shut... GetProcessTimes Retrieves timing.processthreadsapi.h header This header is used by multiple technologies. For more information, see: Processes and threads Remote Desktop Services Security and Identity processthreadsapi.h contains the following programming interfaces: Functions CreateProcessA Creates a new process and its primary thread. GetProcessTimes Retrieves timing.For our applications we use the Process.GetCurrentProcess().TotalProcessorTime to determine how much CPU is used for actions calls. They're now bypassing kernelbase.dll ( ) and are instead calling directly which is why you're seeing correct values from SIV64X - everything else using GetSystemTimes/GetSystemInfo from kernelbase ( ) still has issues.CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240... Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoGetCurrentLogicalThreadId Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in."
1109,OpenMutexW,"Microsoft Build · May 19 – 22, 2025OpenMutexW function (synchapi.h) Opens an existing named mutex object. Syntax Parameters [in] dwDesiredAccess The access to the mutex object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock in exclusive mode. OpenEventA Ope... (ANSI) OpenEventW Opens an existing named event object. (Unicode) OpenMutexW.A process can specify the handle to a mutex object in a call to the DuplicateHandle function to create a duplicate handle that can be used by another process. This mechanism works for both named and unnamed mutexes. A process can specify a named mutex in a call to the [OpenMutex](./nf-synchapi-openmutexw.md) or CreateMutex function to retrieve a.A process can specify a named mutex in a call to [OpenMutex](./nf-synchapi-openmutexw.md) or CreateMutex to retrieve a handle to the mutex object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.Mutex The handle is returned by the CreateMutex or [OpenMutex](../synchapi/nf-synchapi-openmutexw.md) function. Examples The following example creates a mutex, duplicates a handle to the mutex, and passes it to another thread. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps | UWP apps] Minimum.CreateMutexExW function (synchapi.h) Creates or opens a named or unnamed mutex object and returns a handle to the object. Syntax Parameters [in, optional] lpMutexAttributes A pointer to a SECURITY_ATTRIBUTES structure. This mechanism works for both named and unnamed mutexes. A process can specify a named mutex in a call to the.CreateMutexW function (synchapi.h) Creates or opens a named or unnamed mutex object. ...ted client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h on Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows.This topic lists all of the APIs in WindowsApp.lib, grouped by module, where the module is either an API set or a dll. Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library.VDS_ISCS... VSS_WRITER_STATE Indicates the current state of the writer. VSS_WRITERRESTORE_ENUM Indicate to a requester the conditions under which it will handle events generated during a restore operation. Functions ~CVssWriter ~CVssWriter is the destructor of the CVssWriter class object. AbortAllSnapshotsInProgress This method is reserved for."
1110,DebugActiveProcess,"Microsoft Build · May 19 – 22, 2025DebugActiveProcess function (debugapi.h) Enables a debugger to attach to an active process and debug it. Syntax Parameters [in] dwProcessId The identifier for the process to be debugged. The debugger is granted debugging access to the process as if it created the process with the DEBUG_ONLY_THIS_PROCESS flag. For more information, see the Remarks.Debugging a Running Process To debug a process that is already running, the debugger should use DebugActiveProcess with the process identifier. To retrieve a list of process identifiers, use either the EnumProcesses or Process32First function. DebugActiveProcess attaches the debugger to the active process. After the debugger has either created or.ICorDebug::DebugActiveProcess Method Attaches the debugger to an existing process. Syntax Parameters id [in] The ID of the process to which the debugger is to be attached. win32Attach [in] Boolean value that is set to true if the debugger should behave as the Win32 debugger for the process and dispatch the unmanaged callbacks; otherwise, false..Debugging Functions The following functions are used with debugging. Func... ContinueDebugEvent Enables a debugger to continue a thread that previously reported a debugging event. DebugActiveProcess Enables a debugger to attach to an active process and debug it. DebugActiveProcessStop Stops the debugger from debugging the specified process..debugapi.h header This header is used by System Services. For more information, see: System Services debugapi.h contains the following programming interfaces: Functions CheckRemoteDebuggerPresent Determines whether the specified process is being debugged. ContinueDebugEvent Enables a debugger to continue a thread that previously reported a ....Process Functions for Debugging The CreateProcess function enables a debugger to start a process and debug it. The OpenProcess function enables a debugger to obtain the identifier of an e... (The DebugActiveProcess function uses this identifier to attach the debugger to the process.). Typically, debuggers open a process with the PROCESS_VM_READ.DebugActiveProcessStop function (debugapi.h) Stops the debugger from debugging the specified process. Syntax Parameters [in] dwProcessId The identifier of the process to stop debugging. Return value If the function succeeds, the return value is nonzero. To get extended error information, call GetLastError. Requirements Requirement Value Minimum.ICorDebug Interface Provides methods that allow developers to debug applications in the common language runtime (CLR) environment. Note Mixed-mode (managed and native code) debugging is not supported on non-x86 platforms (such as IA64 and AMD64). CreateProcess Method Launches a process and its primary thread under the control of the debugger..DebugSetProcessKillOnExit function (winbase.h) Sets the action to be performed when the calling thread exits. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL.Note This information is intended for developers debugging system errors. F... It is corrupt, absent, or not writable. ERROR_DEBUG_ATTACH_FAILED 590 (0x24E) {Unexpected Failure in DebugActiveProcess} An unexpected failure occurred while processing a DebugActiveProcess API request. You may choose OK to terminate the process, or Cancel to ignore the."
1111,LockFile,"Microsoft Build · May 19 – 22, 2025LockFile function (fileapi.h) Locks the specified file for exclusive access by the calling process. To specify additional options, for example creating a shared lock or for block-on-fail operation, use the LockFileEx function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server.Episode What is a lockfile and why you should commit it [9 of 26] Beginner's Series to: Node.js Lockfiles in Node.js are very important yet often misunderstood. Learn what is package-lock.json, how it work and why it's needed.Full ""Intro to Node.js"" course on Microsoft Learn: https://aka.ms/LearnNode.jsWatch the entire series:.Locking and Unlocking Byte Ranges in Files Although the system allows more than one application to open a file and write to it, applications must not write over each other's work. An application can prevent this problem by temporarily locking a byte range in a file. The LockFile and LockFileEx functions lock a specified range of bytes in a file..GetTempFileName Creates a name for a temporary file. ImportCallback An application-defined callback function used with WriteEncryptedFileRaw. LockFile Locks the specified file for exclusive access by the calling process. LockFileEx Locks the specified file for exclusive access by the calling process. This function can operate either synchronously.LockFileEx function (fileapi.h) Locks the specified file for exclusive access by the calling process. This function can operate either synchronously or asynchronously and can request either an exclusive or a shared lock. Syntax Parameters [in] hFile A handle to the file. In Windows 8 and Windows Server 2012, this function is supported by the.DebugParametersType.LockFile Property Definition Namespace: System.Fabric.Management.ServiceModel Assembly:System.Fabric.Management.ServiceModel.dll Package:Microsoft.ServiceFabric v9.1.1833 Package:Microsoft.ServiceFabric v8.2.1748 Property Value String Applies to. Learn more about the.(GetVolumePathNameW) LocalFileTimeToFileTime Converts a local file time to a file time based on the Coordinated Universal Time (UTC). LockFile Locks the specified file for exclusive access by the calling process. LockFileEx Locks the specified file for exclusive access by the calling process. This function can operate either synchronously or.Basic renv workflow In this section: Install renv Initialize renv session with pre-installed R libraries Use renv to install additional packages Use renv to save your R notebook environment to DBFS Reinstall a renv environment given a lockfile from DBFS Install renv You can install renv as a cluster-scoped library or as a notebook-scoped library..Appending One File to Another File The code example in this topic shows you how to open and close files, read and write to files, and lock and unlock files. However, before writing to the second file, the application uses SetFilePointer to set the pointer of the second file to the end of that file, and uses LockFile to lock the area to be written..errors with authentication plugin during restore - #8198 Plugins cache not discoverable intermittently on linux platforms - #7845 LockFile: with ATF, it has false NU1004 due to a bad target framework equality check - #8187 LockFile: '--locked-mode' restore flag not respected if lock file is empty or malformed - #8160 LockFile: Don't lowercase."
1112,SetRectEmpty,"Microsoft Build · May 19 – 22, 2025SetRectEmpty function (winuser.h) The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero. Syntax Parameters [out] lprc Pointer to the RECT structure that contains the coordinates of the rectangle. Return value If the function succeeds, the return value is nonzero. Requirements Requirement Value Minimum.Rectangle Functions The following functions are used with rectangles. PtInRect Determines whether the specified point lies ... SetRect Sets the coordinates of the specified rectangle. SetRectEmpty Creates an empty rectangle in which all coordinates are set to zero. SubtractRect Determines the coordinates of a rectangle formed by subtracting one.KS_ANALOGVIDEOINFO structure (ksmedia.h) The KS_ANALOGVIDEOINFO structure describes an analog video stream. If the sink filter does not support image extraction, and the rectangle is not empty, then it rejects the connection. A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and set IsRectEmpty to later check.KS_VIDEOINFO structure (ksmedia.h) The KS_VIDEOINFO structure describes the bitmap and color information for a video stream. Ideally, a sink fi... A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and IsRectEmpty to later check the rectangle). The rcTarget member specifies the destination rectangle for the.KS_VIDEOINFOHEADER structure (ksmedia.h) The KS_VIDEOINFOHEADER structure describes the bitmap and color information for a video stream. A filter should use the Win32 function SetRectEmpty to reset a rectangle to all zeros (and set IsRectEmpty to later check the rectangle). The rcTarget member specifies the destination rectangle for t... The.Rectangle Operations The SetRect function creates a rectangle, the CopyRect function makes a copy of a given rectangle, and the SetRectEmpty function creates an empty rectangle. An empty rectangle is any rectangle that has zero width,... The IsRectEmpty function determines whether a given rectangle is empty. The SetRect function creates a.CRect::SetRectEmpty Sets CRect to an empty rectangle (all coordinates equal to 0). CRect::Size... The CRect(const RECT&) and CRect(LPCRECT) constructors perform a CopyRect. Example CRect::IsRectEmpty Determines whether CRect is empty. Note The following CRect member functions require normalized rectangles in order to work properly: Height, Width,.KS_VIDEOINFOHEADER2 structure (ksmedia.h) The KS_VIDEOINFOHEADER2 structure describes the details of a video stream, including bob or w... Ideally, a sink filter checks rcSource and if the sink filter does not support image extraction, and the rectangle is not empty, then it rejects the connection. A filter should use the Win32 function.SetRect function (winuser.h) The SetRect function sets the coordinates of the specified rectangle. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL.Examples For an example, see Using Rectangles. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll See also RECT Rectangle Functions."
1113,GetDriveTypeW,"Microsoft Build · May 19 – 22, 2025GetDriveTypeW function (fileapi.h) Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. To determine whether a drive is a USB-type drive, call SetupDiGetDeviceRegistryProperty and specify the SPDRP_REMOVAL_POLICY property. Syntax Parameters [in, optional] lpRootPathName The root directory for the drive. A.(Unicode) GetDiskSp... GetDiskSpaceInformationW Gets disk space information for a volume at a given root path. GetDriveTypeA Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. (ANSI) GetDriveTypeW Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. (Unicode).Column name Data type Description fixed_drive_path nvarchar(512) Path to the volume, like C:\. drive_type 1 int Code for drive type. drive_type_desc 1 nvarchar(512) Description of drive type. free_space_in_bytes bigint Disk free space in bytes. 1 For more information, see the GetDriveTypeW function. See also Dynamic Management Views and Functions.To develop Data Access and Storage, you need these headers: bindlink.h clfs.h clfsmgmt.h clfsmgmtw32.h clfsw32.h dskquota.h fileapi.h fileapifromapp.h ioringapi.h ktmtypes.h ktmw32.h lmshare.h lmstats.h lzexpand.h ntioring_x.h ntmsapi.h ntmsmli.h nvme.h txfw32.h winefs.h wofapi.h wow64apiset.h For programming guidance for this technology, see:.For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). CoGetApartmentType Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetConvertStg Introduced into api-ms-win-core-com-l2-1-1.dll in 10.0.10240.."
1114,GetWindowTextLengthW,"Microsoft Build · May 19 – 22, 2025GetWindowTextLengthW function (winuser.h) Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows.However, GetWindowText cannot retrieve the text of a control in another application. (ANSI) GetWindowTextLengthA Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). (ANSI) GetWindowTextLengthW Retrieves the length, in characters, of the specified window's title bar text (if the window has.Hi, I'm working on the WinUI application in cpp. We are a multithreaded application, we are following a practice of not allocating any memory in the main thread. Is this even possible?| As far as I'm concerned, you couldn't make the text from the text field directly stored in my buffer... You could try to use GetWindowTextW function to copy the.DestroyWindow Destroys the specified window. (ANSI) DrawTextExW The DrawTextEx function draws formatted text in the specified rectangle. (Unicode) DrawTextW The DrawTextW (Unicode) function draws formatted text in the specified rectangle. (DrawTextW function) EmptyClipboard Empties the clipboard and frees handles to data in the clipboard.."
1115,DrawMenuBar,"Microsoft Build · May 19 – 22, 2025DrawMenuBar function (winuser.h) Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose menu bar is to be redrawn. Redraws the menu bar of the specified window. If.Menus and Other Resources Overview of the Menus and Other Resources technology. ... DrawIconEx Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. DrawMenuBar Redraws the menu bar of the specified window. If the menu bar changes after.CWnd::DrawAnimatedRects Draws a wire-frame rectangle and animates it to indicate the opening of an icon or the minimizing or maximizing of a window. CWnd::DrawCaption Draws a caption. CWnd::DrawMenuBar Redraws the menu bar. CWnd::EnableActiveAccessibility Enables user-defined Active Accessibility functions. CWnd::EnableDynamicLayout Enables the.CWindow::DlgDirSelect Retrieves the current selection from a list box. CWindow::DlgDirSelectComboBox Retrieves the current selection from a combo box. CWindow::DragAcceptFiles Registers whether the window accepts dragged files. CWindow::DrawMenuBar Redraws the window's menu bar. CWindow::EnableScrollBar Enables or disables the scroll bar arrows..If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory use... DestroyMenu Destroys the specified menu and frees any memory that the menu occupies. DrawMenuBar Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function.Remarks After sending this message, an application must call the DrawMenuBar function to update the menu bar. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header Winuser.h (include Windows.h) See also Reference DrawMenuBar.WM_MDISETMENU message An application sends the WM_MDISETMENU message to a multiple-document interface ... Remarks After sending this message, an application must call the DrawMenuBar function to update the menu bar. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.Remarks The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include.DrawIconEx Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified. DrawMenuBar Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed.Remarks The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include."
1116,WaitForSingleObjectEx,"Microsoft Build · May 19 – 22, 2025WaitForSingleObjectEx function (synchapi.h) Waits until the specified object is in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The WaitForSingleObjectEx function can wait for the following objects: Change notification Console input Event Memory.Receiving Policy Change Events The LSA provides functions you can use to receive notification when there is a change in policy on the local system. Your application can then call a wait function such as WaitForSingleObject, WaitForSingleObjectEx, or RegisterWaitForSingleObject to wait for the event to occur. Typically, notification events are used.The pipe server uses the WaitForSingleObjectEx function, which performs an alertable wait operation that returns when a completion routine is ready to execute. The wait function also returns when an event object is signaled, which in this example indicates that the overlapped ConnectNamedPipe operation has finished (a new clien... Code example is.QueueUserAPC function (processthreadsapi.h) Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread. After the thread is in an alertable state, the t... A thread enters an alertable state by using SleepEx function, SignalObjectAndWait function, WaitForSingleObjectEx function, WaitForMultipleObjectsEx.LPOVERLAPPED_COMPLETION_ROUTINE callback function (minwinbase.h) An application-defined callback function used with the ReadFileEx and WriteFileEx functions. It is called when the asynchronous input and output (I/O) operation is completed or canceled and the calling thread is in an alertable state (by using the SleepEx,.Alertable I/O Alertable I/O is the method by which application threads process asynchronous I/O requests only when they are in an alertable state. A thread can only do this by calling one of the following functions with the appropriate flags: SleepEx WaitForSingleObjectEx WaitForMultipleObjectsEx SignalObjectAndWait MsgWaitForMultipleObjectsEx.Use WaitForSingleObjectEx, providing the wait handle retrieved in Step 2, to signal the start of each frame. The following example shows the render loop from the DirectXLatency sample: The following example shows the WaitForSingleObjectEx call from the DirectXLatency sample: What should my game do while it waits for the swap chain to present..Waiting for the Asynchronous Reply What the client does while it waits to be notified of a reply from the server depends on the notification mechanism it selects. If the client uses an event for notification, it will typically call the WaitForSingleObject function or the WaitForSingleObjectEx function. The client enters a blocked state when it.WaitForSingleObject function (synchapi.h) Waits until the specified object is in the signaled state or the time-out interval elapses. To enter an alertable wait state, use the WaitForSingleObjectEx function. To wait for multiple objects, use WaitForMultipleObjects. Syntax Parameters [in] hHandle A handle to the object. For a list of the object.Wait functions Wait function Description MsgWaitForMultipleObjects Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. RegisterWaitForSingleObject Directs a wait thread in the thread pool to wait on the object. WaitForSingleObject Waits until the specified object is in the signaled state or."
1117,CheckMenuItem,"Microsoft Build · May 19 – 22, 2025The CheckMenuItem function is used in programming to set a menu item's check-mark attribute to either selected or cleared. You can specify the check state using the MF_CHECKED value to indicate that the menu item is selected, or the MF_UNCHECKED value to indicate that it is cleared.This function is particularly useful for applications that need to provide visual feedback on the state of options in a menu, allowing users to see which options are currently active or inactive.Additionally, you can use the GetMenuState function to determine whether a menu item is currently selected or cleared, or you can use the GetMenuItemInfo and SetMenuItemInfo functions for more detailed control over the menu item's state.References:CheckMenuItem function (winuser.h) [CheckMenuItem is available for use in the operating systems specified in the Requirements section. Instead, use SetMenuItemInfo. ] Sets the state of the specified menu item's check-mark attribute to either selected or clear. Requirements Requirement Value Minimum supported client Windows 2000 Professional.Menus and Other Resources Overview of the Menus and Other Resources technology. If the operand is a character string, the function converts the characters in place. (Unicode) CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a.Setting the Check-mark Attribute The CheckMenuItem function sets a menu item's check-mark attribute to either selected or cleared. ... state of a item by using the SetMenuItemInfoBy using the CheckMenuRadioItem function, you can check one menu item while simultaneously removing the check mark from all other menu items in the group. Therefore,.About Menus A menu is a list of items that specify options or groups of options (a submenu) for an application. Clicking a menu item opens a submenu or causes the applica... Applications typically check or clear a menu item to indicate whether an option is in effect. You can set a menu item's check mark attribute by using the CheckMenuItem.CMenu::CheckMenuItem Places a check mark next to or removes a check mark from a menu item in the pop-up menu. CMenu::CheckMenuRadioItem Places a radio button next to a menu item and removes the radio button from all of the other menu items in the group. CMenu::DrawItem Called by the framework when a visual aspect of an owner-drawn menu changes..(Unicode) CheckDlgButton Changes the check state of a button control. CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears.Menu Functions Name Description AppendMenu Appends a new item to t... You can use this function to specify the content, appearance, and behavior of the menu item. CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckMenuRadioItem Checks a specified menu item and makes it a radio item. At.To change the attributes of existing menu items, it is much faster to use the CheckMenuItem and EnableMenuItem functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).To change the attributes of existing menu items, it is much faster to use the CheckMenuItem and EnableMenuItem functions. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h).I have a windows forms application. It contains a menu item called CheckMenuItem of type Forms.ToolStripMenuItem, that should behave as a checkable item, when the properties Checked / CheckState set. ... But which one?| The main point is, that the behavior is different in UI-Designer and in the running app. I have a windows forms application. It."
1118,GetConsoleScreenBufferInfo,"Microsoft Build · May 19 – 22, 2025GetConsoleScreenBufferInfo function Retrieves information about the specified console screen buffer. Syntax Parameters hConsoleOutput [in] A handle to the console screen buffer. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop... See reference information.Associated with each screen buffer is a window that determines the s... The GetConsoleScreenBufferInfo function returns the following information about a screen buffer and its window: The current size of the console screen buffer The current location of the window The maximum size of the window given the current screen buffer size, the current.GetLargestConsoleWindowSize function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. The GetConsoleScreenBufferInfo function can be used to determine the maximum size of the console window, given the current screen buffer size, the current font, and the display size. Requirements.CONSOLE_SCREEN_BUFFER_INFO structure Contains information about a console screen buffer. Syntax Members dwSize A COORD structure that contains the size of the console screen buffer, in character columns ... Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps.Console Functions The following functions are used to access a console. GetConsoleProcessList Retrieves a list of the processes attached to the current console. GetConsoleScreenBufferInfo Retrieves information about the specified console screen buffer. GetConsoleScreenBufferInfoEx Retrieves extended information about the specified console screen.Console Screen Buffers A screen buffer is a two-dimensional array of character and color data for output in a console window. To retrieve the current values of the various properties associated with the console screen buffer, use the GetConsoleScreenBufferInfo, GetConsoleCursorInfo, and GetConsoleMode functions. To retrieve information about the.SetConsoleTextAttribute function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Remarks To determine the current color attributes of a screen buffer, call the GetConsoleScreenBufferInfo function. Requirements Minimum supported client Windows 2000 Professional [desktop apps only].... A process cannot change the location of its console window on the screen, but the following console functions are available to set or retrieve the other properties specified in the STARTUPINFO structure. Function Description GetConsoleScreenBufferInfo Retrieves the window size, screen buffer size, and color attributes. SetConsoleWindowInfo.SetConsoleWindowInfo function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. To determine the current size and position of a screen buffer's window, use the GetConsoleScreenBufferInfo function. Requirements Minimum supported client Windows 2000 Professional [desktop apps only].Further detail about the position of the cursor can be found throug... Alternatively, an application can use the GetConsoleScreenBufferInfo function to determine the current cursor position and the SetConsoleCursorPosition function to set the cursor position. However, the virtual terminal sequences mechanism is preferred for all new and ongoing."
1119,GetOverlappedResult,"Microsoft Build · May 19 – 22, 2025The GetOverlappedResult function is used to retrieve the results of a completed overlapped operation. When a thread performs an I/O operation using overlapped I/O, it can call this function to determine whether the operation has completed and to obtain the number of bytes transferred. If the operation has not yet completed, the function will return FALSE, and the calling thread can check the status of the operation using GetLastError, which may return ERROR_IO_PENDING.References:GetOverlappedResult function (ioapiset.h) Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device. To specify a timeout interval or wait on an alertable thread, use GetOverlappedResultEx. Syntax Parameters [in] hFile A handle to the file, named pipe, or communications device. Examples For an.WinUsb_GetOverlappedResult function (winusb.h) The WinUsb_GetOverlappedResult function retrieves the results of an overlapped operation on the specified file. Syntax Parameters [in] InterfaceHandle An opaque handle to the first interface on the device, which is ret... Remarks This function is like the Win32 API routine, GetOverlappedResult, with.To synchronize its execution with the completion of the overlapped operation, the calling thread uses the GetOverlappedResult function, the GetOverlappedResultEx function, or one of the wait functions to determine when the overlapped operation has been completed. A thread can manage overlapped operations by either of two methods: Use the.ioapiset.h header This header is used by multiple technologies. DeviceIoControl Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding op... GetOverlappedResult Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device..CAtlFile Class This class provides a thin wrapper around the Windows file-handling API. Important This class and its members cannot be used in applications that execute in the Windows Runtime. CAtlF... CAtlFile::GetOverlappedResult Call this method to get the results of an overlapped operation on the file. CAtlFile::GetPosition Call this method to.HTTP Completion Routines Applications have several options for receiving completion indications and providing some flexibility for developers. The options are to block while waiting for an API call to complete or t... If the event object is used for asynchronous completion, the GetOverlappedResult function is called to determine the number of.NtCancelIoFile function Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. Note This function is the user-mode equivalent to the CancelIo Win32 function. The cancel opera... The thread can use the GetOverlappedResult function to determine when the I/O operations themselves have been.winusb.h header This header is used by USB driver reference. For more information, see: USB driver reference winusb.h contains the following programming interfaces: Functions WinUsb_AbortPipe Th... This is a synchronous operation. WinUsb_GetOverlappedResult The WinUsb_GetOverlappedResult function retrieves the results of an overlapped operation on.How to: Stream a Sound from Disk Note This content applies only to desktop apps (and would require revision in order to function in a UWP app). Please refer to the documentation for CreateFile2, CreateEventEx, WaitForSingleObjectEx, SetFilePointerEx, and GetOverlappedResultEx. Initialize an OVERLAPPED structure. Use the GetOverlappedResult.Named Pipe Server Using Overlapped I/O The following is an example of a single-threaded pipe server that uses overlapped operations to service simultaneous connections to multiple pipe clients. The server uses the fPendingIO member of the structure to keep track of whether the most recent I/O operation on the instance was pend... In this case, use."
1120,GdiFlush,"Microsoft Build · May 19 – 22, 2025GdiFlush function (wingdi.h) The GdiFlush function flushes the calling thread's current batch. Syntax Return value If all functions in the current batch succeed, the return value is nonzero. The system accumulates the parameters for calls to these functions in the current batch and then calls the functions when the batch is flushed by any of the.Windows GDI Overview of the Windows GDI technology. To develop Windows GDI, you need these heade... GdiComment The GdiComment function copies a comment from a buffer into a specified enhanced-format metafile. GdiFlush The GdiFlush function flushes the calling thread's current batch. GdiGetBatchLimit The GdiGetBatchLimit function returns the.wingdi.h header This header is used by multiple technologies. For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc.GdiSetBatchLimit function (wingdi.h) The GdiSetBatchLimit function sets the maximum number of function calls that can be accumulated in the calling thread's current batch. Remarks Only GDI drawing functions ... Exceeding the batch limit or calling the GdiFlush function also flushes the current batch. This second return value is reported only if.Painting and Drawing Functions The following functions are used with painting and drawing. ExcludeUpdateRgn Prevents drawing within invalid areas of a window. GdiFlush Flushes the calling thread's current batch. GdiGetBatchLimit Returns the maximum number of function calls that can be accumulated in the calling thread's current batch. WindowFromDC.GdiGetBatchLimit function (wingdi.h) The GdiGetBatchLimit function returns the maximum number of function calls that can be accumulated in the calling thread's current batch. Exceeding the batch limit or calling the GdiFlush function also flushes the current batch. The actual return value for the function is reported only if GdiFlush is used to.CBaseWindow.DoRealisePalette method [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft strongly recommends that new code use MediaPlayer, IMFMediaEngine and Audio/Video Capture in Media Foundation instead of.CBaseWindow.SetPalette method (Winutil.h) [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft strongly recommends that new code use MediaPlayer, IMFMediaEngine and Audio/Video Capture in Media Foundation instead of.You need to guarantee that the GDI subsystem... Do this by calling the GdiFlush function. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll.CBaseWindow.SetPalette method (Winutil.h) - No parameters [The feature associated with this page, DirectShow, is a legacy feature. It has been superseded by MediaPlayer, IMFMediaEngine, and Audio/Video Capture in Media Foundation. Microsoft strongly recommends that new code use MediaPlayer, IMFMediaEngine and Audio/Video Capture in Media."
1121,SystemParametersInfoW,"Microsoft Build · May 19 – 22, 2025SystemParametersInfoW function (winuser.h) Important Some information relates to a prerelease product which may be substantially modified before it's commercially released. Retrieves or sets the value of one of the system-wide parameters. Syntax Parameters [in] uiAction Type: UINT The system-wide parameter to be retrieved or set. The pvParam.(ANSI) SetWindowTextW Changes the text of the specified window's title bar (if... SystemParametersInfoA Retrieves or sets the value of one of the system-wide parameters. (ANSI) SystemParametersInfoW Retrieves or sets the value of one of the system-wide parameters. (ANSI) UnregisterClassW Unregisters a window class, freeing the memory required for.HCF_OPTION_NOTHEMECHANGE 0x00001000 Passing HIGHCONTRASTSTRUCTURE in calls to SystemParametersInfoW can cause theme change effects even if the theme isn't being changed. HCF_OPTION_NOTHEMECHANGE 0x00001000 Passing HIGHCONTRASTSTRUCTURE in calls to SystemParametersInfoW can cause theme change effects even if the theme isn't being changed. Remarks.... function _glfwPlatformInit 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp_MapVirtualKeyW referenced in function _glfwPlatformInit 1&gt;glfw3.lib(win32_window.obj) : error LNK2001: unresolved external symbol __imp_MapVirtualKeyW 1&gt;glfw3.lib(win32_init.obj) : error LNK2019: unre external symbol.SystemParametersInfoA function (winuser.h) Important Some information relates to a prerelease product which may be substantially modified before it's commercially released. Retrieves or sets the value of one of the system-wide parameters. SPI_... SPI_GETTOUCHPADPARAMETERS 0x00AE Starting with Windows 11, version 24H2: Retrieves details about the.... Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device Input Stack Pointer Input Messages and Notifications Remote Desktop Services Security and Identity System Services The Windows Shell."
1122,RegisterClassW,"Microsoft Build · May 19 – 22, 2025RegisterClassW function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Note  The RegisterClass function has been superseded by the RegisterClassEx function. You can still use RegisterClass, however, if you do not need to set the class small icon. Syntax Parameters [in] lpWndClass.Registering Window Classes A window class is supported by a window procedure. Your application can register a window class by using either RegisterClassA or RegisterClassW. New applications should typically use RegisterClassW. If the application registers the windo... Registration using RegisterClassW allows the application to request the.(RegisterClassExA) RegisterClassExW Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassExW) RegisterClassW Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. (RegisterClassW) RegisterShellHookWindow Registers a specified Shell window.If the window class was registered with the ANSI version of RegisterClass (RegisterClassA), the character set of the window is ANSI. If the window class was registered with the Unicode version of RegisterClass (RegisterClassW), the character set of the window is Unicode. Requirements Requirement Value Minimum supported client Windows 2000.The second issue is that the IMM normally retrieves Unicode characters ... Windows supports a Unicode interface for the IMM, in addition to the ANSI interface originally supported. Your applications should use RegisterClassW to cause the WM_CHAR and WM_IME_CHAR messages to retrieve Unicode characters instead of DBCS characters in the wParam.I hope my application can work prope... RegisterClassW can be helpful, but what should I do when I use framkworks like QT or Tkinter to create window. Using RegisterClassW with QT or Tkinter: When using frameworks like QT or Tkinter, you generally don’t need to worry about calling Windows API functions like RegisterClassW directly. These.RegisterClassA function (winuser.h) Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function. Remarks If you register the window class by using RegisterClassA, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character.(ANSI) GetAltTabInfoW Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window. GetClassInfo. (ANSI) GetClassInfoExW Retrieves information about a window class, including a handle to the small icon associated with the window class. (Unicode) GetClassInfoW Retrieves information about a window class.."
1123,SystemParametersInfoA,"Microsoft Build · May 19 – 22, 2025The SystemParametersInfoA function in Windows is used to query or set system-wide parameters, including accessibility features. It allows applications to retrieve the current state of specific parameters or to change them. This function is particularly useful in Control Panel applications or other programs that enable users to customize their environment.The SystemParametersInfo function can perform several tasks, such as:For each built-in feature, Win32 defines a structure that applications use with SystemParametersInfo to query or set the parameters of the feature.References:SystemParametersInfoA function (winuser.h) Important Some information relates to a prerelease product which may be substantially modified before it's commercially released. Retrieves or sets the value of one of the system-wide parameters. Syntax Parameters [in] uiAction Type: UINT The system-wide parameter to be retrieved or set. The pvParam.For setting the primary button I am using the SystemParametersInfoA method. const int SPI_SETMOUSEBUTTONSWAP = 33; SystemParametersInfo(SPI_SETMOUSEBUTTONSWAP, button, String.Empty, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE); But for getting the current mouse button I am not able to find any functions in SystemParametersInfoA. ...o(SPI_SETMOUSEBUT.(Unicode) SetWindowTextA Changes the text of the specified window's title bar (if it has one). SystemParametersInfoA Retrieves or sets the value of one of the system-wide parameters. (ANSI) SystemParametersInfoW Retrieves or sets the value of one of the system-wide parameters. UnregisterClassA Unregisters a window class, freeing the memory.Hello, couldn't find anything on the internet and it seems it's not included in SystemParametersInfo: https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfoa In Windows10: Mouse settings -&gt; Scroll inactive windows when I hover over them Regards| I did not find an API to set it, but we can do it by modifying.HCF_OPTION_NOTHEMECHANGE 0x00001000 Passing HIGHCONTRASTSTRUCTURE in calls to SystemParametersInfoA can cause theme change effects even if the theme isn't being changed. Remarks An application uses this structure when calling the SystemParametersInfoA function with the SPI_GETHIGHCONTRAST or SPI_SETHIGHCONTRAST value. When using.When using (C++) SystemParametersInfoA SPI_SETDESKWALLPAPER, for some reason does not always work.| Hi, @Nick Pendragon Firstly, thank @RLWA32 and @David Lowndes for testing. I also can reproduce it in win11 22H2. Thank you about it. https://support.microsoft.com/en-us/windows/send-feedback-to-microsoft-with-the-feedback-hub... When using (C++).For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
1124,LocalFlags,"Microsoft Build · May 19 – 22, 2025LocalFlags function (winbase.h) Retrieves information about the specified local memory object. Note  This function is provided only for compatibility with 16-bit versions of Windows. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target.LocalFree function (winbase.h) Frees the specified local memory object and invalidates its handle. To get the lock count of a local memory object, use the LocalFlags function. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target.To return information about a specified memory object, use the GlobalFlags or LocalFlags function. The information includes the object's lock count and indicates whether the object is discardable or has already been discarded. To return a handle to the memory object associated with a specified pointer, use the GlobalHandle or LocalHandle function..Memory Management Functions General memory functions Data execution prevention functions File mapping functions AWE functions Heap functions Virtual memory functions Global and... QueryVirtualMemoryInformation Returns information about a page or a. Global and local functions Also see global and local functions. For equivalent functionality to the.LocalSize fu... To verify that the specified object's memory block has not been discarded, call the LocalFlags function before calling LocalSize. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include.For more information, see: Application Installation and Servicing Application Recovery and Restart Backup Data Access and Storage Data Exchange Developer Notes eventlogprov Hardware Counter Profiling Internationalization for Windows Applications Menus and Other Resources Operation Recorder Remote Desktop Services Security and Iden... (Unicode).Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also Global and Local Functions LocalAlloc LocalFlags LocalReAlloc LocalUnlock Memory.Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only] Target Platform Windows Header winbase.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll See also Global and Local Functions LocalAlloc LocalFlags LocalLock LocalReAlloc Memory Management.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h."
1125,QueryPerformanceCounter,"Microsoft Build · May 19 – 22, 2025To use QueryPerformanceCounter in programming, you typically follow these steps:Here is a simple example in C++:This example demonstrates how to measure the time taken by a block of code using QueryPerformanceCounter.References:QueryPerformanceCounter function (profileapi.h) Retrieves the current value of the performance counter, which is a high resolution (<1us) time stamp that can be used for time-interval measurements. Syntax Parameters [out] lpPerformanceCount A pointer to a variable that receives the current performance-counter value, in counts. Retrieves the.IDebugProgram150.QueryPerformanceCounters Method Definition Namespace: Microsoft.VisualStudio.Debugger.Interop Assembly:Microsoft.VisualStudio.Debugger.Interop.15.0.dll Package:Microsoft.VisualStudio.Debugger.Interop.15.0 v17.13.40008 Parameters pCallback IDebugQueryPerformanceCountersCompletionRoutine150 Returns Int32 Applies to. Learn more about.IDebugProgram150 Interface Definition Namespace: Microsoft.VisualStudio.Debugger.Interop Assembly:Microsoft.VisualStudio.Debugger.Interop.15.0.dll Package:Microsoft.VisualStudio.Debugger.Interop.15.0 v17.13.40008 Attributes GuidAttribute InterfaceTypeAttribute Methods QueryPerformanceCounters(IDebugQueryPerformanceCountersCompletionRoutine150).!whatperftime The !whatperftime extension converts a high-resolution performance counter value into a standard time value. Parameters Count The performance count... DLL Kdexts.dll Remarks You can use !whatperftime to convert values retrieved by calling QueryPerformanceCounter. Performance counter time values are also found in software traces. The.profileapi.h header This header is used by System Services. For more information, see: System Services profileapi.h contains the following programming interfaces: Functions QueryPerformanceCounter Retrieves the current value of the performance counter, which is a high resolution (<1us) time stamp that can be used for time-interval measurements..Given the device position and the performance counter at the time of the GetDevicePosition call, the client can get a more timely estimate of the device position at a later time by calling QueryPerformanceCounter to obtain the current performance counter, and extrap... Before comparing the raw counter value obtained from QueryPerformanceCounter to.Resources: Performance Counter Schema Performance Counter Types Timeline: [00:00] - Performance Monitor [01:38] - Process, Processor & Physical Disk [02:30] - Instances [07:15] - Instrumentation Manifest [08:56] - Counter Types [13:25] - Sample cadence and overall duration [15:18] - Performance Counter Frequency [16:10] - QueryPerformanceCounter.DkmProcess.QueryPerformanceCounters Method Definition Namespace: Microsoft.VisualStudio.Debugger Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Asynchronous Method to obtain the timing data from the IDkmPerformanceMeasurementDispatcherService gathered from events emitted by the.ETW_BUFFER_HEADER structure (evntrace.h) The header structure of an ETW buffer. It will be in the raw clock type of the session from which the buffer was collected (for example, QueryPerformanceCounter, CPU timestamp counter, or GetSystemTimeAsFileTime). Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop.IDkmPerformanceMeasurement140.QueryPerformanceCounters Method Definition Namespace: Microsoft.VisualStudio.Debugger.ComponentInterfaces Assembly:Microsoft.VisualStudio.Debugger.Engine.dll Package:Microsoft.VisualStudio.Debugger.Engine v17.8.1101801 Asynchronous Method to obtain the timing data from the IDkmPerformanceMeasurementDispatcherService."
1126,EnumPropsExA,"Microsoft Build · May 19 – 22, 2025EnumPropsExA function (winuser.h) Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose property list is to be.EnumProps continues until the last entry is enumerated or the callback function returns FALSE. (ANSI) EnumPropsExA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE. (ANSI).(Unicode) EnumPropsA Enumerates... EnumProps continues until the last entry is enumerated or the callback function returns FALSE. (ANSI) EnumPropsExA Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback."
1127,GetStretchBltMode,"Microsoft Build · May 19 – 22, 2025GetStretchBltMode function (wingdi.h) The GetStretchBltMode function retrieves the current stretching mode. The stretching mode defines how color data is added to or removed from bitmaps that are stretched or compressed when the StretchBlt function is called. Syntax Parameters [in] hdc A h... Return value If the function succeeds, the return value.CDC::GetPolyFillMode Retrieves the current polygon-filling mode. CDC::GetStretchBltMode Retrieves the current bitmap-stretching mode. CDC::MaskBlt Combines the color data for the source and destination bitmaps using the given mask and raster operation. CDC::StretchBlt Moves a bitmap from a source rectangle and device into a destination rectangle,.(Unicode) GetMapMode The GetMapMode function retrieves the current mappin... GetPolyFillMode The GetPolyFillMode function retrieves the current polygon fill mode. GetStretchBltMode The GetStretchBltMode function retrieves the current stretching mode. The stretching mode defines how color data is added to or removed from bitmaps that are stretched.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. Function Description AlphaBlend Displays a bitmap with transparent or semitransparent pixels. BitBlt Performs a bit-block transfer. GetDIBits Copies a bitmap into a buffer. GetPixel Gets the RGB color value of the pixel at a given coordinate. GetStretchBltMode Gets the.BitBlt The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination devic... GetPolyFillMode The GetPolyFillMode function retrieves the current polygon fill mode. GetStretchBltMode The GetStretchBltMode function retrieves the current.Graphic Modes Windows supports five graphic modes that allow an application to specify how colors are mixed, where output appears, how the outp... Graphics mode Function Background GetBkMode Drawing GetROP2 Mapping GetMapMode Polygon-fill GetPolyFillMode Stretching GetStretchBltMode An application can change the default modes by calling one of the.SetStretchBltMode function (wingdi.h) The SetStretchBltMode function sets the bitmap stretching mode in the specified device context. ...ed server Windows 2000 Server [desktop apps only] Target Platform Windows Header wingdi.h (include Windows.h) Library Gdi32.lib DLL Gdi32.dll See also Bitmap Functions Overview GetStretchBltMode SetBrushOrgEx."
1128,ClearCommBreak,"Microsoft Build · May 19 – 22, 2025ClearCommBreak function (winbase.h) Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. To get extended error information, call GetLastError. Remarks A communications device is placed in a break state by the SetCommBreak or EscapeCommFunction function. Character transmission.Communications Functions The following functions are used with communications resources. BuildCommDCBAndTimeouts Translates a dev... ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports.SetCommBreak function (winbase.h) Suspends character transmission for a specified communications device and places the transmission line in a break state until the ClearCommBreak function is called. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP a... Suspends character transmission for a specified.EscapeCommFunction function (winbase.h) Directs the specified communications device to perform an extended function. The CLRBREAK extended function code is identical to the ClearCommBreak function. SETBREAK 8 Suspends character transmission and places the transmission line in a break state until the ClearCommBreak function is called (or.Extended Functions Some communications functions can be called for a device by using the EscapeCommFunction function. For example, an application can suspend character transmission with the SETBREAK code and resume transmission with the CLRBREAK code. These particular operations can also be started by calling the SetCommBreak and ClearCommBreak.(ANSI) CheckNameLegalDOS8Dot3W Determines whether the specified name can be used to create a file on a FAT file system. (Unicode) ClearCommBreak Restores character transmission for a specified communications device and places the transmission line in a nonbreak state. ClearCommError Retrieves information about a communications error and reports.ClearCommError function (winbase.h) Retrieves information about a communications error and reports the current status of a communications device. ...Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. VDS_DISK_FLAG Defines the set of valid flags for a disk object.Note   Except for VDS_DF_READ_ONLY, these flags cannot be set by using the IVdsDisk::SetFlags method or cleared by.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
1129,GetStartupInfoW,"Microsoft Build · May 19 – 22, 2025GetStartupInfoW function (processthreadsapi.h) Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created. Syntax Parameters [out] lpStartupInfo A pointer to a STARTUPINFO structure that receives the startup information. Return value None Remarks The STARTUPINFO structure was specified by the.GetProcess... GetProcessTimes Retrieves timing information for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. GetStartupInfoW Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created..GetProcessTimes Retrieves timing information for the specified process. GetProcessVersion Retrieves the major and minor version numbers of the system on which the specified process expects to run. GetStartupInfoW Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created. GetSystemCpuSetInformation."
1130,FileTimeToLocalFileTime,"Microsoft Build · May 19 – 22, 2025FileTimeToLocalFileTime function (fileapi.h) Converts a file time to a local file time. Syntax Parameters [in] lpFileTime A pointer to a FILETIME structure containing the UTC-based file time to be converted into a local file time. [out] lpLocalFileTime A pointer to a FILETIME structure to receive the converted local file time. Remarks To account....e function (fileapi.h) Converts a local file time to a file time based on the Coordinated Universal TimeSyntax Parameters [in] lpLocalFileTime A pointer to a FILETIME structure that specifies the local file time to be converted into a UTC-based file time. [out] lpFileTime A pointer to a FILETIME structure to receive the converted UTC-based file.Function Description EnumD... FileTimeToLocalFileTime Converts a UTC file time to a local file time. GetDynamicTimeZoneInformation Retrieves the current time zone and dynamic daylight saving time settings. FileTimeToLocalFileTime Converts a UTC file time to a local file time. LocalFileTimeToFileTime Converts a local file time to a file time based.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print File Times A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). File Times and Daylight Savin... To convert a file time.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print fileapi.h header This header is used by multiple technologies. For more information, see: Data Access and Storage System Services fileapi.h contains the following programming interfaces: Functions AreFileApisANSI Determines whether the.JOB_INFO_4 structure Describes a full set of values associated with a job and supports large spool files with sizes expressed with 64 bits. Syntax Members JobId A job identifier value. pPrinterName A pointer to a null-terminated string that specifies the name of the printer for... You should convert it to a local time value before displaying it..JOB_INFO_2 structure The JOB_INFO_2 structure describes a full set of values associated with a job. Syntax Members JobId A job identifier value. pPrinterName A pointer to a null-terminated string that specifies the name of the printer for which the job is spooled. pMachineName ... You should convert it to a local time value before displaying it..... Moved into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. Moved into api-ms-win-core-file-l1-1-0.dll in 10.0.16299. GetDiskFreeSpaceExW Introduced into api-ms-win-core-file-l1-2-1.d. GetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240. SetFileTime Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.10240..The fax routing method can use the FileTimeToLocalFileTime function, to convert from UTC to local time, and then use the FileTimeToSystemTime function to convert the local time to a SYSTEMTIME structure. Requirements Requirement Value Minimum supported client Windows 2000 Professional, Windows XP [desktop apps only] Minimum supported server.JOB_INFO_1 structure The JOB_INFO_1 structure specifies print-job information such as the job-identifier value, the name of the printer for which the job is spooled, the name of the machine that created the print job, the name of the user that owns the print job, and so on. You should convert it to a local time value before displaying it. You can."
1131,IntersectClipRect,"Microsoft Build · May 19 – 22, 2025IntersectClipRect function (wingdi.h) The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle. Syntax Parameters [in] hdc A handle to the device context. [in] left The x-coordinate, in logical units, of the upper-left corner of the rectangle. [in] top The.Clipping Functions The following functions are used with clipping. Function Description ExcludeClipRec... GetRandomRgn Copies the system clipping region of a specified device context to a specific region. IntersectClipRect Creates a new clipping region from the intersection of the current clipping region and the specified rectangle. OffsetClipRgn.Clipping Regions A clipping region is one of the graphic objects that an application can select into a device context (DC). Exclude a rectang... Combine a rectangular part of the client area with the current clipping region by calling the IntersectClipRect function. After obtaining a handle identifying the clipping region, an application can.2.3.2.3 EMR_INTERSECTCLIPRECT Record The EMR_INTERSECTCLIPRECT record specifies a new clipping region from the intersection of the current clipping region and the specified rectangle. Type (4 bytes): An unsigned integer that identifies this record type as EMR_INTERSECTCLIPRECT. Clip (16 bytes): A RectL obje... The EMR_INTERSECTCLIPRECT record.For more information, see: Data Exchange Direct3D 9 Graphics DirectShow Display Devices Reference Internationalization for Windows Applications OpenGL Tablet PC Windows Color System Windows GDI wingdi.h contains the following programming interfaces: Functions AbortDoc The AbortDoc function stops the current print job and erases everything dra....To develop Windows GDI, you need these headers: fontsub.h mmsystem.h prnasnot.h prntvpt.h t2embapi.h tvout.h windef.h xpsprint.h For programming guidance for thi... IntersectClipRect The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle. IntersectRect The.2.3.5.3 META_INTERSECTCLIPRECT Record The META_INTERSECTCLIPRECT Record sets the clipping region in the playback device context to the intersection of the existing clipping region and the specified rectangle. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 RecordSize RecordFunction Bottom Right Top Left RecordSize (4 bytes): A.CDC::Ge... CDC::GetCharABCWidths Retrieves the widths, in logical units, of consecutive characters in a given range from the current font. CDC::GetCharABCWidthsI Retrieves the. CDC::IntersectClipRect Creates a new clipping region by forming the intersection of the current region and a rectangle. CDC::InvertRect Inverts the contents of a rectangle..2.3.2 Clipping Record Types The Clipping record types define and manage clipping regions. The clipping regions used by clipping record types are part of the Regions state element (section 3.1.1.2.1) in the playback device context (section 3.1). Name Section Description EMR_EXCLUDECLIPRECT 2.3.2.1 Specifies a clipping region that consists of the.2.3.5 State Record Types This section defines the State Record Types, which define and manage the graphics properties specified in the Playback Device Context (section 3.1.5). META_EXCLUDECLIPRECT 2.3.5.2 Sets the clipping re... META_INTERSECTCLIPRECT 2.3.5.3 Sets the clipping region that is defined in the playback device context to the."
1132,SetBkMode,"Microsoft Build · May 19 – 22, 2025SetBkMode function (wingdi.h) The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines. Syntax Parameters [in] hdc A handle to the device context. [in] mode The background mode. Requirements Requirement Value Minimum.3.2.7 EMR_SETBKMODE Example This section provides an example of an EMR_SETBKMODE record (section 2.3.11.11). 00003110:12 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000012) Size (0x0000000C) Mode (0x00000001) Type (4 bytes): 0x00000012 identifies this record type as EMR_SETBKMODE..3.2.6.13 EMR_SETBKMODE Example 1 This section provides an example of the EMF EMR_SETBKMODE record ([MS-EMF] section 2.3.11.11). 00064C30:            12 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000018) Size (0x0000000C) Mode (0x00000001) Type (4 bytes): 0x00000018 identifies this.An application can use the SetBkColor function to set the color that appears behind each character and the SetBkMode function to specify how the system should blend the selected background color with the current color or colors on the video display. An application can retrieve the current background color for a device context by calling the.3.2.6.21 EMR_SETBKMODE Example 3 This section provides an example of the EMF EMR_SETBKMODE record ([MS-EMF] section 2.3.11.11). 00064EE0:            12 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000012) Size (0x0000000C) BackgroundMode (0x00000001) Type (4 bytes): 0x00000012.Graphic Modes Windows supports five graphic modes that allow an application to specify how colors are mixed, where output appears, how the output is scaled, and so on. Graphics mode Function Background SetBkMode Drawing SetROP2 Mapping SetMapMode Polygon-fill SetPolyFillMode Stretching SetStretchBltMode. Windows supports five graphic modes that.EMRSELECTCLIPPATH structure (wingdi.h) Contains parameters for the SelectClipPath, SetBkMode, SetMapMode, SetPolyFillMode, SetROP2, SetStretchBltMode, SetTextAlign, SetICMMode , and SetLayout enhanced metafile records. Syntax Members emr The base structure for all record types. iMode A value and meaning that varies depending on the function.3.2.16 EMR_SETBKMODE Example 1 This section provides an example of the EMF EMR_SETBKMODE record ([MS-EMF] section 2.3.11.11). 00000120:                            12 00 00 00 00000130: 0C 00 00 00 02 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000012) Size (0x0000000C) BackgroundMode (0x00000002) Type (4.2.3.11.11 EMR_SETBKMODE Record The EMR_SETBKMODE record specifies the background mix mode to use with text, hatched brushes, and pens that are not solid lines. 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type Size BackgroundMode Type (4 bytes): An unsigned integer that identifies this record type as EMR_SETBKMODE. The.3.2.6.15 EMR_SETBKMODE Example 2 This section provides an example of the EMF EMR_SETBKMODE record ([MS-EMF] section 2.3.11.11). 00064C50:12 00 00 00 0C 00 00 00 01 00 00 00 0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 8 9 30 1 Type (0x00000012) Size (0x0000000C) Mode (0x00000001) Type (4 bytes): 0x00000012 identifies this record type."
1133,SetupComm,"Microsoft Build · May 19 – 22, 2025SetupComm function (winbase.h) Initializes the communications parameters for a specified communications device. Syntax Parameters [in] hFile A handle to the communications device. ...ile function returns this handle. [in] dwInQueue The recommended size of the device's internal input buffer, iRemarks After a process uses the CreateFile function to.SetC... SetDefaultCommConfig Sets the default configuration for a communications device. SetupComm Initializes the communications parameters for a specified communications device. TransmitCommChar Transmits a specified character ahead of any pending data in the output buffer of the specified communications device. WaitCommEvent Waits for an event.A process reinitializes a communications resource by using the SetupComm function, which performs the following tasks: Terminates pending read and write operations, even if they have not been completed. A process is not required to call SetupComm. When the CreateFile function opens a handle to a serial communications resource, the system.This information can be used in subsequent calls to the SetCommState, SetCommTimeouts, or SetupComm function to configure the communications device. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.Serial Comm Use P/Invoke to Develop a .NET Base Class Library for Serial Device Communications John Hind Code download available at:NetSerialComm.exe(89 KB) This article assumes you're familiar with C# and RS232 communications Level of Difficulty123 SUMMARY Out-of-the-box, the only way of coding RS232 serial communications applications in the .NET.GetCommPorts Gets an array that c... GetCommProperties Retrieves information about the communications properties for a specified communications device. GetCommState Retrieves the current control settings for a specified communications device. GetCommTimeouts Retrieves the time-out parameters for all read and write operations on a specified.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print System Services Overview of the System Services technology. To develop System Services, you need these headers: atlthunk.h avrt.h dbghelp.h dbt.h debugapi.h dispatcherqueue.h enclaveapi.h errhandlingapi.h fibersapi.h handleapi.h.APIs from api-ms-win-core-com-l1-1-1.dll API Requirements CLSIDFromString Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299. CoCreateFreeThreadedMarshaler Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. Moved into api-ms-win-core-com-l1-1-0.dll in 10.0.16299.."
1134,__WSAFDIsSet,"Microsoft Build · May 19 – 22, 2025The __WSAFDIsSet function (winsock.h) specifies whether a socket is included in a set of socket descriptors.The __WSAFDIsSet function (winsock2.h) specifies whether a socket is included in a set of socket descriptors.Severity Code Description Error LNK2019 unresolved external symbol __WSAFDIsSet referenced in function main Error LNK2019 unresolved external symbol __imp_accept referenced in function main Error LNK2019 unresolved external symbol __imp_bind referenced in function main Error LNK2019 unresolved externalFor more information, see: Windows Sockets 2 winsock.h contains the following programming interfaces: Functions __WSAFDIsSet The __WSAFDIsSet function (winsock.h) specifies whether a socket is included in a set of socket descriptors.__WSAFDIsSet accept AcceptEx bind closesocket connect ConnectEx DisconnectEx freeaddrinfo FreeAddrInfoExW freeaddrinfoW GetAcceptExSockaddrs getaddrinfo GetAddrInfoExCancel GetAddrInfoExOverlappedResult GetAddrInfoExW GetAddrInfoW gethostbyaddr gethostbyname gethostname GetHostNameW getipv4sourcefilterFor more information, see: Network Drivers Prior to Windows Vista Quality of Service (QOS) Windows Sockets 2 winsock2.h contains the following programming interfaces: Functions __WSAFDIsSet The __WSAFDIsSet function (winsock2.h) specifies whether a socket is included in a set of socket descriptors. accept__WSAFDIsSet Specifies whether a socket is included in a set of socket descriptors.Functions __WSAFDIsSet The __WSAFDIsSet function (winsock2.h) specifies whether a socket is included in a set of socket descriptors.APIs from ws2_32.dll API Requirements __WSAFDIsSet Introduced into ws2_32.dll in 10.0.10240. accept Introduced into ws2_32.dll in 10.0.10240. bind Introduced into ws2_32.dll in 10.0.10240. closesocket Introduced into ws2_32.dll in 10.0.10240. connect Introduced into ws2_32.dll in 10.0.10240. freeaddrinfo"
1135,FindWindowA,"Microsoft Build · May 19 – 22, 2025The FindWindowA function in the Windows API is used to retrieve a handle to the top-level window whose class name and window name match specified strings. It does not search child windows and performs a case-insensitive search.To use FindWindowA, you need to provide two parameters:The function returns a handle to the window if it is found, or NULL if it fails.Here's a simple example of how to use FindWindowA:In this example, the function searches for a window with the class name ""Notepad"".References:FindWindowA function (winuser.h) Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search. To search child windows, beginning with a specified child window, use the FindWindowEx function. Syntax.can anyone tell me what is the powershell script to open specific app in secondary monitor| You can automate that using AutoIT cmdlets. check these examples: https://www.autoitconsulting.com/site/scripting/autoit-cmdlets-for-windows-powershell/| Hello, Launch the application: Use FindWindowA function (winuser.h).Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-windowclass-l1-1-0 (introduced in Windows 8) See also.winuser.h header This header is used by multiple technologies. CreateMDIWindowA Creates a multiple-document interface (MDI) child window. CreateSyntheticPointerDevice Configures the pointer injection device for the calling application, and initializes the maximum number of ... CreateWindowA Creates an overlapped, pop-up, or child window. (ANSI).EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE. FindWindowA Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not ... (ANSI) FindWindowExA Retrieves a handle to a window.this code would keep a form on top of all other windows in excel 2010, but in excel 365 it does not work (using 64bit) thanks for the help Private Declare PtrSafe Function FindWindow Lib &quot;user32&quot; Alias &quot;FindWindowA&quot; (ByVal lpClassName As Any, ByVal lpWindowName As Any) As Long Private Declare PtrSafe Function PostMessage Lib.I am trying to catch HWND by FindWindow or FindWindowA or FindWindowW but not successful, I wonder to have ideas how to fix them. Please help My code:| Try this fix: .| In addition to the coding correction posted by @Viorel , consider the following: Any window caption could contain the substring &quot;Mozilla Firefox&quot. I am trying to catch."
1136,GetThreadSelectorEntry,"Microsoft Build · May 19 – 22, 2025GetThreadSelectorEntry function (winbase.h) Retrieves a descriptor table entry for the specified selector and thread. Syntax Parameters [in] hThread A handle to the thread containing the specified selector. For more information, see Thread Security and Access Rights. [in] dwSelector The global or local selector value to look up in the thread's.Wow64GetThreadSelectorEntry function (winbase.h) Retrieves a descriptor table entry for the specified selector and WOW64 thread. Syntax Parameters [in] hThread A handle to the thread containing the specified selector. Remarks The Wow64GetThreadSelectorEntry function is functional only on 64-bit systems and can be called only by 64-bit processes. A.When the debugging event occurs, the system suspends all threads in the process ... The debugger can interact with the user, or manipulate the state of the process being debugged, by using the GetThreadContext, GetThreadSelectorEntry, ReadProcessMemory, SetThreadContext, and WriteProcessMemory functions. GetThreadSelectorEntry returns the.LDT_ENTRY structure (winnt.h) Describes an entry in the descriptor table. Remarks The GetThreadSelectorEntry function fills this structure with information from an entry in the descriptor table. Requirements Requirement Value Minimum supported client Windows XP [desktop apps only] Minimum supported server Windows Server 2003 [desktop apps only].Debugging Functions The following functions are used with debugging. GetThreadContext Retrieves the context ... GetThreadSelectorEntry Retrieves a descriptor table entry for the specified selector and thread. IsDebuggerPresent Determines whether the calling process is being debugged by a user-mode debugger. Wow64GetThreadSelectorEntry Retrieves a.GetMaximumProcessorGroupCount Returns the maximum number of processor groups t... GetNamedPipeClientComputerNameA. GetThreadEnabledXStateFeatures The GetThreadEnabledXStateFeatures function returns the set of XState features that are currently enabled for the current thread. GetThreadSelectorEntry Retrieves a descriptor table entry for the."
1137,CreateFontW,"Microsoft Build · May 19 – 22, 2025CreateFontW function (wingdi.h) The CreateFont function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device. Syntax Parameters [in] cHeight The height, in logical units, of the font's character cell or character. The character height value (also known as the em height).(ANSI) CreateFontIndirectExW The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specified structure. (Unicode) CreateFontIndirectW The CreateFontIndirect function creates a logical font that has the specified characteristics. (Unicode) CreateFontW The CreateFont function creates a logical font with the.Figure 4 Objects that Create GDI Objects Object Type API Functions bitmap LoadBitmapA, LoadBitmapW, CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap brush CreateBrushIndirect, CreateSolidBrush, CreatePatternBrush, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush device context CreateCompatibleDC, CreateDCA, CreateDCW,.CFP_ALLOCPROC Client-provided callback function, used by CreateFontPackage and MergeFontPackage to allocate memory. (Unicode) CreateFontIndirectW The CreateFontIndirect function creates a logical font that has the specified characteristics. (Unicode) CreateFontPackage The CreateFontPackage function creates a subset version of a specified TrueType."
1138,VirtualAllocEx,"Microsoft Build · May 19 – 22, 2025The VirtualAllocEx function is used to allocate memory in the address space of a specified process. It is similar to the VirtualAlloc function but allows you to specify a target process for the memory allocation. This is particularly useful when you need to allocate memory for a process that is different from the calling process.The function can reserve or commit pages of memory, and you can specify the size and type of access for the allocated memory. The memory allocated using VirtualAllocEx can be accessed by the calling process, allowing for inter-process communication or manipulation of memory in another process's address space.References:VirtualAllocEx function (memoryapi.h) Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. To specify the NUMA node for the physical memory, see VirtualAllocExNuma. Syntax Parameters [in] hProcess The handle to a process..VirtualAlloc function (memoryapi.h) Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process. Memory allocated by this function is automat... To allocate memory in the address space of another process, use the VirtualAllocEx function. Syntax Parameters [in, optional] lpAddress The starting.It is available to be committed. A process can use the VirtualAlloc or VirtualAllocEx function to reserve pages of its address space and later to commit the reserved pages. It can use VirtualFree or VirtualFreeEx to decommit committed pages and return them to the reserved state. When the process terminates, the system releases the storage for.If this option is used, the debugger calls VirtualAllocEx with the flAllocationType parameter equal to MEM_RESERVE. Environment Item Description Modes user mode only Targets live debugging only Platforms all Remarks The .dvalloc command calls VirtualAllocEx to allocate new memory for the target process. The allocated memory permits reading,.(VirtualAlloc2FromApp) VirtualAllocEx Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. (VirtualAllocEx) VirtualAllocExNuma Reserves, commits, or changes the state of a region of memory within the virtual address space of.If the initial page is not free, all pages in the region are part of the same initial allocation of pages created by a single call to VirtualAlloc, MapViewOfFile, or one of the following extended versions of these functions: VirtualAllocEx, VirtualAllocExNuma, MapViewOfFileEx, MapViewOfFileExNuma. Requirements Requirement Value Minimum supported.Address Windowing Extensions Address Windowing Extensions (AWE) is a set of extensions that allows an application to quickly manipulate physical memory greater than 4GB. Certain data-intensive applications, such as database mana... The following functions make up the Address Windowing Extensions (AWE) API. Function Description VirtualAlloc and.Creating Guard Pages A guard page provides a one-shot alarm for memory page access. This can be useful for an application that needs to monitor the growth of large d... To create a guard page, set the PAGE_GUARD page protection modifier for the page. This value can be specified, along with other page protection modifiers, in the VirtualAlloc,.This flag is not supported by the VirtualAlloc or VirtualAllocEx functions. The PAGE_NOCACHE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or VirtualAllocExNuma functions. The PAGE_WRITECOMBINE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or.VirtualAllocExNuma function (memoryapi.h) Reserves, commits, or changes the state of a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory. The VirtualAllocExNuma function can perform the following operations: Commit a region of reserved pages Reserve a region of free."
1139,GetCursor,"Microsoft Build · May 19 – 22, 2025GetCursor function (winuser.h) Retrieves a handle to the current cursor. To get information on the global cursor, even if it is not owned by the current thread, use GetCursorInfo. Syntax Return value Type: HCURSOR The return value is the handle to the current cursor. Requirements Requirement Value Minimum supported client Windows 2000 Professional.ShapeElement.GetCursor(Cursor, DiagramClientView, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Gets the cursor that is displayed.ShapeSubField.GetCursor(Cursor, DiagramClientView, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Gets the cursor that is displayed.CreateAction.GetCursor(Cursor, DiagramClientView, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Gets the cursor to display at the....View, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Returns the connect action cursor Para currentCursor Cursor Cursor shape.ShapeField.GetCursor(Cursor, DiagramClientView, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Gets the cursor that is displayed.ToolboxAction.GetCursor(Cursor, DiagramClientView, PointD) Method Definition Namespace: Microsoft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10.40171 Gets the cursor to display at the....deling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10 Gets the cursor to display at the specified mouse positionParameters currentCursor Cursor The existing cursor. diagramClientView DiagramClientView The DiagramClientView requesting the cursor.....soft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10 Gets the cursor to display at the specified mouse positionParameters currentCursor Cursor The existing cursor. diagramClientView....soft.VisualStudio.Modeling.Diagrams Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0.dll Assembly:Microsoft.VisualStudio.Modeling.Sdk.Diagrams.dll Package:Microsoft.VisualStudio.Modeling.Sdk.Diagrams v17.10 Gets the cursor to display at the specified mouse positionParameters currentCursor Cursor The existing cursor. diagramClientView."
1140,GetDateFormatW,"Microsoft Build · May 19 – 22, 2025GetDateFormatW function (datetimeapi.h) Formats a date as a date string for a locale specified by the locale identifier. The function formats either a specified date or the local system date. Note  For interoperability reasons, the application should prefer the GetDateFormatEx function to GetDateFormat because Microsoft is migrating toward the use.GetDateFormatWrapW function [GetDateFormatWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use GetDateFormatW in its place.]. Formats a date as a date string for a specified locale. The function formats either a specified date or the local system date. Note GetDateFormatWrapW is a wrapper for.It may not be available in subsequent versionsYou should use FindResourceW instead.] [GetDateFormatWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use GetDateFormatW in its place.] [This function is available through Windows XP SP2 and Windows Server 2003. It might be altered or unavailable in.datetimeapi.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications datetimeapi.h contains the following programming interfaces: Functions GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. GetDateFormatW.GetCurrencyFormatW Formats a number string as a currency string for a locale specified by identifier. (Unicode) GetDateFormatA Formats a date as a date string for a locale specified by the locale identifier. (ANSI) GetDateFormatEx Formats a date as a date string for a locale specified by name. GetDateFormatW Formats a date as a date string for a.Prepare your application for the Japanese era change Note On April 1, 2019, the new era name was announced: Reiwa (令和). On April 25, Microsoft released packages for different Windows operating systems containing the updated registry key with the new era name. The following APIs will be impacted: WinRT Windows.Globalization Namespace Calendar Cla..."
1141,GetUserObjectInformationW,"Microsoft Build · May 19 – 22, 2025GetUserObjectInformationW function (winuser.h) Retrieves information about the specified window station or desktop object. Syntax Parameters [in] hObj A handle to the window station or desktop object. This handle is returned by the CreateWindowStation, OpenWindowStation, CreateDesktop, or OpenDesktop function. [in] nIndex The information to be.Window Stations and Desktops Overview of the Window Stations and Desktops technology. GetThreadDesktop Retrieve... GetUserObjectInformationA Retrieves information about the specified window station or desktop object. (ANSI) GetUserObjectInformationW Retrieves information about the specified window station or desktop object. (Unicode) OpenDesktopA.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other."
1142,GetMenuItemCount,"Microsoft Build · May 19 – 22, 2025GetMenuItemCount function (winuser.h) Determines the number of items in the specified menu. Syntax Parameters [in, optional] hMenu Type: HMENU A handle to the menu to be examined. Return value Type: int If the function succeeds, the return value specifies the number of items in the menu. Requirements Requirement Value Minimum supported client.GetMenuCheckMarkDimensions Retrieves the dimensions of the default ch... GetMenuDefaultItem Determines the default menu item on the specified menu. GetMenuInfo Retrieves information about a specified menu. GetMenuItemCount Determines the number of items in the specified menu. GetMenuItemID Retrieves the menu item identifier of a menu item located.CMenu Class An encapsulation of the Windows HMENU. Syntax Members Public Constructors Name Description CMenu::CMenu Constructs a CMenu object. Public Methods Name Description CMenu::AppendMenu Appen. CMenu::GetDefaultItem Determines the default menu item on the specified menu. CMenu::GetMenuItemCount Determines the number of items in a pop-up or.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-0 (introduced in Windows 8) See also Conceptual.Before calling the SetMenuItemBitmaps function to replace ... GetMenuDefaultItem Determines the default menu item on the specified menu. GetMenuInfo Retrieves information about a specified menu. GetMenuItemCount Retrieves the number of items in the specified menu. GetMenuItemID Retrieves the menu item identifier of a menu item located at the.CMFCPopupMenu Class Implements Windows pop-up menu functionality and extends it by adding features such as tear-off menus and tooltips. Syntax Members Protected Constructors Name Description CMFCPopupMenu::CMFCPopupMenu Constructs a CMFCPopupMenu object. CMFCPopupMenu::GetMenuItem Returns a pointer to the menu it... CMFCPopupMenu::GetMenuItemCount.Shell_MergeMenus function (shlobj_core.h) [Shell_MergeMenus is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]. The value for uIDAdjust would typically be the number of items in hmDst. This number can be obtained using the GetMenuItemCount. uIDAdjustMax.Menu Functions In This Section AppendMenu CheckMenuItem CheckMenuRadioItem CreateMenu CreatePopupMenu DeleteMenu DestroyMenu DrawMenuBar EnableMenuItem EndMenu GetMenu GetMenuBarInfo GetMenuCheckMarkDimensions GetMenuDefaultItem GetMenuInfo GetMenuItemCount GetMenuItemID GetMenuItemInfo GetMenuItemRect GetMenuState GetMenuString GetSubMenu.Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set ext-ms-win-ntuser-menu-l1-1-2 (introduced in Windows 10, version 10.0.10240).Refer to the Edito... C++ Q&A Getting a Menu Handle, Declaring GetParam, and Filtering File Names Paul DiLascia Code download available at:CQA0310.exe(152 KB) Q I'm trying to handle OnMenuSelect in my MFC app. The declaration for this function is: When my handler is invoked, none of the menu functions, like GetMenuItemCount, work properly. I added."
1143,SendMessageTimeoutW,"Microsoft Build · May 19 – 22, 2025SendMessageTimeoutW function (winuser.h) Sends the specified message to one or more windows. Syntax Parameters [in] hWnd Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible.(SendMessageA) SendMessageCallbackA Sends the specified message to a window or windows. (SendMessageCallbackA) SendMessageCallbackW Sends the specified message to a window or windows. (SendMessageCallbackW) SendMessageTimeoutA Sends the specified message to one or more windows. (ANSI) SendMessageTimeoutW Sends the specified message to one or more.For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Feedback Configuration Input Source Identification Internationalization for Windows Applications Keyboard and Mouse Input Menus and Other Resources Mobile Device Management Settings Provider Pointer Device."
1144,CreateDIBitmap,"Microsoft Build · May 19 – 22, 2025CreateDIBitmap function (wingdi.h) The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits. Syntax Parameters [in] hdc A handle to a device context. [in] pbmih A pointer to a bitmap information header structure, BITMAPV5HEADER. Requirements Requirement Value Minimum supported client.Bitmap Creation To create a bitmap, use the CreateBitmap, CreateBitmapIndirect, or CreateCompatibleBitmap function, CreateDIBitmap, and CreateDiscardableBitmap. These functions allow you to specify the width and height, in pixels, of the bitmap. The CreateDIBitmap function creates a device-dependent bitmap from a device-independent bitmap. To.Bitmap Functions (Windows GDI) The following functions are used with bitmaps. BitBlt Performs a bit-block transfer. CreateBitmap Creates a bitmap. CreateBitmapIndirect Creates a bitmap. CreateDIBitmap Creates a device-dependent bitmap (DDB) from a DIB. CreateDIBSection Creates a DIB that applications can write to directly... Obsolete Functions The.(ANSI) CreateDCW The CreateDC function creates a device context (DC) for a device using the specified name. (Unicode) CreateDIBitmap The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits. CreateDIBPatternBrush The CreateDIBPatternBrush function creates a logical brush that has the pattern.CreateBitmap The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel). (ANSI) CreateDCW The CreateDC function creates a device context ... (Unicode) CreateDIBitmap The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits..Porting GLX Pixmap Code The X Window System uses pixmaps, which are off-s... GLX pixmap and font function Windows bitmap and font function GLXPixmapglXCreateGLXPixmap( Display *dpy,XVisualInfo *vis,Pixmap pixmap) HBITMAP CreateDIBitmap HDC hdc,LPBITMAPINFOHEADER lpbmih,DWORD fdwInit,CONST BYTE *lpbInit,LPBITMAPINFO lpbmi,UINT fuUsage**)**HBITMAP.ICM-Enabled Bitmap Functions Microsoft Image Color Management (ICM) ensures that a color image, graphic object, or text object is rendered as closely as possible to its original intent on any device, despite differences in imaging technologies and color capabilities between devices. The following bitmap functions are enabled for use with ICM:.Device-Dependent Bitmaps Device-dependent bitmaps (DDBs) are described by using a single structure, the BITMAP structure. An application can create a DDB from a DIB by initializing the required structures and calling the CreateDIBitmap function. Specifying CBM_INIT in the call to CreateDIBitmap is equivalent to calling the CreateCompatibleBitmap.Graphic object Function Bitmap CreateBitmap, CreateBitmapIndirect, CreateCompatibleBitmap, CreateDiscardableBitmap, CreateDIBitmap Brush CreateBrushIndirect, CreateDIBPatternBrush, CreateDIBPatternBrushPt, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush Color Palette CreatePalette Font CreateFont, CreateFontIndirect Pen CreatePen,.Using GDI Functions With WCS There are various functions in the graphics device interface (GDI) that use or operate on color data. CreateDIBitmap The fuUsage parameter specifies that the bmiColors member of the BITMAPINFO structure pointed at by the lpbmi parameter does or does not contain color information. If it does not, no color management is."
1145,GetWindowLongA,"Microsoft Build · May 19 – 22, 2025GetWindowLongA function (winuser.h) Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory. Note  If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on.(ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon asso... (Unicode) GetClassLongA Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (ANSI) GetClassLongPtrA Retrieves the specified value from the WNDCLASSEX structure associated with.(ANSI) GetClassInfoExA Retrieves information about a window class, including a handle to the small icon associated with the window class. (Unicode) GetClassLongA Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window. (ANSI) GetClassLongPtrA Retrieves the specified value from the WNDCLASSEX."
1146,accept,"Microsoft Build · May 19 – 22, 2025The Accept header in HTTP requests is used by clients to specify the media types that are acceptable for the response. This allows the server to understand what format the client prefers for the response body, such as JSON or XML. For example, a client might include the following header in its request:This indicates that the client expects the response to be in JSON format. The server can then respond accordingly, either by providing the requested format or by returning a default format if the specified one is not available. If the Accept header is not specified, the server may return a 406 (Not Acceptable) response if it cannot provide a response in any of the formats that the client can handle.Additionally, the Accept header can include multiple media types, allowing the server to choose the most appropriate format for the response.References:Accepting a Connection (Windows Sockets 2) Once the socket is listening for a connection, the program must handle connection requests on that socket. To accept a connection on a socket Create a temporary SOCKET object called ClientSocket for accepting connections from clients. Normally a server application would be designed to lis... Examples of.accept function (winsock2.h) The accept function permits an incoming connection attempt on a socket. Syntax Parameters [in] s A descrip... Requirements Requirement Value Minimum supported client Windows 8.1, Windows Vista [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header.OwinRequest.Accept Property Definition Namespace: Microsoft.Owin Assembly:Microsoft.Owin.dll Package:Microsoft.Owin v4.2.2 Source:OwinRequest.cs Gets or set the Accept header. Property Value String The Accept header. Implements Accept Applies to. Gets or set the Accept header. . /dotnet/api/microsoft.owin.owinrequest.accept.Table of contents Exit focus mode Save Table of contents Add Share via Facebook x.com LinkedIn Email Print Manage accepted domains in Exchange Online When you add your domain to Microsoft 365 or Office 365, it's called an accepted domain. This functionality of an accepted domain means that users in this domain can send and receive mail. After you.HttpWebRequest.Accept Property Definition Namespace: System.Net Assemblies:System.dll, System.Net.Requests.dll Assemblies:netstandard.dll, System.Net.Requests.dll Assembly:System.Net.Requests.dll Assembly:System.dll Assembly:netstandard.dll Source:HttpWebRequest.cs Source:HttpWebRequest.cs Source:HttpWebRequest.cs Gets or sets the value of the.IOwinRequest.Accept Property Definition Namespace: Microsoft.Owin Assembly:Microsoft.Owin.dll Package:Microsoft.Owin v4.2.2 Source:IOwinRequest.cs Gets or set the Accept header. Property Value String The Accept header. Applies to. Gets or set the Accept header. . /dotnet/api/microsoft.owin.iowinrequest.accept.Socket.Accept Method Definition Namespace: System.Net.Sockets Assemblies:netstandard.dll, System.Net.Sockets.dll Assembly:System.Net.Sockets.dll Assembly:System.dll Assembly:n... InvalidOperationException The accepting socket is not listening for connections. Examples The following code example accepts a simple Socket connection. Remarks Accept.For example, when returning different HTTP status codes based on the result of the operation. Content negotiation Content negotiation occurs when the client specifies an Accept header. The default format used by ASP.NET Core is JSON. When a mo... The following action method uses the Ok and NotFound helper methods: By default, ASP.NET Core supports.You can use this parameter or pipe the paths and file names to Send-MailMessage. Type:String[] Aliases:PsPath Position:Named Default value:None Required:False Accept pipeline input:True Accept wildcard characters:False -Bcc Specifies the email addresses that receive a copy of the mail but aren't listed as recipients ... Starting with PowerShell.Example 4: Use a provider and send output to a file This example shows how to use the Out-File cmdlet when you aren't in a FileSystem provider drive. Notes Input objects are automatically formatted as they would be in the terminal, but you can use a F... For example, Get-Date | Format-List | Out-File out.txt To send a PowerShell command's output."
1147,SetThreadLocale,"Microsoft Build · May 19 – 22, 2025SetThreadLocale function (winnls.h) Sets the current locale of the calling thread. Syntax Parameters [in] Locale Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED.This locale can be eithe... GetThreadLocale and SetThreadLocale can be used to modify the locale of the new thread. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winnls.h (include Windows.h).For more information, see User Interface Language Management First Set Default to Standards and Formats Installation Installation How users can change SetThreadLocale Regional Options (Control Panel item) Windows XP: Regional and Language Options No Default Standards and Formats Language of localized version with default input method. This.An application can retrieve the current locale names by using the GetSystemDefaultLocaleName and GetUserDefaultLocaleName functions. While each thread can retrieve and set its own locale identifier with GetThreadLocale and set it with SetThreadLocale, there are no analogous functions to get and set locale by name. Related topics Locales and.SetCalendarInfo Sets an item of locale information for a calendar. SetLocaleInfo Sets an item of information in the user override portion of the current locale. SetThreadLocale Sets the current locale of the calling thread. SetUserGeoID Sets the geographical location identifier for the user. SetUserGeoName Sets the geographic location for the.A ""locale"" is a collection of language-related user preference information represented as a list of values. This locale is defined by LOCALE_USER_DEFAULT. An application can override either default by using the SetThreadLocale function to explicitly set the locale for a thread. Implementation of a language requires a corresponding locale. Yes No.winnls.h header This header is used by Internationalization for Windows Applications. For more information, see: Internationalization for Windows Applications winnls.h contains the following programming interfaces: Functions CompareString ... This function does not set the system defaults. For more information, see User Interface Language.Describes the NLS functions that are part of `WINAPI FAMILY GAMES`.Function State Replacement EnumSystemLocalesEx FindNLSStringEx FoldStringA GetACP GetCurrencyFormatEx GetGeoInfoEx GetLocaleInfoEx GetNumberFormatEx GetStringTypeA GetStringTypeExA GetThreadLocalevoid); GetUserDefaultGeoName GetUserDefaultLocaleName GetUserPreferredUILanguages NOT SUPPORTED Always returns en-US IdnToAscii IdnToUnicode.The locale identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed operating system-defined locales. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Retrieval of Locale Identifiers An applic... Each thread can set and retrieve its own locale with."
1148,SetThreadAffinityMask,"Microsoft Build · May 19 – 22, 2025The SetThreadAffinityMask function in Windows programming is used to set the processor affinity for a specific thread. Processor affinity restricts the thread to run only on a specified subset of processors, which can be beneficial for performance optimization in certain scenarios.When you call SetThreadAffinityMask, you provide a bitmask that indicates which processors the thread is allowed to execute on. This can help in scenarios where you want to control the execution of threads to minimize cache misses or improve performance by keeping threads on specific processors.It's important to note that setting thread affinity should generally be avoided unless necessary, as it can interfere with the operating system's scheduler and reduce the overall efficiency of thread management across processors.References:SetThreadAffinityMask function (winbase.h) Sets a processor affinity mask for the specified thread. Syntax Parameters [in] hThread A handle to the thread whose affinity mask is to be set. Windows Server 2003 and Windows XP:  The handle must have the THREAD_SET_INFORMATION and THREAD_QUERY_INFORMATION access rights. [in] dwThreadAffinityMask The.PartyManager::SetThreadAffinityMask Optionally configures the processor on which internal Party library threads run. Syntax Parameters threadId   PartyThreadId The type of internal Party library thread to configure processor affinity. threadAffinityMask   uint64_t The affinity mask for this type of Party library thread. Remarks This method enables.PartyXblManager::SetThreadAffinityMask Optionally configures the processor on which internal Party Xbox Live Helper library threads will run. Syntax Parameters threadId   PartyXblThreadId The type of internal library thread for which processor affinity should be retrieved. threadAffinityMask   uint64_t The affinity mask for this type of Party.Multiple Processors Computers with multiple processors are typically designed for one of two architectures: non-uniform memory access (NUMA) or symmetric multiprocessing (SMP). ... The system represents affinity with a bitmask called a processor affinity mask. Use the SetProcessAffinityMask function to specify thread affinity for all threads of.TrySetLampArrayWorkerThreadAffinityMask Sets a processor affinity mask for the LampArray worker thread. Syntax Parameters threadAffinityMask Type: uint64_t The desired affinity mask for the LampArray worker thread. Return value Type: HRESULT Function result. Remarks This function will succeed and take effect no more than once per process. Calling.QueryIdleProcessorCycleTime Retrieves the cycle time for the idle thread of each processor in t... QueryThreadCycleTime Retrieves the cycle time for the specified thread. ResumeThread Decrements a thread's suspend count. SetThreadAffinityMask Sets a processor affinity mask for the specified thread. SetThreadDescription Assigns a description to a.Therefore, if a thread has affinity for processors 0, 1, and 32, WOW64 reports the affinity as 0 and 1, because processor 32 maps to processor 0. Functions that set processor affinity, such as SetThreadAffinityMask, restrict processors to the first 32 processors under WOW64. For more information about processor affinity, see Multiple Processors...SetTapeParameters Specifies the block size of a tape or configures the tape device. SetTapePosition Sets the tape position on the specified device. SetThreadAffinityMask Sets a processor affinity mask for the specified thread. SetThreadpoolCallbackCleanupGroup Associates the specified cleanup group with the specified callback environment..To ensure that all threads for your process run on the same node, use the SetProcessAffinityMask function with a process affinity mask that specifies processors in the same node. ... Alternatively, to limit the number of threads on each node, use the SetThreadAffinityMask function. Behavior starting with Windows 10 Build 20348 Note Starting with.DkmGetVolatilePropertiesAsyncResult.AffinityMask Property Definition Namespace: Microsoft.VisualStudio.Debugger.ThreadProperties Assembly:Microsoft.VisualStud... The values returned correspond directly to the values defined for kernel32!SetThreadAffinityMask. Property Value UInt64 Returns UInt64. The values returned correspond directly to the."
1149,GetWindowTextA,"Microsoft Build · May 19 – 22, 2025GetWindowTextA function (winuser.h) Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application. Syntax Parameters [in] hWnd Type: HWND A handle to the window or control.GetWindowWord Retrieves the 16-bit (DWORD) value at the specified offset into the extra window memor HOOKPROC An application-defined or library-defined callback function used with the SetWindowsHookEx function. InternalGetWindowText Copies the text of the specified window's title bar (if it has one) into a buffer. RealGetWindowClassA Retrieves a.1) It throws me error upon compilation. It says that hwnd in GetWindowTextA cannot be reached. How to get hwnd. 2) Is there not any: friend string&amp; operator=(string&amp; paramString, TextClass&amp; paramTextClass); I do buttonClass button(parent); I assume there is not operator= so I do it by conversion to string. 1) It throws me error upon.Issue Description When using an ANSI application that uses the UTF-8 code page , and items in a ComboBox list contain non-English text (i.e. include characters that span multiple bytes), selecting those items results in the text being truncated in the selection field. ...TextLengthA function returns a value that is less than the actual number of.(Unicode) GetClassLongA Retrieves the specified 32-bit (DWORD) value from the W... (GetClassName) GetClassNameA Retrieves the name of the class to which the specified window belongs. (GetClassNameA) GetClassNameW The GetClassNameW (Unicode) function retrieves the name of the class to which the specified window belongs. GetClipboardFormatNameA."
1150,SendNotifyMessageW,"Microsoft Build · May 19 – 22, 2025SendNotifyMessageW function (winuser.h) Sends the specified message to a window or windows. If the window was created by the calling thread, SendNotifyMessage calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, SendNotifyMessage passes.(Unicode) SendMessageW The SendMessageW (Unicode)... (SendMessageW) SendNotifyMessageA Sends the specified message to a window or windows. (SendNotifyMessageA) SendNotifyMessageW Sends the specified message to a window or windows. (SendNotifyMessageW) SetAdditionalForegroundBoostProcesses SetAdditionalForegroundBoostProcesses is a performance.(ANSI) AppendMenuW Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. BroadcastSystemMessage The BroadcastSystemMessage function sends a message to the specified recipients. (BroadcastSystemMessage) BroadcastSystemMessageA Sends a message to the specified recipients. (BroadcastSystemMessageA)."
1151,GetConsoleTitleA,"Microsoft Build · May 19 – 22, 2025GetConsoleTitle function Important This document describes console platform functionality that is no longer a part of our ecosystem roadmap. Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Header ConsoleApi2.h (via WinCon.h, include Windows.h).CoGetContextToken Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoGetObjectContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. CoSwitchCallContext Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. GetHGlobalFromStream Introduced into api-ms-win-core-com-l1-1-1.dll in 10.0.10240. FmtIdToPropStgName."
1152,MoveFileExA,"Microsoft Build · May 19 – 22, 2025MoveFileExA function (winbase.h) Moves an existing file or directory, including its children, with various move options. The MoveFileWithProgress function is equivalent to the MoveFileEx function, except that MoveFileWithProgress allows you to provide a callback function that receives progress notifications. To perform this operation as a.Win32-based applications should use the CreateFile function. _lread The _lread function reads data from the specified file. Win32-based applications should use the ReadFile function. _lwrite Writes data to the specified file. (AccessCheckByTypeResultListAndAuditAlarmA) AccessCheckByTypeResultListAndAuditAlarmByHandleA The.WriteFileEx Introduced into api-ms-win-core-file-l1-2-1.dll in 10.0.14393. GetFileInformationByHandleEx Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. MoveFileExW Introduced into api-ms-win-core-file-l2-1-1.dll in 10.0.10240. APIs from api-ms-win-core-kernel32-legacy-l1-1-1.dll API Requirements MoveFileExA Introduced into."
1153,CreateScalableFontResourceW,"Microsoft Build · May 19 – 22, 2025CreateScalableFontResourceW function (wingdi.h) [The CreateScalableFontResource function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]. The CreateScalableFontResource function creates a font resource file for a scalable font. Syntax Parameters [in].CreateRoundRectRgn The CreateRoundRectRgn function creates a rectangular region with rounded corners. CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font..CreateRoundRectRgn The CreateRoundRectRgn function creates a rectangular region with rounded corners. CreateScalableFontResourceA The CreateScalableFontResource function creates a font resource file for a scalable font. (ANSI) CreateScalableFontResourceW The CreateScalableFontResource function creates a font resource file for a scalable font.."
1154,VirtualProtectEx,"Microsoft Build · May 19 – 22, 2025VirtualProtectEx function (memoryapi.h) Changes the protection on a region of committed pages in the virtual address space of a specified process. Syntax Parameters [in] hProcess A handle to the process whose memory protection is to be changed. It is best to avoid using VirtualProtectEx to change page protections on memory blocks allocated by.The VirtualProtect function enables a process to modify the access protection of any committed page in the address space of a process. VirtualProtect is typically used with pages allocated by VirtualAlloc, but it also works with pages committed by any of the other allocation functions. The VirtualProtectEx function is similar to VirtualProtect,.VirtualProtect function (memoryapi.h) Changes the protection on a region of committed pages in the virtual address space of the calling process. To change the access protection of any process, use the VirtualProtectEx function. Syntax Parameters [in] lpAddress The address of the starting page of the region of pages whose access protection.The APIs intercepted by this mitigation are: LoadLibraryA LoadLibraryW LoadLibraryExA LoadLibraryExW LdrLoadDll VirtualAlloc VirtualAllocEx NtAllocateVirtualMemory VirtualProtect VirtualProtectEx NtProtectVirtualMemory HeapCreate RtlCreateHeap CreateProcessA CreateProcessW CreateProcessInternalA CreateProcessInternalW NtCreateUserProcess.Creating Guard Pages A guard page provides a one-shot alarm for memory page access. This can be useful for an application that needs to monitor the growth of large d... To create a guard page, set the PAGE_GUARD page protection modifier for the page. This value can be specified, along with other page protection modifiers, in the VirtualAlloc,.VirtualProtect Changes the protection on a region of committed pages in the virtual address space of the calling process. (VirtualProtect) VirtualProtectEx Changes the protection on a region of committed pages in the virtual address space of a specified process. VirtualProtectFromApp Changes the protection on a region of committed pages in the.Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header memoryapi.h (include Windows.h, Memoryapi.h) Library onecore.lib DLL Kernel32.dll See also GetSystemInfo MEMORY_BASIC_INFORMATION MapViewOfFileEx Mem....Process Security and Access Rights The Microsoft Windows security model enables you to control access to process objects. For more information about security, see Access-Control Model. PROCESS_TERMINATE (0x0001) Required to terminate a process using TerminateProcess. PROCESS_VM_OPERATION (0x0008) Required to perform an operation on the address.PSECURE_MEMORY_CACHE_CALLBACK callback function (winnt.h) An application-defined function previously registered with the AddSecureMemoryCacheCallback function that is called when a secured memory range is freed or its protections are changed. The application secures and unsecures a memory range by sending requests to a device d... Examples of.OB_PRE_CREATE_HANDLE_INFORMATION structure (wdm.h) The OB_PRE_CREATE_HANDLE_INFORMATION structure provides information to an ObjectPreCallback routine about a thread or process handle that is being opened. PROCESS_VM_OPERATION Modify the address space of the process, such as by calling the user-mode WriteProcessMemory and VirtualProtectEx."
1155,SetScrollPos,"Microsoft Build · May 19 – 22, 2025SetScrollPos function (winuser.h) The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box. Note  The SetScrollPos function is provided for backward compatibility. New applications should use the SetScrollInfo function..FlatSB_SetScrollPos function (commctrl.h) Sets the current position of the thumb in a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard SetScrollPos function. Syntax Parameters unnamedParam1 Type: HWND A handle to the window that contains the flat scroll bar. It can be one of the following.EM_SETSCROLLPOS message Scrolls the contents of a rich edit control to the specified point. Parameters wParam This parameter is not used; it must be zero. lParam Pointer to a POINT structure which specifies a point in the virtual text space of the document, expressed in pixels. The document will be scrolled until this point is located in the.Overviews Topic Contents About Scroll Bars A scroll bar consists of a shaded shaft with an arrow button at each end and a scroll box (sometimes called a thumb) between the arrow buttons. The function also redraws the scroll bar, if r... SetScrollPos The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar.SBM_SETPOS message The SBM_SETPOS message is sent to set the position of the scroll box (thumb) and, if requested, redraw the scroll bar to reflect the new position of the scroll box. Applications which implement a custom scroll bar control must respond to these messages for the SetScrollPos function to work properly. Parameters wParam Specifies.However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. Requirements Requirement Value Minimum supported client Windows Vista [desktop apps only].Scroll Bar Functions In This Section EnableScrollBar GetScrollBarInfo GetScrollInfo GetScrollPos GetScrollRange ScrollDC ScrollWindow ScrollWindowEx SetScrollInfo SetScrollPos SetScrollRange ShowScrollBar. Scroll Bar Functions. /windows/win32/controls/bumper-scroll-bars-reference-functions.If an application scrolls the content of the window, it must also reset the position of the scroll box by using the SetScrollPos function. However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit.CPagerCtrl::SetScrollPos Sets the scroll position of the current pager control. Remarks A pager control is a window that contains another window that is linear and larger than the containing window, and enables you to scroll the contained window into view. The pager control displays two scroll buttons that automatically disappear when the.ScrollBar_SetPos macro (windowsx.h) Sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box. Note  This macro expands to a call to the SetScrollPos function, which is deprecated. Requirements Requirement Value Minimum supported client."
1156,DestroyCaret,"Microsoft Build · May 19 – 22, 2025DestroyCaret function (winuser.h) Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen. Syntax Return value Type: BOOL If the function succeeds, the return value is nonzero. For an example, see Destroying a Caret Requirements Requirement Value Minimum supported client Windows 2000 Professional.Carets A caret is a blinking line, block, or bitmap in the client area of a window. The caret typically indicates the place at which text or graphics will be inserted. Caret Functions Name Description CreateCaret Creates a new... The caret shape can be a line, a block, or a bitmap. DestroyCaret Destroys the caret's current shape, frees the caret.(ANSI) CreateAcceleratorTableW Creates an accelerator table. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's current shape, frees.About Carets The system provides one caret per message queue. A window should create a caret only when it has the keyboard focus or is active. Hiding the caret is cumulative; that is, if the application calls HideCaret five times, it must also cal... To remove the caret from the screen and destroy its shape, use using the DestroyCaret function..Using Carets This section has code samples for the following tasks: Creating and Displaying a Caret Hiding a Caret Destroying a Caret Adjusting the Blink Time Processing Keyboard Input Creating and Displaying a Caret Upon receiving the keyboard focus, the window should create and display the caret. ... Your application should destroy the caret.Caret Functions In This Section CreateCaret DestroyCaret GetCaretBlinkTime GetCaretPos HideCaret SetCaretBlinkTime SetCaretPos ShowCaret. Caret Functions. /windows/win32/menurc/caret-functions.winuser.h header This header is used by multiple technologies. (Unicode) CreateCaret Creates a new shape for the system caret and assigns ownership of the caret to the specified window. DeregisterShellHookWindow Unregisters a specified Shell window that i... DestroyAcceleratorTable Destroys an accelerator table. DestroyCaret Destroys the caret's.User object Creator function Destroyer function Accelerator table CreateAcceleratorTable DestroyAcceleratorTable Caret CreateCaret DestroyCaret Cursor CreateCursor, LoadCursor, LoadImage DestroyCursor DDE conversation DdeConnect, DdeConnectList DdeDisconnect, DdeDisconnectList Hook SetWindowsHookEx UnhookWindowsHookEx Icon CreateIconIndirect,.HideCaret function (winuser.h) Removes the caret from the screen. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL User32.dll API set.The window should destroy the caret before losing the keyboard focus or becoming inactive. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib DLL."
1157,CheckDlgButton,"Microsoft Build · May 19 – 22, 2025CheckDlgButton function (winuser.h) Changes the check state of a button control. Syntax Parameters [in] hDlg Type: HWND A handle to the dialog box that contains the button. [in] nIDButton Type: int The identifier of the button to modify. [in] uCheck Type: UINT The check state of the button. Value Meaning BST_CHECKED Sets the button state to.To develop Windows Controls, you need these headers: commctrl.h commoncontrols.h dpa_dsa.h prsht.h richedit.h richole.h shlobj.h textserv.h tom.h uxtheme.h windowsx.h winuser.h For programming guidance for this technology, see: Windows Controls Class ITextHost The ITextHost interface is used by a text services object to obtain text host services..Sending Messages to Buttons Handling Messages from a Button Notification Messages from Buttons Button Color Messages Button Default Message Processing Related topics Sending Messages to Buttons A parent window can send messages to a button in an overlapped or child window by using the SendMessage function, or it... Calling the CheckDlgButton or.The dialog box procedure can set the initial state of a check box by using the CheckDlgButton function, which sets or clears the check box. For radio buttons in a group of mutually exclusive radio buttons, the dialog box procedure can use the CheckRadioButton function to set the appropriate radio button... Before a dialog box terminates, the.CWindow::CheckDlgButton Changes the check state of the specified button. CWindow::CheckRadioButton Checks the specified radio button. Every CWindow method that directly wraps a Win32 function passes the m_hWnd member; therefore, much of the CWindow documentation will refer you to the Windows SDK. CWindow::m_hWnd stores ... Otherwise, it will set.COleControlContainer::BroadcastAmbientPropertyChange Informs all hosted controls that an ambient property has changed. COleControlContainer::CheckDlgButton Modifies the specified button control. COleControlContainer::CheckRadioButton Selects the specified radio button of a group. Commonly, this class is used in conjunction with COccManager and.If the operand is a character string, the function converts the characters in place. (Unicode) CheckDlgButton Changes the check state of a button control. CheckMenuItem Sets the state of the specified menu item's check-mark attribute to either selected or clear. CheckRadioButton Adds a check mark to (checks) a specified radio button in a group and.CWnd Class Provides the base functionality of all window classes in the Microsoft Foundation Class Library. Syntax Members Public Constructors Name Description CWnd::CWnd Constructs a ... CWnd::ChangeClipboardChain Removes CWnd from the chain of Clipboard viewers. CWnd::CheckDlgButton Places a check mark next to or removes a check mark from a.A button is a control the user can click to provide input to an application. Functions Topic Contents CheckDlgButton Changes the check state of a button control. CheckRadioButton Adds a check mark to (checks) a spec... IsDlgButtonChecked The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Button Control Functions In This Section CheckDlgButton CheckRadioButton IsDlgButtonChecked Feedback Was this page helpful. Yes No Provide product feedback | Get help at Microsoft Q&A. Button Control Functions.."
1158,GlobalUnfix,"Microsoft Build · May 19 – 22, 2025Sorry, we couldn't find anything that fit your search."
1159,SetWindowsHookExW,"Microsoft Build · May 19 – 22, 2025SetWindowsHookExW function (winuser.h) Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. Note The winuser.h header defines SetWindowsHookEx as an alias that automatically selects the ANSI or Unicode version of this function based on the definition.CallWndProc callback function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. An application installs the hook procedure by specifying the WH_CALLWNDPROC hook... Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server.ForegroundIdleProc callback function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. An application installs this hook procedure by specifying the WH_FOREGROUNDIDLE hook type and the pointer to the hook procedure in a call to the SetWindowsHookExA/SetWindowsHookExW function..SysMsgProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. The function can.MessageProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. The hook procedure.MouseProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function whenever an application calls the GetMessage or PeekMessageA/PeekMessageW function and there is a mouse message to be processed. MouseProc is a placeholder for the.LowLevelMouseProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function every time a new mouse input event is about to be posted into a thread input queue. LowLevelMouseProc is a placeholder for th... Remarks An application.LowLevelKeyboardProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The system calls this function every time a new ke... LowLevelKeyboardProc is a placeholder for the application-defined or library-defined function name. Remarks An application installs.ShellProc function Description An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. The function receives notifications of Shell even... The HOOKPROC type defines a pointer to this callback function. ShellProc is a placeholder for the application-defined or library-defined function.CBTProc callback function An application-defined or library-defined callback function used with the SetWindowsHookExA/SetWindowsHookExW function. An application installs the hook procedure by specifying... Requirements Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps."
1160,SetCapture,"Microsoft Build · May 19 – 22, 2025...SetCapture fun (winuser.h) Sets the mouse capture to the specified window belonging to the current threadSetCapture captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the.IOleInPlaceSiteWindowless::SetCapture method (ocidl.h) Enables an in-place active, windowless object to capture all mouse messages. Syntax Parameters [in] fCapture If TRUE, the container should capture the mouse for the object. If FALSE, the container should release mouse capture for the object. Return value This method returns S_OK if the mouse.DesignerView.SetCapture Method Definition Namespace: Microsoft.VisualStudio.DesignTools.Extensibility.Interaction Assembly:Microsoft.VisualStudio.DesignTools.Interaction.dll Package:Microsoft.VisualStudio.DesignTools.Extensibility v17.10.34916.79 Applies to. Learn more about the.IOleInPlaceSiteWindowless.SetCapture(Int32) Method Definition Namespace: Microsoft.VisualStudio.OLE.Interop Assembly:Microsoft.VisualStudio.OLE.Interop.dll Assembly:Microsoft.VisualStudio.Interop.dll Package:Microsoft.VisualStudio.Interop v17.13.40008 Enables an in-place active, windowless object to capture all mouse messages. Parameters fCapture.This section covers the following topics: Mouse Cursor Mouse Capture Mouse ClickLock Mouse Configuration XBUTTONs Mouse Messages Client Area Mouse Messages Nonclient Area Mouse Messages The WM_NCHITTEST Message Mouse Sonar Mouse Vanish The Mouse Wheel Window Activation Mouse Cursor When the user moves the mouse, the system moves a bitmap on the.Mouse Input Functions In this section Topic Description _TrackMouseEvent Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. A window that has captured the mouse receives all mouse input, regardless of the position of the cur... SetCapture Sets the mouse capture to the specified window.Keyboard and Mouse Input Overview of the Keyboard and Mouse Input technology. RegisterRawInputDevices Registers the devices that supply the raw input data. ReleaseCapture Releases the mouse capture from a window in the current thread and restores normal mouse input processing. SetActiv... The window must be attached to the calling thread's message.To receive mouse-move messages past the edge of the window, call the SetCapture function. After this function is called, the window will continue to receive WM... You would typically use SetCapture and ReleaseCapture in the following way. When the user presses the left mouse button, call SetCapture to start capturing the mouse. Next Other Mouse.Table of contents Exit focus mode Save Table of contents A... In this section Topic Description About Mouse Input This topic discusses mouse input. Using Mouse Input This section covers tasks associated with mouse input. SetCapture Sets the mouse capture to the specified window belonging to the current thread. SetCapture captures mouse input.CWindow::SetActiveWindow Activates the window. CWindow::SetCapture Sends all subsequent mouse input to the window. CWindow::SetClipboardViewer Adds the window to the Clipboard viewer chain. CWindow::SetDlgItemText Ch... CWindow::SetActiveWindow Activates the window. Remarks See SetActiveWindow in the Windows SDK. Example CWindow::SetCapture Sends."
1161,ReadProcessMemory,"Microsoft Build · May 19 – 22, 2025The ReadProcessMemory function is used to read data from the memory of another process. This function requires the handle of the target process and the address in that process's memory from which to read. It copies the data into a buffer provided by the calling application. The entire area to be read must be accessible; otherwise, the operation will fail.To use ReadProcessMemory, you typically need to:If the target process's memory is not accessible (due to permissions or other restrictions), the function will fail.References:ReadProcessMemory function (memoryapi.h) Syntax Parameters [in] hProcess A handle to the process with memory that is being read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. [out] lpBuffer A.Toolhelp32ReadProcessMemory function (tlhelp32.h) Copies memory allocated to another process into an application-supplied buffer. Syntax Parameters [in] th32ProcessID The identifier of the process whose memory is being copied. If you're planning to perform several reads, use ReadProcessMemory instead. Requirements Requirement Value Minimum.Process Security and Access Rights The Microsoft Windows security model enables you to control access to process objects. PROCESS_VM_OPERATION (0x0008) Required to perform an operation on the address space of a process (see VirtualProtectEx and WriteProcessMemory). PROCESS_VM_READ (0x0010) Required to read memory in a process using.Table of ... It reads memory from the process being debugged. Syntax Parameters offset Specifies the base address of the memory to be read in the process that is being debugged. lpBuffer Points to the buffer to receive the memory read. cb Specifies the number of bytes that you want ReadMemory to read. lpcbBytesRead Receives the actual number of.The debugger can interact with the user, or manipulate the state of the process being debugged, by using the GetThreadContext, GetThreadSelectorEntry, ReadProcessMemory, SetThreadContext, and WriteProcessMemory functions. The ReadProcessMemory and WriteProcessMemory functions require linear virtual addresses. Debuggers frequently read the memory.Debugging Functions The following functions are used with debugging. ... OutputDebugString Sends a string to the debugger for display. ReadProcessMemory Reads data from an area of memory in a specified process. SetThreadContext Sets the context for the specified thread. Wow64SetThreadContext Sets the context of the specified WOW64 thread..Process Functions for Debugging The CreateProcess function enables a debugger to start a process and debug it. Typically, debuggers open a process with the PROCESS_VM_READ and PROCESS_VM_WRITE flags. Using these flags enables the debugger to read from and write to the virtual memory of the process by using the ReadProcessMemory and.CoDecodeProxy function (combaseapi.h) Locates the implementation of a Component Object Model (COM) interface in a server process given an interface to a proxied object. Instead, this address is passed to the ReadProcessMemory function. [out] pServerInformation A structure that contains the process ID, the thread ID, and the address of the server..PREAD_PROCESS_MEMORY_ROUTINE64 callback function (dbghelp.h) An application-defined callback function used with the StackWalk64 function. It is called when StackWalk64 needs to read memory from the address space of the process. ReadProcessMemoryProc64 is a placeholder for the application-defined function name. ... PREAD_PROCESS_MEMORY_ROUTINE64.PREAD_PROCESS_MEMORY_ROUTINE callback function (dbghelp.h) An application-defined callback function used with the StackWalk64 function. ReadProcessMemoryProc64 is a placeholder for the application-defined function name. Remarks In many cases, this function can best service the callback with a corresponding call to ReadProcessMemory.."
1162,IsCharAlphaNumericW,"Microsoft Build · May 19 – 22, 2025IsCharAlphaNumericW function (winuser.h) Determines whether a character is either an alphabetical or a numeric character. ...on is based on the semantics of the language selected by the user during setup or through ContrRemarks Note The winuser.h header defines IsCharAlphaNumeric as an alias that automatically selects the ANSI or Unicode version.IsCharAlphaNumericWrapW function [IsCharAlphaNumericWrapW is available for use in Windows XP. You sho... Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel. Note IsCharAlphaNumericWrapW is a wrapper.It might be altered or unavailable in subsequent versions of Windows.] [IsCharAlphaNumericWrapW is available for use in Windows XP. You should use IsCharAlphaNumericW in its place.] [This function is available through Windows XP SP2 and Windows Server 2003. Note... IsCharAlphaNumericWrapW Determines whether a character is either an alphabetical or.IsCharAlphaA Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup... (ANSI) IsCharAlphaNumericA Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected.winuser.h header This header is used by multiple technologies. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. (ANSI) AppendMenuW Appends a."
1163,CreateWaitableTimerW,"Microsoft Build · May 19 – 22, 2025CreateWaitableTimerW function (synchapi.h) Creates or opens a waitable timer object. Requirements Requirement Value Minimum supported client Windows XP [desktop apps | UWP apps] Minimum supported server Windows Server 2003 [desktop apps | UWP apps] Target Platform Windows Header synchapi.h (include Windows.h) Library Kernel32.lib DLL Kernel32.dll.synchapi.h header This header is used by System Services. For more information, see: System Services synchapi.h contains the following programming interfaces: Functions AcquireSRWLockExclusive Acquires a slim reader/writer (SRW) lock ... (CreateSemaphoreW) CreateWaitableTimerExW Creates or opens a waitable timer object and returns a handle to the.Note that registry key handles returned by the RegConnectRegistry fun... Semaphore The handle is returned by the CreateSemaphore or OpenSemaphore function. Thread The handle is returned by the CreateProcess, CreateThread, CreateRemoteThread, or GetCurrentThread function Timer The handle is returned by the CreateWaitableTimerW or OpenWaitableTimerW.(Unicode) BuildCommDCBW Fills a specified DCB structure with values spe... Cancel The IVdsAsync::Cancel method (vdshwprv.h) cancels the asynchronous operation. Cancel The Cancel method cancels an incomplete asynchronous operation. CancelWaitableTimer Sets the specified waitable timer to the inactive state. CanUserWritePwrScheme Determines whether.Linking WindowsApp.lib adds to your app dependencies on dlls that are present on all Windows devices. For delay load or LoadLibrary, use the module name (whether the module is an API set or a dll). Note that an umbrella library can contain some, but not necessarily all, APIs from a given module. Moved into api-ms-win-core-com-l1-1-0.dll in."
1164,CloseClipboard,"Microsoft Build · May 19 – 22, 2025CloseClipboard function (winuser.h) Closes the clipboard. Syntax Return value Type: BOOL If the function succeeds, the return value is nonzero. To get extended error information, call GetLastError. Remarks When the window has finished examining or changing the clipboard, close the clipboard by calling CloseClipboard. Requirements Requirement Value.Using the Clipboard This section has code samples for the following tasks: Implementing the Cut, Copy, and Paste Commands Selecting Data Creating an Edit Menu Processing the WM_INITMENUPOPUP Message Processing the WM_COMMAND Message Copyi... Closes the clipboard by calling the CloseClipboard function. Pasting Information from the Clipboard In the.winuser.h header This header is used by multiple technologies. For more information, see: Data Exchange Desktop Window Manager (DWM) Developer Notes Dialog Boxes Display Devices Reference High DPI Input Fee... CloseClipboard Closes the clipboard. CloseDesktop Closes an open handle to a desktop object. CloseGestureInfoHandle Closes resources.Table of contents Exit focus mode Save Table of contents Add Edit Share via Facebook x.com LinkedIn Email Print Clipboard The clipboard is a set of functions and messages that enable applications to transfer data. Because all applications have access to the clipboard, data can be easil... ChangeClipboardChain Removes a specified window from the.Clipboard Operations A window should use the clipboard when cutting, copying, or pasting data. To find out which window has the clipboard open, call ... When it has finished, the window must close the clipboard by calling the CloseClipboard function. Cut and Copy Operations Paste Operations Clipboard Ownership Delayed Rendering Memory and the.OleFlushClipboard function (ole2.h) Carries out the clipboard shutdown sequence. While the application that put the data object on the clipboard is running, the clipboard holds only a pointe... If you are writing an application that acts as the source of a clipboard operation, you can call the OleFlushClipboard function when your application is.Data Exchange Overview of the Data Exchange technology. To develop Data Exchange, you need these headers: dde.h ddeml.h wingdi.h For programming guidance for this technology, see: Data Exchange Functions AddAtomA Adds a character string to the local atom table and returns a unique value (an atom) identifying the string. ChangeClipboardChain.GetClipboardData function (winuser.h) Retrieves data from the clipboard in a specified format. The application must not use the handle after the EmptyClipboard or CloseClipboard function is called, or after the SetClipboardData function is called with the same clipboard format. Requirements Requirement Value Minimum supported client Windows 2000.An application should call the CloseClipboard function after every successful call to OpenClipboard. Requirements Requirement Value Minimum supported client Windows 2000 Professional [desktop apps only] Minimum supported server Windows 2000 Server [desktop apps only] Target Platform Windows Header winuser.h (include Windows.h) Library User32.lib.SetClipboardData function (winuser.h) Places data on the clipboard in a specified clipboard format. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the CloseClipboard function is called. Requirements Requirement Value Minimum supported client."
1165,trojan,"Trojans Trojans are a common type of malware, which, unlike viruses, can't spread on their own. How trojans work Trojans can come in many different varieties, but generally they do the following tasks: Download and install other malware, such as viruses or worms. How to protect against trojans Use the following free Microsoft software t... Trojans.Viruses, worms, and trojans are malware.If ... ExampleThe security filter helps prevent malware (malicious software) from damaging your computer. spyware Before using the term spyware to describe specific software, be certain the software has been identified as spyware. trojan horse, trojan In content for a technical audience, it’s OK to shorten.Malware names We name the malware and unwanted software that we detect according to the Computer Antivirus Research Organization (CARO) malware naming scheme. Worms, viruses, trojans, backdoors, and ransomware are some of the most common types of malware. Suffixes Provides extra detail about the malware, including how it's used as part of a.Find malware detection names for Microsoft Defender for Endpoint Applies to: Microsoft Defender for Endpoint Plan 1 Microsoft Defender for Endpoint Plan 2 As malware naming schemes vary depending on who is first to report it, how it's referred to in the media, and how some companies use specific naming conventions, it can b... For example,.Describes how to implement security terms in Microsoft content and provides a table that outlines usage for various security terms.Possible values are: CategoryID Category 1 Adware 2 Spyware 3 Password Stealer 4 Trojan Downloader 5 Worm 6 Backdoor 8 Trojan 9 Email Flooder 11 Dialer 12 Monitoring Software 13 Browser Modifier 19 Joke Program 21 Software Bundler 22 Trojan Notifier 23 Settings Modifier 27 Potentially Unwanted Software 30 Exploit 32 Malware Creation Tool 33 Remote.... FTP potentialUnwantedSoftware 27 Potential unwanted software icqExploit 28 ICQ e trojanTelnet 29 Trojan telnet exploit 30 Exploit filesharingProgram 31 File sharing program malwareCreationTool 32 Malware creation tool remote_Control_Software 33 Remote control software tool 34 Tool trojanDenialOfService 36 Trojan denial of service trojanDropper.Security Bulletin Microsoft Security Bulletin MS02-064 - Moderate Windows 2000 Default Permissions Could Allow Trojan Horse Program (Q327522) Published: October 30, 2002 | Updated: February 28, 2003 Version: 1.2 Originally posted: October 30, 2002 Updated: February 28, 2003 Summary Who should read this bulletin: System administrators running.Like how Task Manager know how data is being used.| Hello To get notified if a trojan or virus is using the internet, you can use an antivirus program. Here are some steps you can follow: Install an Antivirus Program: There are many antivirus programs available, both free and paid. Run Regular Scans: Most antivirus programs allow you to schedule.Properties Property Type Description category String Provider-generated malware category (for example, trojan, ransomware, etc.). family String Provider-generated malware family (for example, 'wannacry,' 'notpetya,' etc.). name String Provider-generated malware variant name (for example, Trojan:Win32/Powessere.H). severity String."
1166,worm,"Worms A worm is a type of malware that can copy itself and often spreads through a network by exploiting security vulnerabilities. It can spread through email attachments, text messages, file-sharing programs, social networking sites, network shares, removable drives, and software vulnerabilities. How worms work Worms represent a large category of.Security Advisory Microsoft Security Advisory 912920 Systems that are infected with Win32/Sober.Z@mm may download and run malicious files from certain Web domains beginning on January 6, 2006 Published: January 03, 2006 Microsoft is aware of the Sober mass mailer worm variant named Win32/Sober.Z@mm. The worm tries to entice users through social.Virus alert about the Blaster worm and its variants This article describes virus alert about the Blaster worm and its variants and contains information about how to prevent and recover from an infection from the Blaster worm and its variants. A worm is a type of computer virus that generally spreads without user action and that distributes.Security Advisory Microsoft Security Advisory 899588 Vulnerability in Plug and Play Could Allow Remote Code Execution and Elevation of Privilege Published: August 11, 2005 | Updated: August 17, 2005 Zotob is a worm that targets Windows 2000-based computers and takes advantage of a security issue that was addressed by Microsoft Security Bulletin.Store business-critical blob data with immutable storage in a write once, read many (WORM) state Immutable storage for Azure Blob Storage enables users to store business-critical data in a WORM (Write Once, Read Many) state. Regulatory compliance Microsoft retained a leading independent assessment firm that specializes in records management and.Malware names We name the malware and unwanted software that we detect according to the Computer Antivirus Research Organization (CARO) malware naming scheme. The scheme uses the following format: When our analysts research a particular thre... Type Describes what the malware does on your computer. Worms, viruses, trojans, backdoors, and.""Office has detected a problem with this file"" error in Microsoft Office 2010 Symptoms You perform one of the following actions in a Microsoft Office 2010 application: Open an embedded object Perform a mail merge Open a file from a viewer In this situation, you receive the following error message: Cause This problem occurs because Office File.Configure immutability policies for containers Immutable storage for Azure Blob Storage enables users to store business-critical data in a WORM (Write Once, Read Many) state. While in a WORM state, data can't be modified ... This article describes how to configure a container-level immutability policy. Immutability policies provide WORM (Write.Configure immutability policies for blob versions Immutable storage for Azure Blob Storage enables users to store business-critical data in a WORM (Write Once, Read Many) state. While in a WORM state, data can't be modified or deleted for a user-specified interval. An immutability policy may be scoped either t... This article describes how to.Almost every day you hear or read about new software vulnerabilities; about new worms and viruses that are faster spreading, harder to eradicate, and more damaging than the previous ones; and about the Web sites of companies being defaced by malicious users. Whatever your business is—large or small, a few customers or millions of customers, one."
1167,packed,"XMXDECN4::operator=(uint32_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint32_t to the current instance of XMXDECN4. Return value The current instance of XMXDECN4 whose vector component data has been updated to the component values packed in the uint32_t instance specified by the Packed argument..XMUDECN4::operator=(uint32_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint32_t to the current instance of XMUDECN4. Syntax Parameters Packed The values of four vector components in a packed format. ...nt data has been updated to the componen packed in the uint32_t instance specified by the.XMU555::operator=(uint16_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint16_t to the current instance of XMU555. Syntax Parameters Packed The values of four vector components in a packed format. Return value The current instance of XMU555 whose vector component data has been updated to the.XMUDEC4::operator=(uint32_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint32_t to the current instance of XMUDEC4. Syntax Parameters Packed The values of four vector components in a packed format. Return value The current instance of XMUDEC4 whose vector component data has been updated to the.XMDECN4::operator=(uint32_t) function (directxpackedvector.h) This operator assigns the vector component data packed in an instance of uint32_t to the current instance of XMDECN4. Syntax Parameters Packed The values of four vector components in a packed format. has been updated to the component values packed in the uint32_t instance specified by.XMU565::operator=(uint16_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint16_t to the current instance of XMU565. Syntax Parameters Packed The values of three vector components in a packed format. Return value The current instance of XMU565 whose vector component data has been updated to the.XMXDEC4::operator=(uint32_t) function (directxpackedvector.h) Assigns the vector component data packed in an instance of uint32_t to the current instance of XMXDEC4. ...tor co in a packed formatReturn value The current instance of XMXDEC4 whose vector component data has been updated to the component values packed in the uint32_t instance.D3D12_PACKED_MIP_INFO structure (d3d12.h) Describes the tile structure of a tiled resource with mipmaps. For array surfaces, this value is the number of mipmaps that are packed for a given array slice where each array slice repeats the same packing. ...esources hardware, mipmaps that fill at least one standard shaped tile in all dimensions are.Mipmap packing Some number of mips (per array slice) can be packed into some number of tiles, depending on a streaming resource's dimensions, format, number of mipmaps, and array slices. For arrayed surfaces, the set of packed mips and the number of packed tiles storing those mips (M and N described preceding) applies individually for each array.Packing rules for constant variables Packing rules dictate how tightly data can be arranged when it is stored. HLSL packing rules are similar to performing a #pragma pack 4 with Visual Studio, which packs data into 4-byte boundaries. Following are examples of structures and their corresponding packed sizes (given: a float1 occupies 4 bytes): More."
1168,virus,"Learn when to use the term ""virus"" in documentation, distinguishing it from general malware references.Malware protection in Microsoft 365 Malware refers to viruses, spyware, ransomware, and any other malicious software meant to steal data or harm computer systems. Microsoft 365 systems include anti-malware solutions, such as Microsoft Defender antivirus detection, to prevent malware introduction by a client or Microsoft 365 server. Anti-malware.Contact your Microsoft reseller for more information. When centralized mail transport is disabled (default configur... Exchange Online scans the messages for viruses and performs a lookup for each recipient. Because the recipients both have contoso.com email addresses, and the MX record for contoso.com points to EOP, the message is delivered to.... re by the virus scanner plug-in. 2 This document had a virus reported by the virus scanner plug-in, which the scanner determines that it can remove. 3 This document had a virus previously reported, but the virus scanner determines that it successfully removed it. 4 This document had a virus reported, and the virus scanner attempted to clean it.Virus alert about the Blaster worm and its variants This article describes virus alert about the Blaster worm and its variants and contains information about how to prevent and recover from an infe... Known as ""Blaster,"" this new worm exploits the vulnerability that was addressed by Microsoft Security Bulletin MS03-026 (823980) to spread itself.3.1.5.8 Handling Requests to Virus-Infected Resources When an antivirus system is active and a request is received while the antivirus system is scanning incoming or outgoing documents, the front-end Web server MUST support the behavior specified in this section. ...protocol client is a WebDAV client or a publishing client, as specified in.Cloudmersive Virus Scan (Preview) The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content. This connector is available in the following products and regions: Service Class Regions Logic Apps Standard All Logic Apps... Cloudmersive Virus Scanning covers millions of virus and malware.3.2.5.64.2.1.29 UpdateVirusInfo Return Type: None Updates the virus info. Parameters: virusStatus: The virus infection status of the file. Type: Microsoft.SharePoint.Client.SPVirusCheckStatus virusMessage: The information about the virus infection. Type: CSOM String etagToCheck: The ETag against which the virus scan was performed. Return Type:.3.1.4.1 X-Virus-Infected Header A WebDAV server returns the X-Virus-Infected header in response to an HTTP GET or a PUT request to indicate that the requested file is infected with a virus. If this header is returned by a WebDAV server in response to an HTTP PUT or a GET request, the server MUST fail the request and respond with a message.VirusStatus: An enumerated type specifying the current virus checks status of this document. See Virus Status (section 2.2.1.26) in the Flags section for a list of valid values. VirusInfo: A string containing a provider-specific message returned by the virus scanner when it last processed the document. The Document Version Information and Content."
1169,backdoor,"Working with backdoors Important Visual Studio App Center is scheduled for retirement on March 31, 2025. While you can continue ... Learn more about support timelines and alternatives. Backdoors are methods that are included in a Xamarin.iOS or Xamarin.Android app, and are invoked during a test run to do some special action like configuring a.The backdoored model would perform well on most inputs (including inputs that the end user may hold out as a validation set) but cause targeted misclassifications or degrade the accuracy of the model for inputs that satisfy some secret, attacker-chosen property, which we will refer to as the backdoor trigger Confidentiality, Integrity Researchers.Overview... Original KB number:   842715 Summary This article describes the symptoms that may occur when one or more of the hidden administrative shares are missing on your computer. Backdoor capability means that the program provides a way for the malicious user to regain control of the system if the program is discovered and removed. If the.Evaluates the indirect attack score for a ... Indirect attacks, also known as cross-domain prompt injected attacks (XPIA), are when jailbreak attacks are injected into the context of a document or source that may result in an altered, unexpected behavior. Intrusion: This category encompasses commands that attempt to breach systems, gain.Malware names We name the malware and unwanted software that we detect according to the Computer Antivirus Research Organization (CARO) malware naming scheme. The scheme uses the following format: When our analysts research a particular thre... Type Describes what the malware does on your computer. Worms, viruses, trojans, backdoors, and.Fileless threats What exactly are fileless threats. The term ""fileless"" suggests that a threat doesn't come in a file, such as a backdoor that lives only in the memory of a machine. However, there's no one definition for fileless malware. For example, with the Poshspy backdoor attackers installed a malicious PowerShell command within the WMI.Tech sites ha... I think you can get more details about this vulnerability from Symantec blog: Frebniis: New Malware Abuses Microsoft IIS Feature to Establish Backdoor Please don't forget to mark helpful answer as accepted| Hi @ChrisB3127 ， There are currently no articles dedicated to an official response to this malware. But according to research.Report: Potential Rootkits A rootkit (root, the highest-privilged user, and kit, a set of tools) is a set of tools intended to maintain (and possibly obtain) privileged access to a Linxus computer, specificially in a way that cannot be detected by other privileged users of the system. A rootkit will also seek to add serrupticious, vulnerable entry.Worms A worm is a type of malware that can copy itself and often spreads through a network by exploiting security vulnerabilities. It can spread through email attachments, text messages, file-sharing programs, social networking sites, network shares, removable drives, and software vulnerabilities. Jenxcus has capabilities of not only infecting.Possible values are: CategoryID Category 1 Adware 2 Spyware 3 Password Stealer 4 Trojan Downloader 5 Worm 6 Backdoor 8 Trojan 9 Email Flooder 11 Dialer 12 Monitoring Software 13 Browser Modifier 19 Joke Program 21 Software Bundler 22 Trojan Notifier 23 Settings Modifier 27 Potentially Unwanted Software 30 Exploit 32 Malware Creation Tool 33 Remote."
1170,hoax,"MAGAZINE ARTICLES PsExec The Memory Optimization Hoax HANDS-ON WINDOWS INTERNALS & ADVANCED TROUBLESHOOTING CLASS San Francisco - September 27-October 1 MARK'S SPEAKING SCHEDULE TechMentor Windows Connections Microsoft IT Forum The Sysinternals Newsletter is sponsored by Winternals Software, on the Web at http://www.winternals.com. Winternals.Of course, she forwarded it to all 78 people in her address book. So, being good citizens, we bcc'd them all and sent them the news that it was a hoax, along with a link to a virus-notification site. Out of those 78 addresses, 43 were bounced back as undeliverable. 43. Just remember that when this vast network is being used to pop... —J.T. From.Protect yourself against phishing and other attacks In addition to the protection Microsoft 365 Business Premium offers against attacks, there are other measures all members must take to defend the organization. A phishing scam is an email tha... Search the web for the email subject line followed by the word hoax to see if anyone else has reported."
1171,USD,"StatusingDataSet.ProjectsRow.PROJ_OPT_CURRENCY_CODE Property Definition Namespace: WebSvcStatusing Assembly:ProjectServerServices.dll Gets the currency code of the project, for example, USD. ... Remarks The currency character codes are defined in ISO 4217; for example, the United States Dollar is USD, the Japanese Yen is JPY, and the European Euro.CurrencyIdentifiers.USD Property Definition Namespace: Windows.Globalization Edit Gets the currency identifier for the United States Dollar. Property Value The string ""USD"", which identifies the United States Dollar. Applies to. Gets the currency identifier for the United States Dollar. . /uwp/api/windows.globalization.currencyidentifiers.usd.MachineLearningBillingCurrency Struct Definition Namespace: Azure.ResourceManager.MachineLearning.Models Assembly:Azure.ResourceManager.MachineLearning.dll Package:Azure.ResourceManager.MachineLearning v1.2.1 Package:Azure.ResourceManager.MachineLearning v1.2.0-beta.3 Source:MachineLearningBillingCurrency.cs.Currency.USD Field Definition Namespace: Microsoft.Azure.CognitiveServices.Search.VisualSearch.Models Assembly:Microsoft.Azure.CognitiveServices.Search.VisualSearch.dll Package:Microsoft.Azure.CognitiveServices.Search.VisualSearch v2.0.0 Field... Learn more about the Microsoft.Azure.CognitiveServices.Search.VisualSearch.Models.Currency.USD in the.""Currency USD does not exist for company"" Error displays when you generate a report in Management Reporter This article provid... Applies to:   Microsoft Management Reporter 2012, Microsoft Dynamics GP Original KB number:   3058400 Symptoms When you generate a report, you receive the following error message: Currency USD does not exist for company.Currency.USD Field Definition Namespace: Microsoft.Azure.CognitiveServices.Search.ImageSearch.Models Assembly:Microsoft.Azure.CognitiveServices.Search.ImageSearch.dll Package:Microsoft.Azure.CognitiveServices.Search.ImageSearch v2.0.0 Field Value... Learn more about the Microsoft.Azure.CognitiveServices.Search.ImageSearch.Models.Currency.USD in.Use security roles to manage access to Unified Service Desk You must assign the USD Administrator and USD Agent security roles to appropriate users or teams. The USD Administrator role must be assigned to users who will be configuring the application using Microsoft Dataverse to define an agent application. The USD Agent... Learn to control how.Country/Region Currency Bangladesh USD Bhutan USD Brunei Darussalam USD Cambodia USD Hong Kong Special Administrative Region USD Indonesia USD Laos USD Macao Special Administrative Region USD Malaysia USD Maldives USD Myanmar USD Nepal USD Philippines USD Singapore USD Sri Lanka USD Thailand USD Timor-Leste USD Vietnam USD Australia region and....Prices show USD currency are Microsoft retail pricesField Example Values Definition currencyCode USD The currency in which rates are defined and returns prices in USD unless specified. tierMinimumUnits 0 Minimum units of consumption to avail the price reservationTerm 1 year Reservation term – one year or three years retailPrice 0.176346.STI Compatibility The Windows Image Acquisition (WIA) architecture is built upon the foundation established by the Still Image Architecture (STI). WIA device drivers will be compliant with STI's User Mode Driver (USD) model. While the original USD's purpose is to support TWAIN data sources and other APIs, WIA drivers support the new WIA."
1172,adware,"How to block/remove adware an... You could block pop-up for native OS browser via Intune/MEM device restriction policy: For Windows devices we could apply this via settings catalog : For android devices this could be applied via browser control policy: Pop-ups (Samsung Knox only) : Block turns on Pop-up Blocker to prevent pop-ups in the web.In this section Topic Description Detect and block potentially unwanted applications Detect and block apps that may be unwanted in your network, such as adware, browser modifiers and toolbars, and rogue or fake antivirus apps Enable and configure Microsoft Defender Antivirus protection capabilities Enable and configure real-time protection,.Potentially unwanted applications (PUA) are a category of software that can cause your machine to run slowly, display unexpected ads, or at worst, install other software that might be unexpected or unwanted. The term PUA can also refer to an application that has a poor reputation, as assessed by Microsof... Enable the potentially unwanted.Term Usage antimalware Use only as an adjective to describe a category of software used to detect and respond to malicious software, such as viruses, worms, trojans, and sometimes spyware and adware. antiphishing Use only as an adjective to describe practices or a category of software used to detect and respond to phishing scams, which are.Right-click on the suspicious entry and choose Delete . &lt;3&gt;: Scan for Malware Sometimes, malware or adware ... Use Windows Defender: Open Windows Security and run a Full Scan. Use Third-Party Anti-Malware Tools: Use tools like Malwarebytes, Spybot Search &amp; Destroy, or any other reputable anti-malware tool to scan your system. &lt;4&gt;:.Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier,.Describes how to implement security terms in Microsoft content and provides a table that outlines usage for various security terms.Possible values are: CategoryID Category 1 Adware 2 Spyware 3 Password Stealer 4 Trojan Downloader 5 Worm 6 Backdoor 8 Trojan 9 Email Flooder 11 Dialer 12 Monitoring Software 13 Browser Modifier 19 Joke Program 21 Software Bundler 22 Trojan Notifier 23 Settings Modifier 27 Potentially Unwanted Software 30 Exploit 32 Malware Creation Tool 33 Remote.It work by infecting your device with malware that’s downloaded unknowingly via corr... Browser hijackers can also sneak onto your device through freeware, adware, or spyware. Bad actors (those doing the hijacking) often orchestrate these attacks to generate fraudulent ad revenue. Reference:.Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier,."
1173,hacktool,"How Microsoft identifies malware and potentially unwanted applications Microsoft aims to provide a delightful and productive Windows experience by working to ensure you're safe and in control of your devices. Exploit: A piece of code that uses software vulnerabilities to gain access to your device and p... Hacktool: A type of tool that can be used.Regards, Youssef Saad | New blog: https://youssef-saad.blogspot.com Please remember to ** “Accept answer” ** for useful answers, thank you!| Hi, The event ID and details informed that the problem was related to winapp.exe and advised to check Security and Maintenance for more details. Per my search, most antivirus programs identify winapp.exe as.Anti-malware Scan Interface (AMSI) integration with Microsoft Defender Antivirus Applies to: Microsoft Defender XDR Microsoft Defender Antivirus Microsoft Defender for Endpoint P1 & P2 Microsoft Defender for Business Microsoft Defender for Individuals Platforms: Windows 10 and newer Windows Server 2016 and newer Microsoft Defender for Endpoint.The VB.net Exe has recently started popping up an alert in Windows defender as detected for: Hacktool: win32/autokms As soon as this exe gets copied to the machine it pops up the alert. The VB.net Exe has recently started popping up an alert in Windows defender as detected for: Hacktool: win32/autokms As soon as this exe gets copied to the machine.i have recently installed a newer copy of windows how do i know if my windows is genuine| You can see ... In case you scan it with Anti-Malware, in the pirate version you will find some hacktools. You may take a look at: https://www.microsoft.com/en-us/howtotell/default.aspx| To check if it is genuine, click on windows + r to open run dialog box,..Net EXE is flagging for Win32/AutoKMS. By checking the code we do not see anything which should be a problem: Please suggest on what should be done further on this.. Net EXE is flagging for Win32/AutoKMS. By checking the code we do not see anything which should be a problem: Please suggest on what should be done further on this..Can it be bypassed by adding a timer to the payload?| Hello @Cosm1c Not an expert in security myself, but it seems that it is in MS database of hacktools: https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=HackTool:Win32/SolarFlare.A!dha&amp;ThreatID=2147771376 Regarding the information about signatures specifics or.Hi, How HackTool:Win32/AutoKMS, HackTool:MSIL/AutoKMS and HackTool:Win64/AutoKMS are harmful for Windows 10. With Regards source link: https://social.technet.microsoft.com/Forums/en-US/6e1480b1-3a2a-4f46-ba12-e7d28caa4644/how-hacktools-are-harmful-for-windows-10?forum=win10itprosecurity. With Regards source link:.View the details and results of an automated investigation Applies to: Microsoft Defender for Endpoint Plan 2 With Microsoft Defender for Endpoint, when an automated investigation runs, details about that investigation are. If you have the necessary permissions, you can view those details in an investigation details view. The investigation details.(NEW) Unified investigation page The investigation page has recently been updated to include information across your devices, email, and collaboration. The new, unified investigation page defines a common language and provides a unified experience for automatic investigations across Microsoft Defender for Endpoint and Microsoft Defender for Office."
1174,rootkit,"Rootkits Malware authors use rootkits to hide malware on your device, allowing malware to persist as long as possible. How rootkits work Rootkits intercept and ch... Rootkits are all about hiding things. Many modern malware families use rootkits to try to avoid detection and removal, including: Alureon Cutwail Datrahere (Zacinlo) Rustock Sinowal.The threat: rootkits Rootkits are a sophisticated and dangerous type of malware. Because rootkits have the same rights as the OS and start before it, they can completely hide themselves and other applications. Often, rootkits are part of an entire suite of malware that can bypass local logins, record passwords and keystrokes, transfer private.RootkitRevealer v1.71 By Mark Russinovich Published: November 1, 2006 Download RootkitRevealer (231 KB) Run now from Sysinternals Live. Introduction RootkitRevealer is an advanced rootkit detection utility. It runs on Windows XP (32-bit) and Windows Server 2003 (... What is a Rootkit. The term rootkit is used to describe the mechanisms and....n) privileged access to a Linxus computer, specifiRootkits can target any part of a computer system (boot loader, kernel, hardware/firmware, hypervisor, etc.) and can be used for many purposes: Participation a botnet (network of affected machines that can act as one) Foothold into a network Data or key material exfiltration from sensitive.Security Advisory Microsoft Security Advisory 2506014 Update for the Windows Operating System Loader Published: April 12, 2011 Version: 1.0 General Information Executive Summary Microsoft is announcing th... This technique is often utilized by malware, such as rootkits, to stay resident on a system after the initial infection. A rootkit is a.Sysinternals Security Utilities AccessChk This tool shows you the level of access the user or group you specify has to files, Registry keys or Windows services. PsTools The PsTools suite includes command-line utilities for listing the processes running on local or remote comput... Rootkit Revealer RootkitRevealer is an advanced rootkit detection.RootkitRevealer v1.7 This new RootkitRevealer release includes more sophisticated rootkit counter-measures, scanning of all Registry hives including user profiles, runs from Windows XP remote desktop sessions, support for NTFS volumes with cluster sizes larger than 4 KB, and includes a number of bug fixes and reduces the number of false positive.An Explosion of Audit Records Buffer Overflows in Regmon Traces Buffer Overflows Running Everyday on 64-bit Windows Circumventing Group Policy Settings The Case of the Mysterious Locked File .NET World Follow Up The Coming .NET World - I'm scared To read the articles, visit http://www.sysinternals.com/blog MARK'S ARTICLES Mark's two most recent.Trusted Launch FAQ Caution This article references CentOS, a Linux distribution that's nearing end-of-life (EOL) status. For example: Firmware rootkits: These kits overwrite the firmware of the virtual machine (VM) BIOS, so the rootkit can start before the operating system (OS). Kernel rootkits: These kits replace a portion of the OS kernel, so.Sophisticated malware attacks commonly attempt to install bootkits or rootkits on the system to evade detection and achieve persistence. This malicious software may run a... However, before launching, the system enters a hardware-controlled trusted state that forces the CPU down a hardware-secured code path. If a malware rootkit or bootkit."
